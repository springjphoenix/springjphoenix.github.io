webpackJsonp([8486789233288],{586:function(e,n){e.exports={data:{site:{siteMetadata:{title:"Magicly's Blog",author:"Magicly"}},markdownRemark:{id:"/Users/spring/Developer/Gatsby/gatsby-blog/src/pages/2017-04-09-aliyun-hpc-config/index.md absPath of file >>> MarkdownRemark",html:'<p>深度学习没有GPU的支持可以说完全不能解决实际问题， 稍大一点的数据集可能就要几个小时，GPU能起到10倍以及更高的速度提升。之前我们做了<a href="http://magicly.me/2017/04/15/aws-dl-config/">AWS的深度学习配置</a>，今天再看看国内阿里云的HPC配置。</p>\n<!-- more -->\n<h1 id="购买--登录"><a href="#%E8%B4%AD%E4%B9%B0--%E7%99%BB%E5%BD%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>购买 &#x26; 登录</h1>\n<p>在<a href="https://hpc-buy.aliyun.com/#/postpay">阿里云hpc页面</a>购买，目前按量付费只支持华东1（杭州），G4配置：</p>\n<blockquote>\n<p>CPU : Intel Xeon E5 v4 CPU 32物理核\nGPU : Nvidia Tesla M40 x2\n单机峰值计算能力突破每秒16万亿次单精度浮点运算。</p>\n</blockquote>\n<p>价格是37.50￥/时，价格差不多是AWS p2.xlarge的6倍， 所以我们最后要测试一下AWS p2.xlarge和阿里云HPC的性能对比，看看谁的性价比高。</p>\n<p>对了，阿里云HPC目前不支持自定义镜像，只有一种选择CentOS7！！！！所以后面我们必须用docker，不然如果按需付费来使用的话， 每次都得重装所有软件。可以把docker看成轻量级的AMI镜像。</p>\n<p>由于HPC是只能内网访问的物理机， 需要先登录跳转机， 然后走内网访问HPC，这样安全一些。华东1购买HPC的时候会分配一个跳转机，需要在<a href="https://hpc.console.aliyun.com/#/postpay/list/">控制台</a>设置跳转机的初始密码，重启跳转机密码方能生效。HPC物理机的密码会通过阿里云站内消息的方式发给你，好像都是111111，建议在第一次登录的时候用passwd命令修改。</p>\n<h1 id="配置外网"><a href="#%E9%85%8D%E7%BD%AE%E5%A4%96%E7%BD%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>配置外网</h1>\n<p>现在HPC物理机能直接访问外网了？！！\nwget能直接访问， 但是yum install的时候就是网络超时，真是蛋疼！</p>\n<p>参看<a href="https://yq.aliyun.com/articles/66993?spm=5176.doc48632.2.5.V1yqJr">这篇文档</a>配置HPC外网。文档里面有好几个地方不对，我重新写一下吧。</p>\n<h2 id="跳转机ecs配置"><a href="#%E8%B7%B3%E8%BD%AC%E6%9C%BAecs%E9%85%8D%E7%BD%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>跳转机ECS配置</h2>\n<ol>\n<li>\n<p>下载VPN包，解压并进入VPN-ECS</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">wget http://public-img-test.oss-cn-hangzhou.aliyuncs.com/VPN.tar.gz\ntar zxvf VPN.tar.gz &amp;&amp; cd VPN/VPN-ECS</code></pre>\n      </div>\n</li>\n<li>\n<p>目录下并没有文档说的run.sh， 而是两个</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">run4centos6.sh\nrun4centos7.sh</code></pre>\n      </div>\n<p>用lsb_release命令查看系统版本（还记得我说其实目前只能选centos7么）：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[root@iZ23gbdj71dZ VPN-ECS]# lsb_release -a\nLSB Version:\t:core-4.1-amd64:core-4.1-noarch\nDistributor ID:\tCentOS\nDescription:\tCentOS Linux release 7.0.1406 (Core)\nRelease:\t7.0.1406\nCodename:\tCore</code></pre>\n      </div>\n<p>那就执行run4centos7.sh吧</p>\n</li>\n<li>\n<p>ifconfig检查是否有vpn_ppp0这个网卡</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">ifconfig\nvpn_vpn0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n    inet 192.168.30.11  netmask 255.255.255.0  broadcast 192.168.30.255\n    ether 00:ac:66:6f:b0:52  txqueuelen 500  (Ethernet)\n    RX packets 1  bytes 42 (42.0 B)\n    RX errors 0  dropped 0  overruns 0  frame 0\n    TX packets 4  bytes 168 (168.0 B)\n    TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</code></pre>\n      </div>\n</li>\n</ol>\n<h2 id="hpc配置"><a href="#hpc%E9%85%8D%E7%BD%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HPC配置</h2>\n<ol>\n<li>\n<p>下载VPN包，解压并进入VPN-HPC\n由于HPC目前不能访问外网OSS（真是蛋疼， 其实HPC现在访问外网比如<a href="http://www.platform.ai/files/dogscats.zip%E6%98%AF%E5%8F%AF%E4%BB%A5%E7%9A%84%EF%BC%8C%E4%BD%86%E5%B1%85%E7%84%B6%E7%9C%9F%E7%9A%84%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AEhttp://public-img-test.oss-cn-hangzhou.aliyuncs.com/VPN.tar.gz%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%89%EF%BC%8C%E6%89%80%E4%BB%A5%E7%94%A8scp%E5%B0%86%E4%B9%8B%E5%89%8D%E5%9C%A8%E8%B7%B3%E8%BD%AC%E6%9C%BA%E4%B8%8A%E4%B8%8B%E8%BD%BD%E7%9A%84VPN%E5%8C%85copy%E5%88%B0HPC%E3%80%82">http://www.platform.ai/files/dogscats.zip是可以的，但居然真的不能访问http://public-img-test.oss-cn-hangzhou.aliyuncs.com/VPN.tar.gz！！！），所以用scp将之前在跳转机上下载的VPN包copy到HPC。</a></p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">scp root@[跳转机内网IP地址]:/root/VPN.tar.gz .\ntar zxvf VPN.tar.gz &amp;&amp; cd VPN/VPN-HPC</code></pre>\n      </div>\n</li>\n<li>\n<p>执行run.sh</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">./run.sh [跳转机内网IP地址]</code></pre>\n      </div>\n</li>\n<li>\n<p>测试是否能访问外网</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">ping www.taobao.com\ncurl www.taobao.com\nwget www.baidu.com</code></pre>\n      </div>\n<p>可以了。 话说我一开始就可以啊！！！！\n测试一下wget VPN包呢？</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[root@AliHPC-M40-410 VPN-HPC]# wget http://public-img-test.oss-cn-hangzhou.aliyuncs.com/VPN.tar.gz\n--2017-04-19 10:50:59--  http://public-img-test.oss-cn-hangzhou.aliyuncs.com/VPN.tar.gz\n正在连接 10.168.56.7:3128... 失败：没有到主机的路由。</code></pre>\n      </div>\n<p>居然还是访问不到!!!</p>\n</li>\n<li>\n<p>文档里面说如果这时候还不行， 看看http<em>proxy &#x26; https</em>proxy两个变量，如果设置了，删除</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[root@AliHPC-M40-410 VPN-HPC]# echo $http_proxy\nhttp://10.168.56.7:3128/\n[root@AliHPC-M40-410 VPN-HPC]# echo $https_proxy\nhttp://10.168.56.7:3128/</code></pre>\n      </div>\n<p>确实设置了， 试试看删除之后呢。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">unset http_proxy\nunset https_proxy\nwget http://public-img-test.oss-cn-hangzhou.aliyuncs.com/VPN.tar.gz</code></pre>\n      </div>\n<p>好吧，真的可以了！！！</p>\n</li>\n</ol>\n<h1 id="配置docker"><a href="#%E9%85%8D%E7%BD%AEdocker" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>配置docker</h1>\n<p>参考<a href="https://yq.aliyun.com/articles/64979?spm=5176.doc48632.2.6.V1yqJr">这篇https://yq.aliyun.com/articles/64979?spm=5176.doc48632.2.6.V1yqJr</a>，其实大部分都不是必须的，只需要下面两步即可。</p>\n<ol>\n<li>\n<p>更新repo，镜像里已经装了docker的，更新一下版本</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">sudo yum update</code></pre>\n      </div>\n</li>\n<li>\n<p>验证docker是否装好</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">sudo docker run hello-world</code></pre>\n      </div>\n<p>噢啦。。。</p>\n</li>\n</ol>\n<h2 id="安装nvidia-docker"><a href="#%E5%AE%89%E8%A3%85nvidia-docker" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装nvidia-docker</h2>\n<p>nvidia－docker 是 Nvidia 公司为 docker 所做的封装，开源代码可以在<a href="https://github.com/NVIDIA/nvidia-docker">Github</a>找到。nvidia－docker 可以对GPU做抽象，只要容器中的GPU驱动版本不高于宿主机的GPU驱动版本，即可在容器中使用GPU资源。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text"># Install nvidia-docker and nvidia-docker-plugin\nwget -P /tmp https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.1/nvidia-docker-1.0.1-1.x86_64.rpm\nsudo rpm -i /tmp/nvidia-docker*.rpm &amp;&amp; rm /tmp/nvidia-docker*.rpm\nsudo systemctl start nvidia-docker\n\n# Test nvidia-smi\nnvidia-docker run --rm nvidia/cuda nvidia-smi</code></pre>\n      </div>\n<h1 id="测试tensorflow"><a href="#%E6%B5%8B%E8%AF%95tensorflow" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试tensorflow</h1>\n<p>阿里云HPC服务器在交付时已经安装好TensorFlow （版本 0.8rc），用户无需做任何额外工作即可直接运行。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">/disk1/deeplearning/anaconda2/bin/python -m &quot;tensorflow.models.image.mnist.convolutional&quot;</code></pre>\n      </div>\n<p>上两张图，看一下跑起来的时候资源消耗：\n<img src="http://oml1i2pi6.bkt.clouddn.com/nvidia-smi-when-tensorflow-is-run.png" alt="nvidia-smi when tensorflow is run">\n<img src="http://oml1i2pi6.bkt.clouddn.com/htop-when-tensorflow-is-run.png" alt="htop when tensorflow is run"></p>\n<h1 id="tensorflow-docker"><a href="#tensorflow-docker" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>tensorflow docker</h1>\n<p>我打算用docker跑tensorflow，测试一下性能。结果用<a href="https://help.aliyun.com/document_detail/51489.html">阿里提供的镜像</a>时候又发现cuda版本问题。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[root@AliHPC-M40-410 deeplearning]# nvidia-docker run registry.cn-beijing.aliyuncs.com/tensorflow-samples/alexnet_benchmark:1.0.0-devel-gpu\n\nStatus: Downloaded newer image for registry.cn-beijing.aliyuncs.com/tensorflow-samples/alexnet_benchmark:1.0.0-devel-gpu\nnvidia-docker | 2017/04/19 13:02:34 Error: unsupported CUDA version: driver 7.5 &lt; image 8.0</code></pre>\n      </div>\n<p>直接用yum upgrade cuda不行的， 需要添加cuda8的源才能正常安装cuda8， 参看<a href="https://developer.nvidia.com/cuda-downloads">nvidia文档</a></p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">wget http://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-repo-rhel7-8.0.61-1.x86_64.rpm\nrpm -ivh cuda-repo-rhel7-8.0.61-1.x86_64.rpm\nyum install cuda</code></pre>\n      </div>\n<p>居然有1.3G这么大，花了一个多小时，55555， 有点想放弃了，关键是安装了之后不能制作镜像，如果按需付费下次还得再来一次，每次安装cuda8就得花40块钱？！！！看样子阿里云HPC就是给有钱人准备的,9000￥/月。我已经给阿里云提了工单，请求他们把镜像升级到cuda8.0， 不知道啥时候回响应呢。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">安装  2 软件包 (+31 依赖软件包)\n升级  1 软件包 (+ 4 依赖软件包)\n\n总下载量：1.3 G\nIs this ok [y/d/N]: y</code></pre>\n      </div>\n<p>装好之后居然</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[root@AliHPC-M40-410 deeplearning]# nvidia-smi                                          │[root@AliHPC-M40-410 deeplearning]# nvidia-docker stop 2448268d9525\nFailed to initialize NVML: Driver/library version mismatch</code></pre>\n      </div>\n<p>额。。。。。。。</p>\n<p>在等待cuda安装的时候，我在阿里云的docker hub上找了个<a href="https://dev.aliyun.com/list.html?namePrefix=tensorflow">tensorflow镜像</a>。这个docker image包含jupyter notebook，默认监听的端口是8888，需要把docker的端口映射到宿主机（HPC）上。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">nvidia-docker run -p 80:8888 registry.cn-hangzhou.aliyuncs.com/denverdino/tensorflow</code></pre>\n      </div>\n<p>这时候在HPC上wget localhost就可以访问到jupyter notebook的index.html了，但是我们之前说过HPC只能在内网，所以还需要配置<a href="https://help.aliyun.com/document_detail/25836.html">反向代理</a>。</p>\n<ol>\n<li>\n<p>ECS跳转机部署代理服务器tengine</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">wget http://tengine.taobao.org/download/tengine-2.1.1.tar.gz\ntar zxvf tengine-2.1.1.tar.gz\ncd tengine-2.1.1/\n./configure\nmake\nsudo make install</code></pre>\n      </div>\n<p>默认安装在/usr/local/nginx/</p>\n</li>\n<li>\n<p>编辑ECS Tengine配置文件\nroot权限打开/usr/local/nginx/conf/nginx.conf，增加一个server模块，监听本机的某个端口（比如8888），将所有请求转发到HPC的物理机，配置如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">server {\n    listen       8888;\n#    listen       somename:8080;\n#    server_name  somename  alias  another.alias;\n\n    location / {\n        proxy_pass http://10.172.68.130; #10.172.68.130是HPC物理机的内网地址\n    }\n}</code></pre>\n      </div>\n<p>这样之后在ECS下wget localhost:8888可以访问到jupyter notebook的index.html了。但是用ECS公网IP在本地浏览器上访问的时候发现连不上， 应该是防火墙的原因吧，把ECS的8888的端口打开（如果ECS连不上HPC的端口，估计也是防火墙的问题，因为我这里用的是80端口，所以没有报错）。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">iptables -I INPUT -p TCP --dport 8888 -j ACCEPT</code></pre>\n      </div>\n<p>AWS里的话是用安全组配置inbound rules，对于不熟悉iptables的用户要友好一些。现在可以在本地浏览器上访问jupyter notebook了。\n<img src="http://oml1i2pi6.bkt.clouddn.com/hpc-jupyter-notebook.png" alt="hpc jupyter notebook"></p>\n</li>\n</ol>\n<h1 id="some-tricks"><a href="#some-tricks" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>some tricks</h1>\n<ol>\n<li>\n<p>安装tmux</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">yum install tmux</code></pre>\n      </div>\n</li>\n<li>\n<p>安装htop</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">-------------- For RHEL/CentOS 7 --------------\nwget http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-9.noarch.rpm\nrpm -ihv epel-release-7-9.noarch.rpm \nyum install htop</code></pre>\n      </div>\n</li>\n<li>加速下载数据集\n话说在HPC上直接下载数据集有点慢（尤其是国外的），可以考虑开一台最低配置的普通ecs，不限制网速，在上面下载好datasets，然后再“内网”（阿里云不同区的服务器是不能内网互联的，比如hk的ecs就不能内网访问杭州的ecs，所以需要用公网ip，但是哪怕用公网ip，速度也是上百倍的差别， 3.4MB/s vs 24.2KB/s）同步到hpc上，如果是国外的datasets，可以开一台低配的相关ecs，0.165￥/时，价格差了200多倍啊。</li>\n</ol>\n<h1 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h1>\n<p>经过几个小时的折腾， 我还没有配好可以正确使用gpu的HPC实例。后来看到这篇<a href="https://yq.aliyun.com/articles/68206">在阿里云HPC和容器服务上，像梵高一样作画</a>，应该比较简单的， 只是目前必须用北京的HPC才可以这么方便的使用。而北京目前必须按月付费，9000￥/月，暂时我还用不起啊。所以还是先放弃HPC，用AWS吧。。。</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="https://yq.aliyun.com/articles/66993?spm=5176.doc48632.2.5.V1yqJr">https://yq.aliyun.com/articles/66993?spm=5176.doc48632.2.5.V1yqJr</a></li>\n<li><a href="https://yq.aliyun.com/articles/64979?spm=5176.doc48632.2.6.V1yqJr">https://yq.aliyun.com/articles/64979?spm=5176.doc48632.2.6.V1yqJr</a></li>\n<li><a href="https://help.aliyun.com/document_detail/48632.html?spm=5176.doc52231.6.573.uqYEBN">https://help.aliyun.com/document_detail/48632.html?spm=5176.doc52231.6.573.uqYEBN</a></li>\n<li><a href="https://github.com/NVIDIA/nvidia-docker">https://github.com/NVIDIA/nvidia-docker</a></li>\n<li><a href="https://opskumu.gitbooks.io/docker/content/chapter5.html">https://opskumu.gitbooks.io/docker/content/chapter5.html</a></li>\n</ul>',timeToRead:7,frontmatter:{title:"阿里云HPC深度学习配置从入门到真的放弃",date:"2017-04-19",category:"ML",tags:["rnn","neural network","dl","ml"],math:null}}},pathContext:{prev:{url:"/aws-docker/",title:"aws上配置docker"},slug:"/2017-04-09-aliyun-hpc-config/",next:{url:"/aws-dl-config/",title:"AWS深度学习配置"}}}}});
//# sourceMappingURL=path---2017-04-09-aliyun-hpc-config-005358cfbe206bb68fe9.js.map
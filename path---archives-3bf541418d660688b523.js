webpackJsonp([66145460603085],{587:function(n,a){n.exports={data:{site:{siteMetadata:{title:"Magicly's Blog"}},allMarkdownRemark:{edges:[{node:{html:'<p>这两天整理一下以前的收藏夹， 发现很多以前花时间学过的但是早就不用了的技术资料， 心生感慨，记录下来留作纪念吧。</p>\n<p>很多已经打不开了， 而居然发现有些好几年前工作中写的代码还在线上， 惊喜。</p>\n<p><strong>排序没有啥意义， 只是整理顺序， 有些分类也不是很合理。 另外有些技术已经过时， 有些没有过时但是现在我不用了， 有些还在使用。</strong></p>\n<h1 id="前端"><a href="#%E5%89%8D%E7%AB%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>前端</h1>\n<ul>\n<li>浏览器兼容性， IE6！！！</li>\n<li>jQuery 以及各种插件</li>\n<li>圆角实现</li>\n<li>各种编码乱码问题</li>\n<li>跨域</li>\n<li>用 Web 做 ppt</li>\n<li>各种浏览器（Firefox，Opera，Chrome， IE， Safari）以及插件</li>\n<li>HTTP 各种 status</li>\n<li>Cache</li>\n<li>Emmet</li>\n<li>Angular</li>\n<li>React</li>\n<li>浏览器插件开发</li>\n<li>微信公众号开发</li>\n<li>如何在手机上调试 H5</li>\n</ul>\n<h1 id="java"><a href="#java" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Java</h1>\n<ul>\n<li>阻塞非阻塞，同步异步， NIO， AIO</li>\n<li>Enum</li>\n<li>Classloader</li>\n<li>Netty</li>\n<li>Mina</li>\n<li>Excel</li>\n<li>Spring</li>\n<li>Hibernate</li>\n<li>Structs</li>\n<li>Servlet / JSP / JSTL</li>\n<li>Tomcat / Jetty</li>\n<li>Eclipse / Idea</li>\n<li>Ant</li>\n<li>Zookeeper</li>\n<li>设计模式</li>\n<li>Concurrency: JDK 库, fork/join, Disruptor, actor(Akka)</li>\n<li>内存模型</li>\n<li>Socket</li>\n<li>单点登录</li>\n<li>Session / Cookie</li>\n<li>计算各种对象所占内存大小</li>\n<li>安全地实现单例模式， Double-checked locking, Enum, Static class</li>\n<li>Annotations</li>\n</ul>\n<h1 id="编程语言"><a href="#%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>编程语言</h1>\n<ul>\n<li>Ruby</li>\n<li>Scala</li>\n<li>LISP / Clojure</li>\n<li>F#</li>\n<li>Haskell</li>\n<li>JS / TS</li>\n<li>CoffeeScript</li>\n<li>Flow</li>\n<li>AWK &#x26; Sed</li>\n<li>SML</li>\n<li>Lua</li>\n<li>C</li>\n<li>C++</li>\n<li>Object-C</li>\n<li>Swift</li>\n<li>Go</li>\n<li>Rust</li>\n<li>Python</li>\n<li>PHP</li>\n<li>Matlab / Octave</li>\n</ul>\n<p>有很多只是简单了解了下， 没有深入使用。 比较熟悉的有 Java/Scala/JS/TS, 现在用 Typescript 较多。</p>\n<h1 id="函数式编程"><a href="#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>函数式编程</h1>\n<h1 id="scala"><a href="#scala" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Scala</h1>\n<ul>\n<li>sbt</li>\n<li>scalaz</li>\n<li>Akka</li>\n<li>Spray</li>\n<li>Play!</li>\n<li>Lift</li>\n<li>Scalatra</li>\n<li>ScalaTest</li>\n<li>Scala.js</li>\n<li>Scala vim 开发环境配置</li>\n<li>Scala Android: scaloid</li>\n<li>Scala-ios</li>\n<li>Scala Native</li>\n</ul>\n<h1 id="app"><a href="#app" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>APP</h1>\n<ul>\n<li>Scala Android: scaloid</li>\n<li>Scala-ios， 还有其他语言开发 ios 的</li>\n<li>PhoneGap / Cordova</li>\n<li>ionicframework</li>\n<li>React Native</li>\n</ul>\n<h1 id="vim--emacs"><a href="#vim--emacs" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Vim &#x26; Emacs</h1>\n<p>两个都用过，花了时间去配置成<strong>IDE</strong>，现在主要用 VSCode / Idea / XCode。。。。Vim 最大的影响就是不管用什么编辑器或 IDE，都要装 Vim 插件， 不然很不习惯。</p>\n<h1 id="各种免费-fq-方式"><a href="#%E5%90%84%E7%A7%8D%E5%85%8D%E8%B4%B9-fq-%E6%96%B9%E5%BC%8F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>各种免费 FQ 方式</h1>\n<ul>\n<li>ssh 隧道</li>\n<li>IPv6 隧道</li>\n<li>各种代理</li>\n<li>VPN</li>\n<li>Goagent</li>\n<li>Tor</li>\n</ul>\n<p>现在主要用 lantern 和 ss， 踏踏实实花钱买， 省事儿。</p>\n<h1 id="reactive--fpr"><a href="#reactive--fpr" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reactive &#x26; FPR</h1>\n<ul>\n<li>RxJava</li>\n<li>RxJS</li>\n</ul>\n<h1 id="正则表达式"><a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>正则表达式</h1>\n<h1 id="github-pages-搭建-blog"><a href="#github-pages-%E6%90%AD%E5%BB%BA-blog" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>github pages 搭建 blog</h1>\n<ul>\n<li>Jekyll</li>\n<li>Hexo</li>\n<li>Gatsby（现在在用的）</li>\n</ul>\n<h1 id="linux"><a href="#linux" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Linux</h1>\n<ul>\n<li>fedora</li>\n<li>ubuntu</li>\n<li>系统性能诊断</li>\n<li>Shell</li>\n</ul>\n<p>最早的时候要刻四张光盘安装， 后来用 U 盘安装。</p>\n<h1 id="爬虫--搜索引擎"><a href="#%E7%88%AC%E8%99%AB--%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>爬虫 &#x26; 搜索引擎</h1>\n<ul>\n<li>Lucene</li>\n<li>Solr</li>\n<li>nutch</li>\n<li>Scrapy</li>\n</ul>\n<h1 id="算法、大数据、mlai"><a href="#%E7%AE%97%E6%B3%95%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%81mlai" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>算法、大数据、ML/AI</h1>\n<ul>\n<li>Mahout</li>\n<li>OpenCV</li>\n<li>SIFT</li>\n<li>OCR / Tesseract</li>\n<li>LeetCode</li>\n<li>ACM</li>\n<li>自然语言处理</li>\n<li>word2vec</li>\n<li>神经网络，CNN / RNN</li>\n<li>推荐， 协同过滤， 矩阵分解</li>\n<li>Bloom filter</li>\n<li>MCTS</li>\n<li>五子棋， 国际象棋</li>\n</ul>\n<h1 id="web-安全"><a href="#web-%E5%AE%89%E5%85%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Web 安全</h1>\n<ul>\n<li>XSS</li>\n<li>CSRF</li>\n<li>浏览劫持</li>\n<li>HTTPS</li>\n<li>对称加密， 非对称加密， Hash， 随机数</li>\n</ul>\n<h1 id="db"><a href="#db" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DB</h1>\n<ul>\n<li>mysql， 各种索引优化，复合索引。。。</li>\n<li>Postgrel</li>\n<li>MongoDB</li>\n<li>Memcached</li>\n<li>Redis</li>\n<li>ssdb</li>\n</ul>\n<h1 id="nodejs"><a href="#nodejs" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Node.js</h1>\n<ul>\n<li>Express</li>\n<li>Koa</li>\n<li>Egg</li>\n<li>meteor</li>\n</ul>\n<h1 id="测试"><a href="#%E6%B5%8B%E8%AF%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试</h1>\n<ul>\n<li>单元</li>\n<li>自动化测试</li>\n<li>截图测试</li>\n<li>Property based Testing</li>\n<li>压力测试</li>\n</ul>\n<h1 id="其他"><a href="#%E5%85%B6%E4%BB%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>其他</h1>\n<ul>\n<li>DSL</li>\n<li>Git</li>\n<li>自由职业</li>\n<li>敏捷开发</li>\n<li>重构</li>\n<li>Firebase / Clouda</li>\n<li>GTD</li>\n<li>魔术</li>\n<li>羽毛球</li>\n<li>旅游 / 摄影</li>\n<li>飞叠杯</li>\n<li>。。。。</li>\n</ul>\n<h1 id="比特币！！！"><a href="#%E6%AF%94%E7%89%B9%E5%B8%81%EF%BC%81%EF%BC%81%EF%BC%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>比特币！！！</h1>\n<p>最后， 发现自己 2011 年的时候看了一篇比特币的报道， <a href="http://www.bitecoin.com/online/2011/05/61.html">“比特币是个骗局”，吗？</a>！！！</p>\n<h1 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h1>\n<p>由于东西太多了， 目前并没有整理完， 定期整理资料是一个好习惯， 删除东西真的很爽，因为删的都是自己已经了解不需要了的东西。</p>\n<p>不要只做资料收藏着， 要转化为自己的知识。</p>\n<p>另外也可以看出， 很多以前花了很多时间研究的东西， 其实早就被淘汰了， 所以很多时候我们不要太纠结技术， 而要关注解决问题本身！</p>\n<p>因为， 终究， 所有技术都会死的， 我们也是。。。</p>',timeToRead:4,excerpt:"…",fields:{slug:"/tools-used/"},frontmatter:{title:"那些年使用过的技术",date:"2018-05-18",category:"Others",tags:["杂"]}}},{node:{html:'<p>最近要做个 Desktop 软件， 当然首选 Electron， 另外最近用 Typescript 感觉很爽， 所以技术选型为 Electron + React + Typescript， 为了省事想找个 starter 脚手架， 大概找了下面这些。</p>\n<!-- more -->\n<p>------------2018-05-13 更新----------</p>\n<p>使用<a href="https://github.com/iRath96/electron-react-typescript-boilerplate">electron-react-typescript-boilerplate</a>的时候发现一个问题： 在 class 里面不能使用<code class="language-text">arrow function</code>！ 比如如下代码有问题：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token comment">// import { remote } from \'electron\';</span>\n<span class="token comment">// import \'./App.css\';</span>\n\n<span class="token comment">// const electron = (window as any).require(\'electron\');</span>\n<span class="token comment">// const fs = electron.remote.require(\'fs\');</span>\n<span class="token comment">// const ipcRenderer = electron.ipcRenderer;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ipcRenderer<span class="token punctuation">,</span> remote <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'electron\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ipcRenderer<span class="token punctuation">,</span> remote<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// console.log(fs, ipcRenderer);</span>\n\n<span class="token comment">// const logo = require(\'./logo.svg\');</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// state = {} as any;</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> any<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'componentDidMount \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// handleClick() {</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'handleClick\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'magicly\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>header className<span class="token operator">=</span><span class="token string">"App-header"</span><span class="token operator">></span>\n          <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">"App-title"</span><span class="token operator">></span>Welcome to React<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span>\n        <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">"App-intro"</span><span class="token operator">></span>\n          To <span class="token keyword">get</span> started<span class="token punctuation">,</span> edit <span class="token operator">&lt;</span>code<span class="token operator">></span>src<span class="token operator">/</span>App<span class="token punctuation">.</span>tsx<span class="token operator">&lt;</span><span class="token operator">/</span>code<span class="token operator">></span> and save to reload<span class="token punctuation">.</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>butotn<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>点击 button 的时候会报错:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">warning<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">33</span> Warning<span class="token punctuation">:</span> Can\'t call setState on a component that is not yet mounted<span class="token punctuation">.</span> This is a no<span class="token operator">-</span>op<span class="token punctuation">,</span> but it might indicate a bug <span class="token keyword">in</span> your application<span class="token punctuation">.</span> Instead<span class="token punctuation">,</span> assign to <span class="token template-string"><span class="token string">`this.state`</span></span> directly or define a <span class="token template-string"><span class="token string">`state = {};`</span></span> <span class="token keyword">class</span> <span class="token class-name">property</span> <span class="token keyword">with</span> the desired state <span class="token keyword">in</span> the App component<span class="token punctuation">.</span></code></pre>\n      </div>\n<p>但其实这个是再正常不过的代码了啊， 在普通的<code class="language-text">create-react-app</code>建的项目里面完全没有问题， 即使运行在<code class="language-text">electron</code>中也是完全 ok 的。 所以决定最后还是选择<code class="language-text">create-react-app</code>新建 Typescript 项目， 然后添加 electron 依赖好了。 当然这个脚手架也有好处，就是可以直接使用<code class="language-text">import { ipcRenderer, remote } from &#39;electron&#39;;</code>。</p>\n<p>其实后来仔细想了下， 为啥要用 electron 呢？ 相比直接网页多了什么？</p>\n<ul>\n<li>能获得更多的原生接口？</li>\n</ul>\n<p>现在 H5 的丰富接口已经完全够用， 包括 service worker 可以离线， web worker 多线程， websocket， notification 等。</p>\n<ul>\n<li>高性能？</li>\n</ul>\n<p>可以使用 WebAssembly， 并发可以用 web workers.</p>\n<ul>\n<li>接口请求跨域？</li>\n</ul>\n<p>可以通过添加 chrome 插件来支持。</p>\n<ul>\n<li>浏览器兼容性！</li>\n</ul>\n<p>对了， 这个似乎说到了重点， electron 把 node 和 chrome 打包进去了， 能保证运行环境一致， 不用再为兼容性问题头痛！</p>\n<p>总之， 如果是自己使用的项目（或者可以跟客户协商的话），其实 chrome 网页基本完全够用了， so， 先就做网页吧。</p>\n<hr>\n<h1 id="httpsgithubcomelectronelectron-quick-start"><a href="#httpsgithubcomelectronelectron-quick-start" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="https://github.com/electron/electron-quick-start">https://github.com/electron/electron-quick-start</a></h1>\n<p>electron 自己出的， 其实就是个 Hello World， 用 JS 语言， 不满足要求。</p>\n<h1 id="httpsgithubcomelectronelectron-quick-start-typescript"><a href="#httpsgithubcomelectronelectron-quick-start-typescript" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="https://github.com/electron/electron-quick-start-typescript">https://github.com/electron/electron-quick-start-typescript</a></h1>\n<p>上一个的 Typescript 版本， 只是 Hello World，不行。</p>\n<h1 id="httpsgithubcomchentsulinelectron-react-boilerplate"><a href="#httpsgithubcomchentsulinelectron-react-boilerplate" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="https://github.com/chentsulin/electron-react-boilerplate">https://github.com/chentsulin/electron-react-boilerplate</a></h1>\n<p>这个算是 stars 数比较多的一个了， 综合了 React + Redux + React Router + Webpack + HMR， 算是满足我的要求了。 Static Type Checking 用的<a href="https://flow.org/">Flow</a>， 之前也用过， 还不错， 不过感觉使用场景没有 Typescript 那么广呢， 后来决定用 TS， 所以这次也用 TS 吧。</p>\n<h1 id="httpsgithubcomirath96electron-react-typescript-boilerplate"><a href="#httpsgithubcomirath96electron-react-typescript-boilerplate" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="https://github.com/iRath96/electron-react-typescript-boilerplate">https://github.com/iRath96/electron-react-typescript-boilerplate</a></h1>\n<blockquote>\n<p>This is a slight modificiation of the great electron-react-boilerplate by chentsulin. Instead of Babel and flow this version uses TypeScript. Support for Sass has also been added.</p>\n</blockquote>\n<p>上一个的 Typescript 版本， 哎， 正好！</p>\n<h1 id="create-react-app--electron"><a href="#create-react-app--electron" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Create React App + Electron</h1>\n<p>前面的感觉都是以 Electron 为主， 然后加上一些前端技术栈。 可以反过来想， 能不能直接用<a href="https://github.com/facebook/create-react-app">CRA</a>新建项目， 然后加上 Electron 依赖呢？</p>\n<p>还真有人这样做了， 就是这篇<a href="https://medium.freecodecamp.org/building-an-electron-application-with-create-react-app-97945861647c">How to build an Electron app using create-react-app. No webpack configuration or “ejecting” necessary.</a>。</p>\n<p>大概步骤如下：</p>\n<ol>\n<li>create-react-app 新建项目（现在可以添加<code class="language-text">--scripts-version=react-scripts-ts</code>创建 Typescript 项目了）</li>\n<li><code class="language-text">npm i -D electron</code>，添加 electron 为依赖</li>\n<li>将<a href="https://github.com/electron/electron-quick-start">electron-quick-start</a>里的<code class="language-text">main.js</code>（是 electron 的入口文件）copy 过来，可以改个名字比如<code class="language-text">electron-starter.js</code></li>\n<li>修改 3 中的<code class="language-text">mainWindow.loadURL</code>参数为<code class="language-text">localhost:3000</code></li>\n<li>在<code class="language-text">package.json</code>中添加如下内容：</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"src/electron-starter.js"</span><span class="token punctuation">,</span>\n  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"electron"</span><span class="token punctuation">:</span> <span class="token string">"electron ."</span>\n  <span class="token punctuation">}</span></code></pre>\n      </div>\n<ol start="6">\n<li>执行<code class="language-text">npm start</code>然后执行<code class="language-text">npm run electron</code></li>\n</ol>\n<p>这样就可以享受所有 CRA 的好处了， 如果是已经有一个 react 项目的话， 这样迁移过来是最容易的了。</p>\n<p>有两个小问题， 一是 4 中<code class="language-text">mainWindow.loadURL</code>的参数， 我们指定为<code class="language-text">localhost:3000</code>， 这个其实是 CRA 的开发环境的地址，如果最后正式发布的话， 应该配置<code class="language-text">npm run build</code>之后的<code class="language-text">index.html</code>， 可以通过环境变量控制。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token string">"electron-dev"</span><span class="token punctuation">:</span> <span class="token string">"ELECTRON_START_URL=http://localhost:3000 electron ."</span></code></pre>\n      </div>\n<p>然后将<code class="language-text">electron-starter.js</code>相应内容改为:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> startUrl <span class="token operator">=</span>\n  process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ELECTRON_START_URL</span> <span class="token operator">||</span>\n  url<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    pathname<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/../build/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    protocol<span class="token punctuation">:</span> <span class="token string">"file:"</span><span class="token punctuation">,</span>\n    slashes<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span>startUrl<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>还有一个问题， CRA 默认打包出来的<code class="language-text">index.html</code>里面引用资源是认为放在根目录下， 所以需要在<code class="language-text">package.json</code>里面配置<code class="language-text">home</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token string">"homepage"</span><span class="token punctuation">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span></code></pre>\n      </div>\n<p>最后还有一个问题， 在我们通常写的 JS 代码里面直接 require <code class="language-text">electron</code>是有问题的，可以通过如下方法解决（参看<a href="https://github.com/electron/electron/issues/7300">讨论</a>）：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> electron <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"electron"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> electron<span class="token punctuation">.</span>remote<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ipcRenderer <span class="token operator">=</span> electron<span class="token punctuation">.</span>ipcRenderer<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>感觉这种方式是从现有 React 项目迁移的最好方法了， 不过对 electron 的其他东西，比如打包之类的都没有涉及。</p>\n<p>这里还有更多<a href="https://electronjs.org/community#boilerplates">boilerplates</a>， 下面这几个还没有看过仅供参考：</p>\n<ul>\n<li><a href="https://github.com/emk/electron-test">https://github.com/emk/electron-test</a> ， 这个还整合了 Rust， 也是我后面可能需要的， mark 一下。</li>\n<li><a href="https://github.com/skellock/typescript-with-electron-react-kit">https://github.com/skellock/typescript-with-electron-react-kit</a></li>\n<li><a href="http://blog.scottlogic.com/2017/06/06/typescript-electron-webpack.html">http://blog.scottlogic.com/2017/06/06/typescript-electron-webpack.html</a></li>\n</ul>\n<p>下面几个 repo 也可以看一下， 作为入门 electron 资料还是很不错的：</p>\n<ul>\n<li><a href="https://github.com/electron/simple-samples">https://github.com/electron/simple-samples</a></li>\n<li><a href="https://github.com/electron/electron-api-demos">https://github.com/electron/electron-api-demos</a></li>\n<li><a href="https://github.com/hokein/electron-sample-apps">https://github.com/hokein/electron-sample-apps</a></li>\n</ul>\n<p>当然， 最完整权威的资料还是<a href="https://electronjs.org/docs">官网文档</a>了！</p>',
timeToRead:4,excerpt:"最近要做个 Desktop 软件， 当然首选 Electron， 另外最近用 Typescript 感觉很爽， 所以技术选型为 Electron + React + Typescript， 为了省事想找个 starter…",fields:{slug:"/electron-starter/"},frontmatter:{title:"Electron入门资料",date:"2018-05-12",category:"FE",tags:["electron","typescript","create react app","react"]}}},{node:{html:'<p>Node.js 里面引用 json 文件很容易， 如果是 ES5 的话， 用<code class="language-text">require</code>，如果是 ES6 的话用<code class="language-text">import</code>。 比如 <code class="language-text">test.json</code> 文件如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"hello"</span><span class="token operator">:</span> <span class="token string">"typescript"</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>js 代码如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// ES5 testjson.js</span>\n<span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./test.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ES6</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> json <span class="token keyword">from</span> <span class="token string">"./test.json"</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>注意， Node9 以上才支持 ES6 的 import/export 机制， 且后缀名是<code class="language-text">.mjs</code>。</p>\n<p>直接把<code class="language-text">testjson.js</code>改为<code class="language-text">testjson.ts</code>会报错，说<code class="language-text">[ts] Cannot find module &#39;./test.json&#39;.</code>。</p>\n<h1 id="解决方案"><a href="#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>解决方案</h1>\n<p>Typescript2 支持<a href="https://www.typescriptlang.org/docs/handbook/modules.html">Wildcard module declarations</a>，很好地解决了这个问题。 添加<code class="language-text">typings.d.ts</code>文件， 在里面配置：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">declare module &#39;*.json&#39; {\n  const value: any;\n  export default value;\n}</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> json <span class="token keyword">from</span> <span class="token string">"./test.json"</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>还会报错说没有<code class="language-text">hello</code>：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token punctuation">[</span>ts<span class="token punctuation">]</span> Property <span class="token string">\'hello\'</span> does not exist on type <span class="token string">\'typeof \'</span><span class="token operator">*</span><span class="token punctuation">.</span>json<span class="token string">\'\'</span><span class="token punctuation">.</span>\nany</code></pre>\n      </div>\n<p>可以做一次 any 转换即可：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> json <span class="token keyword">from</span> <span class="token string">\'./test.json\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>json <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h1 id="参考资料"><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>参考资料</h1>\n<ul>\n<li><a href="https://hackernoon.com/import-json-into-typescript-8d465beded79">https://hackernoon.com/import-json-into-typescript-8d465beded79</a></li>\n</ul>',timeToRead:1,excerpt:"Node.js 里面引用 json 文件很容易， 如果是 ES5 的话， 用 ，如果是 ES6 的话用 。 比如   文件如下： js 代码如下： 注意， Node9 以上才支持 ES6 的 import/export…",fields:{slug:"/typescript-import-json/"},frontmatter:{title:"Typescript如何import json文件",date:"2018-04-26",category:"FE",tags:["Typescript","json"]}}},{node:{html:'<p>Solidity学习笔记。</p>\n<!-- more -->\n<h1 id="solidity"><a href="#solidity" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Solidity</h1>\n<p>It was influenced by C++, Python and JavaScript and is designed to target the Ethereum Virtual Machine (EVM).</p>\n<p>statically typed, supports inheritance, libraries and complex user-defined types among other features.</p>\n<p>create contracts for voting, crowdfunding, blind auctions, multi-signature wallets and more.</p>\n<p>最快速简单的开发环境： <a href="https://remix.ethereum.org/">Remix</a></p>\n<h1 id="introduction-to-smart-contracts"><a href="#introduction-to-smart-contracts" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction to Smart Contracts</h1>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.0</span><span class="token punctuation">;</span>\n\ncontract SimpleStorage <span class="token punctuation">{</span>\n    uint storedData<span class="token punctuation">;</span>\n\n    <span class="token keyword">function</span> <span class="token keyword">set</span><span class="token punctuation">(</span>uint x<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        storedData <span class="token operator">=</span> x<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> constant <span class="token function">returns</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> storedData<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>The first line simply tells that the source code is written for Solidity version 0.4.0 or anything newer that does not break functionality (up to, but not including, version 0.5.0). </p>\n<p>A contract in the sense of Solidity is a collection of code (its functions) and data (its state) that resides at a specific address on the Ethereum blockchain. </p>\n<p>uint (unsigned integer of 256 bits)</p>\n<p>do not need the prefix this.</p>\n<p>All identifiers (contract names, function names and variable names) are restricted to the ASCII character set.</p>\n<h2 id="subcurrency-example"><a href="#subcurrency-example" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Subcurrency Example</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.21</span><span class="token punctuation">;</span>\n\ncontract Coin <span class="token punctuation">{</span>\n    <span class="token comment">// The keyword "public" makes those variables</span>\n    <span class="token comment">// readable from outside.</span>\n    address <span class="token keyword">public</span> minter<span class="token punctuation">;</span>\n    <span class="token function">mapping</span> <span class="token punctuation">(</span>address <span class="token operator">=></span> uint<span class="token punctuation">)</span> <span class="token keyword">public</span> balances<span class="token punctuation">;</span>\n\n    <span class="token comment">// Events allow light clients to react on</span>\n    <span class="token comment">// changes efficiently.</span>\n    event <span class="token function">Sent</span><span class="token punctuation">(</span>address <span class="token keyword">from</span><span class="token punctuation">,</span> address to<span class="token punctuation">,</span> uint amount<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// This is the constructor whose code is</span>\n    <span class="token comment">// run only when the contract is created.</span>\n    <span class="token keyword">function</span> <span class="token function">Coin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        minter <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">function</span> <span class="token function">mint</span><span class="token punctuation">(</span>address receiver<span class="token punctuation">,</span> uint amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">!=</span> minter<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n        balances<span class="token punctuation">[</span>receiver<span class="token punctuation">]</span> <span class="token operator">+=</span> amount<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span>address receiver<span class="token punctuation">,</span> uint amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">&lt;</span> amount<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n        balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-=</span> amount<span class="token punctuation">;</span>\n        balances<span class="token punctuation">[</span>receiver<span class="token punctuation">]</span> <span class="token operator">+=</span> amount<span class="token punctuation">;</span>\n        emit <span class="token function">Sent</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><code class="language-text">address public minter;</code>, address type is a 160-bit value that does not allow any arithmetic operations.</p>\n<p>加了public会自动生成一个getter函数，类似：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">minter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">returns</span> <span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> minter<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>但是不能手写这个函数， 否则编译报错。</p>\n<p><code class="language-text">mapping (address =&gt; uint) public balances;</code>, Mappings can be seen as hash tables which are virtually initialized such that every possible key exists and is mapped to a value whose byte-representation is all zeros.  任何没有放进map的key， value都是0值。 所以也没办法遍历mapping的， 如果需要记住key， 自己用array记。 由public生成的getter函数类似如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">balances</span><span class="token punctuation">(</span>address _account<span class="token punctuation">)</span> <span class="token keyword">public</span> view <span class="token function">returns</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> balances<span class="token punctuation">[</span>_account<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><code class="language-text">event Sent(address from, address to, uint amount);</code>, As soon as it is emitted, the listener(比如钱包啊， 自己代码加的监听器等) will also receive the arguments from, to and amount, which makes it easy to track transactions.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">Coin<span class="token punctuation">.</span><span class="token function">Sent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Coin transfer: "</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>args<span class="token punctuation">.</span>amount <span class="token operator">+</span>\n            <span class="token string">" coins were sent from "</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>args<span class="token punctuation">.</span><span class="token keyword">from</span> <span class="token operator">+</span>\n            <span class="token string">" to "</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>args<span class="token punctuation">.</span>to <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Balances now:\\n"</span> <span class="token operator">+</span>\n            <span class="token string">"Sender: "</span> <span class="token operator">+</span> Coin<span class="token punctuation">.</span>balances<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>args<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n            <span class="token string">"Receiver: "</span> <span class="token operator">+</span> Coin<span class="token punctuation">.</span>balances<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>args<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p><code class="language-text">Coin</code> is the constructor which is run during creation of the contract and cannot be called afterwards.  <code class="language-text">msg</code> (together with <code class="language-text">tx</code> and <code class="language-text">block</code>) is a magic global variable that contains some properties which allow access to the blockchain.</p>\n<h2 id="blockchain-basics"><a href="#blockchain-basics" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Blockchain Basics</h2>\n<p>The reason is that most of the complications (mining, hashing, elliptic-curve cryptography, peer-to-peer networks, etc.) are just there to provide a certain set of features and promises. Once you accept these features as given, you do not have to worry about the underlying technology - or do you have to know how Amazon’s AWS works internally in order to use it?</p>\n<h3 id="transactions"><a href="#transactions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Transactions</h3>\n<p>原子性、持久性、globally accepted。 a transaction is always cryptographically signed by the sender (creator).  防止抵赖</p>\n<h3 id="blocks"><a href="#blocks" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Blocks</h3>\n<p>“double-spend attack”</p>\n<p>An order of the transactions will be selected for you, the transactions will be bundled into what is called a “block” and then they will be executed and distributed among all participating nodes. If two transactions contradict each other, the one that ends up being second will be rejected and not become part of the block.</p>\n<p>Ethereum this is roughly every 17 seconds.</p>\n<p> “order selection mechanism” (which is called “mining”)</p>\n<h2 id="the-ethereum-virtual-machine"><a href="#the-ethereum-virtual-machine" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Ethereum Virtual Machine</h2>\n<p>not only sandboxed but actually completely isolated, which means that code running inside the EVM has no access to network, filesystem or other processes. Smart contracts even have limited access to other smart contracts.</p>\n<h3 id="accounts"><a href="#accounts" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Accounts</h3>\n<p><strong>External accounts</strong>: 由公钥私钥控制（一般是人）， 地址是public key决定</p>\n<p><strong>contract accounts</strong>: 由里面的code控制， 地址是在contract被创建的时候由创建者的address以及发送过的transactions数量（叫nonce）决定的。</p>\n<p>Every account has a persistent key-value store mapping 256-bit words to 256-bit words called storage.</p>\n<p>Furthermore, every account has a balance in Ether (in “Wei” to be exact) which can be modified by sending transactions that include Ether.</p>\n<h3 id="transactions-1"><a href="#transactions-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Transactions</h3>\n<p>这里的事务其实就是一个account发送给另一个account的msg， 可以带参数和ether。 如果目标账号包含code（contract account)， code被执行。</p>\n<p>如果目标地址是0， 则认为是创建一个新contract， 新contract地址由发送者的地址和已经发送过的transactions数量（nonce）决定。 所带的参数当做EVM的bytecode执行， 返回值作为contract的code存储在blockchain上。</p>\n<blockquote>\n<p>This means that in order to create a contract, you do not send the actual code of the contract, but in fact code that returns that code when executed.</p>\n</blockquote>\n<h3 id="gas"><a href="#gas" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Gas</h3>\n<p>执行transaction的费用， 每条bytecode指令都有对应的gas。 你可以指定<strong>gas price</strong>， 然后最后会花费<strong>gas price * gas used</strong>， 没花完的原路退回， 如果不够， 会报<strong>out-of-gas exception</strong>， 所有操作回滚。</p>\n<p>这个设计是为了奖励节点， 同时也能提高DOS攻击成本。</p>\n<h3 id="storage-memory-and-the-stack"><a href="#storage-memory-and-the-stack" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Storage, Memory and the Stack</h3>\n<p>每个account都有一个Storage，是永久存储的一个key-value数据库， key和value都是256-bit words。 读和写操作都很贵（花费gas）， 一个contract也只能读写自己的storage。</p>\n<p>memory是内存，每次方法调用都会开辟新的空间， 用的内存越多越贵（成平方增长的）。</p>\n<p>EVM是stack机， 不是基于寄存器的。</p>\n<h3 id="instruction-set"><a href="#instruction-set" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Instruction Set</h3>\n<p>为了安全， 指令集设计得比较小。</p>\n<p> All instructions operate on the basic data type, 256-bit words. The usual arithmetic, bit, logical and comparison operations are present. Conditional and unconditional jumps are possible. Furthermore, contracts can access relevant properties of the current block like its number and timestamp.</p>\n<h3 id="message-calls"><a href="#message-calls" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Message Calls</h3>\n<p>contract可以通过消息调用其他contract的代码， 也可以转账（ether）给非contract账户。</p>\n<p>Message calls are similar to transactions, in that they have a source, a target, data payload, Ether, gas and return data.</p>\n<p>Calls are limited to a depth of 1024, which means that for more complex operations, loops should be preferred over recursive calls.</p>\n<h3 id="delegatecall--callcode-and-libraries"><a href="#delegatecall--callcode-and-libraries" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Delegatecall / Callcode and Libraries</h3>\n<p><strong>delegatecall</strong>是一种特殊的message call， 目标地址的code是在调用方的context下执行的， 即msg.sender &#x26; msg.value都是调用方。 实现的效果就是可以在运行时动态加载别的地址的代码， 可以实现”library”的效果。</p>\n<h3 id="logs"><a href="#logs" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Logs</h3>\n<p><strong>logs</strong>特性用来实现<strong>events</strong>。 contract访问不了logs， 但logs可以在blockchain之外访问到。 一部分logs用bloom filter存储， 可以高效地检索， 所以“light clinets”可以用到logs。</p>\n<h3 id="create"><a href="#create" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Create</h3>\n<p>Contracts can even create other contracts using a special opcode.</p>\n<h3 id="self-destruct"><a href="#self-destruct" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Self-destruct</h3>\n<p>调用<strong>selfdestruct</strong>指令可以将contract从blockchain删除。 The remaining Ether stored at that address is sent to a designated target and then the storage and code is removed from the state.</p>\n<p>Even if a contract’s code does not contain a call to selfdestruct, it can still perform that operation using delegatecall or callcode.</p>\n<h1 id="installing-the-solidity-compiler"><a href="#installing-the-solidity-compiler" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installing the Solidity Compiler</h1>\n<h2 id="remix"><a href="#remix" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Remix</h2>\n<p>最简单快捷的Solidity开发环境， 可以直接访问<a href="https://remix.ethereum.org">Remix在线版</a>， 或者下载离线使用<a href="https://github.com/ethereum/remix-ide%E3%80%82">https://github.com/ethereum/remix-ide。</a></p>\n<p>另外还提供了npm安装（solcjs， 功能不全）， docker安装， 二进制包， 或者源码安装。</p>\n<p>推荐使用自己操作系统的包管理工具直接安装二进制包， mac如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">brew update\nbrew upgrade\nbrew tap ethereum/ethereum\nbrew <span class="token function">install</span> solidity</code></pre>\n      </div>\n<h1 id="solidity-by-example"><a href="#solidity-by-example" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Solidity by Example</h1>\n<p>一个投票， 一个竞拍（包括盲拍）， 一个电商的例子。 </p>\n<h1 id="solidity-in-depth"><a href="#solidity-in-depth" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Solidity in Depth</h1>\n<p>东西比较多， 专门写一篇吧。</p>\n<h1 id="security-considerations"><a href="#security-considerations" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Security Considerations</h1>\n<p>凡程序必有bug， 哪怕是自己的smart contract是bug-free， 可能compiler或者EVM本身也可能有bug的， 而blockchain往往涉及到很重要的资产， 所以安全问题尤为重要。</p>\n<p>一些典型的问题。</p>\n<h2 id="private-information-and-randomness"><a href="#private-information-and-randomness" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Private Information and Randomness</h2>\n<p>Using random numbers in smart contracts is quite tricky if you do not want miners to be able to cheat.</p>\n<h2 id="re-entrancy"><a href="#re-entrancy" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Re-Entrancy</h2>\n<p>contract A调用contract B或者transfer的时候控制权会转移给B， 而B有可能反过来调用A。下面的代码就有问题：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.0</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 有bug， 勿用！！！</span>\ncontract Fund <span class="token punctuation">{</span>\n    <span class="token function">mapping</span><span class="token punctuation">(</span>address <span class="token operator">=></span> uint<span class="token punctuation">)</span> shares<span class="token punctuation">;</span>\n    <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>shares<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            shares<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><code class="language-text">msg.sender</code>可能是一个contract， 并且再次调用<code class="language-text">withdraw</code>， 这样就会多次提现。 可以用<code class="language-text">Checks-Effects-Interactions</code>模式来解决， 如下代码：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.11</span><span class="token punctuation">;</span>\n\ncontract Fund <span class="token punctuation">{</span>\n    <span class="token function">mapping</span><span class="token punctuation">(</span>address <span class="token operator">=></span> uint<span class="token punctuation">)</span> shares<span class="token punctuation">;</span>\n    <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> share <span class="token operator">=</span> shares<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        shares<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>share<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>任何对另一个contract的调用都应该考虑re-entry问题。</p>\n<h2 id="gas-limit-and-loops"><a href="#gas-limit-and-loops" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Gas Limit and Loops</h2>\n<p>慎用Loops，因为很可能烧光gas！！！</p>\n<h2 id="sending-and-receiving-ether"><a href="#sending-and-receiving-ether" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sending and Receiving Ether</h2>\n<p>有很多种转账方式， 也有很多原因可能失败。 对于给contract转账， 建议不要失败后直接退还， 而是给其提供withdraw机会。</p>\n<h2 id="callstack-depth"><a href="#callstack-depth" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Callstack Depth</h2>\n<p>External function calls can fail any time because they exceed the maximum call stack of 1024.</p>\n<h2 id="txorigin"><a href="#txorigin" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>tx.origin</h2>\n<p>不要用<code class="language-text">tx.origin</code>来验证授权！ 假设你的contract如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.11</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 有bug， 勿用！！！</span>\ncontract TxUserWallet <span class="token punctuation">{</span>\n    address owner<span class="token punctuation">;</span>\n\n    <span class="token keyword">function</span> <span class="token function">TxUserWallet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">function</span> <span class="token function">transferTo</span><span class="token punctuation">(</span>address dest<span class="token punctuation">,</span> uint amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        <span class="token function">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>origin <span class="token operator">==</span> owner<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        dest<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>则下面的contract就会把你ether偷光：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.11</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">TxUserWallet</span> <span class="token punctuation">{</span>\n    <span class="token keyword">function</span> <span class="token function">transferTo</span><span class="token punctuation">(</span>address dest<span class="token punctuation">,</span> uint amount<span class="token punctuation">)</span> <span class="token keyword">public</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ncontract TxAttackWallet <span class="token punctuation">{</span>\n    address owner<span class="token punctuation">;</span>\n\n    <span class="token keyword">function</span> <span class="token function">TxAttackWallet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        <span class="token function">TxUserWallet</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>感觉这块没太明白， 欢迎留言讨论。</p>\n<h2 id="一些小细节"><a href="#%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%BB%86%E8%8A%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>一些小细节</h2>\n<ul>\n<li><code class="language-text">for (var i = 0; i &lt; arrayName.length; i++) { ... }</code>， 这段代码里i会被推断为<code class="language-text">uint8</code>，所以如果<code class="language-text">arrayName.length &gt; 255</code>， 循环就不会终止了！ 所以应该用<code class="language-text">for (uint i = 0; i &lt; arrayName.length; i++) {...}</code>。</li>\n<li><code class="language-text">constant</code>关键字目前并没有被compiler和EVM保证， 所以声明为constanct的函数依然可能修改state</li>\n<li>“dirty higher order bits”， 比如用<code class="language-text">msg.data</code>调用<code class="language-text">f(uint8 x)</code>的时候传<code class="language-text">0xff000001</code>和<code class="language-text">0x00000001</code>在函数里都会认为是1， 但是其实<code class="language-text">msg.data</code>是不一样的，所以如果用到<code class="language-text">keccak256(msg.data)</code>结果是不一样的。</li>\n</ul>\n<h2 id="建议"><a href="#%E5%BB%BA%E8%AE%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>建议</h2>\n<h3 id="限制智能合约上存储的ether或者其他token数量"><a href="#%E9%99%90%E5%88%B6%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E4%B8%8A%E5%AD%98%E5%82%A8%E7%9A%84ether%E6%88%96%E8%80%85%E5%85%B6%E4%BB%96token%E6%95%B0%E9%87%8F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>限制智能合约上存储的ether或者其他token数量</h3>\n<p>这样万一程序有问题（包括contract、compiler、EVM等）， 损失也不会太大。</p>\n<h3 id="功能单一、模块化！"><a href="#%E5%8A%9F%E8%83%BD%E5%8D%95%E4%B8%80%E3%80%81%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>功能单一、模块化！</h3>\n<p>良好的编码习惯吧！</p>\n<h3 id="checks-effects-interactions模式"><a href="#checks-effects-interactions%E6%A8%A1%E5%BC%8F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Checks-Effects-Interactions模式</h3>\n<ol>\n<li>先做检查， 包括谁是发送者， 钱够不够， 参数范围合法么。。。</li>\n<li>修改当前contract的state variables</li>\n<li>调用其他contract</li>\n</ol>\n<p>2和3交换会导致之前提到的<code class="language-text">re-entrancy</code>问题。</p>\n<h3 id="fail-safe-mode"><a href="#fail-safe-mode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Fail-Safe Mode</h3>\n<p>新手最好预留一手“保护模式”。 可以定期检查一下有没有ether泄露啊， token总量是否banlance啊。。。如果出现问题， 可以切换到安全模式， 限制大部分功能， 或者只能由少数可信的人去调用contract， 或者just converts the contract into a simple “give me back my money” contract.</p>\n<h3 id="formal-verification"><a href="#formal-verification" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Formal Verification</h3>\n<p>感觉有点像<a href="https://hypothesis.works/articles/what-is-property-based-testing/">Property Based Testing?</a></p>\n<h1 id="using-the-compiler"><a href="#using-the-compiler" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using the compiler</h1>\n<p>编译器solc的一些命令行选项。</p>\n<h1 id="contract-metadata"><a href="#contract-metadata" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Contract Metadata</h1>\n<p>用<code class="language-text">solc --metadata</code>可以生成contract的metadata。 其中包括了源代码的的hash值以及Swarm位置 ， metadata的Swarm位置保存在contract bytecode最后， 因此通过bytecode就可以找到metadata，进而找到源代码， 来验证代码可信。</p>\n<h1 id="application-binary-interface-specification"><a href="#application-binary-interface-specification" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Application Binary Interface Specification</h1>\n<p>contract的ABI规范， 一般做编译器的才会需要了解吧。</p>\n<h1 id="joyfully-universal-language-for-inline-assembly"><a href="#joyfully-universal-language-for-inline-assembly" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Joyfully Universal Language for (Inline) Assembly</h1>\n<p>JULIA is an intermediate language that can compile to various different backends (EVM 1.0, EVM 1.5 and eWASM are planned). </p>\n<p>也就是编译器的中间语言， 不同的后端可以编译到不同的EVM上。 应该只有做EVM开发的才会需要了解吧。</p>\n<h1 id="style-guide"><a href="#style-guide" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Style Guide</h1>\n<p>主要参考了<a href="https://www.python.org/dev/peps/pep-0008/">python的pep8 style guide</a>， 代码风格的目的是为了一致性！摘自 <a href="https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds">https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds</a></p>\n<blockquote>\n<p>A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is most important. But most importantly: know when to be inconsistent – sometimes the style guide just doesn’t apply. When in doubt, use your best judgement. Look at other examples and decide what looks best. And don’t hesitate to ask!</p>\n</blockquote>\n<h1 id="常用模式"><a href="#%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%BC%8F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>常用模式</h1>\n<h2 id="withdrawal-from-contracts"><a href="#withdrawal-from-contracts" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Withdrawal from Contracts</h2>\n<p>之前说过transfer可能失败， 因此如果要退钱给用户， 让他们自己withdraw， 否则有可能让整个contract“卡死”。</p>\n<h2 id="restricting-access"><a href="#restricting-access" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Restricting Access</h2>\n<p>chain上的东西是公开透明任何人都可以看得， 因此没办法隐藏。 只能限制别的合约读取你的合约state，默认就是这样， 除非你显示地指定public。 结合<strong>function modifiers</strong>可以让代码可读性更高， 比如：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">modifier <span class="token function">onlyBy</span><span class="token punctuation">(</span>address _account<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token function">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> _account<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// Do not forget the "_;"! It will</span>\n        <span class="token comment">// be replaced by the actual function</span>\n        <span class="token comment">// body when the modifier is used.</span>\n        _<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="state-machine"><a href="#state-machine" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>State Machine</h2>\n<p>contract很多时候是一个State Machine， 就是说contract的状态会根据不同的条件变化（包括时间变化）。 有些函数可能只能在特定的状态下执行， 同样， 结合<strong>function modifiers</strong>可以让代码可读性更高， 比如：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">    <span class="token keyword">enum</span> Stages <span class="token punctuation">{</span>\n        AcceptingBlindedBids<span class="token punctuation">,</span>\n        RevealBids<span class="token punctuation">,</span>\n        AnotherStage<span class="token punctuation">,</span>\n        AreWeDoneYet<span class="token punctuation">,</span>\n        Finished\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// This is the current stage.</span>\n    Stages <span class="token keyword">public</span> stage <span class="token operator">=</span> Stages<span class="token punctuation">.</span>AcceptingBlindedBids<span class="token punctuation">;</span>\n\n    uint <span class="token keyword">public</span> creationTime <span class="token operator">=</span> now<span class="token punctuation">;</span>\n\n    modifier <span class="token function">atStage</span><span class="token punctuation">(</span>Stages _stage<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">require</span><span class="token punctuation">(</span>stage <span class="token operator">==</span> _stage<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        _<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n        <span class="token keyword">function</span> <span class="token function">nextStage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> internal <span class="token punctuation">{</span>\n        stage <span class="token operator">=</span> <span class="token function">Stages</span><span class="token punctuation">(</span><span class="token function">uint</span><span class="token punctuation">(</span>stage<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Perform timed transitions. Be sure to mention</span>\n    <span class="token comment">// this modifier first, otherwise the guards</span>\n    <span class="token comment">// will not take the new stage into account.</span>\n    modifier <span class="token function">timedTransitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>stage <span class="token operator">==</span> Stages<span class="token punctuation">.</span>AcceptingBlindedBids <span class="token operator">&amp;&amp;</span>\n                    now <span class="token operator">>=</span> creationTime <span class="token operator">+</span> <span class="token number">10</span> days<span class="token punctuation">)</span>\n            <span class="token function">nextStage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>stage <span class="token operator">==</span> Stages<span class="token punctuation">.</span>RevealBids <span class="token operator">&amp;&amp;</span>\n                now <span class="token operator">>=</span> creationTime <span class="token operator">+</span> <span class="token number">12</span> days<span class="token punctuation">)</span>\n            <span class="token function">nextStage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// The other stages transition by transaction</span>\n        _<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>注意</strong>， Solidity v0.4.0之前有个问题： <strong>Modifier May be Skipped</strong>。 因为modifier只是简单的代码替换而不是函数调用， 如果那部分代码里面return了， 后面的代码可能不执行。v0.4.0之后没这个问题。</p>\n<h1 id="list-of-known-bugs"><a href="#list-of-known-bugs" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>List of Known Bugs</h1>\n<p>列出了一些Solidity compiler已知bugs。</p>\n<p>在考虑一份contract的时候， 简单地说可以这样看： 如果不是用contract创建时候的最新发布版本编译器编译的， 就值得怀疑！ 有可能有bug， 有可能是contract作者故意想利用某个bug呢！！！</p>\n<h1 id="faq"><a href="#faq" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FAQ</h1>\n<p>一些常见的问题， 最初由<a href="https://github.com/fivedogit">fivedogit</a>整理， 有些代码可以参考<a href="https://github.com/fivedogit/solidity-baby-steps">solidity-baby-steps</a>。</p>\n<h1 id="参考资料"><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>参考资料</h1>\n<ul>\n<li><a href="https://solidity.readthedocs.io">https://solidity.readthedocs.io</a></li>\n</ul>',
timeToRead:10,excerpt:"Solidity学习笔记。 Solidity It was influenced by C++, Python and JavaScript and is designed to target the Ethereum Virtual Machine (EVM…",fields:{slug:"/blockchain-ethereum-3/"},frontmatter:{title:"区块链系列七：Solidity学习笔记",date:"2018-04-11",category:"Blockchain",tags:["Ethereum","以太坊","Solidity"]}}},{node:{html:'<p><a href="/blockchain-ethereum-0">区块链系列四：Hello Ethereum!</a>介绍了Ethereum的一些基础知识， 本文我们来用Ethereum发一个币玩玩。</p>\n<!-- more -->\n<h1 id="安装客户端和钱包"><a href="#%E5%AE%89%E8%A3%85%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E9%92%B1%E5%8C%85" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装客户端和钱包</h1>\n<p>按之前介绍安装客户端， 我们用Go语言版本的<a href="https://github.com/ethereum/go-ethereum/">Geth</a>。</p>\n<p>下载安装<a href="https://github.com/ethereum/mist/releases">Mist或Ethereum Wallet</a>，Mist其实包含了钱包功能以及Remix IDE， 功能很强大的。</p>\n<h1 id="启动测试网络"><a href="#%E5%90%AF%E5%8A%A8%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>启动测试网络</h1>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth --identity <span class="token string">"MyEther"</span> --rpc --rpccorsdomain <span class="token string">"*"</span> --datadir ~/.ethereum_private --nodiscover --networkid 1999 --ipcpath ~/Library/Ethereum/geth.ipc</code></pre>\n      </div>\n<p>注意， 如果我们用<code class="language-text">--datadir</code>指定了自定义的存储位置， <code class="language-text">geth.ipc</code>会存储在此目录下。 而Mist自带一个geth客户端， 默认会去连localhost的默认客户端， 如果连不到则会启动自己的geth， 尝试连接mainnet。 所以为了让Mist连接我们的private network， 需要用<code class="language-text">--ipcpath</code>将<code class="language-text">geth.ipc</code>指定到默认位置。这样Mist就会连接到我们的客户端启动的private network了。</p>\n<h1 id="最小可行token：-mvtminimum-viable-token"><a href="#%E6%9C%80%E5%B0%8F%E5%8F%AF%E8%A1%8Ctoken%EF%BC%9A-mvtminimum-viable-token" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>最小可行Token： MVT(Minimum Viable Token)</h1>\n<p>Show me the code!</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.20</span><span class="token punctuation">;</span> <span class="token comment">// 指定编译器版本</span>\n\ncontract MyToken <span class="token punctuation">{</span>\n    <span class="token comment">// 记录每个address的账户余额</span>\n    <span class="token function">mapping</span> <span class="token punctuation">(</span>address <span class="token operator">=></span> uint256<span class="token punctuation">)</span> <span class="token keyword">public</span> balanceOf<span class="token punctuation">;</span>\n\n    <span class="token comment">// 构造函数， 指定contract创建者的初始余额</span>\n    <span class="token keyword">function</span> <span class="token function">MyToken</span><span class="token punctuation">(</span>\n        uint256 initialSupply\n        <span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> initialSupply<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 转账</span>\n    <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span>address _to<span class="token punctuation">,</span> uint256 _value<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        <span class="token function">require</span><span class="token punctuation">(</span>balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">>=</span> _value<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 账户余额是否足够</span>\n        <span class="token function">require</span><span class="token punctuation">(</span>balanceOf<span class="token punctuation">[</span>_to<span class="token punctuation">]</span> <span class="token operator">+</span> _value <span class="token operator">>=</span> balanceOf<span class="token punctuation">[</span>_to<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否会溢出</span>\n        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-=</span> _value<span class="token punctuation">;</span>\n        balanceOf<span class="token punctuation">[</span>_to<span class="token punctuation">]</span> <span class="token operator">+=</span> _value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h1 id="理解contract"><a href="#%E7%90%86%E8%A7%A3contract" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>理解contract</h1>\n<p>现在我们来从零开始逐渐构建一份完整的contract，并添加一些高级功能。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">    pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.20</span><span class="token punctuation">;</span> <span class="token comment">// 指定编译器版本</span>\n\n    contract Chips <span class="token punctuation">{</span>\n        <span class="token function">mapping</span> <span class="token punctuation">(</span>address <span class="token operator">=></span> uint256<span class="token punctuation">)</span> <span class="token keyword">public</span> balanceOf<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p><code class="language-text">pragma</code>指定编译器版本。 contract类似于class， Chips是contract的名称（也就是我们token的名称）。balanceOf是Chips的一个字段， 类型为<code class="language-text">mapping (address =&gt; uint256)</code>。 mapping是一种数据类型， 类似于Hashmap， 这里拿来存每个地址都多少token。 public表示所有人都可以访问。 </p>\n<p>我们可以如下图操作， 打开Mist，将代码copy到Mist中的编辑器中即可：\n<img src="/blogimgs/blockchain/deploy-contract.png" alt="部署contract">\n<img src="/blogimgs/blockchain/copy-solidity.png" alt="复制solidity代码"></p>\n<p>PS， 从上图中我们可以看出Mist其实里面包含的是一个网页， 直接在浏览器里访问网页url也可以：<a href="https://wallet.ethereum.org/">https://wallet.ethereum.org/</a> 。</p>\n<p>是可以部署了， 但是没啥用， 因为balanceOf里每个地址都是0。 我们来给自己分配的token：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">Chips</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">21000000</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Chips是构造函数， 名称需要与contract名称一致， 只会在contract被部署的时候执行一次。<code class="language-text">msg.sender</code>是部署合约的人。 分配多少你可以随便写， 21000000是致敬BTC， 当然也可以用参数传递进去：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">Chips</span><span class="token punctuation">(</span>uint256 initialSupply<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> initialSupply<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>现在所有的token都在自己手里， 没啥价值， 我们要分点给其他人啊， 于是需要转账功能：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span>address _to<span class="token punctuation">,</span> uint256 _value<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-=</span> _value<span class="token punctuation">;</span>\n        balanceOf<span class="token punctuation">[</span>_to<span class="token punctuation">]</span> <span class="token operator">+=</span> _value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>代码简单直接， 就是从发送者(msg.sender)转给to。 但是这里显然有问题， 万一发送者余额不足呢， 这种情况我们应该终止交易。 要提前终止代码执行有两种方法： return和throw。 return花费更少的gas， 但是之前修改的状态会被保留； 而throw会回滚所有的修改， 但是会花费掉所有gas。所以我们加一下判断：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span>address _to<span class="token punctuation">,</span> uint256 _value<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 检查账户token够不够， 以及是否会溢出</span>\n        <span class="token function">require</span><span class="token punctuation">(</span>balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">>=</span> _value <span class="token operator">&amp;&amp;</span> balanceOf<span class="token punctuation">[</span>_to<span class="token punctuation">]</span> <span class="token operator">+</span> _value <span class="token operator">>=</span> balanceOf<span class="token punctuation">[</span>_to<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-=</span> _value<span class="token punctuation">;</span>\n        balanceOf<span class="token punctuation">[</span>_to<span class="token punctuation">]</span> <span class="token operator">+=</span> _value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="contract信息"><a href="#contract%E4%BF%A1%E6%81%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>contract信息</h2>\n<p>现在我们来添加一些关于contract的信息， 在contract中添加几个字段：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">string <span class="token keyword">public</span> name<span class="token punctuation">;</span>\nstring <span class="token keyword">public</span> symbol<span class="token punctuation">;</span>\nuint8 <span class="token keyword">public</span> decimals<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>然后修改构造函数：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">Chips</span><span class="token punctuation">(</span>uint256 initialSupply<span class="token punctuation">,</span> string tokenName<span class="token punctuation">,</span> string tokenSymbol<span class="token punctuation">,</span> uint8 decimalUnits<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> initialSupply<span class="token punctuation">;</span>              <span class="token comment">// 初始token数量</span>\n        name <span class="token operator">=</span> tokenName<span class="token punctuation">;</span>                                   <span class="token comment">// token显示名称</span>\n        symbol <span class="token operator">=</span> tokenSymbol<span class="token punctuation">;</span>                               <span class="token comment">// token显示符号</span>\n        decimals <span class="token operator">=</span> decimalUnits<span class="token punctuation">;</span>                            <span class="token comment">// 小数位数</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>这里需要注意的是decimals，它的含义是1个token可以拆分成多少个最小基本单位。 比如1ether = 10 ** 18 wei， 所以Ethereum里decimals是18； 而如果是美刀， 则1美刀=100美分， 所以decimals是2。 这个地方没理解好后面会有坑，我们稍后介绍。</p>\n<h2 id="events"><a href="#events" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Events</h2>\n<p>我们想监听contract的某些状态， 比如当contract发生修改时，我们想获得通知。只需要写一个空函数（首字母大写）即可：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">    event <span class="token function">Transfer</span><span class="token punctuation">(</span>address indexed <span class="token keyword">from</span><span class="token punctuation">,</span> address indexed to<span class="token punctuation">,</span> uint256 value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>然后我们可以在<code class="language-text">transfer</code>函数中调用：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">        emit <span class="token function">Transfer</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> _to<span class="token punctuation">,</span> _value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>这样钱包会收到通知。</p>\n<h2 id="deploy"><a href="#deploy" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Deploy</h2>\n<p>我们来用Mist把前面代码部署到Ethereum网络吧！</p>\n<p>选“合约” -》 “部署新合约”， 然后把solidity代码复制到编辑器里， 在“选择欲部署的合约”里选择Chips， 然后填上初始参数，如下图：\n<img src="/blogimgs/blockchain/deploy-contract2.png" alt="部署contract"></p>\n<p>注意，这里我们初始给了10000， 但是decimal units为2， 其实表示的是100“块”token， 最小单位是0.01“块”token。</p>\n<p>滚动到最下面， 设置一个合适的gas， 然后点击“部署”， 在弹出框中输入密码，点确定。 然后在<code class="language-text">geth console</code>里开启挖矿， <code class="language-text">miner.start(1)</code>， 过一会就会在主界面看到确认信息。\n<img src="/blogimgs/blockchain/confirmations.png" alt="确认"></p>\n<p>点击<code class="language-text">[Main account](Etherbase)</code>进入账号页面， 会看到自己拥有全部的<code class="language-text">FirstChips</code>： 100, 00$$。\n<img src="/blogimgs/blockchain/mainaccount.png" alt="main account"></p>\n<p>点击<code class="language-text">FirstChips（管理页面）</code>进入合约页面， 可以查看合约的信息。\n<img src="/blogimgs/blockchain/firstchips.png" alt="FirstChips"></p>\n<p>现在我们可以转点token给朋友了。 点击发送， 配置好地址和数量， 选好token类型， 拖到最下面点击发送即可。\n<img src="/blogimgs/blockchain/send-ok.png" alt="send-ok">\n注意这里有个小坑， 数量这里输入10， 是指的token（相当于“块”）， 而我们之前设置decimal units是2， 所以是1000“分”。第一次的时候没注意， 在构造函数填的只是100（相当于只有1块），结果这边转10块的时候， 总是报错。\n<img src="/blogimgs/blockchain/transfer-error.png" alt="transfer-error"></p>\n<p>输入密码， 继续挖一会矿， 会发现main account里面只有90, 00$$了， 然后在另一个账号里多了10,00$$。 如果另一个账号是在其他客户端上（比如转给其他朋友）， 则他们是看不到新的token的。 需要在FirstChips的合约页面， 点击复制地址， 将地址发给朋友， 然后他们在合约页面，点查看代币， 然后把地址复制进去即可。\n<img src="/blogimgs/blockchain/watch-token0.png" alt="watch-token0">\n<img src="/blogimgs/blockchain/watch-token.png" alt="watch-token"></p>\n<p>当然，你也可以调用contract的transfer函数来转账，注意这里的单位是“分”！\n<img src="/blogimgs/blockchain/transfer2.png" alt="transfer2"></p>\n<p>就这样我们很快就发了一个币， 当然只是运行在私有网络上， 要想部署到main net， 需要花费ethereum， 目前还没必要。</p>\n<p>目前只有转账功能， 接下来我们打算设计一些复杂功能， 比如自动跟ether交易啊， POW机制啊， 账户冻结啊， 通过oraclize访问外部资源等， 敬请期待！</p>\n<h1 id="参考资料"><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>参考资料</h1>\n<ul>\n<li><a href="https://www.ethereum.org/token">https://www.ethereum.org/token</a></li>\n<li><a href="http://www.ethdocs.org">http://www.ethdocs.org</a></li>\n<li><a href="https://github.com/ethereum/go-ethereum/wiki/">https://github.com/ethereum/go-ethereum/wiki/</a></li>\n<li><a href="https://solidity.readthedocs.io">https://solidity.readthedocs.io</a></li>\n<li><a href="http://web3js.readthedocs.io/en/1.0/index.html">http://web3js.readthedocs.io/en/1.0/index.html</a> </li>\n</ul>',timeToRead:4,excerpt:"区块链系列四：Hello Ethereum! 介绍了Ethereum的一些基础知识， 本文我们来用Ethereum发一个币玩玩。 安装客户端和钱包 按之前介绍安装客户端， 我们用Go语言版本的 Geth 。 下载安装 Mist或Ethereum Wallet ，Mist…",fields:{slug:"/blockchain-ethereum-2/"},frontmatter:{title:"区块链系列六：设计自己的cryptocurrency",date:"2018-04-07",category:"Blockchain",tags:["Ethereum","以太坊"]}}},{node:{html:'<p>Ethereum的一些笔记。</p>\n<!-- more -->\n<h1 id="账号管理"><a href="#%E8%B4%A6%E5%8F%B7%E7%AE%A1%E7%90%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>账号管理</h1>\n<p>externally owned accounts (EOAs) and contract accounts</p>\n<h1 id="contracts-and-transactions"><a href="#contracts-and-transactions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Contracts and Transactions</h1>\n<p>This execution needs to be completely deterministic, its only context is the position of the block on the blockchain and all data available. </p>\n<h2 id="gas"><a href="#gas" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Gas</h2>\n<p>Clearly Ethereum is not about optimising efficiency of computation. Its parallel processing is redundantly parallel.</p>\n<p>The fact that contract executions are redundantly replicated across nodes, naturally makes them expensive, which generally creates an incentive not to use the blockchain for computation that can be done offchain.</p>\n<h2 id="estimating-transaction-costs"><a href="#estimating-transaction-costs" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Estimating transaction costs</h2>\n<p><code class="language-text">Total cost = gasUsed * gasPrice</code></p>\n<p>Contracts generally serve four purposes:</p>\n<ul>\n<li>Maintain a data store</li>\n<li>“forwarding contract”</li>\n<li>Manage an ongoing contract or relationship between multiple users.</li>\n<li>serving as a software library.</li>\n</ul>\n<h1 id="dapps"><a href="#dapps" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dapps</h1>\n<p>Remember that because of the redundant nature of computation on the Ethereum network, the gas costs of execution will always be higher than private execution offchain. This incentivizes dapp developers to restrict the amount of code they execute and amount of data they store on the blockchain.</p>\n<ul>\n<li>Dapp directories</li>\n<li>Dapp browsers</li>\n<li>IDE / frameworks</li>\n<li>console</li>\n<li>Whisper</li>\n<li>Swarm</li>\n<li>RANDAO</li>\n<li>…</li>\n<li>EVM</li>\n</ul>\n<h1 id="开发工具"><a href="#%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>开发工具</h1>\n<ul>\n<li><a href="https://solidity.readthedocs.io/">Solidity</a></li>\n<li><a href="https://github.com/ethereum/web3.js/">Web3.js</a></li>\n<li><a href="https://github.com/trufflesuite/truffle">Truffle</a></li>\n<li><a href="https://github.com/OpenZeppelin/zeppelin-solidity">OpenZeppelin</a></li>\n<li><a href="https://remix.readthedocs.io/en/latest/">Remix IDE</a></li>\n<li><a href="https://github.com/juanfranblanco/vscode-solidity">VSCode solidity</a></li>\n<li><a href="http://www.oraclize.it/">Oraclize</a></li>\n<li><a href="https://tlsnotary.org/pagesigner.html">PageSigner</a></li>\n</ul>\n<h1 id="其他"><a href="#%E5%85%B6%E4%BB%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>其他</h1>\n<ul>\n<li><a href="https://ipfs.io/">IPFS</a></li>\n<li><a href="https://github.com/paritytech/parity">Parity</a></li>\n<li><a href="https://github.com/jpmorganchase/quorum">Quorum</a></li>\n</ul>',timeToRead:2,excerpt:"Ethereum的一些笔记。 账号管理 externally owned accounts (EOAs) and contract accounts Contracts and Transactions This execution needs to be completely…",fields:{slug:"/blockchain-ethereum-1/"},frontmatter:{title:"区块链系列五：Ethereum学习笔记",date:"2018-04-06",category:"Blockchain",tags:["BTC","密码学","crytography"]}}},{node:{html:'<p>本文介绍以太坊开发的基础知识。</p>\n<!-- more -->\n<h1 id="为啥不讲比特币呢"><a href="#%E4%B8%BA%E5%95%A5%E4%B8%8D%E8%AE%B2%E6%AF%94%E7%89%B9%E5%B8%81%E5%91%A2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>为啥不讲比特币呢</h1>\n<p>很少有基于比特币做开发的， 如果大家有兴趣可以看下面几个资料：</p>\n<ul>\n<li><a href="https://github.com/bitcoinbook/bitcoinbook">Mastering Bitcoin 2nd Edition</a></li>\n<li><a href="http://bitcoinbook.cs.princeton.edu/">Bitcoin and Cryptocurrency Technologies</a> <a href="https://www.coursera.org/learn/cryptocurrency/home/welcome">Coursera上课程</a> <a href="https://piazza.com/princeton/spring2015/btctech/home">课程资料</a></li>\n<li><a href="https://bitcoin.org/en/">Bitcoin官网</a></li>\n</ul>\n<p>只需要看上面三个资料来源即可， 不用看太多资料。</p>\n<h1 id="ethereum基础概念介绍"><a href="#ethereum%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Ethereum基础概念介绍</h1>\n<h2 id="p2p网络"><a href="#p2p%E7%BD%91%E7%BB%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>P2P网络</h2>\n<p>区块链底层是一个P2P网络，全球有很多电脑节点连在这个网络上， 没有中心节点， 每个节点互相通信， 各自保留一份完整的账本。</p>\n<h2 id="客户端"><a href="#%E5%AE%A2%E6%88%B7%E7%AB%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>客户端</h2>\n<p>就是P2P网络中的一个节点， 包含有一些功能以支持整个P2P网络的运行。 比如转账， 记录账本， 挖矿等， 还有一个完整的虚拟机EVM， 可以在上面执行智能合约。</p>\n<p>官方支持三种语言的客户端， 分别是：</p>\n<ul>\n<li>Go语言版本的<a href="https://github.com/ethereum/go-ethereum/">Geth</a></li>\n<li>C++语言版本<a href="https://github.com/ethereum/cpp-ethereum">Eth</a></li>\n<li>python语言版本的<a href="https://github.com/ethereum/pyethapp">pyethapp</a></li>\n</ul>\n<p>另外社区还开发了各种语言版本的客户端， 可以看<a href="http://www.ethdocs.org/en/latest/ethereum-clients/index.html">Ethereum Clients</a>。</p>\n<h2 id="rpc"><a href="#rpc" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RPC</h2>\n<p>客户端通过<a href="https://github.com/ethereum/wiki/wiki/JSON-RPC">JSON RPC</a>暴露了一些API给用户使用， 比如生成账户、查看自己账户余额、部署智能合约等。 用户可以用curl或者postman工具调用RPC来实现功能， 但是一般还是通过一些SDK去做RPC调用，用的较多的有<a href="https://github.com/ethereum/web3.js/">web3.js</a>，其他语言版本的可以参考<a href="http://www.ethdocs.org/en/latest/connecting-to-clients/index.html">Connecting to Ethereum Clients</a>。</p>\n<p>RPC、客户端、以太坊网络三者的关系如下：用户通过RPC调用客户端功能， 客户端通过EVM执行智能合约以及跟整个以太坊P2P网络连接。</p>\n<h2 id="账户"><a href="#%E8%B4%A6%E6%88%B7" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>账户</h2>\n<p>Ethereum有两种类型的账户， 一种叫External owned account，可以简单理解为人控制的账户， 里面有“币”ether， 需要提供secret key，即可转账等。  一定要保护好自己的密钥， 不要让别人知道了（相当于把银行卡密码告诉了别人）否则钱就没了（被别人取走了）； 也不要自己给搞丢了， 因为没有“找回密码”的功能， 记得经常备份， 也可以拿纸记下来存放在保险柜里， 但是小心别被火烧了哈(谁都不能用这笔钱了)。。。   本质上而言账号就是一个公钥-私钥对， 可以通过之前提到的各种客户端生成任意数量的EOA， 具体可以看<a href="http://www.ethdocs.org/en/latest/account-management.html">Account Management</a>。</p>\n<p>另一种叫Contract account， 其实是存储在blockchain上的一些代码和数据， 可以类比为面向对象语言里面的一个对象， 可以被EOA调用修改其中的状态。 代码执行需要花费一定数量的Gas。</p>\n<h2 id="gas"><a href="#gas" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Gas</h2>\n<p>为了避免以太坊网络被滥用或者攻击， 在EVM中执行的代码(contract)需要执行一定的费用，这就是gas了。 gas对应现实生活中的燃油费， 是驱动整个加密经济体系运转的动力。 gas涉及到三个概念：</p>\n<ul>\n<li>gasUsed， 每一条EVM指令都对应一定数量的gas， gasUsed表示整个contract执行完需要的gas总和</li>\n<li>gasPrice， 调用contract的用户愿意支付的单价</li>\n</ul>\n<p>执行一个contract的总花费 = gasUsed * gasPrice。</p>\n<p>想想自己一不小心写出个死循环把自己几个亿的ether给用光了是什么感觉！ 所以我们一般会设置<strong>gasLimit</strong>，即最大花费。 如果花费超过了gasLimit则contract执行过的操作会回滚，然后停止执行。 如果花费没有达到gasLimit， 则剩下的会原路退回。 客户端可以帮你估计一个contract大概的花费， 便于合理设置gasLimit。 问大家个问题， 如果花费超过了gasLimit会回滚contract操作， 那么还会扣掉gas么？为什么？</p>\n<p>更多资料可以看<a href="http://ethdocs.org/en/latest/contracts-and-transactions/account-types-gas-and-transactions.html">Account Types, Gas, and Transactions</a>。</p>\n<h2 id="智能合约"><a href="#%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>智能合约</h2>\n<p>前面多次提到contract， 到底是啥呢？ 说白了，就是一段代码以及相关的一个状态， 智能表示能自动执行。 比如你跟小明打赌， 说明天下不下雨，如果下雨你输10块给他。 结果第二天真的下雨了， 然后你赖账了。。。。为了避免赖账， 我们可以建一份智能合约， 里面一开始存储的状态是“你有10块钱， 小明有10块钱”，以及一段代码“如果明天下雨， 你的10块钱归小明， 反之亦然”。 然后第二天下雨了， 合约就自动执行，然后状态变成了“你有0块钱， 小明有20块钱”。</p>\n<h2 id="evm"><a href="#evm" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>EVM</h2>\n<p>以太坊的虚拟机， 执行智能合约， 类似于JVM。 EVM是一个隔离的沙盒， 里面不能访问网络、文件系统等。EVM支持的功能是图灵完备的。 注意图灵完备不代表能做任何事情， 比如不能访问网络等。</p>\n<h2 id="solidity"><a href="#solidity" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Solidity</h2>\n<p>EVM上执行的智能合约是底层的二进制， 但是我们开发要用高级语言呢。 <a href="https://solidity.readthedocs.io">Solidity</a>就是开发智能合约的一门高级语言， 类似于javascript， 通过solidity的编译器编译成二进制。</p>\n<h1 id="hello-ethereum"><a href="#hello-ethereum" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hello Ethereum!</h1>\n<h2 id="安装客户端"><a href="#%E5%AE%89%E8%A3%85%E5%AE%A2%E6%88%B7%E7%AB%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装客户端</h2>\n<p>这里我们选择安装<a href="https://geth.ethereum.org/">geth</a>， 最简单的方式是<a href="https://geth.ethereum.org/downloads/">下载压缩包</a>， 直接解压即可。 安装其他客户端可以参考<a href="https://www.ethereum.org/cli">GETH &#x26; ETH</a>。 为了在任何路径都能执行geth， 可以将其加入系统PATH中。</p>\n<p>安装好之后执行如下命令启动geth：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">geth</code></pre>\n      </div>\n<p>geth提供了一个console，整合了web3.js，我们可以在里面直接写javascript代码进行操作， 比如生成账户、转账等， 通过如下命令进入console:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">geth console</code></pre>\n      </div>\n<p>另外也可以单独执行<code class="language-text">geth</code>把客户端启动起来， 然后在新的终端里面执行<code class="language-text">geth attach</code>打开一个新的console。进入之后执行:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">eth.accounts</code></pre>\n      </div>\n<p>会发现返回的是空数组<code class="language-text">[]</code>， 我们用下面命令生成一个新账号：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> personal.newAccount<span class="token punctuation">(</span><span class="token punctuation">)</span>\nPassphrase:\nRepeat passphrase:\n<span class="token string">"0xecbc12eaef5fa1300cb9aad0a17bd2e40bde2a61"</span></code></pre>\n      </div>\n<h2 id="运行测试网络testnetwork"><a href="#%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9Ctestnetwork" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>运行测试网络TestNetwork</h2>\n<p>直接用<code class="language-text">geth</code>启动客户端， geth进去的是主网络（main network），也就是说任何操作都会真实进入以太坊P2P网络，比如转账、部署智能合约等。当然，我们账户里面没钱， 所以也没法转账和部署智能合约。 为了便于测试，我们可以建立一个私有测试网络。</p>\n<p>区块链第一块叫创世块(Genesis block)，建立私有测试链需要提供genesis block的配置，简单如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"nonce"</span><span class="token operator">:</span> <span class="token string">"0x0000000000000042"</span><span class="token punctuation">,</span>\n  <span class="token property">"timestamp"</span><span class="token operator">:</span> <span class="token string">"0x0"</span><span class="token punctuation">,</span>\n  <span class="token property">"parentHash"</span><span class="token operator">:</span>\n    <span class="token string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>\n  <span class="token property">"extraData"</span><span class="token operator">:</span> <span class="token string">"0x"</span><span class="token punctuation">,</span>\n  <span class="token property">"gasLimit"</span><span class="token operator">:</span> <span class="token string">"0x8000000"</span><span class="token punctuation">,</span>\n  <span class="token property">"difficulty"</span><span class="token operator">:</span> <span class="token string">"0x400"</span><span class="token punctuation">,</span>\n  <span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"mixhash"</span><span class="token operator">:</span>\n    <span class="token string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>\n  <span class="token property">"coinbase"</span><span class="token operator">:</span> <span class="token string">"0x3333333333333333333333333333333333333333"</span><span class="token punctuation">,</span>\n  <span class="token property">"alloc"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>保存为<code class="language-text">myGenesis.json</code>，然后执行下面命令：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth --identity <span class="token string">"MyEther"</span> --rpc --datadir ~/.ethereum_private --nodiscover --networkid 1999 init ./myGenesis.json\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:33:36<span class="token punctuation">]</span> Maximum peer count                       ETH<span class="token operator">=</span>25 LES<span class="token operator">=</span>0 total<span class="token operator">=</span>25\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:33:36<span class="token punctuation">]</span> Allocated cache and <span class="token function">file</span> handles         database<span class="token operator">=</span>/Users/magicly/.ethereum_private/geth/chaindata cache<span class="token operator">=</span>16 handles<span class="token operator">=</span>16\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:33:36<span class="token punctuation">]</span> Writing custom genesis block\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:33:36<span class="token punctuation">]</span> Persisted trie from memory database      nodes<span class="token operator">=</span>0 size<span class="token operator">=</span>0.00B time<span class="token operator">=</span>10.416µs gcnodes<span class="token operator">=</span>0 gcsize<span class="token operator">=</span>0.00B gctime<span class="token operator">=</span>0s livenodes<span class="token operator">=</span>1 livesize<span class="token operator">=</span>0.00B\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:33:36<span class="token punctuation">]</span> Successfully wrote genesis state         database<span class="token operator">=</span>chaindata                                       hash<span class="token operator">=</span>6231b0…a0300b\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:33:36<span class="token punctuation">]</span> Allocated cache and <span class="token function">file</span> handles         database<span class="token operator">=</span>/Users/magicly/.ethereum_private/geth/lightchaindata cache<span class="token operator">=</span>16 handles<span class="token operator">=</span>16\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:33:36<span class="token punctuation">]</span> Writing custom genesis block\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:33:36<span class="token punctuation">]</span> Persisted trie from memory database      nodes<span class="token operator">=</span>0 size<span class="token operator">=</span>0.00B time<span class="token operator">=</span>3.22µs   gcnodes<span class="token operator">=</span>0 gcsize<span class="token operator">=</span>0.00B gctime<span class="token operator">=</span>0s livenodes<span class="token operator">=</span>1 livesize<span class="token operator">=</span>0.00B\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:33:36<span class="token punctuation">]</span> Successfully wrote genesis state         database<span class="token operator">=</span>lightchaindata                                       hash<span class="token operator">=</span>6231b0…a0300b</code></pre>\n      </div>\n<p>其中<code class="language-text">--identity</code>是网络名称。 <code class="language-text">--rpc</code>表示开启RPC功能。 <code class="language-text">--datadir</code>是这个私有网络的数据存储目录，避免覆盖主网数据。 <code class="language-text">--nodiscover</code>表示不要被其他节点发现。 <code class="language-text">--networid</code>是网络id， 随便设置一个数即可， 默认为1（即主网）。</p>\n<blockquote>\n<p> —networkid value                     Network identifier (integer, 1=Frontier, 2=Morden (disused), 3=Ropsten, 4=Rinkeby) (default: 1)</p>\n</blockquote>\n<p>更多命令行选项可以执行<code class="language-text">geth --help</code>查看， 或者访问<a href="https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options">go ethereum Command Line Options</a>。</p>\n<p>然后执行下面命令，启动geth：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">geth --identity <span class="token string">"MyEther"</span> --rpc --datadir ~/.ethereum_private --nodiscover --networkid 1999</code></pre>\n      </div>\n<p>连接客户端：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth attach\nFatal: Unable to attach to remote geth: dial unix /Users/magicly/Library/Ethereum/geth.ipc: connect: no such <span class="token function">file</span> or directory\n➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth attach ipc:/Users/magicly/.ethereum_private/geth.ipc\nWelcome to the Geth JavaScript console<span class="token operator">!</span>\n\ninstance: Geth/MyEther/v1.8.2-stable-b8b9f7f4/darwin-amd64/go1.9.4\n modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0\n\n<span class="token operator">></span> eth.accounts\n<span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token operator">></span> personal.newAccount<span class="token punctuation">(</span><span class="token punctuation">)</span>\nPassphrase:\nRepeat passphrase:\n<span class="token string">"0xa736f13951da77c39e035c4c1b1970478a758340"</span></code></pre>\n      </div>\n<p>注意， 这里直接用<code class="language-text">geth attach</code>连不上客户端， 因为不是用的默认配置。并且如果是用http方式attach的， 虽然连上了， 但是创建新账号的时候会报错：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth attach http://localhost:8545\nWelcome to the Geth JavaScript console<span class="token operator">!</span>\n\ninstance: Geth/MyEther/v1.8.2-stable-b8b9f7f4/darwin-amd64/go1.9.4\ncoinbase: 0xa736f13951da77c39e035c4c1b1970478a758340\nat block: 0 <span class="token punctuation">(</span>Thu, 01 Jan 1970 08:00:00 CST<span class="token punctuation">)</span>\n modules: eth:1.0 net:1.0 rpc:1.0 web3:1.0\n\n<span class="token operator">></span> personal.newAccount<span class="token punctuation">(</span><span class="token punctuation">)</span>\nPassphrase:\nRepeat passphrase:\nError: The method personal_newAccount does not exist/is not available\n<span class="token operator">></span></code></pre>\n      </div>\n<p>只有通过IPC连接上的客户端， 才认为足够安全， 才允许创建账号。 当然也可指直接用<code class="language-text">geth</code>创建账号：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth --datadir ~/.ethereum_private account new\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:55:47<span class="token punctuation">]</span> Maximum peer count                       ETH<span class="token operator">=</span>25 LES<span class="token operator">=</span>0 total<span class="token operator">=</span>25\nYour new account is locked with a password. Please give a password. Do not forget this password.\nPassphrase:\nRepeat passphrase:\nAddress: <span class="token punctuation">{</span>53707514492dda75eccb8ff621759af7f0f3c0f0<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>注意，必须加上<code class="language-text">--datadir</code>，否则创建的账号在默认目录， 不能访问。然后在<code class="language-text">console</code>里看， 确实有两个账号了：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> eth.accounts\n<span class="token punctuation">[</span><span class="token string">"0xa736f13951da77c39e035c4c1b1970478a758340"</span>, <span class="token string">"0x53707514492dda75eccb8ff621759af7f0f3c0f0"</span><span class="token punctuation">]</span></code></pre>\n      </div>\n<p>刚创建的账号， 肯定都没钱嘛：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> pa <span class="token operator">=</span> eth.accounts<span class="token punctuation">[</span>0<span class="token punctuation">]</span>\n<span class="token string">"0xa736f13951da77c39e035c4c1b1970478a758340"</span>\n<span class="token operator">></span> eth.getBalance<span class="token punctuation">(</span>pa<span class="token punctuation">)</span>\n0</code></pre>\n      </div>\n<p>我们可以通过挖矿给自己搞点ether，因为我们在<code class="language-text">myGenesis.json</code>里面配置的<code class="language-text">&quot;difficulty&quot;: &quot;0x400&quot;,</code>， 所以很容易就挖到了。<a href="http://www.unminer.com/eth">http://www.unminer.com/eth</a> 显示主网真实挖矿难度目前是1600T左右，是我们的<code class="language-text">1600, 000, 000, 000</code>倍！所以知道为什么要搭建测试环境了吧。用下面命令开始挖矿：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> miner.setEtherbase<span class="token punctuation">(</span>pa<span class="token punctuation">)</span>\n<span class="token boolean">true</span>\n<span class="token operator">></span> miner.start<span class="token punctuation">(</span><span class="token punctuation">)</span>\nnull\n<span class="token operator">></span> miner.stop<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token boolean">true</span>\n<span class="token operator">></span> eth.getBalance<span class="token punctuation">(</span>pa<span class="token punctuation">)</span>\n55000000000000000000\n<span class="token operator">></span> web3.fromWei<span class="token punctuation">(</span>eth.getBalance<span class="token punctuation">(</span>pa<span class="token punctuation">)</span>, <span class="token string">\'ether\'</span><span class="token punctuation">)</span>\n55</code></pre>\n      </div>\n<p>start之后几秒钟， CPU飚到800%， 风扇狂转， 赶紧关掉， 然后发现， 已经挖到55个以太坊了， 按照目前市值400刀一个， 我们挖到了价值22000刀的以太坊， 可惜都是测试环境的， 哈哈哈。</p>\n<h2 id="编写智能合约solidity"><a href="#%E7%BC%96%E5%86%99%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6solidity" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>编写智能合约Solidity</h2>\n<p>solidity是编写以太坊智能合约的高级语言， 首先需要安装编译器， 参考<a href="http://solidity.readthedocs.io/en/develop/installing-solidity.html">Installing the Solidity Compiler</a>。当然， 最简单的当然是直接用online版本<a href="https://remix.ethereum.org">Remix</a>。</p>\n<p>复制下列代码到remix编辑器中：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.0</span><span class="token punctuation">;</span>\ncontract mortal <span class="token punctuation">{</span>\n    <span class="token comment">/* Define variable owner of the type address */</span>\n    address owner<span class="token punctuation">;</span>\n\n    <span class="token comment">/* This function is executed at initialization and sets the owner of the contract */</span>\n    <span class="token keyword">function</span> <span class="token function">mortal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span> owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token comment">/* Function to recover the funds on the contract */</span>\n    <span class="token keyword">function</span> <span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">)</span> <span class="token function">selfdestruct</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\ncontract greeter is mortal <span class="token punctuation">{</span>\n    <span class="token comment">/* Define variable greeting of the type string */</span>\n    string greeting<span class="token punctuation">;</span>\n    \n    <span class="token comment">/* This runs when the contract is executed */</span>\n    <span class="token keyword">function</span> <span class="token function">greeter</span><span class="token punctuation">(</span>string _greeting<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        greeting <span class="token operator">=</span> _greeting<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/* Main function */</span>\n    <span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> constant <span class="token function">returns</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> greeting<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>然后执行编译， 之后可以查看编译结果， 如下图：\n<img src="/blogimgs/blockchain/remix-greeter.png" alt="Remix"></p>\n<h2 id="部署智能合约web3js"><a href="#%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6web3js" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>部署智能合约Web3.js</h2>\n<p>将前面图中代码<code class="language-text">web3deploy</code>部分代码复制下来， 给变量<code class="language-text">__greeting</code>一个值， 直接复制到geth的console中， 或者保存到文件比如<code class="language-text">web3.js</code>，然后在console中执行<code class="language-text">loadScript(&#39;./web3.js&#39;)</code>即可。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// web3.js</span>\n<span class="token keyword">var</span> _greeting <span class="token operator">=</span> <span class="token string">\'Hello Ethereum!\'</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> greeterContract <span class="token operator">=</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span><span class="token function">contract</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"constant"</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"inputs"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"kill"</span><span class="token punctuation">,</span><span class="token string">"outputs"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"payable"</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"stateMutability"</span><span class="token punctuation">:</span><span class="token string">"nonpayable"</span><span class="token punctuation">,</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"function"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"constant"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"inputs"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"greet"</span><span class="token punctuation">,</span><span class="token string">"outputs"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"string"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"payable"</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"stateMutability"</span><span class="token punctuation">:</span><span class="token string">"view"</span><span class="token punctuation">,</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"function"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"inputs"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"_greeting"</span><span class="token punctuation">,</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"string"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"payable"</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"stateMutability"</span><span class="token punctuation">:</span><span class="token string">"nonpayable"</span><span class="token punctuation">,</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"constructor"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> greeter <span class="token operator">=</span> greeterContract<span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>\n   _greeting<span class="token punctuation">,</span>\n   <span class="token punctuation">{</span>\n     <span class="token keyword">from</span><span class="token punctuation">:</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>accounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \n     data<span class="token punctuation">:</span> <span class="token string">\'0x6060604052341561000f57600080fd5b6040516103a93803806103a983398101604052808051820191905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060019080519060200190610081929190610088565b505061012d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100c957805160ff19168380011785556100f7565b828001600101855582156100f7579182015b828111156100f65782518255916020019190600101906100db565b5b5090506101049190610108565b5090565b61012a91905b8082111561012657600081600090555060010161010e565b5090565b90565b61026d8061013c6000396000f30060606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610066575b600080fd5b341561005c57600080fd5b6100646100f4565b005b341561007157600080fd5b610079610185565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b957808201518184015260208101905061009e565b50505050905090810190601f1680156100e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610183576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b61018d61022d565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102235780601f106101f857610100808354040283529160200191610223565b820191906000526020600020905b81548152906001019060200180831161020657829003601f168201915b5050505050905090565b6020604051908101604052806000815250905600a165627a7a723058206787dd51eae8103738c5112e2d5c1636972e888ace270061dd0cf0e3f802f4cc0029\'</span><span class="token punctuation">,</span> \n     gas<span class="token punctuation">:</span> <span class="token string">\'4700000\'</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> contract<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> contract<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> contract<span class="token punctuation">.</span>address <span class="token operator">!==</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Contract mined! address: \'</span> <span class="token operator">+</span> contract<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token string">\' transactionHash: \'</span> <span class="token operator">+</span> contract<span class="token punctuation">.</span>transactionHash<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>其中data就是<code class="language-text">greeter</code>编译之后的二进制。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> loadScript<span class="token punctuation">(</span><span class="token string">\'./web3.js\'</span><span class="token punctuation">)</span>\nError: authentication needed: password or unlock undefined\n<span class="token boolean">true</span></code></pre>\n      </div>\n<p>额， 我们需要先解锁我们的主账户</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> personal.unlockAccount<span class="token punctuation">(</span>web3.eth.accounts<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">)</span>\nUnlock account 0xa736f13951da77c39e035c4c1b1970478a758340\nPassphrase:\n<span class="token boolean">true</span></code></pre>\n      </div>\n<p>然后再加载加载脚本即可:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> loadScript<span class="token punctuation">(</span><span class="token string">\'./web3.js\'</span><span class="token punctuation">)</span>\nnull <span class="token punctuation">[</span>object Object<span class="token punctuation">]</span>\n<span class="token boolean">true</span></code></pre>\n      </div>\n<p>这时候合约并没有入链的:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> greeter.address\nundefined</code></pre>\n      </div>\n<p>想想也对， 这会儿没有miner干活呢， 那我们来自己挖一下吧：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> miner.start<span class="token punctuation">(</span><span class="token punctuation">)</span>\nnull\n<span class="token operator">></span> null <span class="token punctuation">[</span>object Object<span class="token punctuation">]</span>\nContract mined<span class="token operator">!</span> address: 0xf0406e7bcb75326a9b9fa47a05d3ce2126d95148 transactionHash: 0x01e70a7b0927cf70e9f0a2fcb904e6fff57009ae3d18350941fc4dc254283caf\n<span class="token operator">></span> miner.stop<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token boolean">true</span>\n<span class="token operator">></span> web3.fromWei<span class="token punctuation">(</span>eth.getBalance<span class="token punctuation">(</span>pa<span class="token punctuation">)</span>, <span class="token string">\'ether\'</span><span class="token punctuation">)</span>\n85\n<span class="token operator">></span> greeter.address\n<span class="token string">"0xf0406e7bcb75326a9b9fa47a05d3ce2126d95148"</span></code></pre>\n      </div>\n<p>可以看到， contract已经计入blockchain了， 另外，我们又挖到了30个eth哈哈哈。我们可以通过contract的address找到代码，当然，是二进制：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> eth.getCode<span class="token punctuation">(</span>greeter.address<span class="token punctuation">)</span>\n<span class="token string">"0x60606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610066575b600080fd5b341561005c57600080fd5b6100646100f4565b005b341561007157600080fd5b610079610185565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b957808201518184015260208101905061009e565b50505050905090810190601f1680156100e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610183576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b61018d61022d565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102235780601f106101f857610100808354040283529160200191610223565b820191906000526020600020905b81548152906001019060200180831161020657829003601f168201915b5050505050905090565b6020604051908101604052806000815250905600a165627a7a723058206787dd51eae8103738c5112e2d5c1636972e888ace270061dd0cf0e3f802f4cc0029"</span></code></pre>\n      </div>\n<p>然后我们就可以执行合约了：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> greeter.greet<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token string">"Hello Ethereum!"</span></code></pre>\n      </div>\n<p>别人也能访问我们deploy的智能合约， 只要他们知道代码的地址以及接口类型(ABI (Application Binary Interface)))。 ABI是干嘛的呢， 基本就是告诉你前面的二进制代码要怎么调用， 因为估计没人能看了那串二进制就知道它是干嘛的吧。我们新开一个console：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth attach http://localhost:8545\nWelcome to the Geth JavaScript console<span class="token operator">!</span>\n\ninstance: Geth/MyEther/v1.8.2-stable-b8b9f7f4/darwin-amd64/go1.9.4\ncoinbase: 0xa736f13951da77c39e035c4c1b1970478a758340\nat block: 17 <span class="token punctuation">(</span>Tue, 03 Apr 2018 16:30:06 CST<span class="token punctuation">)</span>\n modules: eth:1.0 net:1.0 rpc:1.0 web3:1.0\n\n<span class="token operator">></span> var greeter2 <span class="token operator">=</span> eth.contract<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"constant"</span>:true,<span class="token string">"inputs"</span>:<span class="token punctuation">[</span><span class="token punctuation">]</span>,<span class="token string">"name"</span><span class="token keyword">:</span><span class="token string">"greet"</span>,<span class="token string">"outputs"</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token keyword">:</span><span class="token string">""</span>,<span class="token string">"type"</span><span class="token keyword">:</span><span class="token string">"string"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>,<span class="token string">"payable"</span>:false,<span class="token string">"stateMutability"</span><span class="token keyword">:</span><span class="token string">"view"</span>,<span class="token string">"type"</span><span class="token keyword">:</span><span class="token string">"function"</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"inputs"</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token keyword">:</span><span class="token string">"_greeting"</span>,<span class="token string">"type"</span><span class="token keyword">:</span><span class="token string">"string"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>,<span class="token string">"payable"</span>:false,<span class="token string">"stateMutability"</span><span class="token keyword">:</span><span class="token string">"nonpayable"</span>,<span class="token string">"type"</span><span class="token keyword">:</span><span class="token string">"constructor"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>.at<span class="token punctuation">(</span><span class="token string">\'0xf0406e7bcb75326a9b9fa47a05d3ce2126d95148\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nundefined\n<span class="token operator">></span> greeter2.address\n<span class="token string">"0xf0406e7bcb75326a9b9fa47a05d3ce2126d95148"</span>\n<span class="token operator">></span> greeter2.greet<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token string">"Hello Ethereum!"</span>\n<span class="token operator">></span></code></pre>\n      </div>\n<p>像上面这样获取到contract的代码然后直接调用<code class="language-text">greeter2.greet()</code>，其实是在本地的EVM上调用， 不会修改blockchain上的状态的（因此也不用花费ether）。如果需要修改blockchain上的状态，需要通过<code class="language-text">sendTransaction</code>调用。 我们先在一个没有ehter的账户上调用一下试试：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> pa <span class="token operator">=</span> eth.accounts<span class="token punctuation">[</span>1<span class="token punctuation">]</span>\n<span class="token string">"0x53707514492dda75eccb8ff621759af7f0f3c0f0"</span>\n<span class="token operator">></span> greeter2.greet.sendTransaction<span class="token punctuation">(</span><span class="token punctuation">{</span>from: pa<span class="token punctuation">}</span><span class="token punctuation">)</span>\nError: insufficient funds <span class="token keyword">for</span> gas * price + value\n    at web3.js:3143:20\n    at web3.js:6347:15\n    at web3.js:5081:36\n    at web3.js:4137:16\n    at <span class="token operator">&lt;</span>anonymous<span class="token operator">></span>:1:1\n\n<span class="token operator">></span> eth.getBalance<span class="token punctuation">(</span>pa<span class="token punctuation">)</span>\n0</code></pre>\n      </div>\n<p>看来，没钱真的不行啊。那我们在之前有ether的账户（之前有85ether，不过由于每次都交易都需要挖矿入链， 又多产生了一些，最后另外新开了一个账号来mine，才让pa0这个账号没有新增ether）上试一下呢：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> personal.unlockAccount<span class="token punctuation">(</span>pa0<span class="token punctuation">)</span>\nUnlock account 0xa736f13951da77c39e035c4c1b1970478a758340\nPassphrase:\n<span class="token boolean">true</span>\n<span class="token operator">></span> eth.getBalance<span class="token punctuation">(</span>pa0<span class="token punctuation">)</span>\n109991138204000000000\n<span class="token operator">></span> greeter.greet.sendTransaction<span class="token punctuation">(</span><span class="token punctuation">{</span>from: pa0<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token string">"0x5e4090be8ad2fcf6eeae05174f0e9eac3134a1857928d278f8ef4dd13ef2fded"</span>\n<span class="token operator">></span> eth.getBalance<span class="token punctuation">(</span>pa0<span class="token punctuation">)</span>\n109991138204000000000\n<span class="token operator">></span> txpool.status\n<span class="token punctuation">{</span>\n  pending: 1,\n  queued: 0\n<span class="token punctuation">}</span>\n<span class="token operator">></span> txpool.status\n<span class="token punctuation">{</span>\n  pending: 0,\n  queued: 0\n<span class="token punctuation">}</span>\n<span class="token operator">></span> eth.getBalance<span class="token punctuation">(</span>pa0<span class="token punctuation">)</span>\n109990737038000000000\n<span class="token operator">></span> greeter.greet.sendTransaction<span class="token punctuation">(</span><span class="token punctuation">{</span>from: pa0<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token string">"0xec58cbf73512fd5aad75b9e60ebbe5a90f3bf36ceec63f704a7bbdf2a23ca4a1"</span>\n<span class="token operator">></span> txpool.status\n<span class="token punctuation">{</span>\n  pending: 1,\n  queued: 0\n<span class="token punctuation">}</span>\n<span class="token operator">></span> eth.getBalance<span class="token punctuation">(</span>pa0<span class="token punctuation">)</span>\n109990335872000000000\n<span class="token operator">></span></code></pre>\n      </div>\n<p>可以看出来，每次都需要消费<code class="language-text">109991138204000000000 - 109990737038000000000 == 109990737038000000000 - 109990335872000000000 == 401165999996928</code>个wei，wei是以太坊的最小单位，<code class="language-text">1 ether == 10 ** 18 wei</code>， 所以执行一次<code class="language-text">greet</code>交易，需要花费<code class="language-text">401165999996928 / 10 ** 18 == ~=0.0004</code>个ether，现在差不多1快rmb了。 我们可以看到，字符串确实存到blockchain上了：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> eth.getStorageAt<span class="token punctuation">(</span>greeter.address<span class="token punctuation">)</span>\n<span class="token string">"0x000000000000000000000000a736f13951da77c39e035c4c1b1970478a758340"</span></code></pre>\n      </div>\n<p>如果我们最后不需要这个合约了， 我们可以把他删除， 避免占用blockchain的空间：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> personal.unlockAccount<span class="token punctuation">(</span>eth.accounts<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">)</span>\nUnlock account 0xa736f13951da77c39e035c4c1b1970478a758340\nPassphrase:\n<span class="token boolean">true</span>\n<span class="token operator">></span> greeter.kill.sendTransaction<span class="token punctuation">(</span><span class="token punctuation">{</span>from: eth.accounts<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token operator">></span> eth.getCode<span class="token punctuation">(</span>greeter.address<span class="token punctuation">)</span>\n<span class="token string">"0x60606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610066575b600080fd5b341561005c57600080fd5b6100646100f4565b005b341561007157600080fd5b610079610185565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b957808201518184015260208101905061009e565b50505050905090810190601f1680156100e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610183576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b61018d61022d565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102235780601f106101f857610100808354040283529160200191610223565b820191906000526020600020905b81548152906001019060200180831161020657829003601f168201915b5050505050905090565b6020604051908101604052806000815250905600a165627a7a723058206787dd51eae8103738c5112e2d5c1636972e888ace270061dd0cf0e3f802f4cc0029"</span>\n<span class="token operator">></span> txpool.status\n<span class="token punctuation">{</span>\n  pending: 1,\n  queued: 0\n<span class="token punctuation">}</span>\n<span class="token operator">></span> txpool.status\n<span class="token punctuation">{</span>\n  pending: 0,\n  queued: 0\n<span class="token punctuation">}</span>\n<span class="token operator">></span> eth.getCode<span class="token punctuation">(</span>greeter.address<span class="token punctuation">)</span>\n<span class="token string">"0x"</span>\n<span class="token operator">></span> eth.getBalance<span class="token punctuation">(</span>pa0<span class="token punctuation">)</span>\n109990141400000000000</code></pre>\n      </div>\n<p>注意<code class="language-text">kill</code>之后要mine才可以修改blockchain上的状态。也可以看出，kill也是需要花费gas的，当然，远比执行contract要低， 相当于网络进行了补贴， 否则估计就没人愿意删除合约了，这样会导致网络膨胀。 注意， 只有contract的owner才可以kill掉此contract， 其他人也能调用kill方法， 但是是没办法删掉contract的， 而且还扣了gas（貌似还比较高）。</p>\n<p>ok，我们已经实现了一个Ethereum版本的<code class="language-text">Hello World</code>， 后面我们就来考虑自己发一个币吧。</p>\n<h1 id="参考资料"><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>参考资料</h1>\n<ul>\n<li><a href="https://www.ethereum.org">https://www.ethereum.org</a></li>\n<li><a href="http://www.ethdocs.org">http://www.ethdocs.org</a></li>\n<li><a href="https://github.com/ethereum/go-ethereum/wiki/">https://github.com/ethereum/go-ethereum/wiki/</a></li>\n<li><a href="https://solidity.readthedocs.io">https://solidity.readthedocs.io</a></li>\n<li><a href="http://web3js.readthedocs.io/en/1.0/index.html">http://web3js.readthedocs.io/en/1.0/index.html</a> </li>\n</ul>',
timeToRead:14,excerpt:"本文介绍以太坊开发的基础知识。 为啥不讲比特币呢 很少有基于比特币做开发的， 如果大家有兴趣可以看下面几个资料： Mastering Bitcoin 2nd Edition Bitcoin and Cryptocurrency Technologies   Coursera…",fields:{slug:"/blockchain-ethereum-0/"},frontmatter:{title:"区块链系列四：Hello Ethereum!",date:"2018-04-03",category:"Blockchain",tags:["Ethereum","以太坊"]}}},{node:{html:'<p><a href="https://magicly.me/blockchain-crytography-hash/">区块链系列二：区块链涉及到的密码学知识之Hash</a>中我们介绍了Hash散列函数的一些特性和应用，本章我们继续来介绍一些常用的密码学知识。</p>\n<!-- more -->\n<h1 id="历史上的密码"><a href="#%E5%8E%86%E5%8F%B2%E4%B8%8A%E7%9A%84%E5%AF%86%E7%A0%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>历史上的密码</h1>\n<h2 id="凯撒密码"><a href="#%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>凯撒密码</h2>\n<p>据说是以前凯撒大帝用过的密码， 方法很简单， 将字母表依次往后移动几个位置。具体移动的数量n就是密钥了。比如移动两个，则：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token constant">A</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token constant">C</span>\n<span class="token constant">B</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token constant">D</span>\n<span class="token operator">...</span>\n<span class="token constant">Y</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token constant">A</span>\n<span class="token constant">Z</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token constant">B</span></code></pre>\n      </div>\n<p>用这种方法加密<code class="language-text">hello</code>， 则密文是<code class="language-text">jgnnq</code>。 拿到密文后再倒着将每个字母往前移动n个位置就解密了。大家可以试着解密<code class="language-text">dmqemejckp</code>, 密钥是2。</p>\n<p>凯撒密码有个问题就是很容易破解， 因为总共只有26种可能（移动27个位置， 跟移动1个位置是一样的），很容易就暴力破解了。只需要把0-25都试一下， 看看“解密”出来的文字哪个是有具体含义的即可。比如大家可以破解一下”thnpj”。</p>\n<h2 id="简单替换"><a href="#%E7%AE%80%E5%8D%95%E6%9B%BF%E6%8D%A2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>简单替换</h2>\n<p>凯撒密码简单很容易破解， 原因是因为密钥空间（密钥的可选择范围）太小了， 因为当我们把A映射到B的时候， 其他字母的映射关系就全部决定好了。后来出现了一种变种， 可以任意指定字母之间的映射关系，如下图是其中一种：\n<img src="/blogimgs/blockchain/simple-replace.png" alt="简单替换密码替换表"></p>\n<p>我们可以知道这种加密方式的密码空间是<code class="language-text">26! = 4.0329146112660565e+26</code>，这么巨大的密钥空间， 如果暴力破解的话是不实际的。 我们假设每秒可以遍历100亿个密钥， 则总共需要<code class="language-text">26! / (10 ** 10 * 3600 * 24 * 365) == 12.7亿年</code>！！！</p>\n<p>但是这种加密方式有一个问题， 就是同一个明文字符总是加密成同一个密文字符，比如把A替换成D，则所有的A都会替换成D。 于是出现了一种叫做频率分析的破解方法。 大概原理是：正常的语言中， 每个字符出现的频率是不一样的， 可以统计一下明文中的字符出现次数， 假设最高频的是A，再统计一下密文中最高频的字符，假设是D，则很有可能密文中的D是对应明文A。 一层层分析，就能实际破解这种加密方式了。</p>\n<h2 id="enigma"><a href="#enigma" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Enigma</h2>\n<p>这是二战中德国使用的一种密码机， 当时号称没人能破解的， 刚开始的时候给了德国巨大战争优势。 后来我们的图灵大神， 终于还是把它给破解了， 对二战的胜利做出了巨大的贡献。 大家可以看<a href="https://movie.douban.com/subject/10463953/">模仿游戏 The Imitation Game (2014)</a>这部电影， 里面就讲的这段历史。</p>\n<p>PS，话说当时破解确实遇到了很大问题， 图灵也是一筹莫展， 后来好像是发现每次密文开头都是一样的（写的是元首万岁？记不太清了），然后找到方法把密钥空间大大缩小了， 然后才造出了破解机器， 为后来计算机的出现打下了坚实的基础。 这个故事告诉我们， 再完美的密码系统因为有了不完美的人的参与， 也就变得不完美了。</p>\n<h1 id="对称加密"><a href="#%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>对称加密</h1>\n<p>对称加密就是加密密钥和解密密钥是一样的， 比如我们前面说的几种加密方式都是对称密钥。</p>\n<p>因为所有的明文信息我们都能编码成二进制比特， 也就可以等价的转化成一个数字， 所以我们后面讲解的时候， 明文全部用一个数表示即可， 大家应该知道，这个数可以是对应一段文本， 也可以是一部电影。</p>\n<p>最简单的对称加密就是在明文上加一个数。 比如明文是1， 我选择一个密钥37， 然后加起来发送给你， 你得到38， 然后用我们提前约定好的37去减一下， 就解密出来得到1了。 而对于那些窃听者， 因为他们不知道密钥是37， 所以拿到加密后的38， 也没办法知道明文是1。</p>\n<p>对称加密主要有DES和AES。 目前DES已经不安全了，不建议使用。 1997年NIST（美国标准技术研究所）公开募集AES（Advanced Encryption Standard）算法， 全世界很多密码学家投递了很多算法， 最后经过各种严格的筛选， 最后于2000年10月2日， Rijndael算法获胜，被选为NIST的AES标准。NIST当时公开选拔AES的时候设定了条件：被选为AES的密码算法必须无条件地免费提供给全世界使用。正是这样， 我们现在才能免费使用AES。</p>\n<p>说到这里很多人可能会说我自己也可以设计一个算法， 不要让别人知道就行了啊。 这种做法叫隐蔽式安全性(security by obscurity)，只是在一厢情愿地以为别人不能破解而已， 其实并没有经过真正的检验。 要知道像AES这样通过竞争来实现的标准， 都是发动了全世界的密码学家去设计、尝试破解，最后得到一个很多专家都觉得安全的算法。 自己实现“秘密算法”，就好比为了锁门， 不是去买一个品牌商家的锁， 而是自己系一根绳子把门拴起来一样。</p>\n<h1 id="非对称加密"><a href="#%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>非对称加密</h1>\n<p>上面说的对称加密有一个很大的弊端， 那就是加密和解密必须是用同一个密钥。 那么问题来了， 怎么把密钥安全地交给接收方呢？ 显然， 用对称加密方法是没办法通过线上传递密钥的。 办法就是发送者和接受者线下碰头， 当面商量好密钥。甚至以前打仗时候， 都是将密钥锁在保险箱里， 用战斗机护送的。显然， 这个成本有点高。</p>\n<p>后来密码学家们发明了非对称加密， 即加密密钥（也叫公钥， public key， 简写为pk）和解密密钥（也叫私钥， secret key， 简写为sk）不一样。 假设Alice要给Bob通信， 则通信过程变成了这样：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">Alice<span class="token punctuation">:</span> Bob我要给你说话， 你把公钥pk发给我。\nBob<span class="token punctuation">:</span> 好的， 这是我的公钥pk。\nAlice<span class="token punctuation">:</span> <span class="token function">这是我用公钥加密后的内容pk</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>。\nBob<span class="token punctuation">:</span> 我用sk解密看看， 哦， <span class="token function">sk</span><span class="token punctuation">(</span><span class="token function">pk</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>解密出来是x啊。 <span class="token function">这是我的回复sk</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>。\nAlice<span class="token punctuation">:</span> 我用pk解密看看， 哦， <span class="token function">pk</span><span class="token punctuation">(</span><span class="token function">sk</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>解密出来是y啊。\n<span class="token operator">...</span><span class="token operator">...</span></code></pre>\n      </div>\n<p>我们可以看到， 用公钥加密的内容pk(x)可以用私钥解密， 即<code class="language-text">sk(pk(x)) === x</code>；而用私钥加密的内容sk(y)可以用公钥解密， 即<code class="language-text">pk(sk(y)) === y</code>。</p>\n<p>广泛使用的非对称加密方法有RSA，用到了一些数论方面的数学原理， 有兴趣的可以自己看看相关文章：</p>\n<ul>\n<li><a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html">RSA算法原理（一）</a></li>\n<li><a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95">RSA加密演算法</a></li>\n</ul>\n<p>一般说来非对称加密算法比对称加密算法慢很多，可能有几百倍， 因此我们一般将对称加密算法和非对称加密算法联合起来一起使用。即用非对称加密算法先协商出对称加密的密钥， 然后用对称加密算法去传递信息。 因为密钥（可能就几百字节）相比信息本身（可能几百兆甚至更大）要小很多， 所以这种混合加密方式综合了两者优点。</p>\n<p>由于用sk加密的内容，能用pk解密， 因此非对称加密算法还可以用于数字签名。 所谓数字签名，类似于现实生活中的签名， 比如A答应了B一件事， 为了怕事后A返回， B可以要求A把答应的东西写到字上， 然后签个名， 这样A就不能抵赖了。 在线上的话， A答应了B一件事情x， 则可以要求A用他的私钥sk对x进行加密， 得到sk(x)然后和x一起发送出来。 因为公钥是可以公开的， 任何人都可以拿到， 因此大家都可以用公钥pk去验证A的签名， 即只需要<code class="language-text">pk(sk(x)) === x</code>既可以认为x这件事情是A说的。 因为没有人知道A的私钥sk， 所以不可能有其他人能编造出x和sk(x)，使得刚好<code class="language-text">pk(sk(x)) === x</code>的。 对应到比特币里， x这件事可能就是<code class="language-text">“将pk地址（比特币地址是公钥pk取两次hash）里的钱转10块到pk1地址”</code>， 然后附带上sk(x)， 则网络上其他节点会验证一下<code class="language-text">pk(sk(x)) === x</code>， 如果为真， 则说明x这条转账记录是这笔钱的主人说的， 否则就拒绝这笔交易。</p>\n<h1 id="认证"><a href="#%E8%AE%A4%E8%AF%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>认证</h1>\n<p>非对称加密解决了对称加密的密码配送难题， 但是依然不能解决中间人攻击。所谓中间人攻击，是指第三方攻击者对Alice伪装成Bob， 对Bob伪装成Alice， 如下图：\n<img src="/blogimgs/blockchain/middleman-attack.png" alt="中间人攻击"></p>\n<p>似乎又遇到了公钥配送的问题。解决方法是找一个可信的中间机构T， Bob将自己的公钥pkb发送给T， T用自己的私钥skt对B的公钥pkb进行签名skt(pkb)， 这样Alice收到B的公钥pkb，以及认证机构T的签名skt(pkb)，只需要用认证机构T的公钥pkt验证一下<code class="language-text">pkt(skt(pb)) === pkb</code>是否为真即可， 为真则说明“Bob”提供的公钥真的是Bob的公钥。这样的中间机构T我们一般叫做CA，即Certification Authority。这样我们就能安全地。。。。等等， 你刚刚好像说要用CA的公钥pkt去验证签名和Bob的公钥啊， 那怎么知道pkt真的是T的公钥呢？ 额， 这个， 我们可以再找一个中间机构T2, 去认证T嘛。   那T2的公钥又怎么办呢？。。。。T， T2, T3。。。这样会形成一个CA层级结构， 但是最后我们总会到一个最顶层的CA（叫做Root CA）， 那Root CA的公钥我们要怎么认证呢？ 说得好！ Root CA的证书是自签名的， 并且它的公钥和证书是提前存储到电脑里的， 也就是说电脑出厂的时候就给你装了Root CA的证书和公钥， 然后用Root CA的公钥可以认证T3的公钥， 用T3的公钥可以认证T2的公钥， 用T2的用过可以认证T的公钥， 最后用T的公钥可以认证Bob的公钥。 这一整套CA结构叫做公钥基础设施(Public-Key Infrastructure， 简写PKI)。 你可能还会继续问， 我们怎么相信电脑厂家不会偷偷地换一个假的Root CA进去呢？额， 这个我只能说，我们也没别的办法。 事实上， 联想就这么干过， 有兴趣的可以搜superfish，或者看<a href="http://tech.sina.com.cn/z/superfish/">这里</a>。 </p>\n<p>当然，我们也是可以自己导入证书到系统里面去的。 比如我们想抓包分析一个APP的接口， 如果APP跟服务端是用的https连接， 我们哪怕抓到包看到的也是乱码， 这时候可以把抓包工具（比如charles）的证书导入到系统里面，则这个抓包工具就可以发动“中间人攻击”，破解抓到的包了。</p>\n<h1 id="参考资料"><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>参考资料</h1>\n<ul>\n<li><a href="https://book.douban.com/subject/26822106/">图解密码技术（第3版）</a></li>\n</ul>',timeToRead:3,excerpt:"区块链系列二：区块链涉及到的密码学知识之Hash 中我们介绍了Hash散列函数的一些特性和应用，本章我们继续来介绍一些常用的密码学知识。 历史上的密码 凯撒密码 据说是以前凯撒大帝用过的密码， 方法很简单， 将字母表依次往后移动几个位置。具体移动的数量n…",fields:{slug:"/blockchain-crytography-desrsa/"},frontmatter:{title:"区块链系列三：区块链涉及到的密码学知识之加密、签名与认证",date:"2018-03-31",category:"Blockchain",tags:["BTC","密码学","crytography"]}}},{node:{html:'<p>在区块链开发中涉及到很多密码学知识， 不懂得相关原理，可能很难理解设计思路更不要说阅读源码了。 我们就花一点时间来了解下区块链开发设计到的密码学知识， 本文简单介绍Hash函数的一些性质， 要想更深入了解请阅读相关专业文献。</p>\n<!-- more -->\n<h1 id="什么是hash函数"><a href="#%E4%BB%80%E4%B9%88%E6%98%AFhash%E5%87%BD%E6%95%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么是Hash函数</h1>\n<p>这里说的Hash函数不是哈希表这种数据结构， 而是一种密码学概念，具有如下一些性质：</p>\n<ul>\n<li>输入是任意长度，输出为固定长度（比如256bits）</li>\n<li>计算起来很高效</li>\n<li>输入改动一点点（哪怕只是一个bit），输出结果千差万别</li>\n<li>…</li>\n</ul>\n<p>常用的Hash函数有MD5， SHA1， SHA256等。 有很多在线工具可以计算Hash函数的值， 比如：<a href="http://tool.oschina.net/encrypt?type=2%EF%BC%8C">http://tool.oschina.net/encrypt?type=2，</a> 我们来看一下<code class="language-text">hello blockchain!</code>的几种Hash函数值：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">md5<span class="token punctuation">:</span> <span class="token number">4</span>b7cf9b1f0e3c92c3ca571a5ea4d3fda\nsha1<span class="token punctuation">:</span> <span class="token number">57</span>bf459d6c142f3427258089e386c43d106a72ab\nsha256<span class="token punctuation">:</span> <span class="token number">108</span>be1bede687534d56a8229d4deabccfd9ee83358b15e3e95286915b8a4f648</code></pre>\n      </div>\n<p>在mac下有相应的命令行可以计算这些Hash函数值，md5和shasum。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  Desktop <span class="token function">cat</span> helloblockchain.txt\nhello blockchain<span class="token operator">!</span>% // 这里的%不是文件内容，而是因为最后一行没有\\n导致命令行下显示的问题\n➜  Desktop md5 helloblockchain.txt\nMD5 <span class="token punctuation">(</span>helloblockchain.txt<span class="token punctuation">)</span> <span class="token operator">=</span> 4b7cf9b1f0e3c92c3ca571a5ea4d3fda\n➜  Desktop shasum helloblockchain.txt\n57bf459d6c142f3427258089e386c43d106a72ab  helloblockchain.txt\n➜  Desktop shasum -a 256 helloblockchain.txt\n108be1bede687534d56a8229d4deabccfd9ee83358b15e3e95286915b8a4f648  helloblockchain.txt</code></pre>\n      </div>\n<p>在linux下和windows命令可能略有不同， 大家自己查一下即可。 这里有个坑要注意，<a href="https://www.zhihu.com/question/22808787">linux以及mac下用vim编辑文件， 会在每一行后自动给你加上<code class="language-text">\\n</code></a>，即使只有一行！也就是说你输入的是<code class="language-text">hello blockchain!</code>， 用vim看上去也是只有一行， 但是其实存储的时候在最后多存储了一个<code class="language-text">\\n</code>， 而用vim你还看不出来。 后来用VSCode打开文件才发现多了一个换行， 我说怎么hash值完全不一样呢。 这也体现了hash函数的一大性质： 任意一点点改动， 最后hash值都差别很大！</p>\n<p>作为密码学概念， 我们希望Hash函数具有如下三个特征，我们才认为此Hash函数是密码学安全的：</p>\n<ol>\n<li>Collision Free</li>\n<li>Hiding</li>\n<li>Puzzle Friendly</li>\n</ol>\n<h1 id="collision-free"><a href="#collision-free" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Collision Free</h1>\n<p>这个性质说的是没有人能够找到两个不同的输入， 它们的hash输出是相同的， 即不能找到<code class="language-text">x != y</code>但是<code class="language-text">H(x) == H(y)</code>。</p>\n<p>注意， 我们这里说的是“没有人能够找到”，而不是说不存在！大家仔细想想就会知道， 冲突（Collision）肯定是存在的。 为啥呢？因为我们说了输出是固定长度的， 比如256bits，那么输出空间大小就只有<code class="language-text">Math.pow(2, 256)</code>种可能。而输入可以是任意长度，那输入空间远比输出空间要大，根据小时候学过的<a href="https://zh.wikipedia.org/wiki/%E9%B4%BF%E5%B7%A2%E5%8E%9F%E7%90%86">鸽巢原理</a>就知道至少有两个<code class="language-text">x != y</code>使得<code class="language-text">H(x) == H(y)</code>的。</p>\n<blockquote>\n<p>鸽巢原理：若有n个笼子和n+1只鸽子，所有的鸽子都被关在鸽笼里，那么至少有一个笼子有至少2只鸽子。</p>\n</blockquote>\n<p>对于输出是256bits的hash函数，不管Hash函数是什么，只要尝试<code class="language-text">Math.pow(2, 130)</code>个输入， 就有<code class="language-text">99.8%</code>的概率会找到冲突， 最差也就是找<code class="language-text">Math.pow(2, 256) + 1</code>次就肯定能找到冲突，平均是<code class="language-text">Math.pow(2, 128)</code>次。但是问题是，这个需要花太久太久的时间！多久呢？我在自己的Mac Pro上简单测试了一下， 大概每秒计算2000000次hash，则大概需要花<code class="language-text">Math.pow(2, 128) / (3600 * 24 * 365 * 2000000) ~= 5 * Math.pow(10, 24)</code>年，远比宇宙诞生的时间久。引用普林斯顿的课程<a href="http://bitcoinbook.cs.princeton.edu/">Bitcoin and Cryptocurrency Technologies</a>里的一段话：</p>\n<blockquote>\n<p>For another way of thinking about this, we can say that, if every computer ever made by humanity was computing since the beginning of the entire universe, up to now, the odds that they would have found a collision is still infinitesimally small. So small that it’s way less than the odds that the Earth will be destroyed by a giant meteor in the next two seconds.</p>\n</blockquote>\n<p>这段话的大概意思是说把全人类从古自今曾经造出来过的电脑都拿来从宇宙一开始就计算，那么到今天为止找到冲突的概率依然很小很小， 有多小呢？比接下来的两秒钟地球被一块大流星撞毁的概率还小， 而这件事。。。。。。。（2s过去）。。。。并没有发生。</p>\n<p>不过这段话应该是在2015年说的， 这两年发生了很多事情， 其中一件事情就是比特币大涨， 导致专门用于挖矿的矿机（ASIC）出现， 计算hash的速度大幅度提升。<a href="https://magicly.me/blockchain-btc-mining/">区块链系列一：现在挖比特币有多难</a>中我们提到，目前比特币矿机全网的算力大概是每秒<code class="language-text">23555072455973170000</code>次hash计算，我们来看看这么大的算力平均花多久能找到冲突呢。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">*</span> <span class="token number">23555072455973170000</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token operator">=</span> <span class="token number">4600</span>亿</code></pre>\n      </div>\n<p>宇宙年龄目前大概是130亿年， 也就是说如果这些矿机从宇宙诞生就开始计算hash， 则发现冲突的概率大概是<code class="language-text">130 / 4600 ~= 3%</code>。注意我们还只是说的是挖比特币的矿机，并没有如作者说的<code class="language-text">把全人类曾经造出来过的电脑都算上</code>, 换句话说仅仅只是挖比特币的矿机，就把一件概率曾经远小于接下来2s地球被流星击中而毁灭的事情的概率提高到了3%！！！想想就觉得可怕！！！</p>\n<p>这两年hash算力有这么大的提升， 完全是由于比特币大涨， 人们为了在挖矿中占据优势， 开发了大量ASIC。我们之前说一个蚂蚁矿机S9的算力是13.5Thash/s， 而我的mac pro大概是2Mhash/s， 也就是一台S9在计算hash方面，相当于<code class="language-text">13.5T / 2M ~= 6.7M</code>，670万台Mac Pro！！！</p>\n<p>那么有没有更快的方法找到冲突呢？答案是，对于有些hash函数，有。 对于其他的hash函数， 我们不知道！注意， 是不知道，而不是没有！没有任何hash函数被“证明”是Collision Free的。只是有些hash函数人们花了大量时间去找， 但是还没有找到，所以暂时认为是collision free的，而有些曾经认为是collision free的hash函数被找到有效构造冲突的方法了，比如MD5，因此在安全性要求较高的场景就建议不再使用MD5了。比特币里使用的是sha256。</p>\n<p>PS， 破解MD5的是时任山东大学教授的<a href="https://baike.baidu.com/item/%E7%8E%8B%E5%B0%8F%E4%BA%91/29050">王小云教授</a>。 另外，Google真正找到了一个SHA1的碰撞的实例，因此也被认为是不安全的了。 可以参看： <a href="https://www.leiphone.com/news/201711/CD1xUXxl8ByzS1nr.html">https://www.leiphone.com/news/201711/CD1xUXxl8ByzS1nr.html</a></p>\n<h2 id="应用案例：消息摘要message-digests"><a href="#%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%B6%88%E6%81%AF%E6%91%98%E8%A6%81message-digests" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>应用案例：消息摘要Message digests</h2>\n<p>那么hash函数的这条性质有什么用呢？Hash函数的输出， 可以作为信息摘要。 </p>\n<p>我们说“没有人能够”找到<code class="language-text">x != y</code>使得<code class="language-text">H(x) == H(y)</code>， 反过来也就是只要<code class="language-text">H(x) == H(y)</code>，我们就可以认为<code class="language-text">x == y</code>的。这样我们要比较两个文件是否一致， 不管这两个文件有多大， 我们只需要比较他们的hash输出即可，而hash输出只有256bits，比较非常快。 </p>\n<p>有个典型的应用是网盘的“秒传”功能， 用过网盘的都知道， 在上传某些大文件（比如某部电影）的时候， 可能几秒就传完了。一部几个G的电影， 几秒就传到网盘服务器上去了， 你们家网速真的有这么快么？！事实是， 网盘先在本地计算电影的hash值， 然后把输出的256bits发给服务器， 如果服务器上之前已经有某个文件的hash值等于现在的256bits，则认为网盘服务器上已经有这个文件了， 就不需要传了， 只需要在服务器后台加条记录链接过去就可以了。 所以我们会发现越是热门的电影等越是容易秒传。 而如果你自己拍的视频被“秒传”了， 那你就得想想是怎么回事儿了。</p>\n<p>文件摘要还有一个用处是验证下载的文件是否完整没有被篡改过。一般下载软件都建议大家去官网下载， 但是有时候官网下载速度比较慢（尤其是官网在国外的时候），这时候很多人会选择在其他论坛或者使用p2p软件（比如迅雷）下载， 但是这样其实是有安全问题的。 有可能你下载的软件已经被别人植入了病毒， 大家还记得之前的<a href="https://zh.wikipedia.org/zh-cn/XcodeGhost%E9%A3%8E%E6%B3%A2">Xcode Ghost风波</a>么？那么我们就可以通过从第三方下载软件， 下载完成之后， 计算软件的hash值， 然后比较这个hash值是否等于官网上的hash值（一般官网都会提供软件的好几种hash值），如果相同，我们就可以放心地使用此软件。这样，既提高了软件下载速度，也保证了安全性。</p>\n<h1 id="hiding"><a href="#hiding" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hiding</h1>\n<p>我们希望hash函数满足这样的性质：知道<code class="language-text">H(x)</code>，不可能推算出<code class="language-text">x</code>。</p>\n<p>不过上面这样描述不太准确， 因为如果x的取值范围有限， 比如只是0-9， 则我们可以对0-9求H(x)， 然后直接反查就可以得出x了。准确的描述应该如下：</p>\n<blockquote>\n<p>如果我们从一个满足high min-entropy的概率分布中选出一个秘密的值r， 则如果知道H(r || x)的情况下不能推算出x， 则我们说H函数满足Hiding性质。</p>\n</blockquote>\n<p>high min-entropy大概意思是从一个很大的空间中随机选择一个值，每个值的概率基本是一样的。比如我们从“所有256bits长的字符串”这个空间中等概率的选择一个字符串，则选到具体某个字符串的概率是<code class="language-text">1 / Math.pow(2, 256)</code>， 这是一个极小的数字。<code class="language-text">||</code>表示字符串拼接， 比如<code class="language-text">hello || blockchain! === hello blochain!</code>。</p>\n<p>这里拼接一个从很大空间中选出来的secret值r的目的就是为了让<code class="language-text">r || x</code>的取值范围变得很大， 目的跟密码加盐再做hash差不多。</p>\n<h2 id="应用案例：承诺commitments"><a href="#%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%89%BF%E8%AF%BAcommitments" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>应用案例：承诺Commitments</h2>\n<p>我们来做一个游戏， 我想一个0-9的数， 你来猜， 猜对算赢。如果我只是“想”一个数的话， 你永远赢不了，因为哪怕你猜对了，我也可以说我想的是另外一个数。如果我们是面对面的话， 可以这样， 我把数字写下来，放在信封里，把信封放在我们面前的桌子上， 你猜了数字之后， 我们打开信封，就能验证有没有猜对， 而我也不能抵赖或者偷偷修改之前写的数字。</p>\n<p>如果在线上要怎么玩呢？因为我们可以找一个满足Collision Free和Hiding性质的函数H， 我想一个数字x， 然后把H(x)发出来给大家看到， 因为我们说H具有Collision Free性质， 所以我不可能事后说我写的数字其实是x1， 因为我找不到满足<code class="language-text">x1 != x</code>并且<code class="language-text">H(x1) == H(x)</code>的数字，所以我不能抵赖。但是你是可以把0-9都用H计算一遍， 然后跟H(x)对比，就能知道我想的x是多少了。</p>\n<p>所以我还需要随机选择一个256bits的key， 然后把<code class="language-text">H(key || x)</code>发出来，因为<code class="language-text">key</code>的选择空间是<code class="language-text">Math.pow(2, 256)</code>，你不可能去遍历所有可能的key来暴力计算所有的<code class="language-text">H(key || x)</code>，因此就没办法知道<code class="language-text">key || x</code>，也就没办法知道<code class="language-text">x</code>了。同样，我还是不可能找到另一个不同的<code class="language-text">key1</code>，使得<code class="language-text">key1 != key</code>但是<code class="language-text">H(key1 || x) == H(key || x)</code>的。这样就保证了我既不能抵赖，你也不能推算出<code class="language-text">x</code>，对于你猜的数字y，只要事后我把<code class="language-text">key</code>发出来，计算<code class="language-text">H(key || x)</code>和<code class="language-text">H(key || y)</code>，如果两者相等， 则认为<code class="language-text">x == y</code>， 反之亦然。</p>\n<p>除了玩猜数字游戏这个，还有哪些使用场景呢？博彩、在线扑克等使用这个特性， 就能一定程度保证庄家不会作弊。最近在构思用区块链技术解决在线poker的一些问题， 有兴趣私聊。</p>\n<h1 id="puzzle-friendly"><a href="#puzzle-friendly" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Puzzle Friendly</h1>\n<p>对于n-bit的输出y，如果k是从一个high min-entropy的分布中选出来的，如果不可能在远小于<code class="language-text">Math.pow(2, n)</code>的时间中找到x使得<code class="language-text">H(k || x) == y</code>， 则我们说H具有Puzzle friendliness性质。</p>\n<p>这个性质是说， 要想找到x， 使得<code class="language-text">H(k || x) == y</code>， 没什么办法比随机乱猜更有效！</p>\n<h2 id="应用案例：搜索谜题search-puzzle"><a href="#%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%90%9C%E7%B4%A2%E8%B0%9C%E9%A2%98search-puzzle" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>应用案例：搜索谜题Search puzzle</h2>\n<p>搜索谜题包括几个要素：</p>\n<ul>\n<li>hash函数H</li>\n<li>puzzle-ID，需要是从high min-entropy分布中选出来的</li>\n<li>目标范围Y</li>\n</ul>\n<p>这个问题的解x需要满足如下性质：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token constant">H</span><span class="token punctuation">(</span>id <span class="token operator">||</span> x<span class="token punctuation">)</span> ∈ <span class="token constant">Y</span></code></pre>\n      </div>\n<p>假设hash函数H输出是n-bit，则输出空间大小为<code class="language-text">Math.pow(2, n)</code>。Y的大小决定了问题的求解难度。如果Y的大小等于<code class="language-text">Math.pow(2, n)</code>，则最容易，随便一个x都满足条件。如果Y的大小只有1， 则问题是最难的。Y范围越小，问题越难。</p>\n<p>如果H是puzzle-friendly的，则没有什么方法比随机取x去尝试更有效。 事实上， 比特币的挖矿机制就利用了这个性质。</p>\n<h1 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h1>\n<p>本文我们讲了密码学领域的hash函数， 以及需要满足几个特征来保证其安全性。 最后要强调的是， 目前没有哪个函数被“数学证明”是满足这三个特征的， 只是有些函数人们在实际中花了大量精力去“破解”而没有成功，因此我们暂时认为其是“安全”的。所以，安全是一个相对以及不断发展变化的问题，就好比以前几十年都认为是安全的MD5， 后来也被发现是不安全的了。那么目前认为还是安全的sha256， 到哪有一天会被发现有问题呢？让我们拭目以待。</p>\n<p>下一篇讲公钥加密机制。</p>\n<h1 id="参考资料"><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>参考资料</h1>\n<ul>\n<li><a href="http://bitcoinbook.cs.princeton.edu/">http://bitcoinbook.cs.princeton.edu/</a></li>\n</ul>',timeToRead:5,excerpt:"在区块链开发中涉及到很多密码学知识， 不懂得相关原理，可能很难理解设计思路更不要说阅读源码了。 我们就花一点时间来了解下区块链开发设计到的密码学知识， 本文简单介绍Hash函数的一些性质， 要想更深入了解请阅读相关专业文献。 什么是Hash函数 这里说的Hash…",fields:{slug:"/blockchain-crytography-hash/"},frontmatter:{title:"区块链系列二：区块链涉及到的密码学知识之Hash",date:"2018-03-24",category:"Blockchain",tags:["BTC","密码学","crytography","hash"]}}},{node:{html:'<p>我们知道Node.js里充满着大量的异步， 后来出现了Promise以及async/await来解决”callback hell”的问题。我们就来看看promise以及async/await如何简化JS并发代码的编写， 最后再给出一份实现相同功能的Go代码。</p>\n<!-- more -->\n<h1 id="问题"><a href="#%E9%97%AE%E9%A2%98" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>问题</h1>\n<p>代码开发中经常会做的一件事就是去请求一个api， 并可能进一步根据api返回结果去获取访问新的接口。 这里我们构造一个问题：获取<a href="https://cnodejs.org/">https://cnodejs.org/</a> 前10个主题的id、title、date、作者昵称以及第一个回复者的昵称。 cnodejs提供了api， <a href="https://cnodejs.org/api">https://cnodejs.org/api</a> 这里的前两个接口就能满足我们的要求。 首先用<a href="https://cnodejs.org/api/v1/topics">https://cnodejs.org/api/v1/topics</a> 接口获取到前10个topics， 然后取出每个topic的id去访问<code class="language-text">get /topic/:id 主题详情</code>接口， 里面可以获取到回复数据。</p>\n<h1 id="简单实现"><a href="#%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>简单实现</h1>\n<p>发起网络请求有很多方法， 我们这里采用<a href="https://github.com/axios/axios">axios</a>库， 有几个好处， 其中包括同时支持Node.js和Browser。</p>\n<p>我们直接用“最先进”的async/await来实现一个版本:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"axios"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getFirst10TopicsIncludeFirstReplyAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>\n    <span class="token string">"https://cnodejs.org/api/v1/topics?limit=10"</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> json <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> first10 <span class="token operator">=</span> json<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>topic <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      id<span class="token punctuation">:</span> topic<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n      title<span class="token punctuation">:</span> topic<span class="token punctuation">.</span>title<span class="token punctuation">,</span>\n      date<span class="token punctuation">:</span> topic<span class="token punctuation">.</span>create_at<span class="token punctuation">,</span>\n      author<span class="token punctuation">:</span> topic<span class="token punctuation">.</span>author<span class="token punctuation">.</span>loginname\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> topic <span class="token keyword">of</span> first10<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token string">`https://cnodejs.org/api/v1/topic/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>topic<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> json <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> firstReply <span class="token operator">=</span> json<span class="token punctuation">.</span>data<span class="token punctuation">.</span>replies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    topic<span class="token punctuation">.</span>firstReplyAuthor <span class="token operator">=</span> firstReply <span class="token operator">&amp;&amp;</span> firstReply<span class="token punctuation">.</span>author<span class="token punctuation">.</span>loginname<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> first10<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">getFirst10TopicsIncludeFirstReplyAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h1 id="并发"><a href="#%E5%B9%B6%E5%8F%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>并发</h1>\n<p>上述代码简单直接， 用了async/await， 异步代码看上去基本上是同步的， 很直观易懂。 先发起一个请求， 获取10个topics的信息， 然后针对每个topic发起一个请求， 去获取第一条回复数据，最后把数据拼凑在一起返回。 由于后面的请求需要第一个请求返回的id， 因此必须等到第一个请求回来才可以发送后面的请求， 这块没有任何问题。 但是后面的10个请求完全是独立的， 因此可以并发请求，这样能大大缩短时间。比如每个请求需要花费1s， 则上述代码总共需要花费<code class="language-text">1(第一个请求) + 10(后面10个请求) = 11s</code>， 而如果将第二步的请求完全并发则只需要<code class="language-text">1(第一个请求) + 1(后面10个请求同时请求) = 2s</code>！！！</p>\n<p>由于网络请求受网速影响很大不利于我们精确分析问题， 也避免大量的请求给Cnodejs服务造成影响， 我们在本地用<code class="language-text">setTimout</code>模拟网络请求花费的时间。</p>\n<p>上述代码在并发性上跟下面代码基本等价：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// 模拟一次api网络请求花费1s</span>\n<span class="token keyword">function</span> <span class="token function">mockAPI</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">get10Topics</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mockAPI</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> total<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mockAPI</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`total cost: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t2 <span class="token operator">-</span> t1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">get10Topics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>执行之后发现， 确实在11s左右：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  test-js git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ node p1.js\ntotal cost: 11037ms.\n<span class="token punctuation">[</span> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 <span class="token punctuation">]</span></code></pre>\n      </div>\n<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all">Promise.all</a>可以同时发起多个Promise，等到所有Promise都完成了之后返回一个数组， 包含每个Promise的结果。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// 模拟一次api网络请求花费1s</span>\n<span class="token keyword">function</span> <span class="token function">mockAPI</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">get10Topics2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mockAPI</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> total<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">mockAPI</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`total cost: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t2 <span class="token operator">-</span> t1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">get10Topics2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>时间正如我们说的， 缩短成了2s！</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  test-js git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ node p2.js\ntotal cost: 2005ms.\n<span class="token punctuation">[</span> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 <span class="token punctuation">]</span></code></pre>\n      </div>\n<h1 id="限流"><a href="#%E9%99%90%E6%B5%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>限流</h1>\n<p>上面第二种方法已经大大提高率效率， 而且请求数越多， 提高的效率越多。 前面的分析可以得出， 如果是获取前100个topics， 第一种串行的方法需要101s， 而第二种还是2s！！！</p>\n<p>仔细想想你会发现哪里不对， 那就是第二种方法“太并发”了！10个请求可能还好， 如果同时并发100个请求， 那对服务器就会造成一定的影响， 如果是1000个，10000个， 那问题就更大了， 甚至到了一定程度， 会超过操作系统允许打开的连接数， 对客户端本身也会有很大的影响。</p>\n<p>所以我们需要限制最大并发数，比如我们限制最大并发数为3， 则10个请求大概是3个3个一组， 总共会有4组（最后一组只有1个）， 总共时间是5s， 这也比11s提高了50%多。一种实现方式如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">get10Topics3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mockAPI</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token constant">MAX_CURRENCY</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> total<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token constant">MAX_CURRENCY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token constant">MAX_CURRENCY</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> total<span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">mockAPI</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`total cost: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t2 <span class="token operator">-</span> t1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">get10Topics3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>看一下结果：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  test-js git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ node p3.js\ntotal cost: 5012ms.\n<span class="token punctuation">[</span> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 <span class="token punctuation">]</span></code></pre>\n      </div>\n<p>还有什么问题么？</p>\n<h1 id="one-more-step"><a href="#one-more-step" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>One More Step</h1>\n<p>上面的实现方法， 既利用了并发， 又对并发做了一定限制保证不至于把系统资源耗尽，似乎是完美的。 但是如果每个请求所需要的时间不一样呢？<code class="language-text">get10Topics3</code>的实现方式是每三个一组， 等着三个都完成了， 再进行下一组请求。 那么如果三个任务中， 有一个花费的时间比较多， 另外两个任务完成了之后， 本来可以继续开始新的任务的， 现在必须等着第三个任务完成了才能开始新的任务。甚至如果三个任务需要的时间都不一样， 那么第一个需要等第二个和第三个， 第二个需要等第三个， 整个系统就被最慢的那个任务拖累了。 比如第一个任务需要1s， 第二个任务需要2s， 第三个任务需要3s， 则<code class="language-text">get10Topics3</code>每组任务需要3s， 三组任务需要<code class="language-text">3 * 3 = 9s</code>， 最后一组那个任务只需要1s， 总共需要<code class="language-text">1 + 3 + 3 + 3 + 1 = 11s</code>， 当然这也比完全串行需要的时间<code class="language-text">1 + 1 + 2 + 3 + 1 + 2 + 3 + 1 + 2 + 3 + 1 = 20s</code>要快不少。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// 模拟一次api网络请求花费特定时间</span>\n<span class="token keyword">function</span> <span class="token function">mockAPI</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">get10Topics4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mockAPI</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token constant">MAX_CURRENCY</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> total<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token constant">MAX_CURRENCY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token constant">MAX_CURRENCY</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> total<span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> costtime <span class="token operator">=</span> j <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">3</span> <span class="token punctuation">:</span> j <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 第一个任务1s， 第二个2是， 第三个3s...</span>\n      promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">mockAPI</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> costtime <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> t3 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> t4 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`promise </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> cost: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t4 <span class="token operator">-</span> t3<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`total cost: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t2 <span class="token operator">-</span> t1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">get10Topics4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>运行结果：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  test-js git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ node p4.js\n10 1000\n1 1000\n2 2000\n3 3000\npromise 1 cost: 3002ms\n4 1000\n5 2000\n6 3000\npromise 4 cost: 2999ms\n7 1000\n8 2000\n9 3000\npromise 7 cost: 3002ms\n10 1000\npromise 10 cost: 1005ms\ntotal cost: 11030ms.\n<span class="token punctuation">[</span> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 <span class="token punctuation">]</span></code></pre>\n      </div>\n<p>大家很容易想到， 把所需时间短的任务放一起并发执行， 这样就能减少互相等待的时间。比如把4个1s的放一起， 3个2s的放一起， 3个3s的放一起， 则总共需要时间为：<code class="language-text">1 + 1 + 2 + 3 + 1 = 8s</code>， 又提高了一些。但是， 一方面我们在实际任务开始并完成之前， 并不知道具体哪个任务需要花多长时间， 另一方面不可能刚好总有花同样时间的任务能凑成一组， 甚至极端情况下， 每个任务所花时间都不一样。</p>\n<p>仔细想想， 我们只需要这么做： 构建一个任务池， 一开始并发三个任务， 每个任务回来之后不用等其他两个任务， 直接看一下任务池还有任务么， 有的话就直接去做，直到所有任务都完成即可。</p>\n<p>由于Node.js里面没有信号量来同步各个“线程”之间的工作， 这里用了递归并操作公共变量的方式实现， 如果读者有更好的方式可以给作者留言。注意， “并发地修改共享变量是万恶之源， 有data race的问题， 好在JS里面是单线程， 所以没有这个问题。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// 模拟一次api网络请求花费特定时间</span>\n<span class="token keyword">function</span> <span class="token function">mockAPI</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">worker</span><span class="token punctuation">(</span>tasks<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> task <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>task<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 任务结束</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> costtime <span class="token operator">=</span> task <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">3</span> <span class="token punctuation">:</span> task <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 第一个任务1s， 第二个2是， 第三个3s...</span>\n  <span class="token keyword">return</span> <span class="token function">mockAPI</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> costtime <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>r <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>r<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> completes at time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">worker</span><span class="token punctuation">(</span>tasks<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">get10Topics5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mockAPI</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token constant">MAX_CURRENCY</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> total<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    tasks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">MAX_CURRENCY</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">worker</span><span class="token punctuation">(</span>tasks<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`total cost: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t2 <span class="token operator">-</span> t1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">get10Topics5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>运行代码可以看到结果：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  test-js git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ node p5.js\n10 1000\n1 1000\n2 2000\n3 3000\n1 completes at time: 2s, by worker0\n4 1000\n2 completes at time: 3s, by worker1\n5 2000\n4 completes at time: 3s, by worker0\n6 3000\n3 completes at time: 4s, by worker2\n7 1000\n5 completes at time: 5s, by worker1\n8 2000\n7 completes at time: 5s, by worker2\n9 3000\n6 completes at time: 6s, by worker0\n10 1000\n8 completes at time: 7s, by worker1\n10 completes at time: 7s, by worker0\n9 completes at time: 8s, by worker2\ntotal cost: 8032ms.\n<span class="token punctuation">[</span> 1, 2, 4, 3, 5, 7, 6, 8, 10, 9 <span class="token punctuation">]</span></code></pre>\n      </div>\n<p>我们可以看到，一开始同时开启了<code class="language-text">worker0, worker1, worker2</code>三个“线程”去做事， <code class="language-text">worker0</code>在第2s（因为第1s是调用第一个api）完成了task1，它并没有等待， 而是继续开始做task4。然后又过了1s， worker1完成了task2然后去开始做task5， 而此刻worker0完成了task4并开始去做task6， 又过了1s， worker2才完成了task3然后去做task7…可以看到每个worker都在争先恐后地完成任务， 直到所有任务全部完成， 总共花了8s时间。 </p>\n<h1 id="重新实现并发访问api"><a href="#%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AEapi" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>重新实现并发访问API</h1>\n<p>这里我将最早串行访问API接口的代码改成并发执行， 没有做限流， 读者可根绝前文分析修改成限流版本，就当留作小练习吧。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"axios"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">getFirst10TopicsIncludeFirstReplyAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> axios\n    <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"https://cnodejs.org/api/v1/topics?limit=10"</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> json <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> first10 <span class="token operator">=</span> json<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>topic <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n          id<span class="token punctuation">:</span> topic<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n          title<span class="token punctuation">:</span> topic<span class="token punctuation">.</span>title<span class="token punctuation">,</span>\n          date<span class="token punctuation">:</span> topic<span class="token punctuation">.</span>create_at<span class="token punctuation">,</span>\n          author<span class="token punctuation">:</span> topic<span class="token punctuation">.</span>author<span class="token punctuation">.</span>loginname\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">const</span> promises <span class="token operator">=</span> first10<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>data <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> axios\n          <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://cnodejs.org/api/v1/topic/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> json <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n            <span class="token keyword">const</span> firstReply <span class="token operator">=</span> json<span class="token punctuation">.</span>data<span class="token punctuation">.</span>replies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n              id<span class="token punctuation">:</span> json<span class="token punctuation">.</span>data<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n              firstReplyAuthor<span class="token punctuation">:</span> firstReply <span class="token operator">&amp;&amp;</span> firstReply<span class="token punctuation">.</span>author<span class="token punctuation">.</span>loginname\n            <span class="token punctuation">}</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>rs <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> map <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          acc<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>id<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">return</span> acc<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> topic <span class="token keyword">of</span> first10<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          topic<span class="token punctuation">.</span>firstReplyAuthor <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>firstReplyAuthor<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> first10<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">getFirst10TopicsIncludeFirstReplyAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h1 id="go语言实现"><a href="#go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Go语言实现</h1>\n<p>其实Go跟Promise没啥关系， 只是最近刚好在用Go语言做东西， 因此拿来对比一下。Go里面很容易实现限流的功能，这里直接贴上代码，不做过多分析。</p>\n<div class="gatsby-highlight">\n      <pre class="language-go"><code class="language-go"><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">"fmt"</span>\n\t<span class="token string">"time"</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> start <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">mockAPI</span><span class="token punctuation">(</span>result <span class="token builtin">int</span><span class="token punctuation">,</span> duration time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> duration<span class="token punctuation">)</span>\n\ttime<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span>\n\t<span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">worker</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">,</span> jobs <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> result <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">for</span> job <span class="token operator">:=</span> <span class="token keyword">range</span> jobs <span class="token punctuation">{</span>\n\t\tt <span class="token operator">:=</span> job <span class="token operator">%</span> <span class="token number">3</span>\n\t\t<span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\t\tt <span class="token operator">=</span> <span class="token number">3</span>\n\t\t<span class="token punctuation">}</span>\n\t\tr <span class="token operator">:=</span> <span class="token function">mockAPI</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>\n\t\tdiff <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d completes at time: %ds, by worker%d\\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> diff<span class="token punctuation">,</span> id<span class="token punctuation">)</span>\n\t\tresult <span class="token operator">&lt;-</span> r\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tt1 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\tjobs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n\tresult <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n\ttotal <span class="token operator">:=</span> <span class="token function">mockAPI</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>\n\n\t<span class="token keyword">const</span> MaxCurrency <span class="token operator">=</span> <span class="token number">3</span>\n\t<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MaxCurrency<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">go</span> <span class="token function">worker</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> jobs<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> total<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n\t\tjobs <span class="token operator">&lt;-</span> i\n\t<span class="token punctuation">}</span>\n\t<span class="token function">close</span><span class="token punctuation">(</span>jobs<span class="token punctuation">)</span>\n\n\trs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span>\n\t<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n\t\tr <span class="token operator">:=</span> <span class="token operator">&lt;-</span>result\n\t\trs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r\n\t<span class="token punctuation">}</span>\n\n\tt2 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"total cost: %ds.\\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>执行输出如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  chap8 go run currency-rate-limit2.go\n10 1s\n1 1s\n2 2s\n3 3s\n1 completes at time: 2s, by worker0\n4 1s\n4 completes at time: 3s, by worker0\n2 completes at time: 3s, by worker2\n5 2s\n6 3s\n3 completes at time: 4s, by worker1\n7 1s\n7 completes at time: 5s, by worker1\n8 2s\n5 completes at time: 5s, by worker0\n9 3s\n6 completes at time: 6s, by worker2\n10 1s\n8 completes at time: 7s, by worker1\n10 completes at time: 7s, by worker2\n9 completes at time: 8s, by worker0\ntotal cost: 8s.\n<span class="token punctuation">[</span>1 4 2 3 7 5 6 8 10 9<span class="token punctuation">]</span></code></pre>\n      </div>\n<h1 id="参考资料"><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>参考资料</h1>\n<ul>\n<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li>\n<li><a href="https://yar999.gitbooks.io/gopl-zh/content/ch8/ch8-06.html">https://yar999.gitbooks.io/gopl-zh/content/ch8/ch8-06.html</a></li>\n</ul>',
timeToRead:9,excerpt:"我们知道Node.js里充满着大量的异步， 后来出现了Promise以及async/await来解决”callback hell”的问题。我们就来看看promise以及async/await如何简化JS并发代码的编写， 最后再给出一份实现相同功能的Go…",fields:{slug:"/concurrency-by-promise/"},frontmatter:{title:"用Promise实现并发 vs Go goroutine",date:"2018-03-24",category:"FE",tags:["promise","concurrency","并发","go","goroutine"]}}},{node:{html:'<p>最近用Go写代码，在VSCode下安装了vscodego插件， 语法高亮、代码提示、代码跳转、错误提示等都支持， 完美！</p>\n<p>不知道哪天突然发现没有代码提示了， 只有提示”PANIC”。。。。。</p>\n<p>经过google， 发现代码提示用的是<a href="https://github.com/nsf/gocode">gocode</a>，也<a href="https://tonybai.com/2016/12/23/write-go-code-in-vscode/">有人遇到过</a>，手动重启gocode即可。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">gocode close\ngocode -s</code></pre>\n      </div>\n<p>执行之后还是不行， 有报错：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">panic: unknown <span class="token function">export</span> <span class="token function">format</span> version 5 <span class="token punctuation">(</span><span class="token string">"version 5"</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>拿去google， 找到gocode里的<a href="https://github.com/nsf/gocode/issues/456">issues</a>， 提示说可以升级gocode：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">go get -u -v github.com/nsf/gocode\n``<span class="token variable"><span class="token variable">`</span>\n再重启， 一起ok了！\n\nPS， 发现升级之后其实vscode在遇到go代码并且你需要代码提示（按了.）的时候如果没有检测到gocode daemon进程，会自动帮你启动gocode的。会启动一个进程监听<span class="token variable">`</span></span>127.0.0.1:37373`端口。</code></pre>\n      </div>',timeToRead:1,excerpt:"最近用Go写代码，在VSCode下安装了vscodego插件， 语法高亮、代码提示、代码跳转、错误提示等都支持， 完美！ 不知道哪天突然发现没有代码提示了， 只有提示”PANIC”。。。。。 经过google， 发现代码提示用的是 gocode…",fields:{slug:"/go-vscodego-no-tip/"},frontmatter:{title:"VSCode go插件代码提示失效",date:"2018-03-22",category:"Go",tags:["vscode","go","gocode"]}}},{node:{html:'<p>比特币去年大涨，各种新闻、技术论坛甚至身边的大叔大妈都在讨论比特币，火爆程度远超15年年初的股市。甚至直接带动各种山寨币、空气币大涨，似乎只要发个币都是几十、几百倍的增长，简直全民疯狂！</p>\n<p>这些请大家理智看待，冷静分析，合理投资，我不给其助威，也不泼冷水，仅从技术的角度来探讨一些问题。</p>\n<p>最早听说比特币是在11年，然后去年下半年才开始系统地了解区块链相关的技术，打算接下来整理一下这方面的知识，希望对大家有所帮助。 市面上也有很多文章书籍甚至课程来讲授比特币或者区块链技术的，所以我不会面面俱到，尽可能挑一些自己感兴趣的话题来写。推荐一些区块链相关的学习资料，<a href="https://magicly.me/blockchain-materials">https://magicly.me/blockchain-materials</a> 。</p>\n<!-- more -->\n<p>可能大部分人都已经知道比特币是通过“挖矿”凭空产生的，挖矿就是不停地做hash计算，当找到某个值刚好满足条件，就算挖出矿了， 就会得到一部分比特币作为奖励。 基本上挖出比特币的概率，等于你自己的算力（用每秒能做多少次hash计算来衡量）占全球参与挖矿的算力的百分比。 简单来说，如果全球每秒能做100次hash运算，你每秒能做1次hash运算，那你挖到比特币的概率就是1%。</p>\n<p>最早的时候大家用CPU挖矿，后来发现GPU会快很多，最后干脆有人把hash算法集成到了芯片上（即ASIC，Application-specific integrated circuit），算力再次暴涨。下图可以看出这两年算力的增长情况（来源：<a href="https://blockchain.info/charts/hash-rate?timespan=2years%EF%BC%89%EF%BC%9A">https://blockchain.info/charts/hash-rate?timespan=2years）：</a>\n<img src="/blogimgs/blockchain/hash-rate.png" alt="hash算力增长图标"></p>\n<p>通过<a href="https://blockexplorer.com/api/status?q=getDifficulty">https://blockexplorer.com/api/status?q=getDifficulty</a> 这个接口可以获取到当前算力的“难度”，目前为：</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"difficulty"</span><span class="token operator">:</span> <span class="token number">3290605988755.001</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>根据比特币挖矿机制，每10分钟产生一个区块需要的算力公式为：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">  difficulty <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">32</span> <span class="token operator">/</span> <span class="token number">600</span> <span class="token comment">// 23555072455973170000， 即20921P/s</span></code></pre>\n      </div>\n<p>即当前算力大概在每秒20921P次hash运算才能在10分钟内记账一次，得到12.5个BTC。号称当前最快的蚂蚁矿机S9，算力是13.5T，也就是说全网大概有20921 * 2 ** 10 / 13.5 = 1586896， 相当于全网大概有160万台S9在运行。</p>\n<p>每10分钟出一次块， 一天能出<code class="language-text">24 * 6 == 144</code>块，据说一个S9能正常运行两年，如果不考虑这两年的算力增长（基本不可能，16年到现在算力增长了接近20倍），大概在这两年你能有多大的机会挖中一次呢：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token number">13.5</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">20921</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">144</span> <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token comment">//0.0662 </span></code></pre>\n      </div>\n<p>而目前一块的奖励是12.5BTC，也就是说你的期望是<code class="language-text">0.0662 * 12.5 == 0.8280</code>个BTC。刚刚在火币网上查的目前BTC价格是52000rmb不到，也就是期望获得<code class="language-text">0.8280 * 52000 == 43057</code>的回报。矿机本身15000，S9的功耗是1320w， 两年用电<code class="language-text">1.32 * 24 * 365 * 2 === 23126.4</code>度，所以能不能赚，基本上取决于你能找到多便宜的电了。</p>\n<p>注意，我们的计算比较简单，只是给大家一个直观的感受，以及大概计算方式，并没有考虑算力的增长以及BTC价格的增长，所以我们不做建议。网上有很多更复杂的计算，并根据结果建议怎么挖矿的， 大家自行搜索即可，本文不做任何投资建议。</p>\n<p>另外，根据BTC的协议，目前挖出一块是12.5BTC，也就是说如果你“自己”挖的话，要么挖中一块是12.5BTC，要么不中就啥也没有，根本不存在所谓的<code class="language-text">在家挖了一个月，挖到0.00001BTC，连电费都不够</code>这种说法。 当然，由于现在算力太多，出现了“矿池”，即大家合作来一起挖，挖中一块，再根据大家贡献的算力百分比来分，这种情况才可能有挖到零点几个BTC的说法。</p>\n<h1 id="单位换算"><a href="#%E5%8D%95%E4%BD%8D%E6%8D%A2%E7%AE%97" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>单位换算</h1>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token number">1</span>P <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">50</span> <span class="token operator">~</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">000</span><span class="token punctuation">,</span><span class="token number">000</span><span class="token punctuation">,</span><span class="token number">000</span><span class="token punctuation">,</span><span class="token number">000</span><span class="token punctuation">,</span><span class="token number">000</span> <span class="token comment">// 千万亿</span>\n\n<span class="token number">1</span>T <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">40</span> <span class="token operator">~</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">000</span><span class="token punctuation">,</span><span class="token number">000</span><span class="token punctuation">,</span><span class="token number">000</span><span class="token punctuation">,</span><span class="token number">000</span> <span class="token comment">// 万亿</span>\n\n<span class="token number">1</span>G <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">30</span> <span class="token operator">~</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">000</span><span class="token punctuation">,</span><span class="token number">000</span><span class="token punctuation">,</span><span class="token number">000</span>  <span class="token comment">// 十亿</span>\n\n<span class="token number">1</span>M <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">20</span> <span class="token operator">~</span><span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">000</span> <span class="token comment">// 一百万</span>\n\n<span class="token number">1</span>K <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">10</span> <span class="token operator">~</span><span class="token operator">=</span> <span class="token number">1000</span> <span class="token comment">// 一千</span></code></pre>\n      </div>\n<h1 id="参考资料"><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>参考资料</h1>\n<ul>\n<li><a href="http://shop.bitmain.com/productDetail.htm?pid=00020180301152028259U755GVmt0665">蚂蚁矿机S9 13.5T</a></li>\n<li><a href="https://en.bitcoin.it/wiki/Difficulty">https://en.bitcoin.it/wiki/Difficulty</a></li>\n<li><a href="https://bitcoin.stackexchange.com/questions/5838/how-is-difficulty-calculated">https://bitcoin.stackexchange.com/questions/5838/how-is-difficulty-calculated</a></li>\n<li><a href="https://blockchain.info/charts/hash-rate?timespan=2years">全网Hash算力</a></li>\n</ul>',timeToRead:2,excerpt:"比特币去年大涨，各种新闻、技术论坛甚至身边的大叔大妈都在讨论比特币，火爆程度远超1…",fields:{slug:"/blockchain-btc-mining/"},frontmatter:{title:"区块链系列一：现在挖比特币有多难",date:"2018-03-17",category:"Blockchain",tags:["BTC","bitcoin","比特币"]}}},{node:{html:'<p>已经太多次听到这样的言论：“XXXX是个伪命题”， 也太多次看到这样的标题：“为什么说XXX是个伪命题？”。 绝大多数时候使用者其实都没明白“伪命题”一词的含义， 一部分是把它跟“假命题”混淆了， 一部分人纯粹就是为了装13。</p>\n<p>每次听到这样的话， 我都起一身鸡皮疙瘩。最近区块链火的不行，到处都能看到相关文章，似乎一夜之间很多人都成了区块链专家。今天看到一篇，“区块链是个伪命题”， 还有一篇“为什么说区块链的去中心化是个伪命题？”。大哥， 你这就好比说，“鸡蛋是个伪命题”， “为什么说鸡蛋的蛋壳是个伪命题”一样， 听了自己不会觉得奇怪的么？</p>\n<!-- more -->\n<p>在我印象中， “伪命题”表示的是“没办法证伪的命题”， 英文是pseudo proposition。 而命题是一个陈述句，用于说明某种事实，如果这事实为真，则叫真命题(True proposition)，如果为假，则为假命题(False proposition)。比如“5 > 3”是真命题，“3 > 5”则是一个假命题。而如果说”X > 5”，因为你不知道X到底是啥，所以这个命题既有可能是真， 也有可能是假，没办法判断，所以是“伪命题”。 所以我们说一个东西是“伪命题”，至少得这个东西是一个完整的陈述句啊！“区块链”是一句陈述句么？“鸡蛋的颜色”是一句陈述句么？</p>\n<p>上面只是我的想法，为了严谨， 我还是查一下资料吧。发现知乎上早就已经有人受不了，问过<a href="https://www.zhihu.com/question/20105937">「伪命题」一词是否被滥用了？</a>，我比较赞同下面这条回答：</p>\n<div style="background-color:yellow; color: #8590a6">\n离散数学经典教材<a href="https://book.douban.com/subject/1786209/">Discrete Mathematics and Its Applications</a>开篇第一章就对命题做出的如下的定义：\n<blockquote>\n<p>A proposition is a declarative sentence (that is, a sentence that declares a fact) that is either true or false, but not both.</p>\n</blockquote>\n<p>翻译过来就是：命题是一个非真即假的陈述语句，但绝不可能即真又假.</p>\n<p>然后又举了4个不是命题（也就是伪命题）的例子：</p>\n<blockquote>\n<ol>\n<li>What time is it?</li>\n<li>Read this carefully.</li>\n<li>x + 1 = 2.</li>\n<li>x + y = z.</li>\n</ol>\n</blockquote>\n<p>原因如下：</p>\n<blockquote>\n<p>1,2明显不是陈述语句。3,4因为它们既不是真的，也不是假的，也就是说我们无法判断</p>\n</blockquote>\n<p>作者：张斌斌\n链接：<a href="https://www.zhihu.com/question/20105937/answer/26284295">https://www.zhihu.com/question/20105937/answer/26284295</a>\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n</div>\n<p>在wiki上搜了一下， 没有查到“伪命题”，只查到<a href="https://en.wikipedia.org/wiki/Proposition">Proposition</a>：</p>\n<blockquote>\n<p>Often propositions are related to closed sentences to distinguish them from what is expressed by an open sentence. In this sense, propositions are “statements” that are truth-bearers. This conception of a proposition was supported by the philosophical school of logical positivism.</p>\n</blockquote>\n<p>也就是说，“命题”得是一句关于事实判断的完整的陈述句。</p>\n<p>百度百科的关于<a href="https://baike.baidu.com/item/%E4%BC%AA%E5%91%BD%E9%A2%98/7507754">伪命题</a>的解释：</p>\n<div style="background-color:yellow; color: #8590a6">\n<blockquote>\n<p>伪命题是指不真实的命题。所谓不真实，有两种情况：其一是不符合客观事实；其二是不符合一般事理和科学道理。 另一种解释是指没有意义的命题，无法断定其真假，既不是先天的分析命题，也不是可以通过经验判断的综合命题。比如，“团结比原子弹还厉害”，”凡事都有例外”这类命题就属于伪命题。</p>\n</blockquote>\n<blockquote>\n<p>外文名 False proposition</p>\n</blockquote>\n</div>\n可以看到，这里百度百科把“伪命题”当做是“假命题(False proposition)”，然后又包含了“无法断定其真假”的那部分。\n<p>ok， 现在我们来看一下为什么说<code class="language-text">“XXX是个伪命题”是个伪命题</code>。首先这句话的主语是“XXX是个伪命题”，这是一个完整的陈述句，但是它是命题么？不是！为啥，因为我们不知道<code class="language-text">XXX</code>是什么，所以这句话既有可能是真，也有可能是假。比如，<code class="language-text">XXX是&quot;3 &gt; 2&quot;</code>, 则“3 > 2是个伪命题”就是错的，即是“假命题False proposition”，如果<code class="language-text">XXX是x &gt; 2</code>， 则“x > 2是个伪命题”，就是对的，即是“真命题True proposition”。所以“XXX是个伪命题”，我们既不能判断是真，也不能判断是假，所以是个伪命题。也就是说<code class="language-text">“XXX是个伪命题”是个伪命题</code>，这句话本身是一个真命题！</p>\n<p>另外，我们可以看出，由于“伪”在中文里本身有“假”的意思，所以很多人将“伪命题”当成是“假命题”来用，这个我还尚可理解。但即使是这样，我们在说某个东西是“假命题”的时候， 前提也得是这个东西本身是个“命题”或者至少是个完整的陈述句啊。比如某人想说区块链的去中心化不是很NB， 可以说“区块链的去中心化很NB，这是个假命题”。或者你把“伪命题”当“假命题”用，说“区块链的去中心化很NB，这是个伪命题”，那也能勉强接受， 但不能说“区块链的去中心化是个假命题”，或者说“区块链的去中心化是个伪命题”啊。 甚至直接说“区块链是个伪命题”， 这是个啥意思嘛？</p>\n<p>简单来说，命题就好比是布尔类型，只能是True或False，你非得要把数字或字符串赋值给布尔类型， 那我们只能说不好意思，我们不支持自动类型转化， 编译失败！</p>\n<p>另外可参考下面的资料：</p>\n<ul>\n<li><a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E8%AF%81%E4%BC%AA%E6%80%A7">可证伪性</a></li>\n<li><a href="https://zh.wikipedia.org/wiki/%E4%BC%AA%E7%A7%91%E5%AD%A6">伪科学</a></li>\n</ul>',timeToRead:2,excerpt:"已经太多次听到这样的言论：“XXXX是个伪命题”， 也太多次看到这样的标题：“为什么说XXX是个伪命题？”。 绝大多数时候使用者其实都没明白“伪命题”一词的含义， 一部分是把它跟“假命题”混淆了， 一部分人纯粹就是为了装1…",fields:{slug:"/pseudo-proposition/"},frontmatter:{title:"为什么说“XXX是个伪命题”是个伪命题？",date:"2018-03-14",category:"Others",tags:["伪命题","逻辑"]}}},{node:{html:'<p><strong>持续更新，可以保持关注</strong></p>\n<p>区块链的一些学习资料:</p>\n<!-- more -->\n<h1 id="入门介绍"><a href="#%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>入门介绍</h1>\n<ul>\n<li><a href="http://blog.codinglabs.org/articles/bitcoin-mechanism-make-easy.html">一个故事告诉你比特币的原理及运作机制</a></li>\n</ul>\n<h1 id="密码学"><a href="#%E5%AF%86%E7%A0%81%E5%AD%A6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>密码学</h1>\n<ul>\n<li><a href="https://www.coursera.org/learn/crypto">https://www.coursera.org/learn/crypto</a></li>\n</ul>\n<h1 id="btc"><a href="#btc" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BTC</h1>\n<ul>\n<li>中本聪的创世论文<a href="https://bitcoin.org/bitcoin.pdf">Bitcoin: A Peer-to-Peer Electronic Cash System</a></li>\n<li><a href="https://bitcoin.org/en/">Bitcoin官网</a></li>\n<li><a href="http://bitcoinbook.cs.princeton.edu/">Bitcoin and Cryptocurrency Technologies</a> <a href="https://www.coursera.org/learn/cryptocurrency/home/welcome">Coursera上课程</a> <a href="https://piazza.com/princeton/spring2015/btctech/home">课程资料</a></li>\n<li><a href="https://github.com/bitcoinbook/bitcoinbook">Mastering Bitcoin 2nd Edition</a></li>\n<li><a href="https://bitcoinbook.info/wp-content/translations/cmn/book.pdf">精通比特币中文版</a>, <a href="http://book.8btc.com/master_bitcoin">文在线版</a> </li>\n</ul>\n<h1 id="ethereum"><a href="#ethereum" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Ethereum</h1>\n<ul>\n<li><a href="https://www.ethereum.org/">https://www.ethereum.org/</a></li>\n<li><a href="http://www.ethdocs.org/">http://www.ethdocs.org/</a></li>\n<li><a href="https://github.com/ethereum/go-ethereum/wiki">https://github.com/ethereum/go-ethereum/wiki</a></li>\n<li><a href="https://solidity.readthedocs.io/">https://solidity.readthedocs.io/</a></li>\n<li><a href="https://web3js.readthedocs.io">https://web3js.readthedocs.io</a></li>\n<li><a href="https://github.com/trufflesuite/truffle">https://github.com/trufflesuite/truffle</a></li>\n<li><a href="http://truffle.tryblockchain.org/">http://truffle.tryblockchain.org/</a></li>\n<li><a href="http://ethfans.org/topics/227">以太坊代码剖析</a></li>\n</ul>\n<h1 id="hyperledger"><a href="#hyperledger" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hyperledger</h1>\n<ul>\n<li><a href="https://www.ibm.com/blockchain/cn-zh/hyperledger.html">基于 Linux 基金会的 Hyperledger Fabric</a></li>\n</ul>\n<h1 id="其他"><a href="#%E5%85%B6%E4%BB%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>其他</h1>\n<ul>\n<li><a href="https://github.com/llSourcell/Learn_Blockchain_in_2_months">“Learn Blockchain in 2 Months” by Siraj Raval</a>, <a href="https://www.youtube.com/watch?v=wVVGv2bmxow">Youtube视频</a></li>\n<li><a href="https://github.com/btcsuite">Bitcoin in Go</a></li>\n<li><a href="https://github.com/zcash/zcash">Zcash</a></li>\n<li><a href="https://www.youtube.com/watch?v=lUiKpNU2Tx4">Bitcoin NodeJS Part 1 - Hello World</a></li>\n<li><a href="https://github.com/chaozh/awesome-blockchain">Awesome Blockchain</a></li>\n<li>\n<p>NodeJS Bitcoin</p>\n<ul>\n<li><a href="https://github.com/bitcoinjs/bitcoinjs-lib">https://github.com/bitcoinjs/bitcoinjs-lib</a></li>\n<li><a href="https://en.bitcoin.it/wiki/Node.js_Example">https://en.bitcoin.it/wiki/Node.js_Example</a></li>\n<li><a href="https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_calls_list">https://en.bitcoin.it/wiki/Original<em>Bitcoin</em>client/API<em>calls</em>list</a></li>\n<li><a href="https://bitcore.io/">https://bitcore.io/</a></li>\n<li><a href="https://github.com/bitpay/bitcore">https://github.com/bitpay/bitcore</a></li>\n<li><a href="https://github.com/ruimarinho/bitcoin-core">https://github.com/ruimarinho/bitcoin-core</a></li>\n</ul>\n</li>\n</ul>',timeToRead:2,excerpt:"持续更新，可以保持关注 区块链的一些学习资料: 入门介绍 一个故事告诉你比特币的原理及运作机制 密码学 https://www.coursera.org/learn/crypto BTC 中本聪的创世论文 Bitcoin: A Peer-to-Peer Electronic…",fields:{slug:"/blockchain-materials/"},frontmatter:{title:"区块链学习资料",date:"2018-03-06",category:"FE",tags:["typescript","ts"]}}},{node:{html:'<p>TS的简介或者说学习笔记吧，主要留给自己查阅。</p>\n<!-- more -->\n<h1 id="在线工具"><a href="#%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>在线工具</h1>\n<p><a href="https://www.typescriptlang.org/play/index.html">https://www.typescriptlang.org/play/index.html</a></p>\n<h1 id="基本数据类型basic-types"><a href="#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8Bbasic-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>基本数据类型Basic Types</h1>\n<h2 id="boolean"><a href="#boolean" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Boolean</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">let</span> isDone<span class="token punctuation">:</span> boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="number"><a href="#number" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Number</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">let</span> decimal<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> hex<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">0xf00d</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> binary<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> octal<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">0o744</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="string"><a href="#string" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>String</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">let</span> color<span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span>\ncolor <span class="token operator">=</span> <span class="token string">\'red\'</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> sentence<span class="token punctuation">:</span> string <span class="token operator">=</span> `Hello<span class="token punctuation">,</span> my name is $<span class="token punctuation">{</span> fullName <span class="token punctuation">}</span><span class="token punctuation">.</span></code></pre>\n      </div>\n<h2 id="array"><a href="#array" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Array</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">let</span> list<span class="token punctuation">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> list<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="tuple"><a href="#tuple" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tuple</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// Declare a tuple type</span>\n<span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// Initialize it</span>\nx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\n<span class="token comment">// Initialize it incorrectly</span>\nx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n\n<span class="token comment">// When accessing an element outside the set of known indices, a union type is used instead:</span>\nx<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span> <span class="token comment">// OK, \'string\' can be assigned to \'string | number\'</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK, \'string\' and \'number\' both have \'toString\'</span>\n\nx<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// Error, \'boolean\' isn\'t \'string | number\'</span></code></pre>\n      </div>\n<h2 id="enum"><a href="#enum" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Enum</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Green <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> Blue <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> colorName<span class="token punctuation">:</span> string <span class="token operator">=</span> Color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token function">alert</span><span class="token punctuation">(</span>colorName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Displays \'Green\' as its value is 2 above</span></code></pre>\n      </div>\n<h2 id="any"><a href="#any" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Any</h2>\n<p>任意类型， 兼容JS的动态类型。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">let</span> notSure<span class="token punctuation">:</span> any <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\nnotSure<span class="token punctuation">.</span><span class="token function">ifItExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// okay, ifItExists might exist at runtime</span>\nnotSure<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// okay, toFixed exists (but the compiler doesn\'t check)</span>\n\n<span class="token keyword">let</span> prettySure<span class="token punctuation">:</span> Object <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\nprettySure<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: Property \'toFixed\' doesn\'t exist on type \'Object\'.</span></code></pre>\n      </div>\n<h2 id="void"><a href="#void" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Void</h2>\n<p>没有明确的<code class="language-text">return</code>。 Declaring variables of type void is not useful because you can only assign undefined or null to them.</p>\n<h2 id="null-and-undefined"><a href="#null-and-undefined" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Null and Undefined</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// Not much else we can assign to these variables!</span>\n<span class="token keyword">let</span> u<span class="token punctuation">:</span> undefined <span class="token operator">=</span> undefined<span class="token punctuation">;</span>\n<span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">--strictNullChecks</code></p>\n<h2 id="never"><a href="#never" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Never</h2>\n<p>抛异常。</p>\n<blockquote>\n<p>The never type is a subtype of, and assignable to, every type; however, no type is a subtype of, or assignable to, never (except never itself). Even any isn’t assignable to never.</p>\n</blockquote>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// Function returning never must have unreachable end point</span>\n<span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Inferred return type is never</span>\n<span class="token keyword">function</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Something failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Function returning never must have unreachable end point</span>\n<span class="token keyword">function</span> <span class="token function">infiniteLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="type-assertions"><a href="#type-assertions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Type assertions</h2>\n<p>你知道的比编译器多。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">let</span> someValue<span class="token punctuation">:</span> any <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> strLength<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>string<span class="token operator">></span>someValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n\n<span class="token comment">// or</span>\n<span class="token keyword">let</span> strLength<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token punctuation">(</span>someValue <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>在<code class="language-text">JSX</code>里面只能用<code class="language-text">as</code>，因为<code class="language-text">&lt;&gt;</code>在JSX里有特殊含义。</p>\n<h1 id="高级类型advanced-types"><a href="#%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8Badvanced-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>高级类型Advanced Types</h1>\n<h2 id="intersection-types"><a href="#intersection-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Intersection Types</h2>\n<h2 id="union-types"><a href="#union-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Union Types</h2>\n<h2 id="type-guards-and-differentiating-types"><a href="#type-guards-and-differentiating-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Type Guards and Differentiating Types</h2>\n<h2 id="nullable-types"><a href="#nullable-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Nullable types</h2>\n<h2 id="type-aliases"><a href="#type-aliases" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Type Aliases</h2>\n<h2 id="string-literal-types"><a href="#string-literal-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>String Literal Types</h2>\n<h2 id="numeric-literal-types"><a href="#numeric-literal-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Numeric Literal Types</h2>\n<h2 id="enum-member-types"><a href="#enum-member-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Enum Member Types</h2>\n<h2 id="discriminated-unions"><a href="#discriminated-unions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Discriminated Unions</h2>\n<h2 id="discriminated-unions-1"><a href="#discriminated-unions-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Discriminated Unions</h2>\n<h2 id="index-types"><a href="#index-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Index types</h2>\n<h2 id="mapped-types"><a href="#mapped-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mapped types</h2>\n<h1 id="interfaces"><a href="#interfaces" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Interfaces</h1>\n<p>TS采用<code class="language-text">鸭子类型</code>或者叫<code class="language-text">结构子类型</code>. “duck typing” or “structural subtyping”</p>\n<h2 id="optional-properties"><a href="#optional-properties" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Optional Properties</h2>\n<h2 id="readonly-properties"><a href="#readonly-properties" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Readonly properties</h2>\n<h2 id="excess-property-checks"><a href="#excess-property-checks" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Excess Property Checks</h2>\n<h2 id="function-types"><a href="#function-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Function Types</h2>\n<h2 id="indexable-types"><a href="#indexable-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Indexable Types</h2>\n<h2 id="class-types"><a href="#class-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Class Types</h2>\n<h2 id="extending-interfaces"><a href="#extending-interfaces" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Extending Interfaces</h2>\n<h2 id="hybrid-types"><a href="#hybrid-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hybrid Types</h2>\n<h2 id="interfaces-extending-classes"><a href="#interfaces-extending-classes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Interfaces Extending Classes</h2>\n<h1 id="classes"><a href="#classes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Classes</h1>\n<h2 id="inheritance"><a href="#inheritance" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Inheritance</h2>\n<h2 id="public-private-and-protected-modifiers"><a href="#public-private-and-protected-modifiers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Public, private, and protected modifiers</h2>\n<p>Public by default</p>\n<h2 id="readonly-modifier"><a href="#readonly-modifier" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Readonly modifier</h2>\n<h2 id="accessors"><a href="#accessors" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Accessors</h2>\n<h2 id="static-properties"><a href="#static-properties" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Static Properties</h2>\n<h2 id="abstract-classes"><a href="#abstract-classes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Abstract Classes</h2>\n<h2 id="advanced-techniques"><a href="#advanced-techniques" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Advanced Techniques</h2>\n<h3 id="constructor-functions"><a href="#constructor-functions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Constructor functions</h3>\n<h3 id="using-a-class-as-an-interface"><a href="#using-a-class-as-an-interface" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using a class as an interface</h3>\n<h1 id="functions"><a href="#functions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Functions</h1>\n<h2 id="function-types-1"><a href="#function-types-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Function Types</h2>\n<h2 id="optional-and-default-parameters"><a href="#optional-and-default-parameters" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Optional and Default Parameters</h2>\n<h2 id="rest-parameters"><a href="#rest-parameters" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Rest Parameters</h2>\n<h2 id="this"><a href="#this" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>this</h2>\n<h2 id="overloads"><a href="#overloads" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overloads</h2>\n<h1 id="generics"><a href="#generics" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Generics</h1>\n<h2 id="generic-type-variables"><a href="#generic-type-variables" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Generic Type Variables</h2>\n<h2 id="generic-types"><a href="#generic-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Generic Types</h2>\n<h2 id="generic-classes"><a href="#generic-classes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Generic Classes</h2>\n<h2 id="generic-constraints"><a href="#generic-constraints" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Generic Constraints</h2>\n<h1 id="enums"><a href="#enums" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Enums</h1>\n<h1 id="type-inference"><a href="#type-inference" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Type Inference</h1>\n<h2 id="best-common-type"><a href="#best-common-type" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Best common type</h2>\n<h2 id="contextual-type"><a href="#contextual-type" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Contextual Type</h2>\n<h1 id="type-compatibility"><a href="#type-compatibility" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Type Compatibility</h1>\n<h2 id="comparing-two-functions"><a href="#comparing-two-functions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Comparing two functions</h2>\n<h2 id="function-parameter-bivariance"><a href="#function-parameter-bivariance" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Function Parameter Bivariance</h2>\n<h2 id="optional-parameters-and-rest-parameters"><a href="#optional-parameters-and-rest-parameters" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Optional Parameters and Rest Parameters</h2>\n<h2 id="enums-1"><a href="#enums-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Enums</h2>\n<h2 id="classes-1"><a href="#classes-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Classes</h2>\n<h2 id="generics-1"><a href="#generics-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Generics</h2>\n<h2 id="advanced-topics"><a href="#advanced-topics" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Advanced Topics</h2>\n<p>Subtype vs Assignment</p>\n<h1 id="symbols"><a href="#symbols" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Symbols</h1>\n<h1 id="iterators-and-generators"><a href="#iterators-and-generators" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Iterators and Generators</h1>\n<h1 id="modules"><a href="#modules" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Modules</h1>\n<h1 id="namespaces"><a href="#namespaces" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Namespaces</h1>\n<h1 id="namespaces-and-modules"><a href="#namespaces-and-modules" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Namespaces and Modules</h1>\n<h1 id="module-resolution"><a href="#module-resolution" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Module Resolution</h1>\n<h1 id="declaration-merging"><a href="#declaration-merging" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Declaration Merging</h1>\n<h1 id="jsx"><a href="#jsx" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JSX</h1>\n<h1 id="decorators"><a href="#decorators" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Decorators</h1>\n<h1 id="mixins"><a href="#mixins" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mixins</h1>\n<h1 id="triple-slash-directives"><a href="#triple-slash-directives" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Triple-Slash Directives</h1>\n<h1 id="语言规范"><a href="#%E8%AF%AD%E8%A8%80%E8%A7%84%E8%8C%83" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>语言规范</h1>\n<p><a href="https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md">https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md</a></p>',
timeToRead:5,excerpt:"TS的简介或者说学习笔记吧，主要留给自己查阅。 在线工具 https://www.typescriptlang.org/play/index.html 基本数据类型Basic Types Boolean Number String Array Tuple Enum Any…",fields:{slug:"/ts-study/"},frontmatter:{title:"TypeScript简介",date:"2018-03-06",category:"FE",tags:["typescript","ts"]}}},{node:{html:'<p><strong>持续更新，可以保持关注</strong></p>\n<p><a href="https://www.typescriptlang.org/">TypeScript</a>的一些学习资料:</p>\n<!-- more -->\n<h1 id="语言本身"><a href="#%E8%AF%AD%E8%A8%80%E6%9C%AC%E8%BA%AB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>语言本身</h1>\n<ul>\n<li>最权威的资料，当然是TS官网： <a href="https://www.typescriptlang.org/">https://www.typescriptlang.org/</a></li>\n<li>typescript-book: <a href="https://github.com/basarat/typescript-book">https://github.com/basarat/typescript-book</a></li>\n</ul>\n<h1 id="脚手架"><a href="#%E8%84%9A%E6%89%8B%E6%9E%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>脚手架</h1>\n<ul>\n<li>TypeScript &#x26; Egg.js: <a href="https://github.com/magicly/ts-egg-demo">https://github.com/magicly/ts-egg-demo</a></li>\n<li>TypeScript &#x26; React: <a href="https://magicly.me/ts-react-starter/">https://magicly.me/ts-react-starter/</a></li>\n<li>TypeScript &#x26; React Native: <a href="https://magicly.me/ts-reactnative-starter/">https://magicly.me/ts-reactnative-starter/</a></li>\n<li>一条命令创建免配置的 React + Antd + Typescript 项目： <a href="https://zhuanlan.zhihu.com/p/33523384">https://zhuanlan.zhihu.com/p/33523384</a></li>\n<li>react + typescript 手脚架： <a href="https://zhuanlan.zhihu.com/p/27771021">https://zhuanlan.zhihu.com/p/27771021</a></li>\n<li>微信小程序：<a href="https://github.com/qiu8310/minapp">https://github.com/qiu8310/minapp</a></li>\n</ul>\n<h1 id="其他工具"><a href="#%E5%85%B6%E4%BB%96%E5%B7%A5%E5%85%B7" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>其他工具</h1>\n<ul>\n<li>TypeSearch: <a href="https://microsoft.github.io/TypeSearch/">https://microsoft.github.io/TypeSearch/</a></li>\n<li>CSS: <a href="https://typestyle.github.io">https://typestyle.github.io</a></li>\n</ul>',timeToRead:1,excerpt:"持续更新，可以保持关注 TypeScript 的一些学习资料: 语言本身 最权威的资料，当然是TS官网：  https://www.typescriptlang.org/ typescript-book:  https://github.com/basarat…",fields:{slug:"/ts-materials/"},frontmatter:{title:"TypeScript学习资料",date:"2018-03-06",category:"FE",tags:["typescript","ts"]}}},{node:{html:'<p><a href="https://magicly.me/ts-react-starter/">上一篇我们介绍了TypeScript如何跟React搭配使用</a>，这篇我们继续介绍如何在React Native中使用TS。</p>\n<p>关于React Native，我之前写过一本<a href="http://gitbook.cn/gitchat/column/5a17c2e113c02f4a35ca5a7d">React Native电子书</a>， 如果不熟悉RN的话可以参考一下。</p>\n<p>本文涵盖内容如下：</p>\n<ul>\n<li>TypeScript &#x26; React Native</li>\n<li>TSLint</li>\n<li>Jest</li>\n</ul>\n<!-- more -->\n<h1 id="准备知识"><a href="#%E5%87%86%E5%A4%87%E7%9F%A5%E8%AF%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>准备知识</h1>\n<p>本文假设读者已经知道如何用RN进行开发，至少是把开发环境搭建起来，能在模拟器或者手机上运行App了。如果不了解的话， 请参考<a href="http://gitbook.cn/gitchat/column/5a17c2e113c02f4a35ca5a7d">React Native 移动开发入门与实战</a>。</p>\n<h1 id="新建项目"><a href="#%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>新建项目</h1>\n<p>用<code class="language-text">react-native init</code>正常初始化一个RN项目。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">react-native init TSReactNativeDemo</code></pre>\n      </div>\n<p>项目初始结构为：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  TSReactNativeDemo tree -L 1\n<span class="token keyword">.</span>\n├── App.js\n├── __tests__\n├── android\n├── app.json\n├── index.js\n├── ios\n├── node_modules\n├── package.json\n└── yarn.lock\n\n4 directories, 5 files</code></pre>\n      </div>\n<h1 id="运行"><a href="#%E8%BF%90%E8%A1%8C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>运行</h1>\n<p>在手机或者模拟器上运行起来。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">react-native run-android\nreact-native run-ios</code></pre>\n      </div>\n<h1 id="引入typescript"><a href="#%E5%BC%95%E5%85%A5typescript" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>引入TypeScript</h1>\n<p>目前React Native Packager是通过Babel编译<code class="language-text">.js</code>文件以及打包的，暂时还没有特别好的方法直接使用<code class="language-text">.tsx</code>。所以基本思路就是， 先用TypeScript的编译器<code class="language-text">tsc</code>将<code class="language-text">.ts</code>或<code class="language-text">.tsx</code>文件编译成<code class="language-text">.js</code>文件，再用React Native Packager编译打包即可。</p>\n<p>首先我们安装TS依赖：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">yarn add -D typescript</code></pre>\n      </div>\n<p>然后需要安装types：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">yarn add -D @types/react @types/react-native</code></pre>\n      </div>\n<p>然后需要配置<code class="language-text">tsconfig.json</code>，可以用如下命令生成：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">tsc --init --pretty --sourceMap --target es2015 --outDir ./lib --rootDir ./ --module commonjs --jsx react</code></pre>\n      </div>\n<p>生成的文件里面有具体每个参数的含义，也可以参考<a href="http://www.typescriptlang.org/docs/handbook/tsconfig-json.html">TS官网文档</a>。 也可以直接参考上一篇中的<code class="language-text">tsconfig.json</code>文件，进行少许修改即可。</p>\n<h1 id="编写ts组件"><a href="#%E7%BC%96%E5%86%99ts%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>编写TS组件</h1>\n<p>上面配置好TS后， 我们就可以开始用TS写组件了。还是跟上篇一样， 写一个简单的<code class="language-text">Counter.tsx</code>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Button<span class="token punctuation">,</span> StyleSheet<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> View <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-native\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n  count<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n  onInc<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  onDec<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> onInc<span class="token punctuation">,</span> onDec <span class="token punctuation">}</span><span class="token punctuation">:</span> Props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>root<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span><span class="token punctuation">></span></span>\n      Counter <span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+<span class="token punctuation">"</span></span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onInc <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>-<span class="token punctuation">"</span></span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onDec <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// styles</span>\n<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  root<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    alignItems<span class="token punctuation">:</span> <span class="token string">\'center\'</span><span class="token punctuation">,</span>\n    alignSelf<span class="token punctuation">:</span> <span class="token string">\'center\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  buttons<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    flexDirection<span class="token punctuation">:</span> <span class="token string">\'row\'</span><span class="token punctuation">,</span>\n    minHeight<span class="token punctuation">:</span> <span class="token number">70</span><span class="token punctuation">,</span>\n    alignItems<span class="token punctuation">:</span> <span class="token string">\'stretch\'</span><span class="token punctuation">,</span>\n    alignSelf<span class="token punctuation">:</span> <span class="token string">\'center\'</span><span class="token punctuation">,</span>\n    borderWidth<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  button<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    flex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    paddingVertical<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  greeting<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    color<span class="token punctuation">:</span> <span class="token string">\'#999\'</span><span class="token punctuation">,</span>\n    fontWeight<span class="token punctuation">:</span> <span class="token string">\'bold\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>然后我们执行<code class="language-text">./node_modules/.bin/tsc</code>命令，就会在<code class="language-text">lib</code>目录下生成相同目录结构的<code class="language-text">.js</code>文件等。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  TSReactNativeDemo git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ tree lib -L 3\nlib\n└── src\n    └── components\n        ├── Counter.js\n        └── Counter.js.map\n\n2 directories, 2 files</code></pre>\n      </div>\n<p>然后在<code class="language-text">App.js</code>中如下使用<code class="language-text">Counter</code>即可：</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StyleSheet<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> View <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-native\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> Counter <span class="token keyword">from</span> <span class="token string">\'./lib/src/components/Counter\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>welcome<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Welcome to React Native<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Counter</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>counter1<span class="token punctuation">"</span></span> <span class="token attr-name">count</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  container<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    flex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    justifyContent<span class="token punctuation">:</span> <span class="token string">\'center\'</span><span class="token punctuation">,</span>\n    alignItems<span class="token punctuation">:</span> <span class="token string">\'center\'</span><span class="token punctuation">,</span>\n    backgroundColor<span class="token punctuation">:</span> <span class="token string">\'#F5FCFF\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  welcome<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    fontSize<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n    textAlign<span class="token punctuation">:</span> <span class="token string">\'center\'</span><span class="token punctuation">,</span>\n    margin<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  instructions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    textAlign<span class="token punctuation">:</span> <span class="token string">\'center\'</span><span class="token punctuation">,</span>\n    color<span class="token punctuation">:</span> <span class="token string">\'#333333\'</span><span class="token punctuation">,</span>\n    marginBottom<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>由于<code class="language-text">lib/</code>目录下的文件是编译生成，因此不需要放在git里面， 我们在<code class="language-text">.gitingore</code>中添加<code class="language-text">lib/</code>忽略之：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text"># TypeScript\nlib/</code></pre>\n      </div>\n<h1 id="测试"><a href="#%E6%B5%8B%E8%AF%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试</h1>\n<p><strong>注意</strong>， <a href="http://airbnb.io/enzyme/docs/guides/react-native.html">enzyme测试ReactNative需要用react-native-mock</a>， 但是<a href="https://github.com/RealOrangeOne/react-native-mock/issues/139"><code class="language-text">react-native-mock</code>目前不支持React v16+</a>， 因此暂时不采用enzyme吧。</p>\n<p>RN还是用Jest做测试，为了支持TS，我们安装<code class="language-text">ts-jest</code>包。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">yarn add -D ts-jest</code></pre>\n      </div>\n<p>同样，我们也添加相应的<code class="language-text">@types</code>：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">yarn add -D @types/jest @types/react-test-renderer</code></pre>\n      </div>\n<p>修改<code class="language-text">package.json</code>文件里面<code class="language-text">jest</code>属性：</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token property">"jest"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"preset"</span><span class="token operator">:</span> <span class="token string">"react-native"</span><span class="token punctuation">,</span>\n    <span class="token property">"moduleFileExtensions"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token string">"ts"</span><span class="token punctuation">,</span>\n        <span class="token string">"tsx"</span><span class="token punctuation">,</span>\n        <span class="token string">"js"</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">"transform"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"^.+\\\\.(js)$"</span><span class="token operator">:</span> <span class="token string">"&lt;rootDir>/node_modules/babel-jest"</span><span class="token punctuation">,</span>\n        <span class="token property">"\\\\.(ts|tsx)$"</span><span class="token operator">:</span> <span class="token string">"&lt;rootDir>/node_modules/ts-jest/preprocessor.js"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"testRegex"</span><span class="token operator">:</span> <span class="token string">"(/__tests__/.*|\\\\.(test|spec))\\\\.(ts|tsx|js)$"</span><span class="token punctuation">,</span>\n    <span class="token property">"testPathIgnorePatterns"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token string">"\\\\.snap$"</span><span class="token punctuation">,</span>\n        <span class="token string">"&lt;rootDir>/node_modules/"</span><span class="token punctuation">,</span>\n        <span class="token string">"&lt;rootDir>/lib/"</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">"cacheDirectory"</span><span class="token operator">:</span> <span class="token string">".jest/cache"</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>然后我们就可以写测试代码了：</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token comment">// src/components/Counter.test.tsx</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> enzyme <span class="token keyword">from</span> <span class="token string">\'enzyme\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Counter <span class="token keyword">from</span> <span class="token string">\'./Counter\'</span><span class="token punctuation">;</span>\n\n<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'renders the correct text when count is not given\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> hello <span class="token operator">=</span> enzyme<span class="token punctuation">.</span><span class="token function">shallow</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Counter</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>counter1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">\'.counter\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">\'Counter counter1: 1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>更多关于Jest测试可以参考<a href="http://gitbook.cn/gitchat/column/5a17c2e113c02f4a35ca5a7d/topic/5a17de5713c02f4a35ca67af">测试 Jest</a>。</p>\n<h1 id="配置tslint"><a href="#%E9%85%8D%E7%BD%AEtslint" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>配置TSLint</h1>\n<p>不像上一篇用<code class="language-text">react-scripts-ts</code>的话TSLint是自动配置好的， 我们需要手动安装TSLint。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">yarn add -D tslint tslint-react</code></pre>\n      </div>\n<p>然后把上一章的<code class="language-text">tslint.json</code>文件复制过来。再在<code class="language-text">package.json</code>文件中增加如下代码：</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json">    <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"tslint -c tslint.json \'src/**/*.{ts,tsx}\'"</span><span class="token punctuation">,</span></code></pre>\n      </div>\n<p>然后就可以用<code class="language-text">yarn lint</code>检查代码了。</p>\n<p>为了在写代码的时候就能在VSCode里面获得错误提示， 可以安装VSCode的TSLint插件。</p>\n<h1 id="其他"><a href="#%E5%85%B6%E4%BB%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>其他</h1>\n<p>最后我们做一些额外工作提高开发效率。首先我们将<code class="language-text">tsc</code>命令写到<code class="language-text">package.json</code>里， 同时提供一个选择开启<code class="language-text">watch</code>模式。这样子执行<code class="language-text">yarn tsc-watch</code>命令后， TS就能实时编译为JS了，再配合上RN的<code class="language-text">Live Reload</code>或者<code class="language-text">Hot Reloading</code>能大大提高开发效率。</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json">    <span class="token property">"tsc"</span><span class="token operator">:</span> <span class="token string">"tsc"</span><span class="token punctuation">,</span>\n    <span class="token property">"tsc-watch"</span><span class="token operator">:</span> <span class="token string">"tsc --watch"</span><span class="token punctuation">,</span></code></pre>\n      </div>\n<p>Redux在RN中使用跟在React中使用没什么区别，参考<a href="/ts-react-starter">TypeScript React入门</a>即可。</p>\n<p>本文代码托管在<a href="https://github.com/magicly/TSReactNativeDemo">https://github.com/magicly/TSReactNativeDemo</a> ，随意使用~</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="https://github.com/Microsoft/TypeScript-React-Native-Starter">https://github.com/Microsoft/TypeScript-React-Native-Starter</a></li>\n<li><a href="https://github.com/kulshekhar/ts-jest">https://github.com/kulshekhar/ts-jest</a></li>\n<li><a href="https://www.typescriptlang.org/docs/home.html">https://www.typescriptlang.org/docs/home.html</a></li>\n<li><a href="http://airbnb.io/enzyme/">http://airbnb.io/enzyme/</a></li>\n<li><a href="https://palantir.github.io/tslint/rules/no-implicit-dependencies/">https://palantir.github.io/tslint/rules/no-implicit-dependencies/</a></li>\n<li><a href="https://palantir.github.io/tslint/usage/rule-flags/">https://palantir.github.io/tslint/usage/rule-flags/</a></li>\n<li><a href="https://stackoverflow.com/questions/31605781/why-do-tslint-and-jslint-report-empty-blocks">https://stackoverflow.com/questions/31605781/why-do-tslint-and-jslint-report-empty-blocks</a></li>\n<li><a href="https://medium.com/@rintoj/react-native-with-typescript-40355a90a5d7">https://medium.com/@rintoj/react-native-with-typescript-40355a90a5d7</a></li>\n<li><a href="http://bbs.reactnative.cn/topic/4483/%E4%BD%BF%E7%94%A8typescript%E7%BC%96%E5%86%99react-native-%E9%AB%98%E6%95%88%E7%89%88">http://bbs.reactnative.cn/topic/4483/使用typescript编写react-native-高效版</a></li>\n<li><a href="https://zhuanlan.zhihu.com/p/27029898">https://zhuanlan.zhihu.com/p/27029898</a></li>\n</ul>',
timeToRead:6,excerpt:"上一篇我们介绍了TypeScript如何跟React搭配使用 ，这篇我们继续介绍如何在React Native中使用TS。 关于React Native，我之前写过一本 React Native电子书 ， 如果不熟悉RN的话可以参考一下。 本文涵盖内容如下： TypeScript…",fields:{slug:"/ts-reactnative-starter/"},frontmatter:{title:"TypeScript React Native入门",date:"2018-02-25",category:"FE",tags:["typescript","ts","react","rn","redux","react native"]}}},{node:{html:'<p>Javascript作为一门动态语言， 简单易学，容易上手，非常适合web开发（浏览器也只支持JS啊）。但是随着项目逐渐变大，动态语言的弊端慢慢显露出来，比如没有编译器检查，代码质量不容易保证，IDE支持有限， 不便于重构等等， 而且JS设计之初比较仓促遗留了很多问题，好在ES6等后续版本慢慢修复了很多问题。也有各种尝试将其它语言编译成JS来做web开发，包括GWT、Dart、Java、Scala、Kotlin、Go等，而微软出的TypeScript由于一系列的优点，算是目前最流行的吧。当前Web开发基本是三大框架三分天下：Angular、React、Vue，而Angular本身就是TS开发的，React和Vue也支持TS开发。本文就简单介绍一下如何用TS开发React。</p>\n<p>另外Facebook自己开发的Flow也可以给JS添加静态类型，我之前写过一篇文章介绍React Native里面如何使用Flow，有兴趣的可以移步<a href="http://gitbook.cn/gitchat/column/5a17c2e113c02f4a35ca5a7d/topic/5a17de4013c02f4a35ca67a6">Flow使用</a>。</p>\n<p>本文涵盖内容如下：</p>\n<ul>\n<li>TypeScript &#x26; React</li>\n<li>TSLint</li>\n<li>Jest &#x26; Enzyme</li>\n<li>Redux</li>\n</ul>\n<!-- more -->\n<h1 id="安装create-react-app"><a href="#%E5%AE%89%E8%A3%85create-react-app" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装create-react-app</h1>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> i -g create-react-app</code></pre>\n      </div>\n<h1 id="新建项目"><a href="#%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>新建项目</h1>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">create-react-app ts-react-demo --scripts-version<span class="token operator">=</span>react-scripts-ts</code></pre>\n      </div>\n<p><a href="https://github.com/wmonk/create-react-app-typescript">react-scripts-ts</a>是CRA的一个fork，可以很方便的开始使用TS。</p>\n<p>项目初始结构为：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  ts-react-demo tree -L 1\n<span class="token keyword">.</span>\n├── README.md\n├── node_modules\n├── package.json\n├── public\n├── src\n├── tsconfig.json\n├── tsconfig.test.json\n├── tslint.json\n└── yarn.lock\n\n3 directories, 6 files</code></pre>\n      </div>\n<p>其中：</p>\n<ul>\n<li>tsconfig.json是关于TS编译器的一些配置项；</li>\n<li>tslint.json，是TSLint的配置文件，类似ESLint</li>\n</ul>\n<p>其他文件跟普通CRA建的项目一样。</p>\n<h1 id="运行"><a href="#%E8%BF%90%E8%A1%8C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>运行</h1>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> start</code></pre>\n      </div>\n<p>会自动启动浏览器打开<a href="http://localhost:3000">http://localhost:3000</a> 。</p>\n<h1 id="测试"><a href="#%E6%B5%8B%E8%AF%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试</h1>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> run <span class="token function">test</span></code></pre>\n      </div>\n<p>会运行Jest做测试， 检查所有以<code class="language-text">.test.ts</code>或者<code class="language-text">.spec.ts</code>结尾的文件。</p>\n<h1 id="打正式包"><a href="#%E6%89%93%E6%AD%A3%E5%BC%8F%E5%8C%85" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>打正式包</h1>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> run build</code></pre>\n      </div>\n<p>下面， 我们正式开始用TS来写React组件。</p>\n<h1 id="创建组件"><a href="#%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>创建组件</h1>\n<p>我们写一个简单的<code class="language-text">Counter</code>组件，接受<code class="language-text">name</code>和<code class="language-text">count</code>参数， 显示<code class="language-text">Counter {name}: {count}</code>，可以如下调用：</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Counter</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>counter1<span class="token punctuation">"</span></span> <span class="token attr-name">count</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span></code></pre>\n      </div>\n<p>React里，最简单的写组件的方式是用函数定义，即所谓的<a href="https://react-course.magicfun.ai/basics/stateless-component.html">Stateless Component</a>，定义如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token comment">// src/components/Counter.tsx</span>\n\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n  count<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">:</span> Props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    Counter <span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>当然也可以用<code class="language-text">class</code>的方式定义组件，写作如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>Props<span class="token punctuation">,</span> object<span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        Counter <span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>这里<code class="language-text">React.Component&lt;Props, object&gt;</code>第一个是<code class="language-text">props</code>的参数类型， 第二个是<code class="language-text">state</code>的类型。因为我们暂时用不到<code class="language-text">state</code>，所以简单放一个<code class="language-text">objcet</code>类型即可。</p>\n<p>然后我们修改<code class="language-text">index.tsx</code>文件：</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Hello <span class="token keyword">from</span> <span class="token string">\'./components/Counter\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> registerServiceWorker <span class="token keyword">from</span> <span class="token string">\'./registerServiceWorker\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./index.css\'</span><span class="token punctuation">;</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Hello</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>counter1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">registerServiceWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>最后提一下<code class="language-text">document.getElementById(&#39;root&#39;) as HTMLElement</code>是TS里的强制类型转化，因为<code class="language-text">document.getElementById(&#39;root&#39;)</code>返回的类型是<code class="language-text">HTMLElement | null</code>，即有可能为null。当然了， 如果html里面没有id是root的DOM，返回值就是null了。但是这里我们自己知道肯定有id是root的DOM的， 也就是说我们比TS编译器更清楚事实真相，所以可以用强制类型转化告诉编译器。PS, 其实不做貌似也没问题。</p>\n<h1 id="添加样式"><a href="#%E6%B7%BB%E5%8A%A0%E6%A0%B7%E5%BC%8F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>添加样式</h1>\n<p>前端开发，一个很重要的工作就是编写样式。CRA（也就是webpack和一堆loaders）支持直接<code class="language-text">import css</code>，所以我们可以直接编写<code class="language-text">src/components/Counter.css</code>，然后在<code class="language-text">Counter.tsx</code>中<code class="language-text">import</code>即可。</p>\n<div class="gatsby-highlight">\n      <pre class="language-css"><code class="language-css"><span class="token comment">/* src/components/Counter.css */</span>\n<span class="token selector">.counter</span> <span class="token punctuation">{</span>\n  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n  <span class="token property">font-size</span><span class="token punctuation">:</span> 48px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./Counter.css\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n  count<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">:</span> Props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>counter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    Counter <span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>当然，由于CSS只有全局作用域，很容易出现命名冲突，现在越来越流行用CSSInJS来开发，推荐使用<a href="https://react-course.magicfun.ai/css/">Styled Components</a>。</p>\n<h1 id="测试-1"><a href="#%E6%B5%8B%E8%AF%95-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试</h1>\n<p>我们用<a href="http://airbnb.io/enzyme/">Enzyme</a>来做测试。首先安装依赖：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> i -D enzyme @types/enzyme react-addons-test-utils</code></pre>\n      </div>\n<p>其中<code class="language-text">enzyme</code>是实际运行的代码， <code class="language-text">@types/enzyme</code>是类型声明文件，类似于C/C++中的<code class="language-text">.h</code>文件。</p>\n<p>然后我们就可以写测试代码了：</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token comment">// src/components/Counter.test.tsx</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> enzyme <span class="token keyword">from</span> <span class="token string">\'enzyme\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Counter <span class="token keyword">from</span> <span class="token string">\'./Counter\'</span><span class="token punctuation">;</span>\n\n<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'renders the correct text when count is not given\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> hello <span class="token operator">=</span> enzyme<span class="token punctuation">.</span><span class="token function">shallow</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Counter</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>counter1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">\'.counter\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">\'Counter counter1: 1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><strong>注意！！！</strong>：这里我遇到一些问题， 直接执行<code class="language-text">npm run test</code>，报错：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">Error: Cannot <span class="token function">find</span> module <span class="token string">\'./development/fe/ts-react-demo/node_modules/jest-cli\'</span></code></pre>\n      </div>\n<p>发现<code class="language-text">jest-cli</code>目录为空：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  ts-react-demo git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ ll node_modules/jest-cli\ntotal 0\ndrwxr-xr-x  3 magicly  staff    96B  2 24 12:12 node_modules</code></pre>\n      </div>\n<p>而重新用<code class="language-text">yarn</code>安装所有依赖， 则正常了：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  ts-react-demo git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ ll node_modules/jest-cli\ntotal 16\n-rw-r--r--   1 magicly  staff   595B  5 12  2017 README.md\ndrwxr-xr-x   3 magicly  staff    96B  2 24 12:16 bin\ndrwxr-xr-x  23 magicly  staff   736B  2 24 12:16 build\ndrwxr-xr-x   3 magicly  staff    96B  2 24 12:16 node_modules\n-rw-r--r--   1 magicly  staff   1.7K  5 24  2017 package.json</code></pre>\n      </div>\n<p>貌似<code class="language-text">jest</code>跟<code class="language-text">yarn</code>更适合？\n然后执行<code class="language-text">npm run test</code>报错：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">FAIL  src/components/Counter.test.tsx\n  ● renders the correct text when no count is given\n\n\n          Enzyme Internal Error: Enzyme expects an adapter to be configured, but found none. To\n          configure an adapter, you should call <span class="token variable"><span class="token variable">`</span>Enzyme.configure<span class="token punctuation">(</span><span class="token punctuation">{</span> adapter: new Adapter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token variable">`</span></span>\n          before using any of Enzyme<span class="token string">\'s top level APIs, where <span class="token variable"><span class="token variable">`</span>Adapter<span class="token variable">`</span></span> is the adapter\n          corresponding to the library currently being tested. For example:\n\n          import Adapter from \'</span>enzyme-adapter-react-15\'<span class="token punctuation">;</span>\n\n          To <span class="token function">find</span> out <span class="token function">more</span> about this, see http://airbnb.io/enzyme/docs/installation/index.html</code></pre>\n      </div>\n<p>因为我们用的Reactv16，安装相应adapter即可：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> i -D enzyme-adapter-react-16</code></pre>\n      </div>\n<p>结果，很奇怪，<code class="language-text">jest-cli</code>又被清空了！又重新用<code class="language-text">yarn</code>安装了一次，ok了， 看样子以后用CRA的话还是用yarn吧，毕竟都是Facebook的产品。</p>\n<p>还会报错说没有<code class="language-text">enzyme-adapter-react-16</code>的类型定义信息， 于是安装之: <code class="language-text">yarn add -D @types/enzyme-adapter-react-16</code>。 一起正常了！</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"> PASS  src/components/Counter.test.tsx\n  ✓ renders the correct text when count is not given <span class="token punctuation">(</span>3ms<span class="token punctuation">)</span>\n  ✓ renders the correct text when count is given <span class="token punctuation">(</span>1ms<span class="token punctuation">)</span>\n\nTest Suites: 1 passed, 1 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        0.597s, estimated 2s\nRan all <span class="token function">test</span> suites related to changed files.\n\nWatch Usage: Press w to show more.</code></pre>\n      </div>\n<p>最终测试代码如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token comment">// src/components/Counter.test.tsx</span>\n\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> enzyme <span class="token keyword">from</span> <span class="token string">\'enzyme\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Adapter <span class="token keyword">from</span> <span class="token string">\'enzyme-adapter-react-16\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Counter <span class="token keyword">from</span> <span class="token string">\'./Counter\'</span><span class="token punctuation">;</span>\n\nenzyme<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">{</span> adapter<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'renders the correct text when count is not given\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> hello <span class="token operator">=</span> enzyme<span class="token punctuation">.</span><span class="token function">shallow</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Counter</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>counter1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">\'.counter\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">\'Counter counter1: 1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'renders the correct text when count is given\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> hello <span class="token operator">=</span> enzyme<span class="token punctuation">.</span><span class="token function">shallow</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Counter</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>counter1<span class="token punctuation">"</span></span> <span class="token attr-name">count</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">\'.counter\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">\'Counter counter1: 5\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h1 id="状态管理"><a href="#%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>状态管理</h1>\n<p>稍微复杂点的应用都需要专门的状态管理工具， 比较流行的有<a href="http://redux.js.org/">Redux</a>和<a href="https://mobx.js.org/">MobX</a>， 这里我们使用<a href="http://gitbook.cn/gitchat/column/5a17c2e113c02f4a35ca5a7d/topic/5a17ddd313c02f4a35ca676f">更熟悉的Redux</a>, 以前做培训的时候录制过一个<a href="https://www.bilibili.com/video/av17174653/">redux视频</a>，有兴趣的可以看看。</p>\n<h2 id="安装redux"><a href="#%E5%AE%89%E8%A3%85redux" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装redux</h2>\n<p>首先我们还是安装<code class="language-text">redux</code>和<code class="language-text">react-redux</code>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">yarn add redux react-redux @types/react-redux</code></pre>\n      </div>\n<p>这里我们只需要安装<code class="language-text">react-redux</code>的types，因为<code class="language-text">redux</code>包里自己包含了类型定义（现在很多流行的包都这样做了，也可以反映出TS的流行程度）。</p>\n<p>redux有三个重要部分，分别是<code class="language-text">state</code>, <code class="language-text">action</code>和<code class="language-text">reducer</code>，接下来我们分别介绍。</p>\n<h2 id="state"><a href="#state" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>state</h2>\n<p>redux的设计原则是整个App里就只有一颗状态树，我们的应用比较简单，状态只有两个变量即可：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// src/types/index.tsx</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">StoreState</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n  count<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="actions"><a href="#actions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>actions</h2>\n<p>action就是简单的JS对象，只需要有<code class="language-text">type</code>属性即可，为了便于重构，我们把用作<code class="language-text">action.type</code>的字符串作为常量放在单独的文件。 </p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// src/constants/index.ts</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">INCX</span> <span class="token operator">=</span> <span class="token string">\'INC\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">DEC</span> <span class="token operator">=</span> <span class="token string">\'DEC\'</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>然后定义<code class="language-text">action</code>文件：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> constants <span class="token keyword">from</span> <span class="token string">\'../constants\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">ActionINC</span> <span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token keyword">typeof</span> constants<span class="token punctuation">.</span><span class="token constant">INC</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">ActionDEC</span> <span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token keyword">typeof</span> constants<span class="token punctuation">.</span><span class="token constant">DEC</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> type ActionCount <span class="token operator">=</span> ActionINC <span class="token operator">|</span> ActionDEC<span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> constants<span class="token punctuation">.</span><span class="token constant">INC</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">dec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> constants<span class="token punctuation">.</span><span class="token constant">DEC</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>注意</strong>，TS有<a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html">字符串字面量类型String Literal Types</a>，也就是说<code class="language-text">typeof &#39;INC&#39;</code>类型也就是<code class="language-text">&#39;INC&#39;</code>，但是不能把作为<code class="language-text">type</code>的<code class="language-text">&#39;INC&#39;</code>跟作为字符串本身的<code class="language-text">&#39;INC&#39;</code>混淆。这就是为什么在定义<code class="language-text">ActionINC</code>中，需要使用<code class="language-text">typeof constants.INC</code>而不能直接使用<code class="language-text">constants.INC</code>（会报找不到INC）。</p>\n<p>如果觉得我们为了定义两个action写了太多<strong>boilerplate</strong>代码， 可以看一下<a href="https://github.com/reduxactions/redux-actions">redux-actions</a>。</p>\n<h2 id="reducers"><a href="#reducers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>reducers</h2>\n<p>redux中，reducer是一个pure function，接受之前的状态和当前的action，返回下一个状态，即：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token punctuation">(</span>prevState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=></span> nextState</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// src/reducers/index.ts</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ActionCount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../actions\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StoreState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../types\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">INC</span><span class="token punctuation">,</span> <span class="token constant">DEC</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../constants\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span>prevState<span class="token punctuation">:</span> StoreState<span class="token punctuation">,</span> action<span class="token punctuation">:</span> ActionCount<span class="token punctuation">)</span><span class="token punctuation">:</span> StoreState <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token constant">INC</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>prevState<span class="token punctuation">,</span> count<span class="token punctuation">:</span> prevState<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token constant">DEC</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>prevState<span class="token punctuation">,</span> count<span class="token punctuation">:</span> prevState<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> prevState<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="container-component"><a href="#container-component" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Container Component</h2>\n<p>一般在开发React应用时，我们会把控制显示的组件定义成无状态组件（Stateless Functional Component），然后在此基础上包装状态，控制逻辑。可以参考redux作者<a href="https://twitter.com/dan_abramov">Dan Abramov</a>的这篇文章<a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0">Presentational and Container Components</a>。</p>\n<p>我们先给<code class="language-text">Presentational</code>组件<code class="language-text">Counter</code>添加一些行为，可以增加和减少count。</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token comment">// src/components/Counter.tsx</span>\n\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./Counter.css\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n  count<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n  onInc<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  onDec<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> onInc<span class="token punctuation">,</span> onDec <span class="token punctuation">}</span><span class="token punctuation">:</span> Props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>counter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    Counter <span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onInc<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token operator">+</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onDec<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token operator">-</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>然后我们用<code class="language-text">react-redux</code>的<code class="language-text">connect</code>将<code class="language-text">redux</code>的状态等跟<code class="language-text">Counter</code>组件关联起来。<code class="language-text">connect</code>函数接受两个参数：</p>\n<ul>\n<li>mapState2Props： 将state跟props关联起来，redux的state变化的时候自动触发props更新导致组件重新渲染</li>\n<li>mapDispatch2Props： 将redux的dispatch传递给事件回调函数，用户触发redux的state更新</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token comment">// src/containers/Counter.tsx</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> connect<span class="token punctuation">,</span> Dispatch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Counter <span class="token keyword">from</span> <span class="token string">\'../components/Counter\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> actions <span class="token keyword">from</span> <span class="token string">\'../actions\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StoreState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../types\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">mapState2Props</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> count <span class="token punctuation">}</span><span class="token punctuation">:</span> StoreState<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">,</span>\n    count<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> mapDispatch2Props <span class="token operator">=</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">:</span> Dispatch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>actions.ActionCount</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    onInc<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span>actions<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    onDec<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span>actions<span class="token punctuation">.</span><span class="token function">dec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapState2Props<span class="token punctuation">,</span> mapDispatch2Props<span class="token punctuation">)</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="store"><a href="#store" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Store</h2>\n<p>最后，我们在最上层组件（通常是在index.tsx里），初始化redux的store，然后传递下去。</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StoreState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./types\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">\'./reducers\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Hello <span class="token keyword">from</span> <span class="token string">\'./containers/Counter\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> registerServiceWorker <span class="token keyword">from</span> <span class="token string">\'./registerServiceWorker\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./index.css\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> store <span class="token operator">=</span> createStore<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StoreState</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'counter1\'</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Provider</span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Hello</span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Provider</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">registerServiceWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>一切都搞定了。 最后，如果要部署上线的话， 请记得用<code class="language-text">yarn run build</code>打包压缩代码，然后部署<code class="language-text">build</code>目录下的文件即可。</p>\n<p>本文代码托管在<a href="https://github.com/magicly/ts-react-demo">https://github.com/magicly/ts-react-demo</a> ，随意使用~</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="https://github.com/Microsoft/TypeScript-React-Starter">https://github.com/Microsoft/TypeScript-React-Starter</a></li>\n<li><a href="https://github.com/wmonk/create-react-app-typescript">https://github.com/wmonk/create-react-app-typescript</a></li>\n<li><a href="https://www.typescriptlang.org/docs/home.html">https://www.typescriptlang.org/docs/home.html</a></li>\n<li><a href="http://airbnb.io/enzyme/">http://airbnb.io/enzyme/</a></li>\n</ul>',
timeToRead:9,excerpt:"Javascript作为一门动态语言， 简单易学，容易上手，非常适合web开发（浏览器也只支持JS啊）。但是随着项目逐渐变大，动态语言的弊端慢慢显露出来，比如没有编译器检查，代码质量不容易保证，IDE支持有限， 不便于重构等等， 而且JS设计之初比较仓促遗留了很多问题，好在ES…",fields:{slug:"/ts-react-starter/"},frontmatter:{title:"TypeScript React入门",date:"2018-02-24",category:"FE",tags:["typescript","ts","react"]}}},{node:{html:'<p>最近做个app要接入一下微信sdk，按理说很简单的， 但是碰到很多坑， 记录一下。</p>\n<!-- more -->\n<p>APP是用RN做的， 自然想找一个封装好的RN微信，于是找到了<a href="https://github.com/yorkie/react-native-wechat">https://github.com/yorkie/react-native-wechat</a> ，这个还算是star多得， 有1000多个， 相比另外一个<a href="https://github.com/reactnativecn/react-native-wx">https://github.com/reactnativecn/react-native-wx</a> 貌似要活跃一些，用户也较多， 那就选react-native-wechat吧， 结果也已经7个多月没有更新过了，里面用的android的sdk都是两年多前的， 作者貌似都不知道现在用gradle了。自然也就不支持微信小程序分享。 后来看到有人提交了PR: <a href="https://github.com/yorkie/react-native-wechat/pull/324">https://github.com/yorkie/react-native-wechat/pull/324</a> ，更新了sdk，支持小程序， 不过作者貌似没有merge。 索性干脆直接依赖这个fork吧：<a href="https://github.com/LittoCats/react-native-wechat">https://github.com/LittoCats/react-native-wechat</a> .</p>\n<p>然后就是按照说明配置好依赖和appId等。 结果，死活分享不出去。后来能分享出去了， 但是卡死在调用哪里， 都已经用try/catch包起来了， 但是两条路都没有走。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Wechat<span class="token punctuation">.</span><span class="token function">shareToTimeline</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        type<span class="token punctuation">:</span> <span class="token string">\'text\'</span><span class="token punctuation">,</span>\n        description<span class="token punctuation">:</span> <span class="token string">\'hello, wechat\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'share text message to time line successful:\'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>既不成功，也不失败。。。。。</p>\n<p>然后去看JS源码，看Java源码。最后发现是Java里面的回调就没有执行：</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">\t<span class="token comment">// 第三方应用发送到微信的请求处理后的响应结果，会回调到该方法</span>\n\t<span class="token annotation punctuation">@Override</span>\n\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResp</span><span class="token punctuation">(</span>BaseResp resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>那应该就是包名或签名没有配置好了。 仔细检查没有问题啊， 也用微信提供的签名工具提取了签名。后来下载了微信的demo，一步一步调试和查资料尝试，过程花了两天， 懒得细说了，最后发现下面这些坑s：</p>\n<h2 id="微信平台审核过之后包名和签名可以修改么？"><a href="#%E5%BE%AE%E4%BF%A1%E5%B9%B3%E5%8F%B0%E5%AE%A1%E6%A0%B8%E8%BF%87%E4%B9%8B%E5%90%8E%E5%8C%85%E5%90%8D%E5%92%8C%E7%AD%BE%E5%90%8D%E5%8F%AF%E4%BB%A5%E4%BF%AE%E6%94%B9%E4%B9%88%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>微信平台审核过之后包名和签名可以修改么？</h2>\n<p>可以。但是微信有缓存！！！要么卸载微信重装， 要么清楚微信数据， 记住是要从系统设置里面清除， 而不是从微信app里面清除！</p>\n<ul>\n<li><a href="http://ask.dcloud.net.cn/question/18354">http://ask.dcloud.net.cn/question/18354</a></li>\n<li><a href="http://blog.csdn.net/ZFY11/article/details/78216278">http://blog.csdn.net/ZFY11/article/details/78216278</a></li>\n</ul>\n<h2 id="微信后台配置的包名必须是manifest里面的package！！！"><a href="#%E5%BE%AE%E4%BF%A1%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE%E7%9A%84%E5%8C%85%E5%90%8D%E5%BF%85%E9%A1%BB%E6%98%AFmanifest%E9%87%8C%E9%9D%A2%E7%9A%84package%EF%BC%81%EF%BC%81%EF%BC%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>微信后台配置的包名必须是manifest里面的package！！！</h2>\n<p>这个是最坑的。 因为RN默认生成的package和目录结构是<code class="language-text">com.xxx</code>，而我要取另外的包名，于是在<code class="language-text">app/build.gradle</code>文件里面改了<code class="language-text">applicationId</code>，以为可以了，结果不行！！！微信要的其实根本就不是APP的包名， 而是类的目录结构（也算是Java的包名吧。。。）！！！！\n至于manifest里的package和applicationId有什么区别，请看：</p>\n<ul>\n<li><a href="http://blog.csdn.net/qq1072313099/article/details/52872800">http://blog.csdn.net/qq1072313099/article/details/52872800</a></li>\n<li><a href="http://blog.csdn.net/u011889786/article/details/54296462">http://blog.csdn.net/u011889786/article/details/54296462</a></li>\n</ul>\n<p>跟同事分析， 微信sdk的工具机制应该是： 微信sdk里面注册了scheme，分享或登录后微信通过scheme通知微信sdk， 然后微信sdk根据“包名”找到我们的代码<code class="language-text">{package}.wxapi/WXEntryActivity.java</code>，然后执行里面的<code class="language-text">onResp()</code>回调函数。所以其实微信要的不是app的包名， 而是需要找到代码的位置！！！</p>\n<h2 id="微信分享sdk不支持分享多张图片"><a href="#%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%ABsdk%E4%B8%8D%E6%94%AF%E6%8C%81%E5%88%86%E4%BA%AB%E5%A4%9A%E5%BC%A0%E5%9B%BE%E7%89%87" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>微信分享sdk不支持分享多张图片</h2>\n<p>这个用系统的分享接口反而支持！\n<a href="https://github.com/yorkie/react-native-wechat/issues/270">https://github.com/yorkie/react-native-wechat/issues/270</a></p>',timeToRead:2,excerpt:"最近做个app要接入一下微信sdk，按理说很简单的， 但是碰到很多坑， 记录一下。 APP是用RN做的， 自然想找一个封装好的RN微信，于是找到了 https://github.com/yorkie/react-native-wechat  ，这个还算是star多得， 有100…",fields:{slug:"/wechat-sdk/"},frontmatter:{title:"接入微信SDK的坑s",date:"2018-02-06",category:"FE",tags:["微信","Wechat","React Native","RN"]}}},{node:{html:'<p>最近做了一个小项目， 在微信里面根据用户选择的模板、用户微信头像、昵称、用户选择上传的照片合成一个图片，用户可以保存到手机上，然后发朋友圈。</p>\n<p>说复杂其实不复杂， 总结一下其中踩过的坑。</p>\n<!-- more -->\n<h1 id="用canvas合成照片"><a href="#%E7%94%A8canvas%E5%90%88%E6%88%90%E7%85%A7%E7%89%87" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>用Canvas合成照片</h1>\n<p>最开始是打算自己写Canvas，绘制照片、文字等， 最后调用canvas的<code class="language-text">toDataURI()</code>方法合成照片的。但是canvas上又不方便响应用户点击等操作，还得用dom写一遍， 感觉就有点重复了。 后来想起以前用过的<a href="https://github.com/niklasvh/html2canvas">html2canvas库</a>，果断用之，很方便。顺便还搜到几个其他的库，不过暂时没用过，先mark一下：</p>\n<ul>\n<li><a href="https://github.com/tsayen/dom-to-image">https://github.com/tsayen/dom-to-image</a></li>\n</ul>\n<p>这里有几篇blog介绍使用的，可以看看，当然官网文档永远是最权威的，适当的时候还需要看下源码。</p>\n<ul>\n<li><a href="https://segmentfault.com/a/1190000011478657">https://segmentfault.com/a/1190000011478657</a></li>\n<li><a href="https://www.jianshu.com/p/a99312eacf4f">https://www.jianshu.com/p/a99312eacf4f</a></li>\n<li><a href="https://www.h5jun.com/post/convert-code-to-image-via-html2canvas.html">https://www.h5jun.com/post/convert-code-to-image-via-html2canvas.html</a></li>\n</ul>\n<h1 id="retina屏幕下canvas模糊"><a href="#retina%E5%B1%8F%E5%B9%95%E4%B8%8Bcanvas%E6%A8%A1%E7%B3%8A" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Retina屏幕下canvas模糊</h1>\n<p>马上问题来了， retina屏幕下（mac pro、iphone6+）保存出来的图片是模糊的。这个主要是canvas宽高的单位跟css单位不一致，retina屏幕下用了4倍像素渲染造成的。需要了解CSS像素、物理像素、逻辑像素、PPI、devicePixelRatio等概念，可以参考下面几篇。</p>\n<ul>\n<li><a href="https://segmentfault.com/q/1010000002391424">https://segmentfault.com/q/1010000002391424</a></li>\n<li><a href="https://segmentfault.com/a/1190000003730246">https://segmentfault.com/a/1190000003730246</a></li>\n<li><a href="https://www.html5rocks.com/en/tutorials/canvas/hidpi/">https://www.html5rocks.com/en/tutorials/canvas/hidpi/</a></li>\n<li><a href="https://github.com/jondavidjohn/hidpi-canvas-polyfill">https://github.com/jondavidjohn/hidpi-canvas-polyfill</a></li>\n<li><a href="https://github.com/jawil/blog/issues/21">https://github.com/jawil/blog/issues/21</a></li>\n<li><a href="https://div.io/topic/1092">https://div.io/topic/1092</a></li>\n<li><a href="http://www.dengzhr.com/frontend/html/1050">http://www.dengzhr.com/frontend/html/1050</a></li>\n<li><a href="https://benweizhu.github.io/blog/2017/03/25/css-retina-image/">https://benweizhu.github.io/blog/2017/03/25/css-retina-image/</a></li>\n<li><a href="https://www.zhihu.com/question/21653056">https://www.zhihu.com/question/21653056</a></li>\n<li><a href="https://github.com/strues/retinajs">https://github.com/strues/retinajs</a></li>\n<li><a href="https://mutian.wang/tech/1386">https://mutian.wang/tech/1386</a></li>\n<li><a href="https://www.webdesignerdepot.com/2015/08/the-state-of-responsive-images/">https://www.webdesignerdepot.com/2015/08/the-state-of-responsive-images/</a></li>\n<li><a href="https://coderwall.com/p/vmkk6a/how-to-make-the-canvas-not-look-like-crap-on-retina">https://coderwall.com/p/vmkk6a/how-to-make-the-canvas-not-look-like-crap-on-retina</a></li>\n<li>*</li>\n</ul>\n<h2 id="弧形文字"><a href="#%E5%BC%A7%E5%BD%A2%E6%96%87%E5%AD%97" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>弧形文字</h2>\n<p>设计稿有一个模板里面文字是弧形的，用svg实现了：</p>\n<ul>\n<li><a href="https://www.w3cplus.com/css3/css-secrets/circular-text.html">https://www.w3cplus.com/css3/css-secrets/circular-text.html</a></li>\n</ul>\n<p>结果发现html2canvas没法保存svg。google之后发现html2canvas支持svg有问题：</p>\n<ul>\n<li><a href="https://github.com/niklasvh/html2canvas/issues/95">https://github.com/niklasvh/html2canvas/issues/95</a></li>\n<li><a href="https://github.com/niklasvh/html2canvas/issues/197">https://github.com/niklasvh/html2canvas/issues/197</a></li>\n<li><a href="https://github.com/niklasvh/html2canvas/issues/267">https://github.com/niklasvh/html2canvas/issues/267</a></li>\n</ul>\n<p>我用inline svg也是没法绘制出来的， 开启了<code class="language-text">foreignObject</code>选项，结果svg文字是可以保存了， 但是很多我不想要的内容也出来了。\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/foreignObject">foreignObject</a>这个不是很了解，以后再看吧。</p>\n<p>搜了一下，发现一些把svg转成canvas的库， 大概看了一下觉得没必要引入，还不如直接自己canvas画好了。这些库mark一下：</p>\n<ul>\n<li><a href="https://github.com/canvg/canvg">https://github.com/canvg/canvg</a></li>\n<li><a href="https://github.com/kangax/fabric.js/">https://github.com/kangax/fabric.js/</a></li>\n<li><a href="http://flashcanvas.net/">http://flashcanvas.net/</a></li>\n</ul>\n<p>没有解决，后来还是考虑自己用canvas画算了，参考下文：</p>\n<ul>\n<li><a href="https://segmentfault.com/a/1190000006258726">https://segmentfault.com/a/1190000006258726</a></li>\n</ul>\n<h2 id="canvas裁剪圆"><a href="#canvas%E8%A3%81%E5%89%AA%E5%9C%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>canvas裁剪圆</h2>\n<ul>\n<li><a href="https://www.kancloud.cn/dennis/canvas/340120">https://www.kancloud.cn/dennis/canvas/340120</a></li>\n</ul>\n<h2 id="canvas透明背景"><a href="#canvas%E9%80%8F%E6%98%8E%E8%83%8C%E6%99%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>canvas透明背景</h2>\n<ul>\n<li><a href="http://www.dengzhr.com/frontend/html/1096">http://www.dengzhr.com/frontend/html/1096</a></li>\n</ul>\n<h2 id="iphone上竖屏拍摄图片旋转bug"><a href="#iphone%E4%B8%8A%E7%AB%96%E5%B1%8F%E6%8B%8D%E6%91%84%E5%9B%BE%E7%89%87%E6%97%8B%E8%BD%ACbug" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>iPhone上竖屏拍摄图片旋转bug</h2>\n<p>iphone和部分三星手机上竖屏拍摄图片会旋转， 需要用<a href=""></a>读取Orientation，来自己纠正。</p>\n<ul>\n<li><a href="https://www.jianshu.com/p/8afd55beca5a">https://www.jianshu.com/p/8afd55beca5a</a></li>\n<li><a href="https://www.bbsmax.com/A/VGzlMnYNJb/">https://www.bbsmax.com/A/VGzlMnYNJb/</a></li>\n<li><a href="https://github.com/exif-js/exif-js/">https://github.com/exif-js/exif-js/</a></li>\n<li><a href="https://segmentfault.com/a/1190000009990033">https://segmentfault.com/a/1190000009990033</a></li>\n<li><a href="https://aotu.io/notes/2017/05/25/canvas-img-rotate-and-flip/index.html">https://aotu.io/notes/2017/05/25/canvas-img-rotate-and-flip/index.html</a></li>\n</ul>\n<h2 id="轮播图"><a href="#%E8%BD%AE%E6%92%AD%E5%9B%BE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>轮播图</h2>\n<p>轮播图太通用不过了，网上也有很多代码或者插件（很多jQuery的插件）实现。推荐两个：</p>\n<ul>\n<li><a href="https://github.com/kenwheeler/slick/">https://github.com/kenwheeler/slick/</a></li>\n<li><a href="https://github.com/nolimits4web/swiper/">https://github.com/nolimits4web/swiper/</a>\n两个功能几乎一样，不过slick需要jquery。\n当然，两个都有react的移植：</li>\n<li><a href="https://github.com/akiran/react-slick">https://github.com/akiran/react-slick</a></li>\n<li><a href="https://github.com/kidjp85/react-id-swiper">https://github.com/kidjp85/react-id-swiper</a>\n我最后用了react-id-swiper，可以根据自己需要选择。</li>\n</ul>\n<h2 id="图片裁剪"><a href="#%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>图片裁剪</h2>\n<p>html5里面有<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader">FileReader</a>特性， 可以在前端读取修改文件内容，再结合canvas，很容易就实现前端裁剪图片了。</p>\n<ul>\n<li><a href="https://segmentfault.com/a/1190000000754560">https://segmentfault.com/a/1190000000754560</a>\n结果看到有人说微信android版本，不支持长按保存base64方式的图片（canvas.toDataURI）的， 吓我一大跳，结果现在好像已经修复此bug了：</li>\n<li><a href="https://mzkmzk.gitbooks.io/web_accumulate/wei_xin_base64_tu_pian_bao_cun_shi_bai.html">https://mzkmzk.gitbooks.io/web<em>accumulate/wei</em>xin<em>base64</em>tu<em>pian</em>bao<em>cun</em>shi_bai.html</a></li>\n<li><a href="https://segmentfault.com/q/1010000007709767">https://segmentfault.com/q/1010000007709767</a></li>\n<li><a href="http://www.cnblogs.com/Travel/p/4624929.html">http://www.cnblogs.com/Travel/p/4624929.html</a></li>\n<li><a href="https://www.codecasts.com/blog/post/crop-image-local-using-html5-canvas">https://www.codecasts.com/blog/post/crop-image-local-using-html5-canvas</a></li>\n<li><a href="https://dailc.github.io/2017/11/16/imageclip_rotate_compress.html">https://dailc.github.io/2017/11/16/imageclip<em>rotate</em>compress.html</a></li>\n<li><a href="http://www.cnblogs.com/Travel/p/4624929.html">http://www.cnblogs.com/Travel/p/4624929.html</a></li>\n<li><a href="https://www.codecasts.com/blog/post/crop-image-local-using-html5-canvas">https://www.codecasts.com/blog/post/crop-image-local-using-html5-canvas</a></li>\n<li><a href="https://github.com/DominicTobias/react-image-crop">https://github.com/DominicTobias/react-image-crop</a></li>\n<li><a href="http://hpoenixf.com/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Ereact%E7%9A%84%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA%E7%BB%84%E4%BB%B6.html">http://hpoenixf.com/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Ereact%E7%9A%84%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA%E7%BB%84%E4%BB%B6.html</a></li>\n<li><a href="https://github.com/nitin42/react-imgpro">https://github.com/nitin42/react-imgpro</a></li>\n<li><a href="https://github.com/AlloyTeam/AlloyImage">https://github.com/AlloyTeam/AlloyImage</a></li>\n<li><a href="https://github.com/AlloyTeam/AlloyFinger">https://github.com/AlloyTeam/AlloyFinger</a></li>\n<li><a href="https://github.com/AlloyTeam/AlloyCrop">https://github.com/AlloyTeam/AlloyCrop</a></li>\n<li><a href="https://github.com/AlloyTeam/AlloyTouch/wiki">https://github.com/AlloyTeam/AlloyTouch/wiki</a></li>\n</ul>\n<h2 id="读取图片每个像素点的rgb"><a href="#%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87%E6%AF%8F%E4%B8%AA%E5%83%8F%E7%B4%A0%E7%82%B9%E7%9A%84rgb" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>读取图片每个像素点的RGB</h2>\n<ul>\n<li><a href="https://zhidao.baidu.com/question/752983355955636524.html">https://zhidao.baidu.com/question/752983355955636524.html</a></li>\n<li><a href="http://js8.in/2013/01/02/html5-canvas-%E5%9B%BE%E7%89%87%E5%83%8F%E7%B4%A0/">http://js8.in/2013/01/02/html5-canvas-%E5%9B%BE%E7%89%87%E5%83%8F%E7%B4%A0/</a></li>\n<li><a href="https://segmentfault.com/a/1190000004084956">https://segmentfault.com/a/1190000004084956</a></li>\n<li><a href="http://yijiebuyi.com/blog/58bcb7af4a0e3846d02d10def9fdeecc.html">http://yijiebuyi.com/blog/58bcb7af4a0e3846d02d10def9fdeecc.html</a></li>\n<li><a href="http://www.cnblogs.com/zichi/p/html5-file-api.html">http://www.cnblogs.com/zichi/p/html5-file-api.html</a></li>\n<li><a href="https://www.xiabingbao.com/html5/2015/05/20/html5-filereader-natural.html">https://www.xiabingbao.com/html5/2015/05/20/html5-filereader-natural.html</a></li>\n</ul>\n<h2 id="滑动到屏幕底部"><a href="#%E6%BB%91%E5%8A%A8%E5%88%B0%E5%B1%8F%E5%B9%95%E5%BA%95%E9%83%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>滑动到屏幕底部</h2>\n<p>需要了解viewport、clientHeight、offsetHeight、scrollHeight、scrollTop等概念。</p>\n<ul>\n<li><a href="http://www.cnblogs.com/w-wanglei/p/5863240.html">http://www.cnblogs.com/w-wanglei/p/5863240.html</a></li>\n<li><a href="http://imweb.io/topic/57c5409e808fd2fb204eef52">http://imweb.io/topic/57c5409e808fd2fb204eef52</a></li>\n<li><a href="https://www.jianshu.com/p/d267456ebc0d">https://www.jianshu.com/p/d267456ebc0d</a></li>\n<li><a href="https://exp-team.github.io/blog/2017/02/25/js/infinite-scroll/">https://exp-team.github.io/blog/2017/02/25/js/infinite-scroll/</a></li>\n<li><a href="https://stackoverflow.com/questions/22675126/what-is-offsetheight-clientheight-scrollheight">https://stackoverflow.com/questions/22675126/what-is-offsetheight-clientheight-scrollheight</a></li>\n<li><a href="https://cauu.github.io/2017/04/React-infinite-scroll-list/">https://cauu.github.io/2017/04/React-infinite-scroll-list/</a></li>\n<li><a href="https://www.jianshu.com/p/97f5cbc66577">https://www.jianshu.com/p/97f5cbc66577</a></li>\n</ul>\n<h2 id="reactrouter-v4在非组件页面使用history"><a href="#reactrouter-v4%E5%9C%A8%E9%9D%9E%E7%BB%84%E4%BB%B6%E9%A1%B5%E9%9D%A2%E4%BD%BF%E7%94%A8history" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ReactRouter v4在非组件页面使用history</h2>\n<ul>\n<li><a href="https://github.com/brickspert/blog/issues/3">https://github.com/brickspert/blog/issues/3</a></li>\n</ul>\n<h2 id="react高阶组件"><a href="#react%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React高阶组件</h2>\n<p>最后用React高阶组件把各个模板重构了一下。\n<a href="https://reactjs.org/docs/higher-order-components.html">https://reactjs.org/docs/higher-order-components.html</a></p>\n<blockquote>\n<p>Concretely, a higher-order component is a function that takes a component and returns a new component.</p>\n</blockquote>\n<p>注意，高阶组件是一个<code class="language-text">function</code>，而不是component， 所以你只能<code class="language-text">hoc(config)(ComponentA)</code>这样调用， 而不能<code class="language-text">&lt;Hoc config={config} component={ComponentA} /&gt;</code>这样调用， 因为调用过一次之后，返回的已经是React.Elements了。具体可以看<a href="https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html">https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html</a></p>\n<ul>\n<li><a href="https://reactjs.org/docs/higher-order-components.html">https://reactjs.org/docs/higher-order-components.html</a></li>\n<li><a href="https://segmentfault.com/a/1190000004598113">https://segmentfault.com/a/1190000004598113</a></li>\n<li><a href="https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e">https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e</a></li>\n<li><a href="https://github.com/acdlite/recompose">https://github.com/acdlite/recompose</a></li>\n</ul>\n<p>高阶组件概念来自于函数式编程里面的高阶函数，如果不熟悉函数式编程， 可以看看下面的资料：</p>\n<ul>\n<li><a href="https://github.com/MostlyAdequate/mostly-adequate-guide">https://github.com/MostlyAdequate/mostly-adequate-guide</a></li>\n<li><a href="https://github.com/llh911001/mostly-adequate-guide-chinese">https://github.com/llh911001/mostly-adequate-guide-chinese</a></li>\n<li><a href="http://eloquentjavascript.net/05_higher_order.html">http://eloquentjavascript.net/05<em>higher</em>order.html</a></li>\n<li><a href="https://github.com/stoeffel/awesome-fp-js">https://github.com/stoeffel/awesome-fp-js</a></li>\n<li><a href="https://github.com/lodash/lodash/wiki/FP-Guide">https://github.com/lodash/lodash/wiki/FP-Guide</a></li>\n<li><a href="http://ramdajs.com/">http://ramdajs.com/</a></li>\n<li><a href="https://github.com/ramda/ramda-fantasy">https://github.com/ramda/ramda-fantasy</a></li>\n<li><a href="https://medium.freecodecamp.org/functional-programming-in-js-with-practical-examples-part-1-87c2b0dbc276">https://medium.freecodecamp.org/functional-programming-in-js-with-practical-examples-part-1-87c2b0dbc276</a></li>\n</ul>\n<h2 id="react-16"><a href="#react-16" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React 16</h2>\n<p>在开发的过程中发现如下代码：</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>居然<code class="language-text">render()</code>在<code class="language-text">this.a += 1</code>之前执行？！！！跟setState函数是异步调用的说法不一致啊， 不知道是不是React16Fiber带来的特性， 抽空得好好研究下React16了。</p>',timeToRead:10,excerpt:"最近做了一个小项目， 在微信里面根据用户选择的模板、用户微信头像、昵称、用户选择上传的照片合成一个图片，用户可以保存到手机上，然后发朋友圈。 说复杂其实不复杂， 总结一下其中踩过的坑。 用Canvas合成照片 最开始是打算自己写Canvas…",fields:{slug:"/canvas-webapp/"},frontmatter:{title:"照片合成webapp项目总结",date:"2018-01-29",category:"FE",tags:["React","canvas","svg","html2canvas","HOC"]}}},{node:{html:'<p>人工智能是最近两年绝对的热点，而这次人工智能的复兴，有一个很重要的原因就是计算能力的提升，主要依赖于GPU。去年Nvidia的股价飙升了几倍，市面上好点的GPU一般都买不到，因为全被做深度学习以及挖比特币的人买光了😂。</p>\n<p>GPU，全称Graphics Processing Unit，即图像处理器，早期主要用于显示图像使用。因为图像处理主要偏简单的矩阵运算，逻辑判断等很少，因此GPU的设计跟CPU架构不一样，也因此做到一个GPU上可以有很多计算单元，可以进行大量并行计算。网上找到一个视频，应该是Nvidia某年的产品发布会，形象地演示了CPU跟GPU的区别。<a href="http://v.youku.com/v_show/id_XNDcyNTc1MjQ4==.html">http://v.youku.com/v<em>show/id</em>XNDcyNTc1MjQ4==.html</a> 。知乎上也有对CPU和GPU的对比<a href="https://www.zhihu.com/question/19903344">https://www.zhihu.com/question/19903344</a></p>\n<p>后来人们逐渐发现，GPU的这种特性还可以用于神经网络的训练，因为神经网络训练中也是大量的矩阵运算，然后原来的训练速度提高了几十倍，原来需要一周训练的模型，现在几个小时就可以出结果，于是神经网络飞速发展。。。</p>\n<!-- more -->\n<p>GPU虽快，但是写起来很难写，要用自己特殊的语言<a href="https://zh.wikipedia.org/wiki/GLSL">GLSL - OpenGL Shading Language</a>编写，一般都是是将其它语言编译过来或者有很多库封装好了直接使用。经过搜索发现了<a href="https://github.com/gpujs/gpu.js/tree/develop">gpu.js</a>这个库。</p>\n<blockquote>\n<p>gpu.js is a JavaScript library for GPGPU (General purpose computing on GPUs) in the browser. gpu.js will automatically compile specially written JavaScript functions into shader language and run them on the GPU using the WebGL API. In case WebGL is not available, the functions will still run in regular JavaScript.</p>\n</blockquote>\n<p>也就是说<a href="https://github.com/gpujs/gpu.js/tree/develop">gpu.js</a>这个库会把你写的js编译成<code class="language-text">GLSL</code>然后在GPU上执行，以达到加速的效果。并且，如果电脑不支持GPU，它还会当成普通的js执行。可以先到<a href="http://gpu.rocks/">gpu.js官网</a>上体验一下，能达到5-10倍的提速。根据不同的电脑gpu配置，提速可能更多，这篇文章里面  <a href="https://hackernoon.com/introducing-gpu-js-gpu-accelerated-javascript-ba11a6069327">https://hackernoon.com/introducing-gpu-js-gpu-accelerated-javascript-ba11a6069327</a> 提到的Chrome提高了23倍，Firefox提高了125倍！\n<img src="/blogimgs/gpurocks-disabled.png" alt="gpu.rocks Disabled(default)">\n<img src="/blogimgs/gpurocks-enabled.png" alt="gpu.rocks Enabled (This is where the REAL POWER IS!)"></p>\n<h1 id="支持的语法"><a href="#%E6%94%AF%E6%8C%81%E7%9A%84%E8%AF%AD%E6%B3%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>支持的语法</h1>\n<p>一开始说了，GPU的设计跟CPU差别很大，只适合做简单的计算，不适合太多复杂的逻辑。所以gpu.js也只支持js的一个很小的子集：</p>\n<ul>\n<li>1D, 2D, 3D array of numbers or just numbers as kernel input</li>\n<li>1D, 2D, 3D array of numbers as kernel output</li>\n<li>Number variables</li>\n<li>Custom and custom native functions</li>\n<li>Arithmetic operations (+, +=, -, *, /, %)</li>\n<li>Javascript Math functions (Math.floor() and etc.)</li>\n<li>Loops</li>\n<li>if and else statements</li>\n<li>const and let</li>\n<li>No variables captured by a closure</li>\n</ul>\n<h1 id="show-me-code"><a href="#show-me-code" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Show Me Code</h1>\n<p><a href="https://github.com/abhisheksoni27/gpu.js-demo">https://github.com/abhisheksoni27/gpu.js-demo</a></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'c\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> gpu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GPU</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    mode<span class="token punctuation">:</span> <span class="token string">\'gpu\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Generate Matrices</span>\n<span class="token keyword">const</span> matrices <span class="token operator">=</span> <span class="token function">generateMatrices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> matrices<span class="token punctuation">.</span><span class="token constant">A</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">B</span> <span class="token operator">=</span> matrices<span class="token punctuation">.</span><span class="token constant">B</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> gpuMatMult <span class="token operator">=</span> gpu<span class="token punctuation">.</span><span class="token function">createKernel</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">512</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        sum <span class="token operator">+=</span> <span class="token constant">A</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>thread<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token constant">B</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>thread<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setDimensions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment">// .setOutputToTexture(true);</span>\n\n<span class="token keyword">function</span> <span class="token function">cpuMatMult</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                sum <span class="token operator">+=</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">sumMatrix</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            total <span class="token operator">+=</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> total<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//CPU</span>\n<span class="token keyword">const</span> startCPU <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> cpuResult <span class="token operator">=</span> <span class="token function">cpuMatMult</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> endCPU <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> cpuTime <span class="token operator">=</span> endCPU <span class="token operator">-</span> startCPU<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`CPU: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cpuTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms, total: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">sumMatrix</span><span class="token punctuation">(</span>cpuResult<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// //GPU</span>\n<span class="token keyword">const</span> startGPU <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">gpuMatMult</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'gpuResult: \'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> endGPU <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> gpuTime <span class="token operator">=</span> endGPU <span class="token operator">-</span> startGPU<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`GPU: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>gpuTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms, total: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">sumMatrix</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//Diff</span>\n<span class="token keyword">const</span> diff <span class="token operator">=</span> <span class="token punctuation">(</span>cpuTime <span class="token operator">-</span> gpuTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>gpuTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`%c </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>diff<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token string">\'color: red;\'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`times faster!`</span></span><span class="token punctuation">)</span>\n\n\n<span class="token keyword">function</span> <span class="token function">generateMatrices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> matSize <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matSize<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token constant">A</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token constant">B</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matSize<span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token constant">A</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> matSize <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token constant">B</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> matSize <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token constant">A</span><span class="token punctuation">,</span>\n        <span class="token constant">B</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h1 id="deeplearnjs"><a href="#deeplearnjs" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>deeplearn.js</h1>\n<p>另外还有一个库是最近Google刚开源的<a href="https://github.com/PAIR-code/deeplearnjs">deeplearn.js</a>， 如果要做深度学习的话是很好的工具。后面我们会找时间单独介绍。</p>\n<h1 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h1>\n<p>由于架构设计不一样，GPU很适合做简单的并发计算，应用于图像处理、深度学习等领域能大大加快速度，也直接引爆了这一次人工智能的发展。当然直接用gpu去开发程序很难编写，一般都是由特殊编译器将代码编译成可以在gpu上执行的代码。本文提高的<a href="">gpu.js</a>就是在前端将js的一个子集编译成能在webgl上执行的一个编译器。</p>\n<p>当然我们的业务逻辑比较复杂，发现很难把代码改写成能在GPU上加速执行的，最后我们采用的是之前讲过的WebWorkers+WebAssembly的方式，提速也能达到数十倍，代码还简单很多，易于维护。当然不是说复杂的问题不能转化到GPU上执行，这篇文章 <a href="https://amoffat.github.io/held-karp-gpu-demo/">https://amoffat.github.io/held-karp-gpu-demo/</a> 就讲怎么用GPU加速去解决<a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem">TSP问题</a>，方法很巧妙，有兴趣的可以看看。</p>\n<p>==============</p>\n<p>话说我们后来根据对问题的深入分析，将问题的复杂度简化了，瞬间提速100倍😝，所以说做优化工程之前，一定要先确保算法已经没有什么优化的空间了。算法对速度的提升是远大于编程语言等的，当然算法的提速是可以跟工程优化叠加的，将两者结合起来我们的项目相比最之前的算法有将近3000倍的提速😍，完全解决了问题🤗。</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="https://github.com/gpujs">https://github.com/gpujs</a></li>\n<li><a href="http://gpujs.github.io/usr-docs/files/gpu-js.html">http://gpujs.github.io/usr-docs/files/gpu-js.html</a></li>\n<li><a href="https://hackernoon.com/introducing-gpu-js-gpu-accelerated-javascript-ba11a6069327">https://hackernoon.com/introducing-gpu-js-gpu-accelerated-javascript-ba11a6069327</a></li>\n<li><a href="http://gpu.rocks/playground/">http://gpu.rocks/playground/</a></li>\n<li><a href="https://github.com/PAIR-code/deeplearnjs">https://github.com/PAIR-code/deeplearnjs</a></li>\n<li><a href="https://deeplearnjs.org/">https://deeplearnjs.org/</a></li>\n<li><a href="https://amoffat.github.io/held-karp-gpu-demo/">https://amoffat.github.io/held-karp-gpu-demo/</a></li>\n<li><a href="https://github.com/turbo/js">https://github.com/turbo/js</a></li>\n<li><a href="https://github.com/stormcolor/webclgl">https://github.com/stormcolor/webclgl</a></li>\n</ul>',
timeToRead:4,excerpt:"人工智能是最近两年绝对的热点，而这次人工智能的复兴，有一个很重要的原因就是计算能力的提升，主要依赖于GPU。去年Nvidia的股价飙升了几倍，市面上好点的GPU一般都买不到，因为全被做深度学习以及挖比特币的人买光了😂。 GPU，全称Graphics Processing…",fields:{slug:"/fe-hpc/gpujs"},frontmatter:{title:"前端高性能计算之四：GPU加速计算",date:"2017-10-16",category:"FE",tags:["gpu","wegbl","cuda"]}}},{node:{html:'<p><a href="/fe-hpc/asmjs-and-webassembly">前一篇</a>我们探索了用<a href="https://kripken.github.io/emscripten-site/index.html">Emscripten</a>编译<code class="language-text">C</code>代码到<code class="language-text">asm.js</code>和<code class="language-text">WebAssembly</code>，使前端代码执行速度大大提升，但是实际项目中由于<code class="language-text">C</code>语言缺乏很多高级特性，不利于开发大型项目（说<code class="language-text">C</code>可以开发操作系统kernel这种大型项目的同学不好意思，我没那么nb），而<code class="language-text">C++</code>我又觉得太复杂，也没有用过<code class="language-text">C++</code>做过大型项目，所以我最后选择了<a href="https://www.rust-lang.org/">Rust</a>。</p>\n<p>一开始也纠结过要用<code class="language-text">Go</code>还是<code class="language-text">Rust</code>或者<code class="language-text">Swift</code>的，后来发现<code class="language-text">Go</code>目前还不<a href="https://github.com/golang/go/issues/18892">支持编译到<code class="language-text">WebAssembly</code></a>，Swift按理说应该可以支持的，因为都是用LLVM做的编译器，不过没有找到好的资料，好像说要自己编译LLVM去支持<a href="https://stackoverflow.com/questions/46572144/compile-swift-to-webassembly">https://stackoverflow.com/questions/46572144/compile-swift-to-webassembly</a> 。另外对Rust的一些特性很是喜欢，听说<code class="language-text">Rust很复杂，比较像Scala和Haskell</code>，而偏偏我对Scala还算熟悉，也学过一下Haskell，所以决定尝试一下Rust。</p>\n<p><a href="https://github.com/ChristianMurphy/compile-to-web">https://github.com/ChristianMurphy/compile-to-web</a> 这里可以查看目前能编译到WebAssembly的语言。</p>\n<p>PS, 话说asm.js和Rust都是Mozilla搞的呢。</p>\n<!-- more -->\n<h1 id="安装rust的管理工具rustup"><a href="#%E5%AE%89%E8%A3%85rust%E7%9A%84%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7rustup" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装Rust的管理工具rustup</h1>\n<p><a href="rustup">rustup</a>用于安装管理Rust的相关工具，包括编译器rustc、包管理工具cargo等，支持安装不同版本比如stable, beta, nightly等以及在不同版本之间切换，类似于<a href="https://github.com/creationix/nvm">nvm</a>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">curl</span> https://sh.rustup.rs -sSf <span class="token operator">|</span> sh</code></pre>\n      </div>\n<h1 id="安装emscripten-rust编译器"><a href="#%E5%AE%89%E8%A3%85emscripten-rust%E7%BC%96%E8%AF%91%E5%99%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装Emscripten Rust编译器</h1>\n<p>用rustup安装最新体验版(Nightly Version)：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">rustup toolchain add nightly\nrustup target add wasm32-unknown-emscripten --toolchain nightly</code></pre>\n      </div>\n<h1 id="安装cmake"><a href="#%E5%AE%89%E8%A3%85cmake" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装cmake</h1>\n<p>根据平台自行选择：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">brew <span class="token function">install</span> cmake                  <span class="token comment"># MacOS, brew</span>\n<span class="token function">sudo</span> port <span class="token function">install</span> cmake             <span class="token comment"># MacOS, MacPorts</span>\n<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> cmake          <span class="token comment"># Debian Linux</span></code></pre>\n      </div>\n<h1 id="安装-emscripten"><a href="#%E5%AE%89%E8%A3%85-emscripten" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装 Emscripten</h1>\n<p>参考<a href="/fe-hpc/asmjs-and-webassembly">前一篇</a>，或者直接执行下面命令：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">wget</span> https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz\n<span class="token function">tar</span> -xvf emsdk-portable.tar.gz\n<span class="token function">cd</span> emsdk-portable\n./emsdk update\n./emsdk <span class="token function">install</span> sdk-incoming-64bit</code></pre>\n      </div>\n<p>这一步花的时间比较久，据说要2个多小时，我是执行完命令就出去跟朋友吃饭了，所以具体时间不知道。</p>\n<p>添加下列路径到<code class="language-text">PATH</code>中：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">~/emsdk-portable\n~/emsdk-portable/clang/fastcomp/build_incoming_64/bin\n~/emsdk-portable/emscripten/incoming</code></pre>\n      </div>\n<p>终端执行<code class="language-text">emcc -v</code>检查是否安装成功。</p>\n<h1 id="用webpack运行rust"><a href="#%E7%94%A8webpack%E8%BF%90%E8%A1%8Crust" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>用Webpack运行Rust</h1>\n<p>新建一个Rust/Javascript混合项目：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">cargo new webasm --bin --vcs none\n<span class="token function">cd</span> webasm\n<span class="token function">npm</span> init\nrustup override <span class="token keyword">set</span> nightly</code></pre>\n      </div>\n<p>安装<a href="https://webpack.js.org">Webpack</a>, <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a>, <a href="https://www.npmjs.com/package/rust-wasm-loader">rust-wasm-loader</a>, </p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> i -D webpack webpack-dev-server rust-wasm-loader</code></pre>\n      </div>\n<p>增加<code class="language-text">package.json</code>脚本：</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"webasm"</span><span class="token punctuation">,</span>\n  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>\n  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \\"Error: no test specified\\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>\n    <span class="token property">"compile"</span><span class="token operator">:</span> <span class="token string">"webpack --progress"</span><span class="token punctuation">,</span>\n    <span class="token property">"serve"</span><span class="token operator">:</span> <span class="token string">"http-server"</span><span class="token punctuation">,</span>\n    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --content-base ./build"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"magicly"</span><span class="token punctuation">,</span>\n  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>\n  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"http-server"</span><span class="token operator">:</span> <span class="token string">"^0.10.0"</span><span class="token punctuation">,</span>\n    <span class="token property">"rust-wasm-loader"</span><span class="token operator">:</span> <span class="token string">"^0.1.2"</span><span class="token punctuation">,</span>\n    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^3.6.0"</span><span class="token punctuation">,</span>\n    <span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^2.8.2"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>在<code class="language-text">build</code>目录下新建文件<code class="language-text">index.html</code>：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello WebAssembly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>配置<code class="language-text">webpack.config.js</code>：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">\'/build\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.rs$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          loader<span class="token punctuation">:</span> <span class="token string">\'rust-wasm-loader\'</span><span class="token punctuation">,</span>\n          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            <span class="token comment">// The path to the webpack output relative to the project root</span>\n            path<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n            release<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment">// 没有的话性能巨差，差不多只有1/10</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// The .wasm \'glue\' code generated by Emscripten requires these node builtins,</span>\n  <span class="token comment">// but won\'t actually use them in a web environment. We tell Webpack to not resolve those</span>\n  <span class="token comment">// require statements since we know we won\'t need them.</span>\n  externals<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">\'fs\'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token string">\'path\'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>新建<code class="language-text">src/main.rs</code>文件，添加我们要从js中调用的函数：</p>\n<div class="gatsby-highlight">\n      <pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Functions that you wish to access from Javascript</span>\n<span class="token comment">// must be marked as no_mangle</span>\n<span class="token attribute attr-name">#[no_mangle]</span>\n<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> i32<span class="token punctuation">,</span> b<span class="token punctuation">:</span> i32<span class="token punctuation">)</span> <span class="token punctuation">-></span> i32 <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> b\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>新建<code class="language-text">src/index.js</code>，写代码加载WebAssembly模块：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> wasm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./main.rs\'</span><span class="token punctuation">)</span>\n\nwasm<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">{</span> noExitRuntime<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>module <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Create a Javascript wrapper around our Rust function</span>\n  <span class="token keyword">const</span> add <span class="token operator">=</span> module<span class="token punctuation">.</span><span class="token function">cwrap</span><span class="token punctuation">(</span><span class="token string">\'add\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Calling rust functions from javascript!\'</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>然后执行<code class="language-text">npm start</code>，访问<a href="http://localhost:8080/">http://localhost:8080/</a>就可以看到调用rust代码的效果了。并且还支持热更新哦，直接修改rust代码，保存，页面就能看到最新效果。\n<img src="/blogimgs/rust-webassembly-console.png" alt="Rust WebAssembly console"></p>\n<p>测试了一下前一篇里的代码，直接运行rust优化过的代码只需要300多ms，这个基本跟C代码一样，但是用wasm运行，居然要2.7s左右，不知道是哪里没有配置好，还是说现在Rust编译成wasm没有优化好。Rust支持WebAssembly应该还不是特别成熟，可以关注<a href="https://github.com/rust-lang/rust/issues/38804">https://github.com/rust-lang/rust/issues/38804</a> 跟进。</p>\n<p>另外Rust有一个包<a href="https://crates.io/crates/webplatform%EF%BC%8C">https://crates.io/crates/webplatform，</a> 可以用来操作DOM，不过我目前用不到（感觉没啥用）。</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="https://medium.com/@ianjsikes/get-started-with-rust-webassembly-and-webpack-58d28e219635">https://medium.com/@ianjsikes/get-started-with-rust-webassembly-and-webpack-58d28e219635</a></li>\n<li><a href="http://zcfy.cc/article/get-started-with-rust-webassembly-and-webpack-ian-j-sikes-medium-3345.html">http://zcfy.cc/article/get-started-with-rust-webassembly-and-webpack-ian-j-sikes-medium-3345.html</a></li>\n<li><a href="https://users.rust-lang.org/t/compiling-to-the-web-with-rust-and-emscripten/7627">Compiling to the web with Rust and emscripten</a></li>\n<li><a href="https://www.slideshare.net/RReverser/rust-javascript">Rust ⇋ JavaScript</a></li>\n<li><a href="http://www.hellorust.com/emscripten/">http://www.hellorust.com/emscripten/</a></li>\n<li><a href="http://asquera.de/blog/2017-04-10/the-path-to-rust-on-the-web/">http://asquera.de/blog/2017-04-10/the-path-to-rust-on-the-web/</a></li>\n<li><a href="https://github.com/mrdziuban/rust-emscripten-loader">https://github.com/mrdziuban/rust-emscripten-loader</a></li>\n<li><a href="https://github.com/ballercat/wasm-loader">https://github.com/ballercat/wasm-loader</a></li>\n<li><a href="https://hackernoon.com/compiling-rust-to-webassembly-guide-411066a69fde">https://hackernoon.com/compiling-rust-to-webassembly-guide-411066a69fde</a></li>\n<li><a href="https://github.com/mbasso/awesome-wasm">https://github.com/mbasso/awesome-wasm</a></li>\n<li><a href="https://github.com/rust-lang/rust/issues/38805">https://github.com/rust-lang/rust/issues/38805</a></li>\n<li><a href="https://davidmcneil.github.io/the-rusty-web/#benchmarks">https://davidmcneil.github.io/the-rusty-web/#benchmarks</a></li>\n<li><a href="http://asmjs.org/">http://asmjs.org/</a></li>\n<li><a href="http://webassembly.org/">http://webassembly.org/</a></li>\n<li><a href="https://kripken.github.io/emscripten-site/index.html">https://kripken.github.io/emscripten-site/index.html</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly">https://developer.mozilla.org/en-US/docs/WebAssembly</a></li>\n<li><a href="http://www.codepool.biz/emscripten-compile-cc-javascript.html">http://www.codepool.biz/emscripten-compile-cc-javascript.html</a></li>\n<li><a href="http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html">http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html</a></li>\n<li><a href="https://zhuanlan.zhihu.com/p/25865972">https://zhuanlan.zhihu.com/p/25865972</a></li>\n<li><a href="https://zhuanlan.zhihu.com/p/24632251">https://zhuanlan.zhihu.com/p/24632251</a></li>\n</ul>',timeToRead:6,excerpt:"前一篇 我们探索了用 Emscripten 编译 代码到 和 ，使前端代码执行速度大大提升，但是实际项目中由于 语言缺乏很多高级特性，不利于开发大型项目（说 可以开发操作系统kernel这种大型项目的同学不好意思，我没那么nb…",fields:{slug:"/fe-hpc/rust-asmjs-and-webassembly"},frontmatter:{title:"前端高性能计算之三：Rust -> asm.js & webassembly",date:"2017-10-09",category:"FE",tags:["Rust","asm.js","webassembly"]}}},{node:{html:'<p><a href="/fe-hpc/webworkers">前一篇</a>我们说了要解决高性能计算的两个方法，一个是并发用WebWorkers，另一个就是用更底层的静态语言。</p>\n<p>2012年，Mozilla的工程师<a href="https://twitter.com/kripken">Alon Zakai</a>在研究<a href="http://llvm.org/">LLVM</a>编译器时突发奇想：能不能把C/C++编译成Javascript，并且尽量达到Native代码的速度呢？于是他开发了<a href="https://kripken.github.io/emscripten-site/index.html">Emscripten</a>编译器，用于将C/C++代码编译成Javascript的一个子集<a href="http://asmjs.org/">asm.js</a>，性能差不多是原生代码的50%。大家可以看看<a href="http://kripken.github.io/mloc_emscripten_talk/">这个PPT</a>。</p>\n<p>之后Google开发了<a href="">Portable Native Client</a>，也是一种能让浏览器运行C/C++代码的技术。\n后来估计大家都觉得各搞各的不行啊，居然Google, Microsoft, Mozilla, Apple等几家大公司一起合作开发了一个面向Web的通用二进制和文本格式的项目，那就是<a href="http://webassembly.org/">WebAssembly</a>，官网上的介绍是：</p>\n<blockquote>\n<p>WebAssembly or wasm is a new portable, size- and load-time-efficient format suitable for compilation to the web.</p>\n</blockquote>\n<blockquote>\n<p>WebAssembly is currently being designed as an open standard by a W3C Community Group that includes representatives from all major browsers.</p>\n</blockquote>\n<p>所以，<a href="http://webassembly.org/">WebAssembly</a>应该是一个前景很好的项目。我们可以看一下<a href="https://caniuse.com/#search=webassembly">目前浏览器的支持情况</a>：\n<img src="/blogimgs/caniuse-webassembly.png" alt="can i use webassembly"></p>\n<!-- more -->\n<h1 id="安装emscripten"><a href="#%E5%AE%89%E8%A3%85emscripten" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装Emscripten</h1>\n<p>访问<a href="https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html">https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html</a></p>\n<p>1. 下载对应平台版本的SDK</p>\n<p>2. 通过emsdk获取最新版工具</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token comment"># Fetch the latest registry of available tools.</span>\n./emsdk update\n\n<span class="token comment"># Download and install the latest SDK tools.</span>\n./emsdk <span class="token function">install</span> latest\n\n<span class="token comment"># Make the "latest" SDK "active" for the current user. (writes ~/.emscripten file)</span>\n./emsdk activate latest\n\n<span class="token comment"># Activate PATH and other environment variables in the current terminal</span>\n<span class="token function">source</span> ./emsdk_env.sh</code></pre>\n      </div>\n<p>3. 将下列添加到环境变量PATH中</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">~/emsdk-portable\n~/emsdk-portable/clang/fastcomp/build_incoming_64/bin\n~/emsdk-portable/emscripten/incoming</code></pre>\n      </div>\n<p>4. 其他</p>\n<p>我在执行的时候碰到报错说<code class="language-text">LLVM</code>版本不对，后来参考<a href="https://kripken.github.io/emscripten-site/docs/building_from_source/configuring_emscripten_settings.html">文档</a>配置了<code class="language-text">LLVM_ROOT</code>变量就好了，如果你没有遇到问题，可以忽略。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">LLVM_ROOT <span class="token operator">=</span> os.path.expanduser<span class="token punctuation">(</span>os.getenv<span class="token punctuation">(</span><span class="token string">\'LLVM\'</span>, <span class="token string">\'/home/ubuntu/a-path/emscripten-fastcomp/build/bin\'</span><span class="token punctuation">))</span></code></pre>\n      </div>\n<p>5. 验证是否安装好</p>\n<p>执行<code class="language-text">emcc -v</code>，如果安装好会出现如下信息：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc <span class="token punctuation">(</span>Emscripten gcc/clang-like replacement + linker emulating GNU ld<span class="token punctuation">)</span> 1.37.21\nclang version 4.0.0 <span class="token punctuation">(</span>https://github.com/kripken/emscripten-fastcomp-clang.git 974b55fd84ca447c4297fc3b00cefb6394571d18<span class="token punctuation">)</span> <span class="token punctuation">(</span>https://github.com/kripken/emscripten-fastcomp.git 9e4ee9a67c3b67239bd1438e31263e2e86653db5<span class="token punctuation">)</span> <span class="token punctuation">(</span>emscripten 1.37.21 <span class="token keyword">:</span> 1.37.21<span class="token punctuation">)</span>\nTarget: x86_64-apple-darwin15.5.0\nThread model: posix\nInstalledDir: /Users/magicly/emsdk-portable/clang/fastcomp/build_incoming_64/bin\nINFO:root:<span class="token punctuation">(</span>Emscripten: Running sanity checks<span class="token punctuation">)</span></code></pre>\n      </div>\n<h1 id="hello-webassembly"><a href="#hello-webassembly" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hello, WebAssembly!</h1>\n<p>创建一个文件<code class="language-text">hello.c</code>：</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, WebAssembly!\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>编译<code class="language-text">C/C++</code>代码：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc hello.c</code></pre>\n      </div>\n<p>上述命令会生成一个<code class="language-text">a.out.js</code>文件，我们可以直接用<code class="language-text">Node.js</code>执行：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">node a.out.js</code></pre>\n      </div>\n<p>输出</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">Hello, WebAssembly<span class="token operator">!</span></code></pre>\n      </div>\n<p>为了让代码运行在网页里面，执行下面命令会生成<code class="language-text">hello.html</code>和<code class="language-text">hello.js</code>两个文件，其中<code class="language-text">hello.js</code>和<code class="language-text">a.out.js</code>内容是完全一样的。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc hello.c -o hello.html</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  webasm-study md5 a.out.js\nMD5 <span class="token punctuation">(</span>a.out.js<span class="token punctuation">)</span> <span class="token operator">=</span> d7397f44f817526a4d0f94bc85e46429\n➜  webasm-study md5 hello.js\nMD5 <span class="token punctuation">(</span>hello.js<span class="token punctuation">)</span> <span class="token operator">=</span> d7397f44f817526a4d0f94bc85e46429</code></pre>\n      </div>\n<p>然后在浏览器打开hello.html，可以看到页面\n<img src="/blogimgs/hello1.png" alt="hello1.html"></p>\n<p>前面生成的代码都是<code class="language-text">asm.js</code>，毕竟<a href="https://kripken.github.io/emscripten-site/index.html">Emscripten</a>是人家作者<a href="https://twitter.com/kripken">Alon Zakai</a>最早用来生成<code class="language-text">asm.js</code>的，默认输出<code class="language-text">asm.js</code>也就不足为奇了。当然，可以通过option生成<code class="language-text">wasm</code>，会生成三个文件：<code class="language-text">hello-wasm.html</code>, <code class="language-text">hello-wasm.js</code>, <code class="language-text">hello-wasm.wasm</code>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc hello.c -s WASM<span class="token operator">=</span>1 -o hello-wasm.html</code></pre>\n      </div>\n<p>然后浏览器打开<code class="language-text">hello-wasm.html</code>，发现报错<code class="language-text">TypeError: Failed to fetch</code>。原因是<code class="language-text">wasm</code>文件是通过<code class="language-text">XHR</code>异步加载的，用<code class="language-text">file:////</code>访问会报错，所以我们需要启一个服务器。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g serve\nserve <span class="token keyword">.</span></code></pre>\n      </div>\n<p>然后访问<code class="language-text">http://localhost:5000/hello-wasm.html</code>，就可以看到正常结果了。</p>\n<h1 id="调用cc函数"><a href="#%E8%B0%83%E7%94%A8cc%E5%87%BD%E6%95%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>调用C/C++函数</h1>\n<p>前面的<code class="language-text">Hello, WebAssembly!</code>都是<code class="language-text">main</code>函数直接打出来的，而我们使用<code class="language-text">WebAssembly</code>的目的是为了高性能计算，做法多半是用C/C++实现某个函数进行耗时的计算，然后编译成<code class="language-text">wasm</code>，暴露给js去调用。</p>\n<p>在文件<code class="language-text">add.c</code>中写如下代码：</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a + b: %d"</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>有两种方法可以把<code class="language-text">add</code>方法暴露出来给js调用。</p>\n<h2 id="通过命令行参数暴露api"><a href="#%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E6%9A%B4%E9%9C%B2api" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>通过命令行参数暴露API</h2>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc -s EXPORTED_FUNCTIONS<span class="token operator">=</span><span class="token string">"[\'_add\']"</span> add.c -o add.js</code></pre>\n      </div>\n<p>注意方法名<code class="language-text">add</code>前必须加<code class="language-text">_</code>。\n然后我们可以在<code class="language-text">Node.js</code>里面这样使用：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// file node-add.js</span>\n<span class="token keyword">const</span> add_module <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./add.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>add_module<span class="token punctuation">.</span><span class="token function">ccall</span><span class="token punctuation">(</span><span class="token string">\'add\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>执行<code class="language-text">node node-add.js</code>会输出<code class="language-text">5</code>。\n如果需要在web页面使用的话，执行：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc -s EXPORTED_FUNCTIONS<span class="token operator">=</span><span class="token string">"[\'_add\']"</span> add.c -o add.html</code></pre>\n      </div>\n<p>然后在生成的<code class="language-text">add.html</code>中加入如下代码：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nativeAdd()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>text/javascript<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">\n    <span class="token keyword">function</span> <span class="token function">nativeAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> result <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">ccall</span><span class="token punctuation">(</span><span class="token string">\'add\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>然后点击button，就可以看到执行结果了。</p>\n<p><code class="language-text">Module.ccall</code>会直接调用<code class="language-text">C/C++</code>代码的方法，更通用的场景是我们获取到一个包装过的函数，可以在js里面反复调用，这需要用<code class="language-text">Module.cwrap</code>，具体细节可以参看<a href="https://kripken.github.io/emscripten-site/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html#interacting-with-code-ccall-cwrap">文档</a>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> cAdd <span class="token operator">=</span> add_module<span class="token punctuation">.</span><span class="token function">cwrap</span><span class="token punctuation">(</span><span class="token string">\'add\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cAdd</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cAdd</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="定义函数的时候添加code-classlanguage-textemscripten_keepalivecode"><a href="#%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E7%9A%84%E6%97%B6%E5%80%99%E6%B7%BB%E5%8A%A0code-classlanguage-textemscripten_keepalivecode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>定义函数的时候添加<code class="language-text">EMSCRIPTEN_KEEPALIVE</code></h2>\n<p>添加文件<code class="language-text">add2.c</code>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;emscripten.h></span></span>\n\n<span class="token keyword">int</span> EMSCRIPTEN_KEEPALIVE <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a + b: %d"</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>执行命令：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc add2.c -o add2.html</code></pre>\n      </div>\n<p>同样在<code class="language-text">add2.html</code>中添加代码：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nativeAdd()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>text/javascript<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">\n    <span class="token keyword">function</span> <span class="token function">nativeAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> result <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">ccall</span><span class="token punctuation">(</span><span class="token string">\'add\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>但是，当你点击button的时候，报错：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">Assertion failed: the runtime was exited <span class="token punctuation">(</span>use NO_EXIT_RUNTIME to keep it alive after main<span class="token punctuation">(</span><span class="token punctuation">)</span> exits<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>可以通过在<code class="language-text">main()</code>中添加<code class="language-text">emscripten_exit_with_live_runtime()</code>解决：</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;emscripten.h></span></span>\n\n<span class="token keyword">int</span> EMSCRIPTEN_KEEPALIVE <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a + b: %d"</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">emscripten_exit_with_live_runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>或者也可以直接在命令行中添加<code class="language-text">-s NO_EXIT_RUNTIME=1</code>来解决，</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc add2.c -o add2.js -s NO_EXIT_RUNTIME<span class="token operator">=</span>1</code></pre>\n      </div>\n<p>不过会报一个警告：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">exit<span class="token punctuation">(</span>0<span class="token punctuation">)</span> implicitly called by end of main<span class="token punctuation">(</span><span class="token punctuation">)</span>, but noExitRuntime, so not exiting the runtime <span class="token punctuation">(</span>you can use emscripten_force_exit, <span class="token keyword">if</span> you want to force a <span class="token boolean">true</span> shutdown<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>所以建议采用第一种方法。</p>\n<p>上述生成的代码都是<code class="language-text">asm.js</code>，只需要在编译参数中添加<code class="language-text">-s WASM=1</code>中就可以生成<code class="language-text">wasm</code>，然后使用方法都一样。</p>\n<h1 id="用asmjs和webassembly执行耗时计算"><a href="#%E7%94%A8asmjs%E5%92%8Cwebassembly%E6%89%A7%E8%A1%8C%E8%80%97%E6%97%B6%E8%AE%A1%E7%AE%97" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>用asm.js和WebAssembly执行耗时计算</h1>\n<p>前面准备工作都做完了， 现在我们来试一下用<code class="language-text">C</code>代码来优化<a href="./webworkers">前一篇</a>中提过的问题。代码很简单：</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code class="language-c"><span class="token comment">// file sum.c</span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token comment">// #include &lt;emscripten.h></span>\n\n<span class="token keyword">long</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">long</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    total <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    total <span class="token operator">-</span><span class="token operator">=</span> i<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> total<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum(0, 1000000000): %ld"</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// emscripten_exit_with_live_runtime();</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>注意用<code class="language-text">gcc</code>编译的时候需要把跟<code class="language-text">emscriten</code>相关的两行代码注释掉，否则编译不过。\n我们先直接用<code class="language-text">gcc</code>编译成<code class="language-text">native code</code>看看代码运行多块呢？</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  webasm-study gcc sum.c\n➜  webasm-study <span class="token function">time</span> ./a.out\nsum<span class="token punctuation">(</span>0, 1000000000<span class="token punctuation">)</span>: 0./a.out  5.70s user 0.02s system 99% cpu 5.746 total\n➜  webasm-study gcc -O1 sum.c\n➜  webasm-study <span class="token function">time</span> ./a.out\nsum<span class="token punctuation">(</span>0, 1000000000<span class="token punctuation">)</span>: 0./a.out  0.00s user 0.00s system 64% cpu 0.003 total\n➜  webasm-study gcc -O2 sum.c\n➜  webasm-study <span class="token function">time</span> ./a.out\nsum<span class="token punctuation">(</span>0, 1000000000<span class="token punctuation">)</span>: 0./a.out  0.00s user 0.00s system 64% cpu 0.003 total</code></pre>\n      </div>\n<p>可以看到有没有优化差别还是很大的，优化过的代码执行时间是<strong>3ms!</strong>。really？仔细想想，我for循环了10亿次啊，每次for执行大概是两次加法，两次赋值，一次比较，而我总共做了两次for循环，也就是说至少是100亿次操作，而我的mac pro是<code class="language-text">2.5 GHz Intel Core i7</code>，所以1s应该也就执行25亿次CPU指令操作吧，怎么可能逆天到这种程度，肯定是哪里错了。想起之前看到的<a href="http://ling0322.info/2014/01/20/rust-vs-go-in-code-optimization.html">一篇rust测试性能的文章</a>，说rust直接在编译的时候算出了答案， 然后把结果直接写到了编译出来的代码里， 不知道gcc是不是也做了类似的事情。在知乎上<a href="https://www.zhihu.com/question/27090458">GCC中-O1 -O2 -O3 优化的原理是什么？</a>这篇文章里， 还真有loop-invariant code motion（LICM）针对for的优化，所以我把代码增加了一些if判断，希望能“糊弄”得了gcc的优化。</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token comment">// #include &lt;emscripten.h></span>\n\n<span class="token comment">// long EMSCRIPTEN_KEEPALIVE sum(long start, long end) {</span>\n<span class="token keyword">long</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">long</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">+</span><span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">-</span><span class="token operator">=</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">-</span><span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> total<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum(0, 1000000000): %ld"</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// emscripten_exit_with_live_runtime();</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>执行结果大概要正常一些了。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  webasm-study gcc -O2 sum.c\n➜  webasm-study <span class="token function">time</span> ./a.out\nsum<span class="token punctuation">(</span>0, 1000000000<span class="token punctuation">)</span>: 0./a.out  0.32s user 0.00s system 99% cpu 0.324 total</code></pre>\n      </div>\n<p>ok，我们来编译成<code class="language-text">asm.js</code>了。</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;emscripten.h></span></span>\n\n<span class="token keyword">long</span> EMSCRIPTEN_KEEPALIVE <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token comment">// long sum(long start, long end) {</span>\n  <span class="token keyword">long</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">+</span><span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">-</span><span class="token operator">=</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">-</span><span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> total<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum(0, 1000000000): %ld"</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">emscripten_exit_with_live_runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>执行</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc sum.c -o sum.html</code></pre>\n      </div>\n<p>然后在<code class="language-text">sum.html</code>中添加代码</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nativeSum()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>NativeSum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jsSumCalc()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>JSSum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>text/javascript<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">\n    <span class="token keyword">function</span> <span class="token function">nativeSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> result <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">ccall</span><span class="token punctuation">(</span><span class="token string">\'sum\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`result: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, cost time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t2 <span class="token operator">-</span> t1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>text/javascript<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">\n    <span class="token keyword">function</span> <span class="token function">jsSum</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          total <span class="token operator">+=</span> i<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          total <span class="token operator">+=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          total <span class="token operator">-=</span> i<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          total <span class="token operator">-=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">return</span> total<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">function</span> <span class="token function">jsSumCalc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token constant">N</span> <span class="token operator">=</span> <span class="token number">100000000</span><span class="token punctuation">;</span><span class="token comment">// 总次数1亿</span>\n      t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      result <span class="token operator">=</span> <span class="token function">jsSum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`result: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, cost time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t2 <span class="token operator">-</span> t1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>另外，我们修改成编译成WebAssembly看看效果呢？</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc sum.c -o sum.js -s WASM<span class="token operator">=</span>1</code></pre>\n      </div>\n<table>\n<thead>\n<tr>\n<th>Browser</th>\n<th>webassembly</th>\n<th>asm.js</th>\n<th>js</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Chrome61</td>\n<td>1300ms</td>\n<td>600ms</td>\n<td>3300ms</td>\n</tr>\n<tr>\n<td>Firefox55</td>\n<td>600ms</td>\n<td>800ms</td>\n<td>700ms</td>\n</tr>\n<tr>\n<td>Safari9.1</td>\n<td>不支持</td>\n<td>2800ms</td>\n<td>因不支持ES6我懒得改写没测试</td>\n</tr>\n</tbody>\n</table>\n<p>感觉Firefox有点不合理啊， 默认的JS太强了吧。然后觉得webassembly也没有特别强啊，突然发现<code class="language-text">emcc</code>编译的时候没有指定优化选项<code class="language-text">-O2</code>。再来一次：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc -O2 sum.c -o sum.js <span class="token comment"># for asm.js</span>\nemcc -O2 sum.c -o sum.js -s WASM<span class="token operator">=</span>1 <span class="token comment"># for webassembly</span></code></pre>\n      </div>\n<table>\n<thead>\n<tr>\n<th>Browser</th>\n<th>webassembly -O2</th>\n<th>asm.js -O2</th>\n<th>js</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Chrome61</td>\n<td>1300ms</td>\n<td>600ms</td>\n<td>3300ms</td>\n</tr>\n<tr>\n<td>Firefox55</td>\n<td>650ms</td>\n<td>630ms</td>\n<td>700ms</td>\n</tr>\n</tbody>\n</table>\n<p>居然没什么变化， 大失所望。号称<code class="language-text">asm.js</code>可以达到native的50%速度么，这个倒是好像达到了。但是今年<a href="https://www.youtube.com/watch?v=6v4E6oksar0">Compiling for the Web with WebAssembly (Google I/O ‘17)</a>里说WebAssembly是<code class="language-text">1.2x slower than native code</code>，感觉不对呢。<a href="http://asmjs.org/">asm.js</a>还有一个好处是，它就是js，所以即使浏览器不支持，也能当成不同的js执行，只是没有加速效果。当然<a href="http://webassembly.org/">WebAssembly</a>受到各大厂商一致推崇，作为一个新的标准，肯定前景会更好，期待会有更好的表现。</p>\n<h1 id="rust"><a href="#rust" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Rust</h1>\n<p>本来还想写Rust编译成WebAssembly的，不过感觉本文已经太长了， 后期再写如果结合Rust做WebAssembly吧。</p>\n<p>着急的可以先看看这两篇</p>\n<ul>\n<li><a href="https://users.rust-lang.org/t/compiling-to-the-web-with-rust-and-emscripten/7627">Compiling to the web with Rust and emscripten</a></li>\n<li><a href="https://www.slideshare.net/RReverser/rust-javascript">Rust ⇋ JavaScript</a></li>\n</ul>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="http://asmjs.org/">http://asmjs.org/</a></li>\n<li><a href="http://webassembly.org/">http://webassembly.org/</a></li>\n<li><a href="https://kripken.github.io/emscripten-site/index.html">https://kripken.github.io/emscripten-site/index.html</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly">https://developer.mozilla.org/en-US/docs/WebAssembly</a></li>\n<li><a href="http://www.codepool.biz/emscripten-compile-cc-javascript.html">http://www.codepool.biz/emscripten-compile-cc-javascript.html</a></li>\n<li><a href="http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html">http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html</a></li>\n<li><a href="https://zhuanlan.zhihu.com/p/25865972">https://zhuanlan.zhihu.com/p/25865972</a></li>\n</ul>',
timeToRead:11,excerpt:"前一篇 我们说了要解决高性能计算的两个方法，一个是并发用WebWorkers，另一个就是用更底层的静态语言。 2012年，Mozilla的工程师 Alon Zakai 在研究 LLVM 编译器时突发奇想：能不能把C/C++编译成Javascript，并且尽量达到Native…",fields:{slug:"/fe-hpc/asmjs-and-webassembly"},frontmatter:{title:"前端高性能计算之二：asm.js & webassembly",date:"2017-09-25",category:"FE",tags:["asm.js","webassembly"]}}},{node:{html:'<p>最近做一个项目，里面涉及到在前端做大量计算，直接用js跑了一下，大概需要15s的时间， 也就是用户的浏览器会卡死15s，这个完全接受不了。</p>\n<p>虽说有V8这样牛逼的引擎，但大家知道js并不适合做CPU密集型的计算，一是因为单线程，二是因为动态语言。我们就从这两个突破口入手，首先搞定“单线程”的限制，尝试用WebWorkers来加速计算。</p>\n<!-- more -->\n<h1 id="什么是webworkers"><a href="#%E4%BB%80%E4%B9%88%E6%98%AFwebworkers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么是WebWorkers</h1>\n<p>简单说，<a href="http://www.whatwg.org/specs/web-workers/current-work/">WebWorkers</a>是一个HTML5的新API，web开发者可以通过此API在后台运行一个脚本而不阻塞UI，可以用来做需要大量计算的事情，充分利用CPU多核。</p>\n<p>大家可以看看这篇文章介绍<a href="https://www.html5rocks.com/en/tutorials/workers/basics/%EF%BC%8C">https://www.html5rocks.com/en/tutorials/workers/basics/，</a> 或者<a href="https://www.html5rocks.com/zh/tutorials/workers/basics/">对应的中文版</a>。</p>\n<blockquote>\n<p>The Web Workers specification defines an API for spawning background scripts in your web application. Web Workers allow you to do things like fire up long-running scripts to handle computationally intensive tasks, but without blocking the UI or other scripts to handle user interactions. </p>\n</blockquote>\n<p>可以打开<a href="https://nerget.com/rayjs-mt/rayjs.html">这个链接</a>自己体验一下WebWorkers的加速效果。</p>\n<p>现在浏览器基本都<a href="https://caniuse.com/#search=webworkers">支持WebWorkers了</a>。\n<img src="/blogimgs/caniuse-webworkers.png" alt="can i use webworkers"></p>\n<h1 id="paralleljs"><a href="#paralleljs" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Parallel.js</h1>\n<p>直接使用<a href="http://www.whatwg.org/specs/web-workers/current-work/">WebWorkers</a>接口还是太繁琐，好在有人已经对此作了封装：<a href="https://parallel.js.org/">Parallel.js</a>。</p>\n<p>注意<a href="https://parallel.js.org/">Parallel.js</a>可以通过node安装：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> paralleljs</code></pre>\n      </div>\n<p>不过这个是在node.js下用的，用的node的cluster模块。如果要在浏览器里使用的话， 需要直接应用js:</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parallel.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>然后可以得到一个全局变量，<code class="language-text">Parallel</code>。<code class="language-text">Parallel</code>提供了<code class="language-text">map</code>和<code class="language-text">reduce</code>两个函数式编程的接口，可以非常方便的进行并发操作。</p>\n<p>我们先来定义一下我们的问题，由于业务比较复杂，我这里把问题简化成求1-1,0000,0000的和，然后在依次减去1-1,0000,0000，答案显而易见： 0！ 这样做是因为数字太大的话会有数据精度的问题，两种方法的结果会有一些差异，会让人觉得并行的方法不可靠。此问题在我的mac pro chrome61下直接简单地跑js运行的话大概是1.5s（我们实际业务问题需要15s，这里为了避免用户测试的时候把浏览器搞死，我们简化了问题）。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">N</span> <span class="token operator">=</span> <span class="token number">100000000</span><span class="token punctuation">;</span><span class="token comment">// 总次数1亿</span>\n\n<span class="token comment">// 更新自2017-10-24 16：47：00</span>\n<span class="token comment">// 代码没有任何含义，纯粹是为了模拟一个耗时计算，直接用</span>\n<span class="token comment">//   for (let i = start; i &lt;= end; i += 1) total += i;</span>\n<span class="token comment">// 有几个问题，一是代码太简单没有任何稍微复杂一点的操作，后面用C代码优化的时候会优化得很夸张，没法对比。</span>\n<span class="token comment">// 二是数据溢出问题， 我懒得处理这个问题，下面代码简单地先加起来，然后再减掉，答案显而易见为0，便于测试。</span>\n<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">+=</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">+=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">-=</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">-=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> total<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">paraSum</span><span class="token punctuation">(</span><span class="token constant">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token constant">N1</span> <span class="token operator">=</span> <span class="token constant">N</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//我们分成10分，没分分别交给一个web worker，parallel.js会根据电脑的CPU核数建立适量的workers</span>\n  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parallel</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n <span class="token operator">=></span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000000</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">*</span> <span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 在parallel.js里面没法直接应用外部变量N1</span>\n    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>data <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> acc <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> e <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> acc <span class="token operator">+</span> e<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token constant">N</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> paraSum <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>代码比较简单，我这里说几个刚用的时候遇到的坑。</p>\n<ul>\n<li><strong>require所有需要的函数</strong></li>\n</ul>\n<p>比如在上诉代码中用到了<code class="language-text">sum</code>，你需要提前<code class="language-text">require(sum)</code>，如果sum中由用到了另一个函数<code class="language-text">f</code>，你还需要<code class="language-text">require(f)</code>，同样如果<code class="language-text">f</code>中用到了<code class="language-text">g</code>，则还需要<code class="language-text">require(g)</code>，直到你require了所有用到的定义的函数。。。。</p>\n<ul>\n<li><strong>没法<code class="language-text">require</code>变量</strong></li>\n</ul>\n<p>我们上诉代码我本来定义了<code class="language-text">N1</code>，但是没法用</p>\n<ul>\n<li><strong><code class="language-text">ES6</code>编译成<code class="language-text">ES5</code>之后的问题以及Chrome没报错</strong></li>\n</ul>\n<p>实际项目中一开始我们用到了<code class="language-text">ES6</code>的特性：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">数组解构</a>。本来这是很简单的特性，现在大部分浏览器都已经支持了，不过我当时配置的babel会编译成<code class="language-text">ES5</code>，所以会生成代码<code class="language-text">_slicedToArray</code>，大家可以<a href="http://babeljs.io/repl/#?babili=false&#x26;browsers=&#x26;build=&#x26;builtIns=false&#x26;code_lz=GYVwdgxgLglg9mABMAFAbQIYBpECMC6AlIgN4BQiiATgKZQhVIaIDUeA3GQL5lkDmiALzJ0AJhwBmImQgIAznAA2NAHSK4fFH0JA&#x26;debug=false&#x26;circleciRepo=&#x26;evaluate=true&#x26;lineWrap=false&#x26;presets=es2015%2Creact%2Cstage-2&#x26;prettier=false&#x26;targets=&#x26;version=6.26.0">在线上Babel测试</a>，然后Chrome下面始终不work，也没有任何报错信息，查了很久，后来在Firefox下打开，有报错信息：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html">ReferenceError: _slicedToArray is not defined</code></pre>\n      </div>\n<p>看来Chrome也不是万能的啊。。。</p>\n<p>大家可以在<a href="./parallel-test">此Demo页面</a>测试， 提速大概在4倍左右，当然还是得看自己电脑CPU的核数。\n另外我后来在同样的电脑上Firefox55.0.3（64位）测试，上诉代码居然只要190ms！！！在Safari9.1.1下也是190ms左右。。。</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers">https://developer.mozilla.org/zh-CN/docs/Web/API/Web<em>Workers</em>API/Using<em>web</em>workers</a></li>\n<li><a href="https://www.html5rocks.com/en/tutorials/workers/basics/">https://www.html5rocks.com/en/tutorials/workers/basics/</a></li>\n<li><a href="https://parallel.js.org/">https://parallel.js.org/</a></li>\n<li><a href="https://johnresig.com/blog/web-workers/">https://johnresig.com/blog/web-workers/</a></li>\n<li><a href="http://javascript.ruanyifeng.com/htmlapi/webworker.html">http://javascript.ruanyifeng.com/htmlapi/webworker.html</a></li>\n<li><a href="http://blog.teamtreehouse.com/using-web-workers-to-speed-up-your-javascript-applications">http://blog.teamtreehouse.com/using-web-workers-to-speed-up-your-javascript-applications</a></li>\n</ul>',timeToRead:3,excerpt:"最近做一个项目，里面涉及到在前端做大量计算，直接用js跑了一下，大概需要15s的时间， 也就是用户的浏览器会卡死15s，这个完全接受不了。 虽说有V8这样牛逼的引擎，但大家知道js并不适合做CPU…",fields:{slug:"/fe-hpc/webworkers"},frontmatter:{title:"前端高性能计算之一：WebWorkers",date:"2017-09-22",category:"FE",tags:["js","hpc"]}}},{node:{html:'<p>推荐一些我用过的比较不错的Chrome插件。（长期更新）</p>\n<ul>\n<li><a href="https://about.sourcegraph.com/">SourceGraph</a>, 自从我发现sourcegraph，我就把octotree禁用了，sourcegraph简直就是一个活生生的浏览器里的VSCode，有强大的IDE功能。</li>\n<li><a href="https://github.com/buunguyen/octotree">octotree</a>，方便看github代码</li>\n<li><a href="https://chrome.google.com/webstore/detail/spaces/cenkmofngpohdnkbjdpilgpmbiiljjim">Spaces</a>，方便讲tabs分类搜藏起来， 这对于我这种长期开着100+个tabs的来说，确实很有必要，功能够用， 有些bug，暂时没找到更合适的。</li>\n<li><a href="https://chrome.google.com/webstore/detail/markdown-preview-plus/febilkbfcbhebfnokafefeacimjdckgl">Markdown Preview Plus</a>，预览markdown。</li>\n<li><a href="https://chrome.google.com/webstore/detail/uc-qr-code/nhelohnehpahakjoklmodmogclacjgdj">UC二维码</a>，将当前页面链接生成二维码</li>\n</ul>\n<!-- more -->\n<ul>\n<li><a href="https://github.com/FelisCatus/SwitchyOmega">SwitchyOmega</a>，代理软件，XX必须。</li>\n<li><a href="https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj">ModHeader</a>，可以修改请求头，拿来测试CORS等很方便。</li>\n<li><a href="https://www.requestly.in/">Requestly</a>，功能比ModHeader更强大一些</li>\n<li><a href="https://chrome.google.com/webstore/detail/http2-and-spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin">HTTP/2 and SPDY indicator</a>，查看你访问的页面是否支持HTTP2，用了才发现，原来已经这么多网站支持了。</li>\n<li><a href="http://collamark.com/">Collamark</a>，师弟开发的，用于搜藏、标注web内容，很方便，强烈推荐。</li>\n<li><a href="https://chrome.google.com/webstore/detail/fatkun-batch-download-ima/nnjjahlikiabnchcpehcpkdeckfgnohf">Fatkun图片批量下载</a>，批量下载图片</li>\n<li><a href="https://github.com/callumlocke/json-formatter">JSON Formatter</a>，调试接口用</li>\n<li><a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi">React Developer Tools</a>，React开发工具</li>\n<li><a href="https://github.com/zalmoxisus/redux-devtools-extension">Redux DevTools extension</a>，redux开发工具</li>\n</ul>\n<p>============================================\n最后不得不推荐一个Firefox的插件，因为实在太强大了，基本是我现在还安装Firefox的最后一个原因了，那就是<a href="http://www.downthemall.net/">DownThemAll</a>，下载速度能达到Chrome下载速度的5倍以上，用了都说好！不要去找“Chrome DownThemAll”，找到的都是假的，原因是Chrome提供的插件接口不够”low level”， 无法实现dTa的功能。</p>\n<p>刚刚在dTa首页上看到作者说不维护dTa了，因为firefox的WebExtentions策略，以后会提供不了那么多low level的API。。。。。感觉一万只草泥马从心头飞奔而过。。。。吓得赶紧去关掉了Firefox的自动更新。。。</p>\n<p>WebExtension的改变可以看看这里， <a href="https://zhuanlan.zhihu.com/p/26948163">https://zhuanlan.zhihu.com/p/26948163</a></p>\n<blockquote>\n<p>这个改变对经典 Add-ons 的重度用户来说是个不小的打击，Mozilla 也在尽可能补充相关的 WebExtension API，是原有扩展的一些功能可以通过新的 API 实现，我们可以说如果在 57 版本发布后一些常用扩展实在无法迁移，还可以保存一份豪华完整版的 Firefox 56 并关掉自动更新（笑）。</p>\n</blockquote>\n<p>赶快行动吧， 不然来不及了。</p>',timeToRead:1,excerpt:"推荐一些我用过的比较不错的Chrome插件。（长期更新） SourceGraph , 自从我发现sourcegraph，我就把octotree禁用了，sourcegraph简直就是一个活生生的浏览器里的VSCode，有强大的IDE功能。 octotree ，方便看github…",fields:{slug:"/chrome-extentions/"},frontmatter:{title:"推荐一些Chrome插件",date:"2017-09-15",category:"FE",tags:["Chrome Extentions","tools"]}}},{node:{html:'<p>自从2014年Christopher Chedeau做了<a href="http://blog.vjeux.com/2014/javascript/react-css-in-js-nationjs.html">CSS in JS</a>的演讲之后， cssinjs的各种库纷纷出现，已经<a href="https://github.com/MicheleBertoli/css-in-js">有好几十种了</a>。</p>\n<p><a href="https://github.com/css-modules/css-modules">css modules</a>应该是很流行的了， 说实话我没有用过， 不过在浏览作者主页的时候意外发现了<a href="https://github.com/styled-components/styled-components">styled-components</a>，发现这就是我想要的！大家可以看看下面几个视频，先有个大概印象。</p>\n<!-- more -->\n<p><a href="https://github.com/styled-components/styled-components">styled-components</a>作者<a href="https://twitter.com/mxstbr">Max Stoiber</a>在2017年React大会上的演讲：</p>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem"\n          >\n            <iframe src="https://www.youtube.com/embed/2j9rSur_mnk" frameborder="0" allowfullscreen style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>\n<p><a href="https://github.com/css-modules/css-modules">css modules</a>作者<a href="https://twitter.com/glenmaddern">@glenmaddern</a>在2017年欧洲CSS大会上分享<a href="https://github.com/styled-components/styled-components">styled-components</a>。</p>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem"\n          >\n            <iframe src="https://www.youtube.com/embed/MT4D_DioYC8" frameborder="0" allowfullscreen style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>\n<p><a href="https://github.com/css-modules/css-modules">css modules</a>作者<a href="https://twitter.com/glenmaddern">@glenmaddern</a>分享<a href="https://github.com/styled-components/styled-components">styled-components</a>， 玩得很high啊。</p>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem"\n          >\n            <iframe src="https://www.youtube.com/embed/qu4U7lwZTRI" frameborder="0" allowfullscreen style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>\n<p>想要了解更多<a href="https://github.com/styled-components/styled-components">styled-components</a>， 可以看<a href="https://react-course.magicfun.ai/css/">React实战课程</a>内容。</p>\n<p>这有一篇<a href="https://github.com/callemall/material-ui">Material UI</a>的一位作者<a href="https://github.com/oliviertassinari/a-journey-toward-better-style">讲他们如何在各种cssinjs中做的选型</a>，介绍对比了各种cssinjs库的一些特性，大家可以了解一下， 这里是<a href="https://oliviertassinari.github.io/a-journey-toward-better-style/">PPT</a>。</p>\n<p>再提一下<a href="https://twitter.com/floydophone">Pete Hunt</a>大神的<a href="https://github.com/smyte/jsxstyle">jsxstyle</a>，之前看的时候还是<a href="https://medium.com/smyte/announcing-jsxstyle-1-0-3ef469d1863a">1.0刚发布</a>，貌似现在快出2.0了。 大概思路是封装了用于布局的一些components，包括：</p>\n<ul>\n<li>Block</li>\n<li>Flex</li>\n<li>Inline</li>\n<li>InlineBlock</li>\n<li>InlineFlex</li>\n<li>Table</li>\n<li>TableCell</li>\n<li>TableRow</li>\n<li>Row</li>\n<li>Col</li>\n</ul>\n<p>不过给我的感觉，有点像用<a href="https://facebook.github.io/react-native/">React Native</a>来开发web的思想， 比如<a href="https://github.com/necolas/react-native-web">react-native-web</a>以及淘宝出的<a href="https://github.com/taobaofed/react-web">react-web</a>，不过都不太符合我的口味。</p>\n<p><a href="mxstbr">Max Stoiber</a>最近又发布了一个新的库<a href="https://github.com/styled-components/polished">polished</a>，大概看了一下，也很符合我的口味，利用currying function去组合各种基本样式， 后面有时间再研究一下。阮老师已经写了<a href="http://www.ruanyifeng.com/blog/2017/04/css_in_js.html">一篇文章介绍</a>啦。</p>',timeToRead:2,excerpt:"自从2014年Christopher Chedeau做了 CSS in JS 的演讲之后， cssinjs的各种库纷纷出现，已经 有好几十种了 。 css modules 应该是很流行的了， 说实话我没有用过， 不过在浏览作者主页的时候意外发现了 styled…",fields:{slug:"/cssinjs/"},frontmatter:{title:"CSS In JS",date:"2017-08-29",category:"FE",tags:["css","js","react"]}}},{node:{html:'<h1 id="concepts"><a href="#concepts" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>concepts</h1>\n<ul>\n<li>entry points</li>\n<li>output</li>\n<li>loaders</li>\n<li>plugins</li>\n<li>configuration</li>\n<li>modules</li>\n<li>module resolution</li>\n<li>dependency graph</li>\n<li>manifest</li>\n<li>targets</li>\n<li>hot module replacement</li>\n</ul>',timeToRead:1,excerpt:"concepts entry points output loaders plugins configuration modules module resolution dependency graph manifest targets hot module…",fields:{slug:"/webpack/concepts"},frontmatter:{title:"webpack concepts",date:"2017-08-28",category:"FE",tags:["webpack","js","build tool"]}}},{node:{html:'<h1 id="getting-started"><a href="#getting-started" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>getting started</h1>\n<blockquote>\n<p>Note that webpack will not alter any code other than import and export statements. If you are using other ES2015 features, make sure to use a transpiler such as Babel or Bublé via webpack’s loader system.</p>\n</blockquote>\n<blockquote>\n<p>Custom parameters can be passed to webpack by adding two dashes between the npm run build command and your parameters, e.g. npm run build — —colors.</p>\n</blockquote>\n<h1 id="asset-management"><a href="#asset-management" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Asset Management</h1>\n<h1 id="css"><a href="#css" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CSS</h1>\n<p>style-loader, css-loader</p>\n<h2 id="images"><a href="#images" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Images</h2>\n<p>file-loader</p>\n<h2 id="fonts"><a href="#fonts" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Fonts</h2>\n<p>file-loader</p>\n<h2 id="data"><a href="#data" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Data</h2>\n<p>原生支持json, csv-loader, xml-loader</p>\n<h1 id="output-management"><a href="#output-management" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Output Management</h1>\n<h2 id="多entry"><a href="#%E5%A4%9Aentry" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>多entry</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  app<span class="token punctuation">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  print<span class="token punctuation">:</span> <span class="token string">\'./src/print.js\'</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="htmlwebpackplugin"><a href="#htmlwebpackplugin" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HtmlWebpackPlugin</h2>\n<p>避免entry points改名， 自动生成html。</p>\n<h2 id="cleaning-up-the-code-classlanguage-textdistcode-folder"><a href="#cleaning-up-the-code-classlanguage-textdistcode-folder" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cleaning up the <code class="language-text">/dist</code> folder</h2>\n<p><code class="language-text">clean-webpack-plugin</code></p>\n<h2 id="menifest"><a href="#menifest" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Menifest</h2>\n<blockquote>\n<p>If you’re interested in managing webpack’s output in other ways, the manifest would be a good place to start.</p>\n</blockquote>\n<h1 id="development"><a href="#development" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Development</h1>\n<h2 id="using-source-maps"><a href="#using-source-maps" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using source maps</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">devtool<span class="token punctuation">:</span> <span class="token string">\'inline-source-map\'</span></code></pre>\n      </div>\n<p>不要用在production上</p>\n<h2 id="自动刷新"><a href="#%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>自动刷新</h2>\n<h2 id="webpacks-watch-mode"><a href="#webpacks-watch-mode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>webpack’s Watch Mode</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token string">"watch"</span><span class="token punctuation">:</span> <span class="token string">"webpack --watch"</span></code></pre>\n      </div>\n<h2 id="webpack-dev-server"><a href="#webpack-dev-server" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>webpack-dev-server</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// webpack.config.js</span>\ndevServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  contentBase<span class="token punctuation">:</span> <span class="token string">\'./dist\'</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// package.json</span>\n<span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --open"</span></code></pre>\n      </div>\n<h2 id="webpack-dev-middleware"><a href="#webpack-dev-middleware" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>webpack-dev-middleware</h2>\n<p>跟express配合使用的。</p>\n<blockquote>\n<p>webpack-dev-middleware is a wrapper that will emit files processed by webpack to a server. This is used in webpack-dev-server internally, however it’s available as a separate package to allow more custom setups if desired. We’ll take a look at an example that combines webpack-dev-middleware with an express server.</p>\n</blockquote>\n<h1 id="hot-module-replacement"><a href="#hot-module-replacement" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hot Module Replacement</h1>\n<h2 id="enabling-hmr"><a href="#enabling-hmr" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Enabling HMR</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// 如果entry有其他不相关的js， 会导致full refresh</span>\n<span class="token comment">// webpack.config.js</span>\ndevServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  contentBase<span class="token operator">...</span><span class="token punctuation">,</span>\n  hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">// just client</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> \nplugins<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// server</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="一些lib"><a href="#%E4%B8%80%E4%BA%9Blib" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>一些lib</h2>\n<ul>\n<li>css的HMR直接通过<code class="language-text">style-loader</code>支持的。</li>\n<li><a href="https://github.com/gaearon/react-hot-loader">React Hot Loader</a></li>\n<li><a href="https://survivejs.com/webpack/appendices/hmr-with-react/#configuring-hmr-with-redux">Redux HMR</a></li>\n</ul>\n<h1 id="tree-shaking"><a href="#tree-shaking" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tree Shaking</h1>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span>\n<span class="token comment">/* unused harmony export square */</span>\n<span class="token comment">/* harmony export (immutable) */</span> __webpack_exports__<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> cube<span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>虽然没有export，但是bundle.js里面有，需要用能支持<code class="language-text">dead code removal</code>的压缩工具。</p>\n<blockquote>\n<p>we’ll add a minifier that supports dead code removal — the UglifyJSPlugin — to our configuration…</p>\n</blockquote>\n<p>必须同时满足一下两条才可以去除无用代码：</p>\n<ol>\n<li>用ES2015的import/export</li>\n<li>\n<p>支持<code class="language-text">dead code removal</code>的压缩工具压缩</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// 这样不行, ES2015的module可以做static analysis</span>\nexports<span class="token punctuation">.</span>square <span class="token operator">=</span> square<span class="token punctuation">;</span>\nexports<span class="token punctuation">.</span>cube <span class="token operator">=</span> cube<span class="token punctuation">;</span></code></pre>\n      </div>\n</li>\n</ol>\n<p>用<code class="language-text">webpack -p</code>跟添加了<code class="language-text">webpack.optimize.UglifyJsPlugin()</code>，以及使用<code class="language-text">uglifyjs-webpack-plugin</code>没区别。\n<a href="https://webpack.js.org/plugins/uglifyjs-webpack-plugin/">https://webpack.js.org/plugins/uglifyjs-webpack-plugin/</a></p>\n<blockquote>\n<p>webpack contains the same plugin under webpack.optimize.UglifyJsPlugin. The documentation is valid apart from the installation instructions</p>\n</blockquote>\n<h1 id="production"><a href="#production" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Production</h1>\n<p>dev和prod分开两个config.js，共用的放在webpack.common.js，然后用<a href="https://github.com/survivejs/webpack-merge">webpack-merge</a>来合并，DRY。</p>\n<p>在prod里面用<code class="language-text">cheap-module-source-map</code>， 但是又UglifyJSPlugin就没有生成source-map？！！！ <a href="https://webpack.js.org/configuration/devtool/%EF%BC%8C">https://webpack.js.org/configuration/devtool/，</a> 原来需要提供<code class="language-text">sourceMap: true</code>参数给uglify-webpack-plugin。</p>\n<blockquote>\n<p>When using the uglifyjs-webpack-plugin you must provide the sourceMap: true option to enable SourceMap support.</p>\n</blockquote>\n<p><code class="language-text">cheap-module-source-map</code>不适合用于<code class="language-text">production</code>，用了<code class="language-text">sourceMap: true</code>也有问题。</p>\n<p>在webpack的配置文件里面没法使用process.env，（感觉是bug或者feature缺失？<a href="https://github.com/webpack/webpack/issues/2537">#2537</a>)。需要用<code class="language-text">webpack.DefinePlugin</code>来定义。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token string">\'process.env\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// \'NODE_ENV\': JSON.stringify(\'production\'), // 直接用\'production\'会报错，生成的代码里面没有\'\'，导致找不到变量production</span>\n        <span class="token string">\'NODE_ENV\'</span><span class="token punctuation">:</span> <span class="token string">\'"production"\'</span><span class="token punctuation">,</span><span class="token comment">// 用""括起来也行，webpack是直接把process.env.NODE_ENV替换为"production"</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre>\n      </div>\n<h1 id="code-splitting"><a href="#code-splitting" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Code Splitting</h1>\n<h2 id="entry-points"><a href="#entry-points" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Entry Points</h2>\n<p>直接多个entry就会产生多个bundle.js</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// print2: \'./src/print2.js\',</span>\n    app<span class="token punctuation">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n    one<span class="token punctuation">:</span> <span class="token string">\'./src/one.js\'</span><span class="token punctuation">,</span>\n    two<span class="token punctuation">:</span> <span class="token string">\'./src/two.js\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>\n      </div>\n<p>但是假设<code class="language-text">one.js</code>和<code class="language-text">two.js</code>里面都有<code class="language-text">lodash</code>，则两个bundle都会包含<code class="language-text">lodash</code>，有500多KB。</p>\n<h2 id="commonschunkplugin"><a href="#commonschunkplugin" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CommonsChunkPlugin</h2>\n<p>可以用<code class="language-text">CommonsChunkPlugin</code>解决上面的问题， 提取<code class="language-text">one.js</code>和<code class="language-text">two.js</code>里面共同的<code class="language-text">lodash</code>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'common\'</span><span class="token punctuation">,</span>\n      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'one\'</span><span class="token punctuation">,</span> <span class="token string">\'two\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">// 因为index.js没有引用lodash，所以必须写明那几个文件的common chunks，否则提取不到！</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre>\n      </div>\n<p>注意注释， 如果不是每个文件的公共文件， 则需要明确指定chunks。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"> chunks<span class="token punctuation">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// Select the source chunks by chunk names. The chunk must be a child of the commons chunk.</span>\n  <span class="token comment">// If omitted all entry chunks are selected.</span></code></pre>\n      </div>\n<h2 id="dynamic-imports"><a href="#dynamic-imports" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dynamic Imports</h2>\n<p><a href="https://github.com/tc39/proposal-dynamic-import">JS新的语法</a>，跟以前用<code class="language-text">require.ensure</code>类似。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">  <span class="token keyword">return</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "lodash" */</span> <span class="token string">\'lodash\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>_ <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>另外还需要在<code class="language-text">webpack.config.js</code>里增加：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    chunkFilename<span class="token punctuation">:</span> <span class="token string">\'[name].bundle.js\'</span><span class="token punctuation">,</span> <span class="token comment">// 必须有这行！</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>\n      </div>\n<h2 id="bundle-analysis"><a href="#bundle-analysis" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Bundle Analysis</h2>\n<p>分析各个bundle的大小，看是否有重复，问题出现在哪里，可能哪里可以优化等。</p>\n<ul>\n<li><a href="https://github.com/webpack/analyse">official analyze tool</a></li>\n<li><a href="https://alexkuz.github.io/webpack-chart/">webpack-chart</a></li>\n<li><a href="https://chrisbateman.github.io/webpack-visualizer/">webpack-visualizer</a></li>\n<li><a href="https://github.com/th0r/webpack-bundle-analyzer">webpack-bundle-analyzer</a></li>\n</ul>\n<hr>\n<p>ps, 发现一个问题，UglifyJs不支持ES6！看样子Babel是必须的啊。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">ERROR <span class="token keyword">in</span> app.4df62c770fd384e3a460.bundle.js from UglifyJs\nUnexpected token: operator <span class="token punctuation">(</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">[</span>./src/dynamic-imports.js:5,0<span class="token punctuation">]</span><span class="token punctuation">[</span>app.4df62c770fd384e3a460.bundle.js:157,96<span class="token punctuation">]</span></code></pre>\n      </div>\n<h1 id="lazy-loading"><a href="#lazy-loading" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Lazy Loading</h1>\n<p>用<code class="language-text">import()</code>实现动态加载的目的就是为了延迟加载，提高初始加载的效率， 所以可以在需要异步延迟加载的地方直接使用<code class="language-text">import()</code>就可以了。</p>\n<h1 id="cache"><a href="#cache" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cache</h1>\n<p>使用<code class="language-text">output.filename</code><a href="substitutions">https://webpack.js.org/configuration/output#output-filename</a>，可以用<code class="language-text">[hash]</code>和<code class="language-text">[chunkhash]</code>，但是<code class="language-text">[hash]</code>是每一次构建，每个文件都共用同一个hash值，所以一个文件变化，所有都会变化，不好！最好用<code class="language-text">[chunkhash]</code>。 记得，<code class="language-text">import()</code>动态引入的也加上hash:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// webpack.prod.js</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">"[name].[chunkhash].bundle.js"</span><span class="token punctuation">,</span>\n    chunkFilename<span class="token punctuation">:</span> <span class="token string">"[name].[chunkhash].bundle.js"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>\n      </div>\n<p>貌似webpack2.1（官网文档的版本）有bug，出现如下为问题：</p>\n<blockquote>\n<p>As you can see the bundle’s name now reflects its content (via the hash). If we run another build without making any changes, we’d expect that filename to stay the same. However, if we were to run it again, we may find that this is not the case:</p>\n</blockquote>\n<blockquote>\n<p>This is because webpack includes certain boilerplate, specifically the runtime and manifest, in the entry chunk.</p>\n</blockquote>\n<blockquote>\n<p>Output may differ depending on your current webpack version. Newer versions may not have all the same issues with hashing as some older versions, but we still recommend the following steps to be safe.</p>\n</blockquote>\n<h2 id="extracting-boilerplate"><a href="#extracting-boilerplate" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Extracting Boilerplate</h2>\n<p>可以用<code class="language-text">CommonsChunkPlugin</code>配置一个entry里都没有的名字，就可以提取出公共chunk，也就是什么都“没有”。实际上不是什么都没有，而是webpack的<code class="language-text">runtime</code>，这样就可以解决前面说的问题， 不过我在webpack3.5.5里没有碰到问题， 所以就先不用了。</p>\n<h2 id="module-identifiers"><a href="#module-identifiers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Module Identifiers</h2>\n<p>由于默认webpack的module ID用的是自增的数字，所以有可能增加一个文件，导致所有的module ID都变了， 导致所有文件“内容”都变化。</p>\n<blockquote>\n<p>This is because each module.id is incremented based on resolving order by default. Meaning when the order of resolving is changed, the IDs will be changed as well. </p>\n</blockquote>\n<p>有两个插件可以解决问题，<code class="language-text">NamedModulesPlugin</code>和<code class="language-text">HashedModuleIdsPlugin</code>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NamedModulesPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token comment">// new webpack.HashedModuleIdsPlugin(),</span></code></pre>\n      </div>\n<blockquote>\n<p>Luckily, there are two plugins we can use to resolve this issue. The first is the NamedModulesPlugin, which will use the path to the module rather than a numerical identifier. While this plugin is useful during development for more readable output, it does take a bit longer to run. The second option is the HashedModuleIdsPlugin, which is recommended for production builds:</p>\n</blockquote>\n<h1 id="shimming"><a href="#shimming" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Shimming</h1>\n<p>本部分介绍如何不是“正规”的module，比如如何引入全局变量（如jQuery），如何引入polyfill等。用到的时候再说。</p>\n<h1 id="typescript"><a href="#typescript" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Typescript</h1>\n<p>需要4个条件：</p>\n<ol>\n<li>TypeScript编译器</li>\n<li>Typescript loader，比如<a href="https://github.com/TypeStrong/ts-loader">ts-loader</a>, 或者<a href="https://github.com/s-panferov/awesome-typescript-loader">awesome-typescript-loader</a></li>\n<li>tsconfig.json</li>\n<li>webpack.config.js</li>\n</ol>\n<h1 id="build-performance"><a href="#build-performance" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Build Performance</h1>\n<h1 id="public-path"><a href="#public-path" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Public Path</h1>',
timeToRead:6,excerpt:"getting started Note that webpack will not alter any code other than import and export statements. If you are using other ES2015 features…",fields:{slug:"/webpack/guides"},frontmatter:{title:"webpack guides学习笔记",date:"2017-08-28",category:"FE",tags:["webpack","js","build tool"]}}},{node:{html:'<p>今天有朋友咨询我说是不是iOS没有企业开发证书， 没办法横屏，搞得我云里雾里。 我说不会吧， 谁告诉你的。 他说是他们外包了一个小游戏， 外包的开发人员给他们说的。。。我给他看了一个appstore里的小游戏，是可以横屏的，而且也是个人开发者。 他问了，然后给我说，开发人员说是因为他们用的H5开发的原因。为了破除这个谣言， 我准备自己测试一下。</p>\n<!-- more -->\n<p>首先准备一段html内容：</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>谁说html5不能横屏的。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我就是要横屏。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>要横屏。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>横屏。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>屏。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>图片也是可以的。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://img001.photo.21cn.com/photos/album/20120904/o/6A7A403C29766CBCB38C616BDFD48486.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>其实原理很简单，只需要把内容向右旋转90度就变成了横屏啊。先把定位修改为<code class="language-text">absolute</code>：</p>\n<div class="gatsby-highlight">\n      <pre class="language-css"><code class="language-css">    <span class="token selector">#content</span> <span class="token punctuation">{</span>\n      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>\n      <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n      <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n      <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n      <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token selector">#content p</span> <span class="token punctuation">{</span>\n      <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n      <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>\n      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token selector">img</span> <span class="token punctuation">{</span>\n      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>其实除了<code class="language-text">position: absolute;</code>这行代码其他都是不必要的，其他只是为了做一些居中对齐等。然后我们用js判断是竖屏(portrait)还是横屏(landscape)，如果是竖屏，向右旋转90度。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">  <span class="token keyword">const</span> width <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> height <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>width <span class="token operator">&lt;</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>width <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> contentDOM <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'content\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> height <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n    contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> width <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n    contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token punctuation">(</span>height <span class="token operator">-</span> width<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n    contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token punctuation">(</span>height <span class="token operator">-</span> width<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n    contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">\'rotate(90deg)\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span></code></pre>\n      </div>\n<p><img src="/blogimgs/landscape-right.png" alt="正确旋转"></p>\n<p>但是如果用户的屏幕旋转按钮开着，然后用户又把手机横过来，就悲剧了，如下图。\n<img src="/blogimgs/landscape-wrong.png" alt="错误旋转"></p>\n<p>所以我们还需要监听屏幕变化，如果用户自己把屏幕横过来，就把之前的旋转去掉。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">  <span class="token keyword">const</span> evt <span class="token operator">=</span> <span class="token string">"onorientationchange"</span> <span class="token keyword">in</span> window <span class="token operator">?</span> <span class="token string">"orientationchange"</span> <span class="token punctuation">:</span> <span class="token string">"resize"</span><span class="token punctuation">;</span>\n  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>evt<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> width <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> height <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> contentDOM <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'content\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'width: \'</span> <span class="token operator">+</span> width <span class="token operator">+</span> <span class="token string">\' height: \'</span> <span class="token operator">+</span> height<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>width <span class="token operator">></span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 横屏</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> width <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> height <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">\'0px\'</span><span class="token punctuation">;</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">\'0px\'</span><span class="token punctuation">;</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">\'none\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 竖屏，这里微信应该由bug，我切换为竖屏的时候，width:375, height: 323, 导致不能旋转角度。 在safari、chrome上是正确的。</span>\n      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'change to portrait\'</span><span class="token punctuation">)</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> height <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> width <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token punctuation">(</span>height <span class="token operator">-</span> width<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token punctuation">(</span>height <span class="token operator">-</span> width<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">\'rotate(90deg)\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>完整的Demo请看<a href="/orientation.html">这里</a>。</p>\n<p><a href="http://www.gad.qq.com/article/detail/25663">这篇文章</a>里说了，</p>\n<blockquote>\n<p>直到如今有些人仍在说，如果做H5游戏一定要做竖屏游戏，其实要是深入了解一下，说这些话的，很大一部分是2015年或更早进入H5游戏行业中来的，还有一部分是受到那些早期做H5游戏影响的人。</p>\n</blockquote>\n<p>可见不是不能做， 而是他们没有跟上最新的技术步伐， 或者他们嫌太麻烦了或者他们做不出来吧。可见找到一个靠谱的外包服务团队是多么不容易啊。 <a href="https://www.magicfun.ai">漫极客科技</a>是一家致力于为客户提供高效率高质量服务的靠谱的技术公司，公司创始人曾在人人网、网易游戏、腾讯等多家知名互联网公司工作， 掌握web、app、数据分析、人工智能等多种技术，期待“用技术优化生活”， 改善众多客户的生活质量。有需要请联系他们~</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="http://www.jianshu.com/p/9c3264f4a405">http://www.jianshu.com/p/9c3264f4a405</a></li>\n<li><a href="http://tgask.qq.com/?/article/4">http://tgask.qq.com/?/article/4</a></li>\n<li><a href="http://www.gad.qq.com/article/detail/25663">http://www.gad.qq.com/article/detail/25663</a></li>\n<li><a href="https://www.zhihu.com/question/26631812">https://www.zhihu.com/question/26631812</a></li>\n<li><a href="https://segmentfault.com/q/1010000006686885">https://segmentfault.com/q/1010000006686885</a></li>\n</ul>',timeToRead:2,excerpt:"今天有朋友咨询我说是不是iOS没有企业开发证书， 没办法横屏，搞得我云里雾里。 我说不会吧， 谁告诉你的。 他说是他们外包了一个小游戏， 外包的开发人员给他们说的。。。我给他看了一个appstore…",fields:{slug:"/h5-orientation-on-ios/"},frontmatter:{title:"手机上如何让页面强制横屏",date:"2017-08-07",category:"FE",tags:["h5"]}}},{node:{html:'<p>=========2017-09-14更新===========</p>\n<p>推荐大家看看这个网站<a href="http://learnlayout.com/">learnlayout</a>， 比较全面。</p>\n<p>其中可能会经常看到下面这段话：</p>\n<blockquote>\n<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n</blockquote>\n<p>我查了一下，原来是用于排版演示用的拉丁文：</p>\n<blockquote>\n<p>Lorem ipsum是指一篇常用于排版设计领域的拉丁文文章，主要的目的为测试文章或文字在不同字型、版型下看起来的效果。中文的类似用法则称为乱数假文、随机假文。</p>\n</blockquote>\n<p>有兴趣的可以看看<a href="https://zh.wikipedia.org/wiki/Lorem_ipsum">Wiki</a>， 我还发现原来阮一峰老师之前也写过一篇<a href="http://www.ruanyifeng.com/blog/2009/04/lorem_ipsum.html">介绍文章</a>呢。</p>\n<p>==============================</p>\n<p>布局是CSS中一个很重要的部分，甚至我觉得是最重要也是最难的部分，其他诸如字体大小、颜色等等都是很容易的。最近总结一下使用过的CSS常用布局，包括水平居中、垂直居中、单列布局、多列布局等，以及最新的flex布局，希望能给前端小伙伴一些帮助，也作为自己的知识总结。</p>\n<!-- more -->\n<p>在后面的例子中，我特意将各个块背景颜色调出来方便大家“欣赏”。</p>\n<h1 id="水平居中"><a href="#%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>水平居中</h1>\n<h2 id="子元素为inline"><a href="#%E5%AD%90%E5%85%83%E7%B4%A0%E4%B8%BAinline" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>子元素为inline</h2>\n<p>直接对父元素设置</p>\n<div class="gatsby-highlight">\n      <pre class="language-css"><code class="language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center</code></pre>\n      </div>\n<p>如：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://magicly.me<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>magicly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>显示为：</p>\n<div style="background-color: red; text-align: center; height: 100px;">\n    <a href="https://magicly.me" style="background-color: green;">magicly</a>\n</div>\n<h2 id="子元素为block且定宽（宽度可以是百分比）"><a href="#%E5%AD%90%E5%85%83%E7%B4%A0%E4%B8%BAblock%E4%B8%94%E5%AE%9A%E5%AE%BD%EF%BC%88%E5%AE%BD%E5%BA%A6%E5%8F%AF%E4%BB%A5%E6%98%AF%E7%99%BE%E5%88%86%E6%AF%94%EF%BC%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>子元素为block且定宽（宽度可以是百分比）</h2>\n<p>对子元素设置左右margin为auto</p>\n<div class="gatsby-highlight">\n      <pre class="language-css"><code class="language-css"><span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>如：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>magicly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>显示为：</p>\n<div style="background-color: red; height: 100px;">\n    <div style="background-color: green; width: 500px; margin: 0 auto;">magicly</div>\n</div>\n<h2 id="子元素为block但是不定宽"><a href="#%E5%AD%90%E5%85%83%E7%B4%A0%E4%B8%BAblock%E4%BD%86%E6%98%AF%E4%B8%8D%E5%AE%9A%E5%AE%BD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>子元素为block但是不定宽</h2>\n<p>设置子元素</p>\n<div class="gatsby-highlight">\n      <pre class="language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> inline</code></pre>\n      </div>\n<p>以及设置父元素</p>\n<div class="gatsby-highlight">\n      <pre class="language-css"><code class="language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>如：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> inline</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://img001.photo.21cn.com/photos/album/20120904/o/6A7A403C29766CBCB38C616BDFD48486.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>显示为：</p>\n<div style="background-color: red; text-align: center;">\n    <div style="background-color: green; display: inline"><img src="http://img001.photo.21cn.com/photos/album/20120904/o/6A7A403C29766CBCB38C616BDFD48486.jpg" /></div>\n</div>\n<h1 id="垂直居中"><a href="#%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>垂直居中</h1>\n<h2 id="子元素为inline-1"><a href="#%E5%AD%90%E5%85%83%E7%B4%A0%E4%B8%BAinline-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>子元素为inline</h2>\n<p>设置父元素的height和line-height相等， 如：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://magicly.me<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>magicly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>显示为：</p>\n<div style="background-color: red; text-align: center; height: 100px; line-height: 100px;">\n    <a href="https://magicly.me" style="background-color: green;">magicly</a>\n</div>\n<h2 id="子元素为block"><a href="#%E5%AD%90%E5%85%83%E7%B4%A0%E4%B8%BAblock" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>子元素为block</h2>\n<p>设置子元素position:absolute 并设置top、bottom为0（如果还要左右居中的话，可以设置left: 0; right: 0;），父元素要设置定位为static以外的值（如relative），margin:auto;\n如：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 569px<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 462px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span> <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://img001.photo.21cn.com/photos/album/20120904/o/6A7A403C29766CBCB38C616BDFD48486.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>显示为：</p>\n<div style="background-color: red; height: 600px; position: relative;">\n    <div style="background-color: green; height: 569px; width: 462px; position: absolute; top: 0; bottom: 0; left:0; right: 0; margin: auto;"><img src="http://img001.photo.21cn.com/photos/album/20120904/o/6A7A403C29766CBCB38C616BDFD48486.jpg" /></div>\n</div>\n<h1 id="单列布局"><a href="#%E5%8D%95%E5%88%97%E5%B8%83%E5%B1%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>单列布局</h1>\n<p>主要有两种:</p>\n<ul>\n<li>header, content, footer宽度相同，有一个max-width</li>\n<li>header和footer占满浏览器100%宽度，content有一个max-width</li>\n</ul>\n<p>第一种：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>尾部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>显示为：</p>\n<header style="background-color: red; width: 600px; margin: 0 auto;">头部</header>\n<main style="background-color: green; width: 600px; margin: 0 auto;">内容</main>\n<footer style="background-color: yellow; width: 600px; margin: 0 auto;">尾部</footer>\n<p>第二种：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>尾部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>显示为：</p>\n<header style="background-color: red;">头部</header>\n<main style="background-color: green; width: 600px; margin: 0 auto;">内容</main>\n<footer style="background-color: yellow;">尾部</footer>\n<h1 id="两列"><a href="#%E4%B8%A4%E5%88%97" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>两列</h1>\n<h2 id="float--margin"><a href="#float--margin" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>float + margin</h2>\n<p>用float将边栏与主要内容拉到一行，然后设置主要内容的margin。</p>\n<ul>\n<li>\n<p>左边栏:</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">margin-left</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主要内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<main style="background-color: red;">\n<aside style="background-color: yellow; float: left; width: 50px;">边栏</aside>\n<section style="background-color: green; margin-left: 50px;">主要内容</section>\n</main>\n</li>\n<li>\n<p>右边栏</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">margin-right</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主要内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<main style="background-color: red;">\n<aside style="background-color: yellow; float: right; width: 50px;">边栏</aside>\n<section style="background-color: green; margin-right: 50px;">主要内容</section>\n</main>\n</li>\n</ul>\n<h2 id="position-absolute--margin"><a href="#position-absolute--margin" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>position: absolute + margin</h2>\n<ul>\n<li>\n<p>左边栏:</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">margin-left</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主要内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<main style="background-color: red; position: relative;">\n<aside style="background-color: yellow; position: absolute; left: 0; width: 50px;">边栏</aside>\n<section style="background-color: green; margin-left: 50px;">主要内容</section>\n</main>\n</li>\n<li>\n<p>右边栏</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">margin-right</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主要内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<main style="background-color: red; position: relative;">\n<aside style="background-color: yellow; position: absolute; right: 0; width: 50px;">边栏</aside>\n<section style="background-color: green; margin-right: 50px;">主要内容</section>\n</main>\n</li>\n</ul>\n<h1 id="三列布局"><a href="#%E4%B8%89%E5%88%97%E5%B8%83%E5%B1%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>三列布局</h1>\n<p>比较经典有圣杯布局，以及据说是淘宝UED（玉伯）提出的双飞翼布局。</p>\n<h2 id="圣杯布局"><a href="#%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>圣杯布局</h2>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span> 0 100px 0 90px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主要内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 90px<span class="token punctuation">;</span> <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> -90px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">margin-left</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">right</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token property">clear</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>尾部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>显示为：</p>\n<header style="background-color: red;">头部</header>\n<main style="background-color: black; position: relative; padding: 0 100px 0 90px;">\n  <section style="background-color: green; height: 100px; float: left; width: 100%;">主要内容</section>\n  <aside style="background-color: yellow; height: 100px; float: left; width: 90px; margin-left: -100%; position: relative; left: -90px;">左边栏</aside>\n  <aside style="background-color: yellow; height: 100px; float: left; width: 100px; margin-left: -100px; position: relative; right: -100px;">右边栏</aside>\n</main>\n<div style="background-color: blue; clear: left;">尾部</div>\n<h2 id="双飞翼布局"><a href="#%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>双飞翼布局</h2>\n<p>传统的双飞翼布局不是这样的， 只是我发现直接在section用padding也可以达到效果。</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span> 0 100px 0 90px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主要内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 90px<span class="token punctuation">;</span> <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">margin-left</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token property">clear</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>尾部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>显示为：</p>\n<header style="background-color: red;">头部</header>\n<main style="background-color: black; position: relative;">\n  <section style="background-color: green; height: 100px; float: left; width: 100%; padding: 0 100px 0 90px;">主要内容</section>\n  <aside style="background-color: yellow; height: 100px; float: left; width: 90px; margin-left: -100%;">左边栏</aside>\n  <aside style="background-color: yellow; height: 100px; float: left; width: 100px; margin-left: -100px;">右边栏</aside>\n</main>\n<div style="background-color: blue; clear: left;">尾部</div>\n<p>圣杯布局和双飞翼布局的原理<a href="http://www.cnblogs.com/star91/p/5773436.html">这篇文章</a>讲解得比较清楚，我就不再赘述。</p>\n<h1 id="flex布局"><a href="#flex%E5%B8%83%E5%B1%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>flex布局</h1>\n<p>flex布局目前已经很常用了，浏览器支持得也很好，甚至连<a href="">React Native</a>也是用flex布局的，这么重要想想也觉得应该单独成篇啦。后续再写，有兴趣的可以看看阮老师的下面两篇文章。</p>\n<ul>\n<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></li>\n<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">http://www.ruanyifeng.com/blog/2015/07/flex-examples.html</a></li>\n</ul>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="https://zhuanlan.zhihu.com/p/25565751">https://zhuanlan.zhihu.com/p/25565751</a></li>\n<li><a href="http://www.cnblogs.com/star91/p/5773436.html">http://www.cnblogs.com/star91/p/5773436.html</a></li>\n<li><a href="http://www.zhangxinxu.com/wordpress/2013/11/margin-auto-absolute-%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/">http://www.zhangxinxu.com/wordpress/2013/11/margin-auto-absolute-绝对定位-水平垂直居中/</a></li>\n<li><a href="https://www.w3schools.com/html/html5_semantic_elements.asp">https://www.w3schools.com/html/html5<em>semantic</em>elements.asp</a></li>\n<li><a href="http://coolshell.cn/articles/6840.html">http://coolshell.cn/articles/6840.html</a></li>\n</ul>',
timeToRead:7,excerpt:"=========2017-09-14更新=========== 推荐大家看看这个网站 learnlayout ， 比较全面。 其中可能会经常看到下面这段话： Lorem ipsum dolor sit amet, consectetur adipisicing elit…",fields:{slug:"/css-layout/"},frontmatter:{title:"CSS常用布局",date:"2017-07-19",category:"FE",tags:["css"]}}},{node:{html:'<p>最近将blog生成器由<a href="https://hexo.io">Hexo</a>换到了<a href="https://github.com/gatsbyjs/gatsby">Gatsby</a>，原来页面现保留在这里<a href="https://magicly.coding.me/%EF%BC%8C">https://magicly.coding.me/，</a> 留作纪念。</p>\n<p>之前用<a href="https://hexo.io">Hexo</a>写的blog，没有太大问题（反正我也写得少）。由于国内网络环境，托管在<a href="https://github.cm">Github</a>的页面访问很慢，于是我想，是否可以像用<a href="https://facebook.github.io/react/">React</a>那样开发， index.html只是一个简单的包装页面， 所有资源都打包放到bundle.js（当然webpack是可以支持code spliting的），这样我可以把index.html放在国外，然后在里面引用放在国内免费CDN上的bundle.js，这样速度就能达到最大化。 至于为什么不把index.html也放国内，因为要备案啊！！！备案啊！！！备案啊！！！一般谁会愿意为了写个blog去折腾呢？</p>\n<!-- more -->\n<p>于是google搜索react static site generator，浏览之后发现了<a href="https://github.com/gatsbyjs/gatsby">Gatsby</a>这个开源项目，简直是神器！不仅是用React实现的项目，而且用<a href="">graphql</a>来实现支持多数据源，且采用了很多最佳实践，包括<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers">Service Work</a>、离线使用等。 而且一个React Component是一个页面， 当然markdown通过<a href="http://remark.js.org/">Remark</a>转化也对应一个页面，这样平时写blog就直接用markdown，有一些复杂的演示项目就可以直接写React Component了，而且后面会支持直接在markdown中应用React Component， 想想就有点小激动呢。</p>\n<p>折腾了一周，刚好碰到前两天<a href="https://twitter.com/gatsbyjs/status/883051117013123072">发布了1.0版本</a>，记录一下使用方式。</p>\n<h1 id="安装gatsby"><a href="#%E5%AE%89%E8%A3%85gatsby" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装Gatsby</h1>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g gatsby</code></pre>\n      </div>\n<h1 id="新建gatsby项目"><a href="#%E6%96%B0%E5%BB%BAgatsby%E9%A1%B9%E7%9B%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>新建gatsby项目</h1>\n<p>由于项目比较新，目前没有hexo那么成熟的theme，有一些人做了一些starter， 你可以直接用我这个。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/magicly/gatsby-starter-blog.git\n<span class="token function">git</span> checkout branch myblog\n<span class="token function">cd</span> gatsby-starter-blog\n<span class="token function">npm</span> <span class="token function">install</span></code></pre>\n      </div>\n<h1 id="运行"><a href="#%E8%BF%90%E8%A1%8C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>运行</h1>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">gatsby develop</code></pre>\n      </div>\n<p>热更新真是爽爆！</p>\n<h1 id="打包部署"><a href="#%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>打包部署</h1>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">gatsby build</code></pre>\n      </div>\n<p>会在public下生成所有的资源，如果你用github pages服务的话， 把public下的目录push上去就可以。</p>\n<p>接着我发现了更好的pages服务，<a href="https://netlify.com/">Netlify</a>，你直接push源码，Netlify会自动给你打包部署到CDN，所以访问速度也会快很多（但是都在国外，还是会有一些影响）。Netlify之于Gatsby就好比github pages之于<a href="https://github.com/jekyll/jekyll">Jekyll</a>，当然Netlify也支持<a href="https://github.com/jekyll/jekyll">Jekyll</a>和<a href="https://hexo.io">Hexo</a>等，以及其他很多功能，请访问<a href="https://www.netlify.com/docs/">Doc</a>。</p>\n<h1 id="评论"><a href="#%E8%AF%84%E8%AE%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>评论</h1>\n<p>原来用多说，然后多说关了，后来改成网易云跟帖，前几天发公告说8.1关闭服务，额。。。。。然后只好再找了一个<a href="https://github.com/imsun/gitment">Gitment</a>，github应该不会倒闭吧。 用之前确实考虑了下，只支持github账号，而且国内环境也不太好你懂得，后来一想，反正受众也是coder，如果翻墙和github账号都没有的话， 也就不要评论了吧，这样就可以过滤掉来发小广告的啦。。。</p>\n<p>==========================================</p>\n<p>研究gatsby之余发现了<a href="https://jamstack.org/">JAMStack</a>，很多想法跟我不谋而合，有时间好好学习下。</p>',timeToRead:1,excerpt:"最近将blog生成器由 Hexo 换到了 Gatsby ，原来页面现保留在这里 https://magicly.coding.me/，  留作纪念。 之前用 Hexo 写的blog，没有太大问题（反正我也写得少）。由于国内网络环境，托管在 Github…",fields:{slug:"/blog-change-to-gatsby/"},frontmatter:{title:"用Gatsby重写blog",date:"2017-07-09",category:"React",tags:["Gatsby","React"]}}},{node:{html:'<h1 id="如何查看cuda版本"><a href="#%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Bcuda%E7%89%88%E6%9C%AC" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>如何查看cuda版本</h1>\n<p><a href="http://www.cnblogs.com/shrimp-can/p/5253672.html">http://www.cnblogs.com/shrimp-can/p/5253672.html</a></p>\n<p>默认目录为：local，进入local：cd /usr/local</p>\n<p>输入命令：ls，查看该目录下的文件，可以看到安装的cuda在此处</p>\n<p>进入cuda文件：cd cuda-7.5（我的是7.5），此处为安装的东西</p>\n<!-- more -->\n<h1 id="安装docker"><a href="#%E5%AE%89%E8%A3%85docker" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装docker</h1>\n<p><a href="https://docs.docker.com/engine/installation/linux/ubuntu/">https://docs.docker.com/engine/installation/linux/ubuntu/</a></p>\n<h1 id="安装nvidia-docker"><a href="#%E5%AE%89%E8%A3%85nvidia-docker" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装nvidia-docker</h1>\n<p><a href="https://github.com/NVIDIA/nvidia-docker">https://github.com/NVIDIA/nvidia-docker</a></p>\n<h1 id="docker端口映射"><a href="#docker%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>docker端口映射</h1>\n<p><a href="https://opskumu.gitbooks.io/docker/content/chapter5.html">https://opskumu.gitbooks.io/docker/content/chapter5.html</a></p>\n<h1 id="遇到的问题"><a href="#%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>遇到的问题</h1>\n<h2 id="dpkg-lock"><a href="#dpkg-lock" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>dpkg lock</h2>\n<blockquote>\n<p>dpkg: error: dpkg status database is locked by another process</p>\n</blockquote>\n<p><a href="https://askubuntu.com/questions/219545/dpkg-error-dpkg-status-database-is-locked-by-another-process">https://askubuntu.com/questions/219545/dpkg-error-dpkg-status-database-is-locked-by-another-process</a></p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">sudo rm /var/lib/dpkg/lock\nsudo dpkg --configure -a</code></pre>\n      </div>',timeToRead:1,excerpt:"如何查看cuda版本 http://www.cnblogs.com/shrimp-can/p/5253672.html 默认目录为：local，进入local：cd /usr/local 输入命令：ls，查看该目录下的文件，可以看到安装的cuda在此处 进入cuda文件：cd…",fields:{slug:"/aws-docker/"},frontmatter:{title:"aws上配置docker",date:"2017-04-19",category:"ML",tags:["aws","docker","ml"]}}},{node:{html:'<p>深度学习没有GPU的支持可以说完全不能解决实际问题， 稍大一点的数据集可能就要几个小时，GPU能起到10倍以及更高的速度提升。之前我们做了<a href="http://magicly.me/2017/04/15/aws-dl-config/">AWS的深度学习配置</a>，今天再看看国内阿里云的HPC配置。</p>\n<!-- more -->\n<h1 id="购买--登录"><a href="#%E8%B4%AD%E4%B9%B0--%E7%99%BB%E5%BD%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>购买 &#x26; 登录</h1>\n<p>在<a href="https://hpc-buy.aliyun.com/#/postpay">阿里云hpc页面</a>购买，目前按量付费只支持华东1（杭州），G4配置：</p>\n<blockquote>\n<p>CPU : Intel Xeon E5 v4 CPU 32物理核\nGPU : Nvidia Tesla M40 x2\n单机峰值计算能力突破每秒16万亿次单精度浮点运算。</p>\n</blockquote>\n<p>价格是37.50￥/时，价格差不多是AWS p2.xlarge的6倍， 所以我们最后要测试一下AWS p2.xlarge和阿里云HPC的性能对比，看看谁的性价比高。</p>\n<p>对了，阿里云HPC目前不支持自定义镜像，只有一种选择CentOS7！！！！所以后面我们必须用docker，不然如果按需付费来使用的话， 每次都得重装所有软件。可以把docker看成轻量级的AMI镜像。</p>\n<p>由于HPC是只能内网访问的物理机， 需要先登录跳转机， 然后走内网访问HPC，这样安全一些。华东1购买HPC的时候会分配一个跳转机，需要在<a href="https://hpc.console.aliyun.com/#/postpay/list/">控制台</a>设置跳转机的初始密码，重启跳转机密码方能生效。HPC物理机的密码会通过阿里云站内消息的方式发给你，好像都是111111，建议在第一次登录的时候用passwd命令修改。</p>\n<h1 id="配置外网"><a href="#%E9%85%8D%E7%BD%AE%E5%A4%96%E7%BD%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>配置外网</h1>\n<p>现在HPC物理机能直接访问外网了？！！\nwget能直接访问， 但是yum install的时候就是网络超时，真是蛋疼！</p>\n<p>参看<a href="https://yq.aliyun.com/articles/66993?spm=5176.doc48632.2.5.V1yqJr">这篇文档</a>配置HPC外网。文档里面有好几个地方不对，我重新写一下吧。</p>\n<h2 id="跳转机ecs配置"><a href="#%E8%B7%B3%E8%BD%AC%E6%9C%BAecs%E9%85%8D%E7%BD%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>跳转机ECS配置</h2>\n<ol>\n<li>\n<p>下载VPN包，解压并进入VPN-ECS</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">wget http://public-img-test.oss-cn-hangzhou.aliyuncs.com/VPN.tar.gz\ntar zxvf VPN.tar.gz &amp;&amp; cd VPN/VPN-ECS</code></pre>\n      </div>\n</li>\n<li>\n<p>目录下并没有文档说的run.sh， 而是两个</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">run4centos6.sh\nrun4centos7.sh</code></pre>\n      </div>\n<p>用lsb_release命令查看系统版本（还记得我说其实目前只能选centos7么）：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[root@iZ23gbdj71dZ VPN-ECS]# lsb_release -a\nLSB Version:\t:core-4.1-amd64:core-4.1-noarch\nDistributor ID:\tCentOS\nDescription:\tCentOS Linux release 7.0.1406 (Core)\nRelease:\t7.0.1406\nCodename:\tCore</code></pre>\n      </div>\n<p>那就执行run4centos7.sh吧</p>\n</li>\n<li>\n<p>ifconfig检查是否有vpn_ppp0这个网卡</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">ifconfig\nvpn_vpn0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n    inet 192.168.30.11  netmask 255.255.255.0  broadcast 192.168.30.255\n    ether 00:ac:66:6f:b0:52  txqueuelen 500  (Ethernet)\n    RX packets 1  bytes 42 (42.0 B)\n    RX errors 0  dropped 0  overruns 0  frame 0\n    TX packets 4  bytes 168 (168.0 B)\n    TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</code></pre>\n      </div>\n</li>\n</ol>\n<h2 id="hpc配置"><a href="#hpc%E9%85%8D%E7%BD%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HPC配置</h2>\n<ol>\n<li>\n<p>下载VPN包，解压并进入VPN-HPC\n由于HPC目前不能访问外网OSS（真是蛋疼， 其实HPC现在访问外网比如<a href="http://www.platform.ai/files/dogscats.zip%E6%98%AF%E5%8F%AF%E4%BB%A5%E7%9A%84%EF%BC%8C%E4%BD%86%E5%B1%85%E7%84%B6%E7%9C%9F%E7%9A%84%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AEhttp://public-img-test.oss-cn-hangzhou.aliyuncs.com/VPN.tar.gz%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%89%EF%BC%8C%E6%89%80%E4%BB%A5%E7%94%A8scp%E5%B0%86%E4%B9%8B%E5%89%8D%E5%9C%A8%E8%B7%B3%E8%BD%AC%E6%9C%BA%E4%B8%8A%E4%B8%8B%E8%BD%BD%E7%9A%84VPN%E5%8C%85copy%E5%88%B0HPC%E3%80%82">http://www.platform.ai/files/dogscats.zip是可以的，但居然真的不能访问http://public-img-test.oss-cn-hangzhou.aliyuncs.com/VPN.tar.gz！！！），所以用scp将之前在跳转机上下载的VPN包copy到HPC。</a></p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">scp root@[跳转机内网IP地址]:/root/VPN.tar.gz .\ntar zxvf VPN.tar.gz &amp;&amp; cd VPN/VPN-HPC</code></pre>\n      </div>\n</li>\n<li>\n<p>执行run.sh</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">./run.sh [跳转机内网IP地址]</code></pre>\n      </div>\n</li>\n<li>\n<p>测试是否能访问外网</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">ping www.taobao.com\ncurl www.taobao.com\nwget www.baidu.com</code></pre>\n      </div>\n<p>可以了。 话说我一开始就可以啊！！！！\n测试一下wget VPN包呢？</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[root@AliHPC-M40-410 VPN-HPC]# wget http://public-img-test.oss-cn-hangzhou.aliyuncs.com/VPN.tar.gz\n--2017-04-19 10:50:59--  http://public-img-test.oss-cn-hangzhou.aliyuncs.com/VPN.tar.gz\n正在连接 10.168.56.7:3128... 失败：没有到主机的路由。</code></pre>\n      </div>\n<p>居然还是访问不到!!!</p>\n</li>\n<li>\n<p>文档里面说如果这时候还不行， 看看http<em>proxy &#x26; https</em>proxy两个变量，如果设置了，删除</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[root@AliHPC-M40-410 VPN-HPC]# echo $http_proxy\nhttp://10.168.56.7:3128/\n[root@AliHPC-M40-410 VPN-HPC]# echo $https_proxy\nhttp://10.168.56.7:3128/</code></pre>\n      </div>\n<p>确实设置了， 试试看删除之后呢。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">unset http_proxy\nunset https_proxy\nwget http://public-img-test.oss-cn-hangzhou.aliyuncs.com/VPN.tar.gz</code></pre>\n      </div>\n<p>好吧，真的可以了！！！</p>\n</li>\n</ol>\n<h1 id="配置docker"><a href="#%E9%85%8D%E7%BD%AEdocker" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>配置docker</h1>\n<p>参考<a href="https://yq.aliyun.com/articles/64979?spm=5176.doc48632.2.6.V1yqJr">这篇https://yq.aliyun.com/articles/64979?spm=5176.doc48632.2.6.V1yqJr</a>，其实大部分都不是必须的，只需要下面两步即可。</p>\n<ol>\n<li>\n<p>更新repo，镜像里已经装了docker的，更新一下版本</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">sudo yum update</code></pre>\n      </div>\n</li>\n<li>\n<p>验证docker是否装好</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">sudo docker run hello-world</code></pre>\n      </div>\n<p>噢啦。。。</p>\n</li>\n</ol>\n<h2 id="安装nvidia-docker"><a href="#%E5%AE%89%E8%A3%85nvidia-docker" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装nvidia-docker</h2>\n<p>nvidia－docker 是 Nvidia 公司为 docker 所做的封装，开源代码可以在<a href="https://github.com/NVIDIA/nvidia-docker">Github</a>找到。nvidia－docker 可以对GPU做抽象，只要容器中的GPU驱动版本不高于宿主机的GPU驱动版本，即可在容器中使用GPU资源。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text"># Install nvidia-docker and nvidia-docker-plugin\nwget -P /tmp https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.1/nvidia-docker-1.0.1-1.x86_64.rpm\nsudo rpm -i /tmp/nvidia-docker*.rpm &amp;&amp; rm /tmp/nvidia-docker*.rpm\nsudo systemctl start nvidia-docker\n\n# Test nvidia-smi\nnvidia-docker run --rm nvidia/cuda nvidia-smi</code></pre>\n      </div>\n<h1 id="测试tensorflow"><a href="#%E6%B5%8B%E8%AF%95tensorflow" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试tensorflow</h1>\n<p>阿里云HPC服务器在交付时已经安装好TensorFlow （版本 0.8rc），用户无需做任何额外工作即可直接运行。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">/disk1/deeplearning/anaconda2/bin/python -m &quot;tensorflow.models.image.mnist.convolutional&quot;</code></pre>\n      </div>\n<p>上两张图，看一下跑起来的时候资源消耗：\n<img src="http://oml1i2pi6.bkt.clouddn.com/nvidia-smi-when-tensorflow-is-run.png" alt="nvidia-smi when tensorflow is run">\n<img src="http://oml1i2pi6.bkt.clouddn.com/htop-when-tensorflow-is-run.png" alt="htop when tensorflow is run"></p>\n<h1 id="tensorflow-docker"><a href="#tensorflow-docker" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>tensorflow docker</h1>\n<p>我打算用docker跑tensorflow，测试一下性能。结果用<a href="https://help.aliyun.com/document_detail/51489.html">阿里提供的镜像</a>时候又发现cuda版本问题。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[root@AliHPC-M40-410 deeplearning]# nvidia-docker run registry.cn-beijing.aliyuncs.com/tensorflow-samples/alexnet_benchmark:1.0.0-devel-gpu\n\nStatus: Downloaded newer image for registry.cn-beijing.aliyuncs.com/tensorflow-samples/alexnet_benchmark:1.0.0-devel-gpu\nnvidia-docker | 2017/04/19 13:02:34 Error: unsupported CUDA version: driver 7.5 &lt; image 8.0</code></pre>\n      </div>\n<p>直接用yum upgrade cuda不行的， 需要添加cuda8的源才能正常安装cuda8， 参看<a href="https://developer.nvidia.com/cuda-downloads">nvidia文档</a></p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">wget http://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-repo-rhel7-8.0.61-1.x86_64.rpm\nrpm -ivh cuda-repo-rhel7-8.0.61-1.x86_64.rpm\nyum install cuda</code></pre>\n      </div>\n<p>居然有1.3G这么大，花了一个多小时，55555， 有点想放弃了，关键是安装了之后不能制作镜像，如果按需付费下次还得再来一次，每次安装cuda8就得花40块钱？！！！看样子阿里云HPC就是给有钱人准备的,9000￥/月。我已经给阿里云提了工单，请求他们把镜像升级到cuda8.0， 不知道啥时候回响应呢。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">安装  2 软件包 (+31 依赖软件包)\n升级  1 软件包 (+ 4 依赖软件包)\n\n总下载量：1.3 G\nIs this ok [y/d/N]: y</code></pre>\n      </div>\n<p>装好之后居然</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[root@AliHPC-M40-410 deeplearning]# nvidia-smi                                          │[root@AliHPC-M40-410 deeplearning]# nvidia-docker stop 2448268d9525\nFailed to initialize NVML: Driver/library version mismatch</code></pre>\n      </div>\n<p>额。。。。。。。</p>\n<p>在等待cuda安装的时候，我在阿里云的docker hub上找了个<a href="https://dev.aliyun.com/list.html?namePrefix=tensorflow">tensorflow镜像</a>。这个docker image包含jupyter notebook，默认监听的端口是8888，需要把docker的端口映射到宿主机（HPC）上。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">nvidia-docker run -p 80:8888 registry.cn-hangzhou.aliyuncs.com/denverdino/tensorflow</code></pre>\n      </div>\n<p>这时候在HPC上wget localhost就可以访问到jupyter notebook的index.html了，但是我们之前说过HPC只能在内网，所以还需要配置<a href="https://help.aliyun.com/document_detail/25836.html">反向代理</a>。</p>\n<ol>\n<li>\n<p>ECS跳转机部署代理服务器tengine</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">wget http://tengine.taobao.org/download/tengine-2.1.1.tar.gz\ntar zxvf tengine-2.1.1.tar.gz\ncd tengine-2.1.1/\n./configure\nmake\nsudo make install</code></pre>\n      </div>\n<p>默认安装在/usr/local/nginx/</p>\n</li>\n<li>\n<p>编辑ECS Tengine配置文件\nroot权限打开/usr/local/nginx/conf/nginx.conf，增加一个server模块，监听本机的某个端口（比如8888），将所有请求转发到HPC的物理机，配置如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">server {\n    listen       8888;\n#    listen       somename:8080;\n#    server_name  somename  alias  another.alias;\n\n    location / {\n        proxy_pass http://10.172.68.130; #10.172.68.130是HPC物理机的内网地址\n    }\n}</code></pre>\n      </div>\n<p>这样之后在ECS下wget localhost:8888可以访问到jupyter notebook的index.html了。但是用ECS公网IP在本地浏览器上访问的时候发现连不上， 应该是防火墙的原因吧，把ECS的8888的端口打开（如果ECS连不上HPC的端口，估计也是防火墙的问题，因为我这里用的是80端口，所以没有报错）。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">iptables -I INPUT -p TCP --dport 8888 -j ACCEPT</code></pre>\n      </div>\n<p>AWS里的话是用安全组配置inbound rules，对于不熟悉iptables的用户要友好一些。现在可以在本地浏览器上访问jupyter notebook了。\n<img src="http://oml1i2pi6.bkt.clouddn.com/hpc-jupyter-notebook.png" alt="hpc jupyter notebook"></p>\n</li>\n</ol>\n<h1 id="some-tricks"><a href="#some-tricks" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>some tricks</h1>\n<ol>\n<li>\n<p>安装tmux</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">yum install tmux</code></pre>\n      </div>\n</li>\n<li>\n<p>安装htop</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">-------------- For RHEL/CentOS 7 --------------\nwget http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-9.noarch.rpm\nrpm -ihv epel-release-7-9.noarch.rpm \nyum install htop</code></pre>\n      </div>\n</li>\n<li>加速下载数据集\n话说在HPC上直接下载数据集有点慢（尤其是国外的），可以考虑开一台最低配置的普通ecs，不限制网速，在上面下载好datasets，然后再“内网”（阿里云不同区的服务器是不能内网互联的，比如hk的ecs就不能内网访问杭州的ecs，所以需要用公网ip，但是哪怕用公网ip，速度也是上百倍的差别， 3.4MB/s vs 24.2KB/s）同步到hpc上，如果是国外的datasets，可以开一台低配的相关ecs，0.165￥/时，价格差了200多倍啊。</li>\n</ol>\n<h1 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h1>\n<p>经过几个小时的折腾， 我还没有配好可以正确使用gpu的HPC实例。后来看到这篇<a href="https://yq.aliyun.com/articles/68206">在阿里云HPC和容器服务上，像梵高一样作画</a>，应该比较简单的， 只是目前必须用北京的HPC才可以这么方便的使用。而北京目前必须按月付费，9000￥/月，暂时我还用不起啊。所以还是先放弃HPC，用AWS吧。。。</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="https://yq.aliyun.com/articles/66993?spm=5176.doc48632.2.5.V1yqJr">https://yq.aliyun.com/articles/66993?spm=5176.doc48632.2.5.V1yqJr</a></li>\n<li><a href="https://yq.aliyun.com/articles/64979?spm=5176.doc48632.2.6.V1yqJr">https://yq.aliyun.com/articles/64979?spm=5176.doc48632.2.6.V1yqJr</a></li>\n<li><a href="https://help.aliyun.com/document_detail/48632.html?spm=5176.doc52231.6.573.uqYEBN">https://help.aliyun.com/document_detail/48632.html?spm=5176.doc52231.6.573.uqYEBN</a></li>\n<li><a href="https://github.com/NVIDIA/nvidia-docker">https://github.com/NVIDIA/nvidia-docker</a></li>\n<li><a href="https://opskumu.gitbooks.io/docker/content/chapter5.html">https://opskumu.gitbooks.io/docker/content/chapter5.html</a></li>\n</ul>',timeToRead:7,excerpt:"深度学习没有GPU的支持可以说完全不能解决实际问题， 稍大一点的数据集可能就要几个小时，GPU能起到10倍以及更高的速度提升。之前我们做了 AWS的深度学习配置 ，今天再看看国内阿里云的HPC配置。 购买 & 登录 在 阿里云hpc页面 购买，目前按量付费只支持华东1（杭州），G…",fields:{slug:"/2017-04-09-aliyun-hpc-config/"},frontmatter:{title:"阿里云HPC深度学习配置从入门到真的放弃",date:"2017-04-19",category:"ML",tags:["rnn","neural network","dl","ml"]}}},{node:{html:'<p>深度学习的流行跟计算能力的大大提高密不可分，尤其是GPU的大量使用，Nvidia去年股价涨了500%呢。用CPU要运行一个月的项目， 可能用GPU几个小时就运行完了，效率和速度不可同日耳语。工欲善其事必先利其器，所以正确地配置好GPU是进入深度学习的开端，而用AWS的GPU服务是最快捷方便的，本文就教你如何快速的配置好AWS的p2实例，提高深度学习效率。</p>\n<!-- more -->\n<h1 id="安装aws-instance"><a href="#%E5%AE%89%E8%A3%85aws-instance" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装AWS Instance</h1>\n<h2 id="instance选择"><a href="#instance%E9%80%89%E6%8B%A9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Instance选择</h2>\n<p>AWS提供很多实例，有计算型的（CPU比较好）， 有内存型的（内存比较高），有高磁盘IO型的，也有适合用于深度学习的GPU型。具体不同型号的特点配置以及价格参见<a href="https://aws.amazon.com/ec2/pricing/on-demand/">AWS Pricing</a>。</p>\n<p>这里我们选择p2.xlarge，4核CPU，61G内存，一个Nvidia GPU（有2496个并行处理核，12G内存），具体信息可以看<a href="https://aws.amazon.com/blogs/aws/new-p2-instance-type-for-amazon-ec2-up-to-16-gpus/">这里</a>。</p>\n<p>当然p2.xlarge的价格(0.9$/h)当然比t2.xlarge的价格(0.188$/h)要高， 所以我的建议是，在本机或者t2上写好代码，找一个小一点的数据集跑一下， 调试得差不多了， 然后启动p2.xlarge，在全量数据集上run。这里说一下，如果数据集是国外的（大部分都是），aws下载能达到20MB/s，相比国内下载速度，真是爽得不要不要的。</p>\n<h2 id="ami选择"><a href="#ami%E9%80%89%E6%8B%A9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AMI选择</h2>\n<p>AWS Instance安装的时候支持选择镜像。还记得以前重装windows系统么， 装完之后需要安装各种驱动，输入法、qq、浏览器、word。。。blabla一堆软件，有可能几个小时就过去了。所以后来出了Ghost盘，安装好各种软件后，做个Ghost盘，然后以后重装的时候就只需要装Ghost盘，十分钟就可以装好，然后所有该要的软件都有了，大大节约了时间。AWS的镜像叫AMI。</p>\n<p>社区已经有很多人制作了深度学习的AMI，我们也可以选择自己制作。用云服务要改变传统开发思维，要有”随要随开，用完即走“的思想。所以用aws的基本流程如下：</p>\n<ol>\n<li>选择一个基础的AMI</li>\n<li>安装好Instance</li>\n<li>安装各种需要的软件，比如python，numpy，matplot，tensorflow，keras，cuda等</li>\n<li>在AWS管理控制台右键选中instance，点image，create image。然后就等着，几分钟就好了。</li>\n<li>做相应的开发，写代码，下载数据集等blabla。。。</li>\n<li>工作一段时间之后要休息了，制作新的AMI</li>\n<li>释放instance</li>\n<li>第二天来，新开instance，用5制作的AMI，继续上次的工作。</li>\n</ol>\n<p>这里推荐几个社区制作的深度学习相关的AMI，<a href="https://aws.amazon.com/marketplace/pp/B01M0AXXQB">Deep Learning AMI Amazon Linux Version</a>, Deep Learning AMI Ubuntu Linux - 1.3_Apr2017 - ami-638c1e03, <a href="https://github.com/ritchieng/tensorflow-aws-ami">TFAMI</a>。我因为最近在看<a href="http://course.fast.ai/">Fast.ai</a>课程， 所以选择了课程对应的AMI。话说<a href="https://github.com/fastai/courses/tree/master/setup">这个课程有完整的脚本</a>来创建、开启、连接、关闭AWS实例，很是方便， 大家可以看看。这是一个实战性很强的课程， 推荐一下。</p>\n<h1 id="jupyter-notebook"><a href="#jupyter-notebook" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>jupyter notebook</h1>\n<p>jupyter notebook的作用和好处以及基本的安装我就不多说了， 自行google吧。主要说一下要在AMS上配置jupyter notebook需要注意的事项。</p>\n<ol>\n<li>需要在AMS Instance的安全组里打开8888端口。</li>\n<li>\n<p>由于会在公网上访问，为了安全， 需要给jupyter notebook设置一个密码，方法如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">ubuntu@ip-10-0-0-14:~/nbs$ ipython\nIn <span class="token punctuation">[</span>1<span class="token punctuation">]</span>: from IPython.lib <span class="token function">import</span> <span class="token function">passwd</span>\nIn <span class="token punctuation">[</span>2<span class="token punctuation">]</span>: passwd<span class="token punctuation">(</span><span class="token punctuation">)</span>\nEnter password:\nVerify password:\nOut<span class="token punctuation">[</span>2<span class="token punctuation">]</span>: <span class="token string">\'sha1:XXXXXXXXXXXXXXX\'</span>\nIn <span class="token punctuation">[</span>3<span class="token punctuation">]</span>: <span class="token keyword">exit</span></code></pre>\n      </div>\n<p>将上诉生成的密码copy到~/.jupyter/jupyter<em>notebook</em>config.py（如果没有此文件， 先运行jupyter notebook —generate-config）里:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">vim ~/.jupyter/jupyter_notebook_config.py\nc.NotebookApp.password = u&#39;sha1:XXXXXXXXXXXXXX&#39;\nc.NotebookApp.ip = &#39;*&#39; #如果没有这行，会只监听localhost:8888，外网无法访问</code></pre>\n      </div>\n<p>然后就可以在浏览器里输入<a href="http://%5Bip%5D:8888%E8%AE%BF%E9%97%AEjupyter">http://[ip]:8888访问jupyter</a> notebook，开心地开始写代码吧。</p>\n</li>\n</ol>\n<p>数据存放位置</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">ubuntu@ip-10-0-0-14:~/courses/deeplearning1/nbs$ find ~ -name vgg16.h5\n/home/ubuntu/.keras/models/vgg16.h5</code></pre>\n      </div>\n<h1 id="竞价实例"><a href="#%E7%AB%9E%E4%BB%B7%E5%AE%9E%E4%BE%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>竞价实例</h1>\n<p>竞价实例是一种特殊的实例，能够以超低的价格提供配置一样的实例，和普通实例的差别在于不可停止，因此当你想跑比较大的网络的时候（训练时间大于1小时），用竞价实例会非常划算。0.9美元每小时的 p2.xlarge 在竞价实例一个月的历史记录里很少超过0.3美元。即使超过了，也不会出高于0.9美元的价格。</p>\n<h1 id="选择哪个区的aws"><a href="#%E9%80%89%E6%8B%A9%E5%93%AA%E4%B8%AA%E5%8C%BA%E7%9A%84aws" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>选择哪个区的AWS</h1>\n<p>这个建议看看自己的网络环境下，连哪个区的速度快。用<a href="http://www.cloudping.info/">CloudPing.info</a>测试一下就可以，貌似国内访问美西要快点，我的网络好的情况下ping值能在200ms，差的时候500ms+。</p>\n<h1 id="推荐几个软件"><a href="#%E6%8E%A8%E8%8D%90%E5%87%A0%E4%B8%AA%E8%BD%AF%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>推荐几个软件</h1>\n<h2 id="tmux"><a href="#tmux" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>tmux</h2>\n<p>可以在一个ssh连接里面同时开启多个窗口，比如一个启动jupyter notebook，一个打开htop，一个执行正常的命令。并且用Ctrl + B d离开tmux后， 下次再进来（哪怕是重新ssh登录），直接用tmux attach可以回到上次的回话，相当方便。</p>\n<h2 id="htop"><a href="#htop" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>htop</h2>\n<p>监控内存、CPU占用等。</p>\n<h2 id="screen"><a href="#screen" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>screen</h2>\n<p>避免离开ssh后jupyter notebook挂掉。</p>\n<h1 id="坑"><a href="#%E5%9D%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>坑</h1>\n<ul>\n<li>\n<p>用fast.ai课程提供的脚本创建Instance的话，再次安装的时候报错</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">An error occurred (InvalidKeyPair.NotFound) when calling the RunInstances operation: The key pair &#39;aws-key-fast-ai&#39; does not exist</code></pre>\n      </div>\n<p>尝试着把~/.ssh/aws-key-fast-ai.pem删除后好了。</p>\n</li>\n</ul>\n<p>要想做深度学习，GPU简直是必须的。举个例子， 我在t2.xlarge上用VGG16跑<a href="https://www.kaggle.com/c/dogs-vs-cats-redux-kernels-edition">kaggle dogs vs cats比赛</a>，要花一个多小时，而用p2.xlarge，只需要600多s，速度提升了10倍啊！上次听AWS技术分享会，他们提到，云服务重新定义了一个公式1 * 1000 === 1000 * 1，是说你用1台服务器跑1000个小时所花的费用，跟1000台服务器跑1小时的费用是一样的，但这样几乎把效率提升了1000倍啊！这在没有云的时代，谁敢想象随随便便调用1000台服务器呢。</p>\n<p>另外国内的阿里云也有针对深度学习的配置，叫<a href="https://www.aliyun.com/product/hpc?spm=5176.8142029.388261.36.6n7Ioo">HPC</a>，后面也会再写篇关于阿里云HPC的配置。</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="http://www.jiqizhixin.com/article/2608">http://www.jiqizhixin.com/article/2608</a></li>\n<li><a href="https://zhuanlan.zhihu.com/p/25066187">https://zhuanlan.zhihu.com/p/25066187</a></li>\n<li><a href="http://www.cnblogs.com/meelo/p/5994505.html">http://www.cnblogs.com/meelo/p/5994505.html</a></li>\n</ul>',
timeToRead:3,excerpt:"深度学习的流行跟计算能力的大大提高密不可分，尤其是GPU的大量使用，Nvidia去年股价涨了500%呢。用CPU要运行一个月的项目， 可能用GPU几个小时就运行完了，效率和速度不可同日耳语。工欲善其事必先利其器，所以正确地配置好GPU是进入深度学习的开端，而用AWS的GPU…",fields:{slug:"/aws-dl-config/"},frontmatter:{title:"AWS深度学习配置",date:"2017-04-15",category:"ML",tags:["rnn","neural network","dl","ml"]}}},{node:{html:'<p>之前翻译了<a href="//magicly.me/2017/03/09/iamtrask-anyone-can-code-lstm/">一篇介绍RNN的文章</a>，一直没看到<a href="https://twitter.com/iamtrask">作者</a>写新的介绍LSTM的blog，于是我又找了其他资料学习。本文先介绍一下LSTM，然后用LSTM在金庸、古龙的人名上做了训练，可以生成新的武侠名字，如果有兴趣的，还可以多搜集点人名，用于给小孩儿取名呢，哈哈，justforfun，大家玩得开心…</p>\n<!-- more -->\n<h1 id="rnn回顾"><a href="#rnn%E5%9B%9E%E9%A1%BE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RNN回顾</h1>\n<p>RNN的出现是为了解决状态记忆的问题，解决方法很简单，每一个时间点t的隐藏状态h(t)不再简单地依赖于数据，还依赖于前一个时间节点t-1的隐藏状态h(t-1)。可以看出这是一种递归定义（所以循环神经网络又叫递归神经网络Recursive Neural Network），h(t-1)又依赖于h(t-2)，h(t-2)依赖于h(t-3)…所以h(t)依赖于之前每一个时间点的输入，也就是说h(t)记住了之前所有的输入。\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/RNN-rolled.png" alt="rnn">\n上图如果按时间展开，就可以看出RNN其实也就是普通神经网络在时间上的堆叠。\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/RNN-unrolled.png" alt="rnn-unrolled"></p>\n<h1 id="rnn问题：long-term-dependencies"><a href="#rnn%E9%97%AE%E9%A2%98%EF%BC%9Along-term-dependencies" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RNN问题：Long-Term Dependencies</h1>\n<p>一切似乎很完美，但是如果h(t)依赖于h(t - 1000)，依赖路径特别长，会导致计算梯度的时候出现梯度消失的问题，训练时间很长根本没法实际使用。下面是一个依赖路径很长的例子：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">我老家【成都】的。。。【此处省去500字】。。。我们那里经常吃【火锅】。。。</code></pre>\n      </div>\n<h1 id="lstm"><a href="#lstm" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LSTM</h1>\n<p>Long Short Term Memory神经网络，也就是LSTM，由<a href="http://deeplearning.cs.cmu.edu/pdfs/Hochreiter97_lstm.pdf"> Hochreiter &#x26; Schmidhuber于1997年发表</a>。它的出现就是为了解决Long-Term Dependencies的问题，很来出现了很多改进版本，目前应用在相当多的领域（包括机器翻译、对话机器人、语音识别、Image Caption等）。</p>\n<p>标准的RNN里，重复的模块里只是一个很简单的结构，如下图：\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-SimpleRNN.png" alt="rnn structure"></p>\n<p>LSTM也是类似的链表结构，不过它的内部构造要复杂得多：\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-chain.png" alt="lstm structure">\n上图中的图标含义如下：\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM2-notation.png" alt="lstm components"></p>\n<p>LSTM的核心思想是cell state（类似于hidden state，有LSTM变种把cell state和hidden state合并了， 比如GRU）和三种门：输入门、忘记门、输出门。</p>\n<p>cell state每次作为输入传递到下一个时间点，经过一些线性变化后继续传往再下一个时间点（我还没看过<a href="http://deeplearning.cs.cmu.edu/pdfs/Hochreiter97_lstm.pdf">原始论文</a>，不知道为啥有了hidden state后还要cell state，好在确实有改良版将两者合并了，所以暂时不去深究了）。\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-C-line.png" alt="cell state"></p>\n<p>门的概念来自于电路设计（我没学过，就不敢卖弄了）。LSTM里，门控制通过门之后信息能留下多少。如下图，sigmoid层输出[0, 1]的值，决定多少数据可以穿过门， 0表示谁都过不了，1表示全部通过。\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-gate.png" alt="gate"></p>\n<p>下面我们来看看每个“门”到底在干什么。</p>\n<p>首先我们要决定之前的cell state需要保留多少。 它根据h(t-1)和x(t)计算出一个[0, 1]的数，决定cell state保留多少，0表示全部丢弃，1表示全部保留。为什么要丢弃呢，不是保留得越多越好么？假设LSTM在生成文章，里面有小明和小红，小明在看电视，小红在厨房做饭。如果当前的主语是小明， ok，那LSTM应该输出看电视相关的，比如找遥控器啊， 换台啊，如果主语已经切换到小红了， 那么接下来最好暂时把电视机忘掉，而输出洗菜、酱油、电饭煲等。\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-focus-f.png" alt="forget gate"></p>\n<p>第二步就是决定输入多大程度上影响cell state。这个地方由两部分构成， 一个用sigmoid函数计算出有多少数据留下，一个用tanh函数计算出一个候选C(t)。 这个地方就好比是主语从小明切换到小红了， 电视机就应该切换到厨房。\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-focus-i.png" alt="input gate"></p>\n<p>然后我们把留下来的（t-1时刻的）cell state和新增加的合并起来，就得到了t时刻的cell state。\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-focus-C.png" alt="combine to cell state"></p>\n<p>最后我们把cell state经过tanh压缩到[-1, 1]，然后输送给输出门（[0, 1]决定输出多少东西）。\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-focus-o.png" alt="output"></p>\n<p>现在也出了很多LSTM的变种， 有兴趣的可以看<a href="//colah.github.io/posts/2015-08-Understanding-LSTMs/">这里</a>。另外，LSTM只是为了解决RNN的long-term dependencies，也有人从另外的角度来解决的，比如<a href="http://arxiv.org/pdf/1402.3511v1.pdf">Clockwork RNNs by Koutnik, et al. (2014).</a></p>\n<h1 id="show-me-the-code"><a href="#show-me-the-code" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>show me the code!</h1>\n<p>我用的<a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/">Andrej Karpathy大神</a>的代码， 做了些小改动。这个代码的好处是不依赖于任何深度学习框架，只需要有numpy就可以马上run起来！\n{% gist magicly/df9e5806fbd44ed5ec73dce9444afb30 %}</p>\n<p>然后从网上找了<a href="http://www.oocities.org/sg/ye_feng_dengmi/h/hucai6-02.htm">金庸小说的人名</a>，做了些预处理，每行一个名字，保存到input.txt里，运行代码就可以了。古龙的没有找到比较全的名字， 只有这份<a href="https://tieba.baidu.com/p/1559430344">武功排行榜</a>，只有100多人。</p>\n<p>下面是根据两份名单训练的结果，已经将完全一致的名字（比如段誉）去除了，所以下面的都是LSTM“新创作发明”的名字哈。来， 大家猜猜哪一个结果是金庸的， 哪一个是古龙的呢？</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">{&#39;姜曾铁&#39;, &#39;袁南兰&#39;, &#39;石万奉&#39;, &#39;郭万嗔&#39;, &#39;蔡家&#39;, &#39;程伯芷&#39;, &#39;汪铁志&#39;, &#39;陈衣&#39;, &#39;薛铁&#39;, \n&#39;哈赤蔡师&#39;, &#39;殷飞虹&#39;, &#39;钟小砚&#39;, &#39;凤一刀&#39;, &#39;宝兰&#39;, &#39;齐飞虹&#39;, &#39;无若之&#39;, &#39;王老英&#39;, &#39;钟&#39;, \n&#39;钟百胜&#39;, &#39;师&#39;, &#39;李沅震&#39;, &#39;曹兰&#39;, &#39;赵一刀&#39;, &#39;钟灵四&#39;, &#39;宗家妹&#39;, &#39;崔树胜&#39;, &#39;桑飞西&#39;, \n&#39;上官公希轰&#39;, &#39;刘之余人童怀道&#39;, &#39;周云鹤&#39;, &#39;天&#39;, &#39;凤&#39;, &#39;西灵素&#39;, &#39;大智虎师&#39;, &#39;阮徒忠&#39;, \n&#39;王兆能&#39;, &#39;袁铮衣商宝鹤&#39;, &#39;常伯凤&#39;, &#39;苗人大&#39;, &#39;倪不凤&#39;, &#39;蔡铁&#39;, &#39;无伯志&#39;, &#39;凤一弼&#39;, \n&#39;曹鹊&#39;, &#39;黄宾&#39;, &#39;曾铁文&#39;, &#39;姬胡峰&#39;, &#39;李何豹&#39;, &#39;上官铁&#39;, &#39;童灵同&#39;, &#39;古若之&#39;, &#39;慕官景岳&#39;, \n&#39;崔百真&#39;, &#39;陈官&#39;, &#39;陈钟&#39;, &#39;倪调峰&#39;, &#39;妹沅刀&#39;, &#39;徐双英&#39;, &#39;任通督&#39;, &#39;上官铁褚容&#39;, &#39;大剑太&#39;, \n&#39;胡阳&#39;, &#39;生&#39;, &#39;南仁郑&#39;, &#39;南调&#39;, &#39;石双震&#39;, &#39;海铁山&#39;, &#39;殷鹤真&#39;, &#39;司鱼督&#39;, &#39;德小&#39;, \n&#39;若四&#39;, &#39;武通涛&#39;, &#39;田青农&#39;, &#39;常尘英&#39;, &#39;常不志&#39;, &#39;倪不涛&#39;, &#39;欧阳&#39;, &#39;大提督&#39;, &#39;胡玉堂&#39;, \n&#39;陈宝鹤&#39;, &#39;南仁通四蒋赫侯&#39;}</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">{&#39;邀三&#39;, &#39;熊猫开&#39;, &#39;鹰星&#39;, &#39;陆开&#39;, &#39;花&#39;, &#39;薛玉罗平&#39;, &#39;南宫主&#39;, &#39;南宫九&#39;, &#39;孙夫人&#39;,\n&#39;荆董灭&#39;, &#39;铁不愁&#39;, &#39;裴独&#39;, &#39;玮剑&#39;, &#39;人&#39;, &#39;陆小龙王紫无牙&#39;, &#39;连千里&#39;, &#39;仲先生&#39;, \n&#39;俞白&#39;, &#39;方大&#39;, &#39;叶雷一魂&#39;, &#39;独孤上红&#39;, &#39;叶怜花&#39;, &#39;雷大归&#39;, &#39;恕飞&#39;, &#39;白双发&#39;, \n&#39;邀一郎&#39;, &#39;东楼&#39;, &#39;铁中十一点红&#39;, &#39;凤星真&#39;, &#39;无魏柳老凤三&#39;, &#39;萧猫儿&#39;, &#39;东郭先凤&#39;, \n&#39;日孙&#39;, &#39;地先生&#39;, &#39;孟摘星&#39;, &#39;江小小凤&#39;, &#39;花双楼&#39;, &#39;李佩&#39;, &#39;仇珏&#39;, &#39;白坏刹&#39;, &#39;燕悲情&#39;, \n&#39;姬悲雁&#39;, &#39;东郭大&#39;, &#39;谢晓陆凤&#39;, &#39;碧玉伯&#39;, &#39;司实三&#39;, &#39;陆浪&#39;, &#39;赵布雁&#39;, &#39;荆孤蓝&#39;, \n&#39;怜燕南天&#39;, &#39;萧怜静&#39;, &#39;龙布雁&#39;, &#39;东郭鱼&#39;, &#39;司东郭金天&#39;, &#39;薛啸天&#39;, &#39;熊宝玉&#39;, &#39;无莫静&#39;,\n&#39;柳罗李&#39;, &#39;东官小鱼&#39;, &#39;渐飞&#39;, &#39;陆地鱼&#39;, &#39;阿吹王&#39;, &#39;高傲&#39;, &#39;萧十三&#39;, &#39;龙童&#39;, &#39;玉罗赵&#39;, \n&#39;谢郎唐傲&#39;, &#39;铁夜帝&#39;, &#39;江小凤&#39;, &#39;孙玉玉夜&#39;, &#39;仇仲忍&#39;, &#39;萧地孙&#39;, &#39;铁莫棠&#39;, &#39;柴星夫&#39;, \n&#39;展夫人&#39;, &#39;碧玉&#39;, &#39;老无鱼&#39;, &#39;铁铁花&#39;, &#39;独&#39;, &#39;薛月宫九&#39;, &#39;老郭和尚&#39;, &#39;东郭大路陆上龙关飞&#39;, \n&#39;司藏&#39;, &#39;李千&#39;, &#39;孙白人&#39;, &#39;南双平&#39;, &#39;王玮&#39;, &#39;姬原情&#39;, &#39;东郭大路孙玉&#39;, &#39;白玉罗生&#39;, &#39;高儿&#39;, \n&#39;东珏天&#39;, &#39;萧王尚&#39;, &#39;九&#39;, &#39;凤三静&#39;, &#39;和空摘星&#39;, &#39;关吹雪&#39;, &#39;上官官小凤&#39;, &#39;仇上官金飞&#39;, \n&#39;陆上龙啸天&#39;, &#39;司空星魂&#39;, &#39;邀衣人&#39;, &#39;主&#39;, &#39;李寻欢天&#39;, &#39;东情&#39;, &#39;玉夫随&#39;, &#39;赵小凤&#39;, &#39;东郭灭&#39;, &#39;邀祟厚&#39;, &#39;司空星&#39;}</code></pre>\n      </div>\n<p>感兴趣的还可以用古代诗人、词人等的名字来做训练，大家机器好或者有时间的可以多训练下，训练得越多越准确。</p>\n<h1 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h1>\n<p>RNN由于具有记忆功能，在NLP、Speech、Computer Vision等诸多领域都展示了强大的力量。实际上，RNN是<a href="http://binds.cs.umass.edu/papers/1995_Siegelmann_Science.pdf">图灵等价的</a>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">If training vanilla neural nets is optimization over functions, training recurrent nets is optimization over programs.</code></pre>\n      </div>\n<p>LSTM是一种目前相当常用和实用的RNN算法，主要解决了RNN的long-term dependencies问题。另外RNN也一直在产生新的研究，比如Attention机制。有空再介绍咯。。。</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/">http://colah.github.io/posts/2015-08-Understanding-LSTMs/</a></li>\n<li><a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/">http://karpathy.github.io/2015/05/21/rnn-effectiveness/</a></li>\n<li><a href="https://www.zhihu.com/question/29411132">https://www.zhihu.com/question/29411132</a></li>\n<li><a href="https://gist.github.com/karpathy/d4dee566867f8291f086">https://gist.github.com/karpathy/d4dee566867f8291f086</a></li>\n<li><a href="https://deeplearning4j.org/lstm.html">https://deeplearning4j.org/lstm.html</a></li>\n</ul>',timeToRead:3,excerpt:"之前翻译了 一篇介绍RNN的文章 ，一直没看到 作者 写新的介绍LSTM的blog，于是我又找了其他资料学习。本文先介绍一下LSTM，然后用LSTM在金庸、古龙的人名上做了训练，可以生成新的武侠名字，如果有兴趣的，还可以多搜集点人名，用于给小孩儿取名呢，哈哈，justforfun…",fields:{slug:"/rnn-lstm-generate-name/"},frontmatter:{title:"用LSTM生成武侠人名",date:"2017-04-07",category:"ML",tags:["rnn","neural network","dl","ml"]}}},{node:{html:'<p>最近在看Udacity的<a href="https://classroom.udacity.com/courses/ud730/">ud730课程</a>，号称是tensorflow官方宣传片哈哈，因为用到的代码直接在<a href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples/udacity">tensorflow的代码里面</a>。</p>\n<p>课程主要包括四大部分：</p>\n<ul>\n<li>机器学习的基本概念</li>\n<li>深度神经网络</li>\n<li>卷积神经网络</li>\n<li>循环神经网络</li>\n</ul>\n<!-- more -->\n<h1 id="机器学习基本概念"><a href="#%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>机器学习基本概念</h1>\n<ul>\n<li>softmax</li>\n<li>cross-entropy</li>\n<li>overfitting &#x26; regularization</li>\n<li>train / validate / test dataset的用途</li>\n<li>SGD，随机梯度下降算法</li>\n<li>Momentum &#x26; learning rate decay，动量法和学习率调节下降</li>\n<li>Hyper-parameter，超参数空间</li>\n</ul>\n<h1 id="深度神经网络"><a href="#%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>深度神经网络</h1>\n<ul>\n<li>线性模型的局限</li>\n<li>ReLu</li>\n<li>Chain Rule， 链式法则</li>\n<li>Back propagation，反向传播</li>\n<li>Regularization，正则化</li>\n<li>Dropout</li>\n</ul>\n<h1 id="卷积神经网络"><a href="#%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>卷积神经网络</h1>\n<ul>\n<li>Statistical Invariants，统计不变性</li>\n<li>\n<p>Convolutional NN，Convnets，卷积网络</p>\n<ul>\n<li>feature map</li>\n<li>stride</li>\n<li>max pooling</li>\n</ul>\n</li>\n</ul>\n<h1 id="循环神经网络"><a href="#%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>循环神经网络</h1>\n<ul>\n<li>Embeddings</li>\n<li>word2vec</li>\n<li>tSNE</li>\n<li>RNN</li>\n<li>梯度消失/爆炸</li>\n<li>LSTM</li>\n<li>Beam搜索</li>\n</ul>\n<p>课程总共有6个tasks，目前完成了3个， 代码在<a href="https://github.com/magicly/udacity-ud730">github上</a>，后续会继续更新本文和代码， 欢迎有兴趣的关注。</p>\n<p>To be continued…</p>',timeToRead:1,excerpt:"最近在看Udacity的 ud730课程 ，号称是tensorflow官方宣传片哈哈，因为用到的代码直接在 tensorflow的代码里面 。 课程主要包括四大部分： 机器学习的基本概念 深度神经网络 卷积神经网络 循环神经网络 机器学习基本概念 softmax cross…",fields:{slug:"/udacity-ud730-notes/"},frontmatter:{title:"udacity课程ud730深度学习学习笔记",date:"2017-03-31",category:"ML",tags:["ml","udacity","tensorflow","AI","cnn","rnn","lstm","word2vec"]}}},{node:{html:'<h1 id="假设函数空间，hypothesis"><a href="#%E5%81%87%E8%AE%BE%E5%87%BD%E6%95%B0%E7%A9%BA%E9%97%B4%EF%BC%8Chypothesis" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>假设函数空间，Hypothesis</h1>\n<h1 id="目标（损失）函数，objectloss-function"><a href="#%E7%9B%AE%E6%A0%87%EF%BC%88%E6%8D%9F%E5%A4%B1%EF%BC%89%E5%87%BD%E6%95%B0%EF%BC%8Cobjectloss-function" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>目标（损失）函数，Object/Loss Function</h1>\n<h1 id="梯度下降，gradient-descent"><a href="#%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%EF%BC%8Cgradient-descent" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>梯度下降，Gradient Descent</h1>\n<h1 id="随机梯度下降，stochastic-gradient-descent"><a href="#%E9%9A%8F%E6%9C%BA%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%EF%BC%8Cstochastic-gradient-descent" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>随机梯度下降，Stochastic Gradient Descent</h1>',timeToRead:1,excerpt:"假设函数空间，Hypothesis 目标（损失）函数，Object/Loss Function 梯度下降，Gradient Descent 随机梯度下降，Stochastic Gradient Descent",fields:{slug:"/linear-regression/"},frontmatter:{title:"linear-regression",date:"2017-03-10",category:"ML",tags:["linear regression","ml"]}}},{node:{html:'<p>本文翻译自<a href="https://twitter.com/iamtrask">@iamtrask</a>的<a href="http://iamtrask.github.io/2015/11/15/anyone-can-code-lstm/">Anyone Can Learn To Code an LSTM-RNN in Python (Part 1: RNN)</a>。本文作者已通过<a href="https://twitter.com/magicly007/with_replies">twitter联系作者，获得授权</a>。</p>\n<h1 id="概要"><a href="#%E6%A6%82%E8%A6%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>概要</h1>\n<p>我通过玩具代码一边学习一边调试能达到最好的学习效果。本文通过一个简单的python实现，教会你循环神经网络。</p>\n<p>原文作者<a href="https://twitter.com/iamtrask">@iamtrask</a>说他会在twitter上继续发布第二部分LSTM，敬请关注。</p>\n<!-- more -->\n<h1 id="废话少说，-给我看看代码"><a href="#%E5%BA%9F%E8%AF%9D%E5%B0%91%E8%AF%B4%EF%BC%8C-%E7%BB%99%E6%88%91%E7%9C%8B%E7%9C%8B%E4%BB%A3%E7%A0%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>废话少说， 给我看看代码</h1>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">import</span> copy<span class="token punctuation">,</span> numpy <span class="token keyword">as</span> np\nnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#固定随机数生成器的种子，便于得到固定的输出，【译者注：完全是为了方便调试用的]</span>\n\n<span class="token comment"># compute sigmoid nonlinearity</span>\n<span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#激活函数</span>\n    output <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> output\n\n<span class="token comment"># convert output of sigmoid function to its derivative</span>\n<span class="token keyword">def</span> <span class="token function">sigmoid_output_to_derivative</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#激活函数的导数</span>\n    <span class="token keyword">return</span> output<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>output<span class="token punctuation">)</span>\n\n<span class="token comment"># training dataset generation</span>\nint2binary <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">#整数到其二进制表示的映射</span>\nbinary_dim <span class="token operator">=</span> <span class="token number">8</span> <span class="token comment">#暂时制作256以内的加法， 可以调大</span>\n\n<span class="token comment">## 以下5行代码计算0-256的二进制表示</span>\nlargest_number <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>binary_dim<span class="token punctuation">)</span>\nbinary <span class="token operator">=</span> np<span class="token punctuation">.</span>unpackbits<span class="token punctuation">(</span>\n    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">range</span><span class="token punctuation">(</span>largest_number<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>largest_number<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    int2binary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> binary<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n\n<span class="token comment"># input variables</span>\nalpha <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token comment">#学习速率</span>\ninput_dim <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">#因为我们是做两个数相加，每次会喂给神经网络两个bit，所以输入的维度是2</span>\nhidden_dim <span class="token operator">=</span> <span class="token number">16</span> <span class="token comment">#隐藏层的神经元节点数，远比理论值要大（译者注：理论上而言，应该一个节点就可以记住有无进位了，但我试了发现4的时候都没法收敛），你可以自己调整这个数，看看调大了是容易更快地收敛还是更慢</span>\noutput_dim <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">#我们的输出是一个数，所以维度为1</span>\n\n\n<span class="token comment"># initialize neural network weights</span>\nsynapse_0 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span>input_dim<span class="token punctuation">,</span>hidden_dim<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">#输入层到隐藏层的转化矩阵，维度为2*16， 2是输入维度，16是隐藏层维度</span>\nsynapse_1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span>hidden_dim<span class="token punctuation">,</span>output_dim<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>\nsynapse_h <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span>hidden_dim<span class="token punctuation">,</span>hidden_dim<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>\n<span class="token comment"># 译者注：np.random.random产生的是[0,1)的随机数，2 * [0, 1) - 1 => [-1, 1)，</span>\n<span class="token comment"># 是为了有正有负更快地收敛，这涉及到如何初始化参数的问题，通常来说都是靠“经验”或者说“启发式规则”，说得直白一点就是“蒙的”！机器学习里面，超参数的选择，大部分都是这种情况，哈哈。。。</span>\n<span class="token comment"># 我自己试了一下用【0, 2)之间的随机数，貌似不能收敛，用[0,1)就可以，呵呵。。。</span>\n\n<span class="token comment"># 以下三个分别对应三个矩阵的变化</span>\nsynapse_0_update <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>synapse_0<span class="token punctuation">)</span>\nsynapse_1_update <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>synapse_1<span class="token punctuation">)</span>\nsynapse_h_update <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>synapse_h<span class="token punctuation">)</span>\n\n<span class="token comment"># training logic</span>\n<span class="token comment"># 学习10000个例子</span>\n<span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    \n    <span class="token comment"># 下面6行代码，随机产生两个0-128的数字，并查出他们的二进制表示。为了避免相加之和超过256，这里选择两个0-128的数字</span>\n    <span class="token comment"># generate a simple addition problem (a + b = c)</span>\n    a_int <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>largest_number<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># int version</span>\n    a <span class="token operator">=</span> int2binary<span class="token punctuation">[</span>a_int<span class="token punctuation">]</span> <span class="token comment"># binary encoding</span>\n\n    b_int <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>largest_number<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># int version</span>\n    b <span class="token operator">=</span> int2binary<span class="token punctuation">[</span>b_int<span class="token punctuation">]</span> <span class="token comment"># binary encoding</span>\n\n    <span class="token comment"># true answer</span>\n    c_int <span class="token operator">=</span> a_int <span class="token operator">+</span> b_int\n    c <span class="token operator">=</span> int2binary<span class="token punctuation">[</span>c_int<span class="token punctuation">]</span>\n    \n    <span class="token comment"># where we\'ll store our best guess (binary encoded)</span>\n    <span class="token comment"># 存储神经网络的预测值</span>\n    d <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>c<span class="token punctuation">)</span>\n\n    overallError <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">#每次把总误差清零</span>\n    \n    layer_2_deltas <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#存储每个时间点输出层的误差</span>\n    layer_1_values <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#存储每个时间点隐藏层的值</span>\n    layer_1_values<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>hidden_dim<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#一开始没有隐藏层，所以里面都是0</span>\n    \n    <span class="token comment"># moving along the positions in the binary encoding</span>\n    <span class="token keyword">for</span> position <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>binary_dim<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#循环遍历每一个二进制位</span>\n        \n        <span class="token comment"># generate input and output</span>\n        X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>binary_dim <span class="token operator">-</span> position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>binary_dim <span class="token operator">-</span> position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#从右到左，每次去两个输入数字的一个bit位</span>\n        y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>c<span class="token punctuation">[</span>binary_dim <span class="token operator">-</span> position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token comment">#正确答案</span>\n\n        <span class="token comment"># hidden layer (input ~+ prev_hidden)</span>\n        layer_1 <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>synapse_0<span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>layer_1_values<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>synapse_h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#（输入层 + 之前的隐藏层） -> 新的隐藏层，这是体现循环神经网络的最核心的地方！！！</span>\n\n        <span class="token comment"># output layer (new binary representation)</span>\n        layer_2 <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>layer_1<span class="token punctuation">,</span>synapse_1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#隐藏层 * 隐藏层到输出层的转化矩阵synapse_1 -> 输出层</span>\n\n        <span class="token comment"># did we miss?... if so, by how much?</span>\n        layer_2_error <span class="token operator">=</span> y <span class="token operator">-</span> layer_2 <span class="token comment">#预测误差是多少</span>\n        layer_2_deltas<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>layer_2_error<span class="token punctuation">)</span><span class="token operator">*</span>sigmoid_output_to_derivative<span class="token punctuation">(</span>layer_2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#我们把每一个时间点的误差导数都记录下来</span>\n        overallError <span class="token operator">+=</span> np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>layer_2_error<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#总误差</span>\n    \n        <span class="token comment"># decode estimate so we can print it out</span>\n        d<span class="token punctuation">[</span>binary_dim <span class="token operator">-</span> position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">round</span><span class="token punctuation">(</span>layer_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#记录下每一个预测bit位</span>\n        \n        <span class="token comment"># store hidden layer so we can use it in the next timestep</span>\n        layer_1_values<span class="token punctuation">.</span>append<span class="token punctuation">(</span>copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>layer_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#记录下隐藏层的值，在下一个时间点用</span>\n    \n    future_layer_1_delta <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>hidden_dim<span class="token punctuation">)</span>\n    \n    <span class="token comment">#前面代码我们完成了所有时间点的正向传播以及计算最后一层的误差，现在我们要做的是反向传播，从最后一个时间点到第一个时间点</span>\n    <span class="token keyword">for</span> position <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>binary_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        \n        X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#最后一次的两个输入</span>\n        layer_1 <span class="token operator">=</span> layer_1_values<span class="token punctuation">[</span><span class="token operator">-</span>position<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#当前时间点的隐藏层</span>\n        prev_layer_1 <span class="token operator">=</span> layer_1_values<span class="token punctuation">[</span><span class="token operator">-</span>position<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">#前一个时间点的隐藏层</span>\n        \n        <span class="token comment"># error at output layer</span>\n        layer_2_delta <span class="token operator">=</span> layer_2_deltas<span class="token punctuation">[</span><span class="token operator">-</span>position<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#当前时间点输出层导数</span>\n        <span class="token comment"># error at hidden layer</span>\n        <span class="token comment"># 通过后一个时间点（因为是反向传播）的隐藏层误差和当前时间点的输出层误差，计算当前时间点的隐藏层误差</span>\n        layer_1_delta <span class="token operator">=</span> <span class="token punctuation">(</span>future_layer_1_delta<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>synapse_h<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">+</span> layer_2_delta<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>synapse_1<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> sigmoid_output_to_derivative<span class="token punctuation">(</span>layer_1<span class="token punctuation">)</span>\n\n        <span class="token comment"># let\'s update all our weights so we can try again</span>\n        <span class="token comment"># 我们已经完成了当前时间点的反向传播误差计算， 可以构建更新矩阵了。但是我们并不会现在就更新权重矩阵，因为我们还要用他们计算前一个时间点的更新矩阵呢。</span>\n        <span class="token comment"># 所以要等到我们完成了所有反向传播误差计算， 才会真正的去更新权重矩阵，我们暂时把更新矩阵存起来。</span>\n        <span class="token comment"># 可以看这里了解更多关于反向传播的知识http://iamtrask.github.io/2015/07/12/basic-python-network/</span>\n        synapse_1_update <span class="token operator">+=</span> np<span class="token punctuation">.</span>atleast_2d<span class="token punctuation">(</span>layer_1<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>layer_2_delta<span class="token punctuation">)</span>\n        synapse_h_update <span class="token operator">+=</span> np<span class="token punctuation">.</span>atleast_2d<span class="token punctuation">(</span>prev_layer_1<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>layer_1_delta<span class="token punctuation">)</span>\n        synapse_0_update <span class="token operator">+=</span> X<span class="token punctuation">.</span>T<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>layer_1_delta<span class="token punctuation">)</span>\n        \n        future_layer_1_delta <span class="token operator">=</span> layer_1_delta\n    \n\n    <span class="token comment"># 我们已经完成了所有的反向传播，可以更新几个转换矩阵了。并把更新矩阵变量清零</span>\n    synapse_0 <span class="token operator">+=</span> synapse_0_update <span class="token operator">*</span> alpha\n    synapse_1 <span class="token operator">+=</span> synapse_1_update <span class="token operator">*</span> alpha\n    synapse_h <span class="token operator">+=</span> synapse_h_update <span class="token operator">*</span> alpha\n\n    synapse_0_update <span class="token operator">*=</span> <span class="token number">0</span>\n    synapse_1_update <span class="token operator">*=</span> <span class="token number">0</span>\n    synapse_h_update <span class="token operator">*=</span> <span class="token number">0</span>\n    \n    <span class="token comment"># print out progress</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">1000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error:"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>overallError<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Pred:"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"True:"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        out <span class="token operator">=</span> <span class="token number">0</span>\n        <span class="token keyword">for</span> index<span class="token punctuation">,</span>x <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            out <span class="token operator">+=</span> x<span class="token operator">*</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a_int<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" + "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b_int<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h1 id="运行时输出"><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E8%BE%93%E5%87%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>运行时输出</h1>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">Error:[ 3.45638663]\nPred:[0 0 0 0 0 0 0 1]\nTrue:[0 1 0 0 0 1 0 1]\n9 + 60 = 1\n------------\nError:[ 3.63389116]\nPred:[1 1 1 1 1 1 1 1]\nTrue:[0 0 1 1 1 1 1 1]\n28 + 35 = 255\n------------\nError:[ 3.91366595]\nPred:[0 1 0 0 1 0 0 0]\nTrue:[1 0 1 0 0 0 0 0]\n116 + 44 = 72\n------------\nError:[ 3.72191702]\nPred:[1 1 0 1 1 1 1 1]\nTrue:[0 1 0 0 1 1 0 1]\n4 + 73 = 223\n------------\nError:[ 3.5852713]\nPred:[0 0 0 0 1 0 0 0]\nTrue:[0 1 0 1 0 0 1 0]\n71 + 11 = 8\n------------\nError:[ 2.53352328]\nPred:[1 0 1 0 0 0 1 0]\nTrue:[1 1 0 0 0 0 1 0]\n81 + 113 = 162\n------------\nError:[ 0.57691441]\nPred:[0 1 0 1 0 0 0 1]\nTrue:[0 1 0 1 0 0 0 1]\n81 + 0 = 81\n------------\nError:[ 1.42589952]\nPred:[1 0 0 0 0 0 0 1]\nTrue:[1 0 0 0 0 0 0 1]\n4 + 125 = 129\n------------\nError:[ 0.47477457]\nPred:[0 0 1 1 1 0 0 0]\nTrue:[0 0 1 1 1 0 0 0]\n39 + 17 = 56\n------------\nError:[ 0.21595037]\nPred:[0 0 0 0 1 1 1 0]\nTrue:[0 0 0 0 1 1 1 0]\n11 + 3 = 14\n------------</code></pre>\n      </div>\n<h1 id="第一部分：什么是神经元记忆"><a href="#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E5%85%83%E8%AE%B0%E5%BF%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>第一部分：什么是神经元记忆</h1>\n<p>顺着背出字母表，你很容易做到吧？</p>\n<p>倒着背呢， 有点难哦。</p>\n<p>试着想一首你记得的歌词。为什么顺着回忆比倒着回忆难？你能直接跳到第二小节的中间么？额， 好像有点难。 这是为什么呢？</p>\n<p>这其实很符合逻辑。 你记忆字母表或者歌词并不是像计算机把信息存储在硬盘上那样的（译者注：计算机可以随机访问磁盘。）。你是顺序记忆的。知道了前一个字母，你很容易知道下一个。这是一种条件记忆，只有你最近知道了前一个记忆，你才容易想起来下一个记忆，就想你熟悉的链表一样。</p>\n<p>但是，并不是说你不唱歌的时候，歌就不在你脑子里了。而是说你如果想直接跳到中间那部分，你会发现很难直接找到其在脑中的呈现（也许是一堆神经元）。你想直接搜索到一首歌的中间部分，这是很难的， 因为你以前没有这样做过，所以没有索引可以指向歌曲的中间部分。 就好比你邻居家有很多小路， 你从前门进去顺着路走很容易找到后院，但是让你直接到后院去就不太容易。想了解更过关于大脑的知识，请看<a href="http://www.human-memory.net/processes_recall.html">这里</a>。</p>\n<p>跟链表很像，记忆这样存储很高效。我们可以发现这样存储在解决很多问题时候有优势。</p>\n<p>如果你的数据是一个序列，那么记忆就很重要（意味着你必须记住某些东西）。看下面的视频：</p>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 75%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem"\n          >\n            <iframe src="https://www.youtube.com/embed/UL0ZOgN2SqY" frameborder="0" allowfullscreen style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>\n<p>每一个数据点就是视频中的一帧。如果你想训练一个神经网络来预测下一帧小球的位置， 那么知道上一帧小球的位置就很重要。这样的序列数据就是我们需要构建循环神经网络的原因。那么， 神经网络怎么记住以前的信息呢？</p>\n<p>神经网络有隐藏层。一般而言，隐藏层的状态由输入决定。所以，一般而言神经网络的信息流如下图：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">input -&gt; hidden -&gt; output</code></pre>\n      </div>\n<p>这很简单直接。特定的输入决定特定的隐藏层，特定的隐藏层又决定了输出。这是一种封闭系统。记忆改变了这种状况。记忆意味着，隐藏状态是由当前时间点的输入和上一个时间点的隐藏状态决定的。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">(input + prev_hidden) -&gt; hidden -&gt; output</code></pre>\n      </div>\n<p>为什么是隐藏层而不是输入层呢？我们也可以这样做呀：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">(input + prev_input) -&gt; hidden -&gt; output</code></pre>\n      </div>\n<p>现在，仔细想想，如果有四个时间点，如果我们采用隐藏层循环是如下图：\n<img src="http://oml1i2pi6.bkt.clouddn.com/hidden-recurrence.jpg" alt="hidden layer recurrence">\n如果采用输入层循环会是：\n<img src="http://oml1i2pi6.bkt.clouddn.com/input-recurrence.jpg" alt="input layer recurrence">\n看到区别没，隐藏层记忆了之前所有的输入信息，而输入层循环则只能利用到上一个输入。举个例子，假设一首歌词里面有”…I love you…”和”…I love carrots…”，如果采用输入层循环，则没法根据”I love”来预测下一个词是什么？因为当前输入是love，前一个输入是I，这两种情况一致，所以没法区分。 而隐藏层循环则可以记住更久之前的输入信息，因而能更好地预测下一个词。理论上而言，隐藏层循环可以记住所有之前的输入，当然记忆会随着时间流逝逐渐忘却。有兴趣的可以看<a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/">这篇blog</a>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">            停下来好好想想， 直到你感觉想明白了再继续。</code></pre>\n      </div>\n<h1 id="第二部分：rnn---神经网络记忆"><a href="#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%EF%BC%9Arnn---%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%B0%E5%BF%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>第二部分：RNN - 神经网络记忆</h1>\n<p>现在我们已经有了一些直观认识， 接下来让我们更进一步分析。正如在<a href="http://iamtrask.github.io/2015/07/12/basic-python-network/">反向传播这篇blog</a>里介绍的，神经网络的输入层是由输入数据集决定的。每一行输入数据用来产生隐藏层（通过正向传播）。每个隐藏层又用于产生输出层（假设只有一层隐藏层）。如我们之前所说，记忆意味着隐藏层是由输入数据和前一次的隐藏层组合而成。怎么做的呢？很像神经网络里面其他传播的做法一样， 通过矩阵！这个矩阵定义了当前隐藏层跟前一个隐藏层的关系。</p>\n<p><img src="http://iamtrask.github.io/img/basic_recurrence_singleton.png" alt="rnn">\n这幅图中很重要的一点是有三个权重矩阵。有两个我们很熟悉了。SYNAPSE<em>0用于把输入数据传播到隐藏层。SYNAPSE</em>1把隐藏层传播到输出数据。新矩阵（SYNAPSE<em>h，用于循环）把当前的隐藏层（layer</em>1）传播到下一个时间点的隐藏层（还是layer_1）。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">            停下来好好想想， 直到你感觉想明白了再继续。</code></pre>\n      </div>\n<p><img src="http://iamtrask.github.io/img/recurrence_gif.gif" alt="forward">\n上面的gif图展示了循环神经网络的神奇之处以及一些很重要的性质。它展示了四个时间点隐藏层的情况。第一个时间点，隐藏层仅由输入数据决定。第二个时间点，隐藏层是由输入数据和第一个时间点的隐藏层共同决定的。以此类推。你应该注意到了，第四个时间点的时候，网络已经“满了”。所以大概第五个时间点来的时候，就要选择哪些记忆保留，哪些记忆覆盖。现实如此。这就是记忆“容量”的概念。如你所想，更大的隐藏层，就能记住更长时间的东西。同样，这就需要神经网络学会<strong>忘记不相关的记忆</strong>然后<strong>记住重要的记忆</strong>。第三步有没看出什么重要信息？为什么<strong>绿色</strong>的要比其他颜色的多呢？</p>\n<p>另外要注意的是隐藏层夹在输入层和输出层中间，所以输出已经不仅仅取决于输入了。输入仅仅改变记忆，而输出仅仅依赖于记忆。有趣的是，如果2，3，4时间节点没有输入数据的话，隐藏层同样会随着时间流逝而变化。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">        停下来好好想想，确保你明白了刚讲的内容。</code></pre>\n      </div>\n<h1 id="第三部分：基于时间的反向传播"><a href="#%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%EF%BC%9A%E5%9F%BA%E4%BA%8E%E6%97%B6%E9%97%B4%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>第三部分：基于时间的反向传播</h1>\n<p>那么循环神经网络是怎么学习的呢？看看下面的图。黑色表示预测结果，明黄色表示错误，褐黄色表示导数。\n<img src="http://iamtrask.github.io/img/backprop_through_time.gif" alt="bp">\n网络通过从1到4的全部前向传播（可以是任意长度的整个序列），然后再从4到1的反向传播导数来学习。你可以把它看成一个有点变形的普通神经网络，除了我们在不同的地方共享权值（synapses 0,1,and h）。除了这点， 它就是一个普通的神经网络。</p>\n<h1 id="我们的玩具代码"><a href="#%E6%88%91%E4%BB%AC%E7%9A%84%E7%8E%A9%E5%85%B7%E4%BB%A3%E7%A0%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我们的玩具代码</h1>\n<p>来，我们用循环神经网络做个模型来实现<strong>二进制加法</strong>。看到下面的图没，你猜猜顶上的彩色的1表示什么意思呢？\n<img src="http://iamtrask.github.io/img/binary_addition.GIF" alt="toy code">\n方框里的彩色的1表示<strong>进位</strong>。我们就要用循环神经网络来记住这个进位。求和的时候需要记住<strong>进位</strong>（如果不懂，可以看<a href="https://www.youtube.com/watch?v=jB_sRh5yoZk">这里</a>）。</p>\n<p>二进制加法做法就是，从右往左，根据上面两行的bit来预测第三行的bit为1还是0。我们想要神经网络遍历整个二进制序列记住是否有进位，以便能计算出正确的结果。不要太纠结这个问题本身，神经网络也不在乎这个问题。它在乎的只是每个时刻它会收到两个输入（0或者1），然后它会传递给用于记忆是否有进位的隐藏层。神经网络会把所有这些信息（输入和隐藏层的记忆）考虑进去，来对每一位（每个时间点）做出正确的预测。</p>\n<hr>\n<p>下面原文里面是针对每行代码做的注释， 为了方便阅读， 我直接把注释写到了代码里面， 便于大家阅读。</p>\n<p>译者注：RNN在自然语言处理里面大量使用，包括机器翻译，对话系统，机器做诗词等，本文只是简单介绍了一下原理。后续我会写一些应用方面的文章，敬请期待。</p>',
timeToRead:6,excerpt:"本文翻译自 @iamtrask 的 Anyone Can Learn To Code an LSTM-RNN in Python (Part 1: RNN) 。本文作者已通过 twitter…",fields:{slug:"/iamtrask-anyone-can-code-lstm/"},frontmatter:{title:"所有人都能学会用Python写出RNN-LSTM代码",date:"2017-03-09",category:"ML",tags:["rnn","neural network","dl","ml"]}}},{node:{html:'<p>最近需要做一些自然语言处理的工作， 发现google推出的wrod2vec比较有意思，据说可以推算出king + man - woman = queue，感觉很nb啊， 后续可以拿来做文本分类、情绪分析、关键词提取等。本文记录一下在中文wiki语料库上做的实验。</p>\n<!-- more -->\n<h1 id="word2vec下载安装"><a href="#word2vec%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>word2vec下载安装</h1>\n<p>自从google推出了<a href="https://code.google.com/archive/p/word2vec/">word2vec</a>后，网上已经有众多实现，包括：</p>\n<ul>\n<li><a href="https://code.google.com/archive/p/word2vec/">google发布的c++版本</a></li>\n<li>python版<a href="https://radimrehurek.com/gensim/models/word2vec.html">Gensim</a></li>\n<li>java版<a href="https://deeplearning4j.org/word2vec">DeepLearning4J</a></li>\n<li><a href="https://github.com/danielfrg/word2vec">Python interface to Google word2vec</a>。</li>\n</ul>\n<p>我选用Gensim版本，python3.5.2。</p>\n<h1 id="数据集简介"><a href="#%E6%95%B0%E6%8D%AE%E9%9B%86%E7%AE%80%E4%BB%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>数据集简介</h1>\n<p>我们用的是中文wiki语料库，下载链接<a href="https://dumps.wikimedia.org/zhwiki/latest/zhwiki-latest-pages-articles.xml.bz2%EF%BC%8C%E6%9C%891.3G%EF%BC%8C">https://dumps.wikimedia.org/zhwiki/latest/zhwiki-latest-pages-articles.xml.bz2，有1.3G，</a> 解压之后是一个5.7G左右的xml文档。里面包含了标题、分类、正文部分等。</p>\n<h1 id="数据预处理"><a href="#%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>数据预处理</h1>\n<p>上一步解压之后的xml文档我们没法直接用， 需要经过一系列的处理， 包括xml标签去除， 编码转换、简繁体转换、分词等。</p>\n<h2 id="xml内容提取"><a href="#xml%E5%86%85%E5%AE%B9%E6%8F%90%E5%8F%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>xml内容提取</h2>\n<p>你可以自己写正则表达式提取内容， 当然这个太费事了。 好在已经有人做了这个事情， Gensim里自带了提取wiki内容的工具，代码如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">from</span> gensim<span class="token punctuation">.</span>corpora <span class="token keyword">import</span> WikiCorpus\n\nspace <span class="token operator">=</span> b<span class="token string">" "</span>\ni <span class="token operator">=</span> <span class="token number">0</span>\noutput <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">\'wiki-zh-article.txt\'</span><span class="token punctuation">,</span> <span class="token string">\'wb\'</span><span class="token punctuation">)</span>\nwiki <span class="token operator">=</span> WikiCorpus<span class="token punctuation">(</span><span class="token string">\'zhwiki-latest-pages-articles.xml.bz2\'</span><span class="token punctuation">,</span> lemmatize <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> dictionary <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">for</span> text <span class="token keyword">in</span> wiki<span class="token punctuation">.</span>get_texts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    output<span class="token punctuation">.</span>write<span class="token punctuation">(</span>space<span class="token punctuation">.</span>join<span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token string">"\\n"</span><span class="token punctuation">)</span>\n    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Saved "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" articles"</span><span class="token punctuation">)</span>\n\noutput<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Finished Saved "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" articles"</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>代码在我的macpro上大概了运行了20多分钟， 得到280819行的文本， 每行为一篇文章。有个坑大家要小心， 输入文件是压缩文件bz2，直接传解压缩之后的xml文件是会报错的。</p>\n<p>另外， 我为了简洁，把不相关代码删除了，因此贴出来的代码，并不符合编程的最佳实践，请自行忽略这个问题。</p>\n<h2 id="简繁体换过"><a href="#%E7%AE%80%E7%B9%81%E4%BD%93%E6%8D%A2%E8%BF%87" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>简繁体换过</h2>\n<p>由于wiki语料库里简体、繁体都有，不统一的话对后面分词和跑模型准确率有影响， 所以先统一转化为简体。用到的工具是<a href="https://github.com/BYVoid/OpenCC">opencc</a>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">opencc -i wiki-zh-article.txt -o wiki-zh-article-zhs.txt -c t2s.json</code></pre>\n      </div>\n<p>话说作者BYVoid也是超级大神， 据说小时候玩电脑，出现乱码， 于是自己写了opencc，然后提交给Linus， 被整合到linux kernel里了，那时候应该是小学还是初中吧。后来本科毕业去阿里面试，得到青睐，晚上流传了当时的面试记录。<img src="http://s12.sinaimg.cn/orignal/001OxbOzzy6EHEbsLWP8b" alt="http://s12.sinaimg.cn/orignal/001OxbOzzy6EHEbsLWP8b"></p>\n<h2 id="编码转化"><a href="#%E7%BC%96%E7%A0%81%E8%BD%AC%E5%8C%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>编码转化</h2>\n<p>网上说文件中包含非utf-8字符，需要用iconv处理一下。我忘了我之前在全量数据上跑得时候有没有遇到， 反正写文章的时候，我拿了1/10的数据跑没遇到问题。如果遇到了可以用<a href="https://zh.wikipedia.org/wiki/Iconv">iconv</a>一行命令解决：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">iconv -c -t utf-8 &lt; wiki-zh-article-zhs.txt &gt; wiki-zh-article-zhs-utf8.txt</code></pre>\n      </div>\n<h2 id="分词"><a href="#%E5%88%86%E8%AF%8D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>分词</h2>\n<p>接下来就是做分词，比较好用的工具有<a href="https://github.com/fxsjy/jieba">结巴分词</a>、<a href="http://ictclas.nlpir.org/">中科院的ICTCLAS</a>、<a href="http://thulac.thunlp.org/">清华的THULAC</a>、<a href="https://github.com/FudanNLP/fnlp">复旦的FudanNLP</a>等。我选用了结巴，代码如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">import</span> codecs\n<span class="token keyword">import</span> jieba\n\ninfile <span class="token operator">=</span> <span class="token string">\'wiki-zh-article-zhs.txt\'</span>\noutfile <span class="token operator">=</span> <span class="token string">\'wiki-zh-words.txt\'</span>\n\ndescsFile <span class="token operator">=</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>infile<span class="token punctuation">,</span> <span class="token string">\'rb\'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">\'utf-8\'</span><span class="token punctuation">)</span>\ni <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>outfile<span class="token punctuation">,</span> <span class="token string">\'w\'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">\'utf-8\'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>\n    <span class="token keyword">for</span> line <span class="token keyword">in</span> descsFile<span class="token punctuation">:</span>\n        i <span class="token operator">+=</span> <span class="token number">1</span>\n        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n        line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>\n        words <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>line<span class="token punctuation">)</span>\n        <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>\n            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>word <span class="token operator">+</span> <span class="token string">\' \'</span><span class="token punctuation">)</span>\n        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">\'\\n\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>又跑几十分钟， 喝杯茶去。。。</p>\n<h1 id="gensim跑模型训练"><a href="#gensim%E8%B7%91%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Gensim跑模型训练</h1>\n<p>终于可以跑模型了，这次时间会更长，看你的电脑配置了，强烈建议约个妹纸出去看看电影逛逛街再回来等。据同事说，gensim有一个坑，在windows下不能用多核？！！！于是我在我的8核macpro下跑一个多小时的，他在windows下要跑七八个小时，哈哈哈哈。。。</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing\n\n<span class="token keyword">from</span> gensim<span class="token punctuation">.</span>models <span class="token keyword">import</span> Word2Vec\n<span class="token keyword">from</span> gensim<span class="token punctuation">.</span>models<span class="token punctuation">.</span>word2vec <span class="token keyword">import</span> LineSentence\n\ninp <span class="token operator">=</span> <span class="token string">\'wiki-zh-words.txt\'</span>\noutp1 <span class="token operator">=</span> <span class="token string">\'wiki-zh-model\'</span>\noutp2 <span class="token operator">=</span> <span class="token string">\'wiki-zh-vector\'</span>\n\nmodel <span class="token operator">=</span> Word2Vec<span class="token punctuation">(</span>LineSentence<span class="token punctuation">(</span>inp<span class="token punctuation">)</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span> window <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> min_count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> workers <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nmodel<span class="token punctuation">.</span>save<span class="token punctuation">(</span>outp1<span class="token punctuation">)</span> <span class="token comment">## 以二进制格式存储</span>\nmodel<span class="token punctuation">.</span>save_word2vec_format<span class="token punctuation">(</span>outp2<span class="token punctuation">,</span> binary <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment">## 以文本格式存储， 一行是一个词的vector</span></code></pre>\n      </div>\n<p>这里用save<em>word2vec</em>format纯粹是为了看看输出的模型是什么样子的， 这样：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">台湾 0.396402 1.611405 -0.291840 -0.951169 -0.109141 1.918246 0.215038 0.674539 2.335748 -0.757200 -0.290877 2.198100 -0.309420 0.438734 -1.731025 -0.233053 0.150694 2.214514 ......</code></pre>\n      </div>\n<p>即每个词一行， 后面是400个数字， 即将每一个词变为一个400维的向量。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">size is the dimensionality of the feature vectors.</code></pre>\n      </div>\n<h1 id="看看效果"><a href="#%E7%9C%8B%E7%9C%8B%E6%95%88%E6%9E%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>看看效果</h1>\n<p>看看跟杜甫相关的词呢：</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">from</span> gensim<span class="token punctuation">.</span>models <span class="token keyword">import</span> Word2Vec\n\nmodel <span class="token operator">=</span> Word2Vec<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">\'./wiki-zh-model\'</span><span class="token punctuation">)</span>\n<span class="token comment"># model = Word2Vec.load_word2vec_format(\'./wiki-zh-vector\', binary = False) # 如果之前用文本保存话， 用这个方法加载</span>\nres <span class="token operator">=</span> model<span class="token punctuation">.</span>most_similar<span class="token punctuation">(</span><span class="token string">\'杜甫\'</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[(&#39;白居易&#39;, 0.8842014074325562), (&#39;苏轼&#39;, 0.8444569706916809), (&#39;陆游&#39;, 0.8307716846466064), (&#39;一诗&#39;, 0.8290032148361206), (&#39;韩愈&#39;, 0.8263246417045593), (&#39;王勃&#39;, 0.8244832754135132), (&#39;陶渊明&#39;, 0.8243700861930847), (&#39;赋诗&#39;, 0.8211008906364441), (&#39;吟咏&#39;, 0.82026606798172), (&#39;辛弃疾&#39;, 0.8185226917266846)]</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">&gt;&gt;&gt; model.most_similar(&#39;语言学&#39;)\n[(&#39;语言学家&#39;, 0.7147563695907593), (&#39;民族学&#39;, 0.6887255907058716), (&#39;历史学&#39;, 0.6869072914123535), (&#39;比较语言学&#39;, 0.6818138360977173), (&#39;语音学&#39;, 0.6741021871566772), (&#39;音韵学&#39;, 0.6673719882965088), (&#39;语言所&#39;, 0.6434118747711182), (&#39;比较文学&#39;, 0.633540153503418), (&#39;人类学&#39;, 0.633027195930481), (&#39;方言学&#39;, 0.6314626336097717)]\n&gt;&gt;&gt; model.most_similar(&#39;林丹&#39;)\n[(&#39;谌龙&#39;, 0.9071081280708313), (&#39;鲍春来&#39;, 0.9035789966583252), (&#39;傅海峰&#39;, 0.8911731243133545), (&#39;蔡赟&#39;, 0.8886306285858154), (&#39;汪鑫&#39;, 0.8803133964538574), (&#39;李宗伟&#39;, 0.8767721652984619), (&#39;谢杏芳&#39;, 0.8706355690956116), (&#39;周蜜&#39;, 0.865954577922821), (&#39;李雪芮&#39;, 0.8658450841903687), (&#39;赵芸蕾&#39;, 0.8650676012039185)]\n&gt;&gt;&gt; model.most_similar(&#39;习近平&#39;)\n[(&#39;胡锦涛&#39;, 0.8577725291252136), (&#39;江泽民&#39;, 0.8138135075569153), (&#39;赵紫阳&#39;, 0.7295876741409302), (&#39;温家宝&#39;, 0.7284029722213745), (&#39;朱镕基&#39;, 0.7241271734237671), (&#39;邓小平&#39;, 0.7226930856704712), (&#39;李克强&#39;, 0.7181681990623474), (&#39;曾庆红&#39;, 0.6949223279953003), (&#39;周永康&#39;, 0.6847086548805237), (&#39;反腐&#39;, 0.681549072265625)]\n&gt;&gt;&gt; model.most_similar(positive=[&#39;中国&#39;, &#39;东京&#39;], negative=[&#39;日本&#39;])\n[(&#39;北京&#39;, 0.35159438848495483), (&#39;中央电视台&#39;, 0.3406861424446106), (&#39;辽艺版&#39;, 0.3394508361816406), (&#39;宗藤&#39;, 0.32839435338974), (&#39;寻奇&#39;, 0.3166041970252991), (&#39;china&#39;, 0.3111165761947632), (&#39;是冈瓦&#39;, 0.3110591471195221), (&#39;北京电视台&#39;, 0.31081947684288025), (&#39;女热&#39;, 0.30060601234436035), (&#39;北京市&#39;, 0.29704713821411133)]\n&gt;&gt;&gt; model.most_similar(&#39;林志玲&#39;)\n[(&#39;伊能静&#39;, 0.7900516986846924), (&#39;柯震东&#39;, 0.787365198135376), (&#39;言承旭&#39;, 0.7779808044433594), (&#39;徐熙媛&#39;, 0.7775079607963562), (&#39;林志颖&#39;, 0.7681171894073486), (&#39;谢依霖&#39;, 0.7657250761985779), (&#39;阮经天&#39;, 0.7654315233230591), (&#39;郭书瑶&#39;, 0.7628788948059082), (&#39;张钧宁&#39;, 0.7612718939781189), (&#39;何润东&#39;, 0.7598745822906494)]</code></pre>\n      </div>\n<p>还有没有觉得这个可以拿来干点有意思的事情呢？比如：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">&gt;&gt;&gt; model.most_similar(&#39;苍井空&#39;)\n[(&#39;吉泽明步&#39;, 0.7175988554954529), (&#39;反町隆史&#39;, 0.6755084991455078), (&#39;金城武&#39;, 0.6724058389663696), (&#39;柴崎幸&#39;, 0.6579034924507141), (&#39;藤原纪香&#39;, 0.656890332698822), (&#39;松隆子&#39;, 0.6524500846862793), (&#39;仓田保昭&#39;, 0.6456934809684753), (&#39;柴咲幸&#39;, 0.6456423997879028), (&#39;叶山豪&#39;, 0.6449219584465027), (&#39;濑户朝香&#39;, 0.6442539095878601)]</code></pre>\n      </div>\n<p>请尽情发挥想象。。。。。。。。。。。。。。。。</p>\n<h1 id="其他"><a href="#%E5%85%B6%E4%BB%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>其他</h1>\n<p>列几个word2vec的用途。</p>\n<ul>\n<li>情感分析 <a href="http://datartisan.com/article/detail/48.html">http://datartisan.com/article/detail/48.html</a></li>\n<li>SEO <a href="https://seofangfa.com/seo-articles/word2vec.html">https://seofangfa.com/seo-articles/word2vec.html</a></li>\n</ul>\n<p>另外，如果想深入了解word2vec的原理， 可以看最初的论文<a href="https://arxiv.org/pdf/1310.4546.pdf">Distributed Representations of Words and Phrases\nand their Compositionality</a>，以及<a href="http://techblog.youdao.com/?p=915">有道的这篇分析</a>。</p>\n<p>如果想自己动手实现word2vec的话， 可以考虑用当前最热的深度学习框架<a href="https://www.tensorflow.org/">TensorFlow</a>来实现， 官网上有<a href="https://www.tensorflow.org/tutorials/word2vec">详细地介绍</a>。</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="http://www.52nlp.cn/%E4%B8%AD%E8%8B%B1%E6%96%87%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91%E8%AF%AD%E6%96%99%E4%B8%8A%E7%9A%84word2vec%E5%AE%9E%E9%AA%8C">http://www.52nlp.cn/%E4%B8%AD%E8%8B%B1%E6%96%87%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91%E8%AF%AD%E6%96%99%E4%B8%8A%E7%9A%84word2vec%E5%AE%9E%E9%AA%8C</a></li>\n<li><a href="https://radimrehurek.com/gensim/models/word2vec.html">https://radimrehurek.com/gensim/models/word2vec.html</a></li>\n<li><a href="https://code.google.com/archive/p/word2vec/">https://code.google.com/archive/p/word2vec/</a></li>\n<li><a href="http://licstar.net/archives/262">http://licstar.net/archives/262</a></li>\n<li><a href="https://github.com/fxsjy/jieba">https://github.com/fxsjy/jieba</a></li>\n<li><a href="http://thulac.thunlp.org/">http://thulac.thunlp.org/</a></li>\n<li><a href="http://arxiv.org/pdf/1310.4546.pdf">http://arxiv.org/pdf/1310.4546.pdf</a></li>\n<li><a href="https://www.tensorflow.org/tutorials/word2vec">https://www.tensorflow.org/tutorials/word2vec</a></li>\n<li><a href="http://techblog.youdao.com/?p=915">http://techblog.youdao.com/?p=915</a></li>\n<li><a href="http://blog.csdn.net/zhaoxinfan/article/details/11069485">http://blog.csdn.net/zhaoxinfan/article/details/11069485</a></li>\n<li><a href="http://cikuapi.com/index.php">http://cikuapi.com/index.php</a></li>\n</ul>',timeToRead:6,excerpt:"最近需要做一些自然语言处理的工作， 发现google推出的wrod2vec比较有意思，据说可以推算出king + man - woman = queue，感觉很nb啊， 后续可以拿来做文本分类、情绪分析、关键词提取等。本文记录一下在中文wiki语料库上做的实验。 word2vec…",fields:{slug:"/word2vec-first-try-md/"},frontmatter:{title:"用word2vec分析中文维基语料库",date:"2017-03-03",category:"ML",tags:["machine learning","nlp","word2vec"]}}},{node:{html:'<p>最近准备写一下机器学习的一些学习笔记， 由于涉及到大量数学公式， 发现不把如何在markdown里写数学公式这个问题解决了会严重影响工作效率。大概而言， 主要有两种方式：</p>\n<!-- more -->\n<ol>\n<li>\n<p>用图片！\n也就是编辑好公式，上传，然后在markdown里面引用图片链接的方式。这种方式方便直接，但是显得比较low一点。 有兴趣的可以参考这几篇文章。</p>\n</li>\n<li>\n<p><a href="http://www.ruanyifeng.com/blog/2011/07/formula_online_generator.html">http://www.ruanyifeng.com/blog/2011/07/formula<em>online</em>generator.html</a>\n当然， 在某些情况下， 必须使用这种思路。 比如， 微信公众号里。 可以参考<a href="http://www.52nlp.cn/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E9%87%8C%E4%BD%BF%E7%94%A8latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F">这里</a></p>\n</li>\n<li>\n<p>用Mathjax插件来写LaTex公式。\n哪怕你是用图片， 那也得写出LaTex公式啊。所以我们今天主要讲第二种方式。推荐<a href="https://webdemo.myscript.com/views/math.html">这个工具</a>，可以直接在浏览器里手写公式，它会帮你转为LaTex！很好很强大。</p>\n</li>\n</ol>\n<h1 id="mathjax插件"><a href="#mathjax%E6%8F%92%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>MathJax插件</h1>\n<p>著名的Stackoverflow网站上的漂亮公式，就是使用了MathJax插件的效果。添加MathJax插件也非常简单，只需要在markdown文件中，添加MathJax CDN，如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span>\n   <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>就可以在md文件中插入Tex格式的公式了。</p>\n<p>行间公式的形式为</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$$ 此处插入公式 $$</code></pre>\n      </div>\n<p>而行内公式的形式为</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">\\\\( 此处插入公式 \\\\)</code></pre>\n      </div>\n<h1 id="hexo中显示数学公式"><a href="#hexo%E4%B8%AD%E6%98%BE%E7%A4%BA%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hexo中显示数学公式</h1>\n<p>Hexo原生不支持数学公式， 因此需要我们做一些修改。安装<a href="https://github.com/akfish/hexo-math">hexo-math</a>插件：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">npm install hexo-math --save</code></pre>\n      </div>\n<p>在_config.yml中增加</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">plugins:\n  hexo-math</code></pre>\n      </div>\n<p>完事大吉， 你现在可以写LaTex公式了， 我们来写几个看看。</p>\n<p>这是行内公式根号2这样写: \\(\\sqrt{2}\\)</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">\\\\(\\\\sqrt{2}\\\\)</code></pre>\n      </div>\n<p>这是单独一行的公式:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$$ a ^ 2 + b ^ 2 = c ^ 2 $$\n$$ \\sqrt{2} $$\n$$ evidence\\_{i}=\\sum \\_{j}W\\_{ij}x\\_{j}+b\\_{i} $$</code></pre>\n      </div>\n<p>$$ a ^ 2 + b ^ 2 = c ^ 2 $$\n$$ \\sqrt{2} $$\n$$ evidence_{i}=\\sum _{j}W_{ij}x_{j}+b_{i} $$\n细心的同学会发现， 里面有很多<strong>\\\\</strong>, <strong>\\_</strong>之类， 原因是<strong>\\</strong>本身在markdown和LaTex里都有含义， 因此需要转义。但是LaTex里面， <strong>\\</strong>太常用了， 所以每次遇到都转义的话就很痛苦， 而且在hexo里面写的公式，复制到其他地方去就不支持了。</p>\n<p>网上有改hexo渲染的源码的， 有换用pandoc的， 其实最简单的方式是用hexo-math里的tag。网上搜索到的很多资料都是用的{% math_block %}，我试了发现总是不对， 后来看<a href="https://github.com/akfish/hexo-math">官网</a>，发现这个方法已经deprecated了， 最新的用{% math %}，如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">这是行内公式：{% math %}\\sqrt{2 + 3}{% endmath %}</code></pre>\n      </div>\n<p>显示为：这是行内公式：{% math %}\\sqrt{2 + 3}{% endmath %}\n一行公式：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$$ evidence\\_{i}=\\sum \\_{j}W\\_{ij}x\\_{j}+b\\_{i} $$\n\n{% math %}\n\\begin{aligned}\nevidence_{i}=\\sum _{j}W_{ij}x_{j}+b_{i}\n\\end{aligned}\n{% endmath %}</code></pre>\n      </div>\n<p>$$ evidence_{i}=\\sum _{j}W_{ij}x_{j}+b_{i} $$\n{% math %}\n\\begin{aligned}\nevidence<em>{i}=\\sum _{j}W</em>{ij}x<em>{j}+b</em>{i}\n\\end{aligned}\n{% endmath %}\n可以看出， 如果有需要转义的字符， 用{% math %}tag这种方式要好很多。</p>\n<p>再来一个复杂点的公式， 这是<a href="https://www.tensorflow.org/tutorials/word2vec">word2vec</a>的损失函数公式（选中公式， 右键可以查看LaTex源码）：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">{% math %}\nJ_\\text{NEG} = \\log Q_\\theta(D=1 |w_t, h) +\n  k \\mathop{\\mathbb{E}}_{\\tilde w \\sim P_\\text{noise}}\n     \\left[ \\log Q_\\theta(D = 0 |\\tilde w, h) \\right]\n{% endmath %}</code></pre>\n      </div>\n<p>{% math %}\nJ<em>\\text{NEG} = \\log Q</em>\\theta(D=1 |w<em>t, h) +\nk \\mathop{\\mathbb{E}}</em>{\\tilde w \\sim P<em>\\text{noise}}\n\\left[ \\log Q</em>\\theta(D = 0 |\\tilde w, h) \\right]\n{% endmath %}</p>\n<p>经过简单的配置， 我们的web页面已经可以支持很方便的书写数学公式了，而且由于不用特殊转义， 这里写的LaTex可以在其他markdown环境下使用， 比如<a href="http://mp.weixin.qq.com/s?__biz=MjM5NjAyNjkwMA==&#x26;mid=2723942529&#x26;idx=1&#x26;sn=3b417dd77b4d5b92231ed59649844eb9&#x26;chksm=81473ffab630b6ec843d77432c487e3e3a272ec26a5b9e0ae4007f5fce3dd826825a7b64a249&#x26;mpshare=1&#x26;scene=1&#x26;srcid=0301zj3JKl85H692JGwUHZzM#rd">有道云笔记</a>。</p>\n<p>============update===========</p>\n<p>刚发现由于引用了MathJax.js， 本身又会引用其他一些js、css以及font， 会多增加差不多100k资源， 并且由于都是国外的cdn， 速度受限制（貌似还要翻墙），所以比较影响阅读体验。后续再想办法优化吧。</p>\n<p>============update===========\n发现next主题好看一些， 换成了next。 看到next直接<a href="http://theme-next.iissnan.com/third-party-services.html#others">支持MathJax</a>的，换成了qiniu的cdn。但是next自带的math，不能支持{% math %}，发现还是需要hexo-math， 而且很奇怪的是， 发现不用在_config.yml里面写</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">plugins:\n  hexo-math</code></pre>\n      </div>\n<p>居然也可以， 只要package.json里面有hexo-math就可以了。于是参考<a href="https://github.com/akfish/hexo-math">hexo-math官网</a>，换成了qiniu的cdn。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">math:\n  engine: &#39;mathjax&#39; # or &#39;katex&#39;\n  mathjax:\n  src: //cdn.staticfile.org/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML</code></pre>\n      </div>\n<p>奇怪的是，还是有一个网络请求，不知道从哪里来的。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">https://cdn.mathjax.org/mathjax/contrib/a11y/accessibility-menu.js?V=2.7.0</code></pre>\n      </div>\n<p>而且说的</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">Your config will be merged into default config:</code></pre>\n      </div>\n<p>似乎也没有。生成的代码为</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/x-mathjax-config<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">\n  MathJax<span class="token punctuation">.</span>Hub<span class="token punctuation">.</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>配置目没有了？！！好在似乎没有影响使用，那就先暂时这样用着吧~~</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="http://jzqt.github.io/2015/06/30/Markdown%E4%B8%AD%E5%86%99%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/">http://jzqt.github.io/2015/06/30/Markdown%E4%B8%AD%E5%86%99%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</a></li>\n<li><a href="https://www.zybuluo.com/codeep/note/163962">https://www.zybuluo.com/codeep/note/163962</a></li>\n<li><a href="http://oiltang.com/2014/05/04/markdown-and-mathjax/">http://oiltang.com/2014/05/04/markdown-and-mathjax/</a></li>\n<li><a href="http://www.jeyzhang.com/how-to-insert-equations-in-markdown.html">http://www.jeyzhang.com/how-to-insert-equations-in-markdown.html</a></li>\n<li><a href="http://www.52nlp.cn/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E9%87%8C%E4%BD%BF%E7%94%A8latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F">http://www.52nlp.cn/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E9%87%8C%E4%BD%BF%E7%94%A8latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F</a></li>\n<li><a href="https://github.com/mathjax/MathJax-node">https://github.com/mathjax/MathJax-node</a></li>\n</ul>',
timeToRead:5,excerpt:"最近准备写一下机器学习的一些学习笔记， 由于涉及到大量数学公式， 发现不把如何在markdown里写数学公式这个问题解决了会严重影响工作效率。大概而言， 主要有两种方式： 用图片！\n也就是编辑好公式，上传，然后在markdown…",fields:{slug:"/markdown-math/"},frontmatter:{title:"在markdown里如何写数学公式",date:"2017-03-02",category:"ML",tags:["math"]}}},{node:{html:'<p>机器学习已经影响了我们生活中的每一个地方， 了解一些机器学习知识， 便于提高竞争力， 避免被机器替代。\n下面是我参考咨询了很多大牛之后搜集整理的一些学习资料， 基本都是该领域世界最顶尖的高手亲自授课，以及一些最流行的工具库， 值得学习。</p>\n<!-- more -->\n<ul>\n<li>台湾大学李宏毅老师的机器学习和深度学习课程，<a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses.html%EF%BC%8C">http://speech.ee.ntu.edu.tw/~tlkagk/courses.html，</a> bilibili上有视频：<a href="https://www.bilibili.com/video/av10590361/">https://www.bilibili.com/video/av10590361/</a> , <a href="https://www.bilibili.com/video/av9770302/">https://www.bilibili.com/video/av9770302/</a> 。 另外有个很好的pdf可以快速了解机器学习内容：<a href="https://www.slideshare.net/tw_dsconf/ss-62245351">https://www.slideshare.net/tw_dsconf/ss-62245351</a> </li>\n<li>Fast.ai课程，<a href="http://course.fast.ai/">http://course.fast.ai/</a> ， 中文版<a href="http://geek.ai100.com.cn/tag/fast-ai">http://geek.ai100.com.cn/tag/fast-ai</a> ，已完成，这个是我目前觉得最好的课程。</li>\n<li>Andrew NG <a href="https://www.coursera.org/learn/machine-learning">https://www.coursera.org/learn/machine-learning</a> （已完成）</li>\n<li>Andrew NG Unsupervised Feature Learning and Deep Learning <a href="http://deeplearning.stanford.edu/tutorial/">http://deeplearning.stanford.edu/tutorial/</a> （学习ing）</li>\n<li><a href="http://neuralnetworksanddeeplearning.com/">http://neuralnetworksanddeeplearning.com/</a> （已完成）</li>\n<li>Andrew NG, standford的机器学习课程之一， <a href="http://cs229.stanford.edu/">http://cs229.stanford.edu/</a></li>\n<li>Neural Networks for Machine Learning <a href="https://www.coursera.org/learn/neural-networks">https://www.coursera.org/learn/neural-networks</a> by Geoffrey Hinton, Professor(深度学习创始人) （学习中），有点后悔， 这个课程并不是适合初学者。参考<a href="https://www.quora.com/Is-it-wise-to-learn-deep-learning-from-Hintons-course-on-Coursera">这里</a></li>\n<li>李飞飞课程<a href="http://cs231n.github.io/">http://cs231n.github.io/</a></li>\n<li>斯坦福自然语言处理 <a href="http://web.stanford.edu/class/cs224n/">http://web.stanford.edu/class/cs224n/</a></li>\n<li>Tensorflow for Deep Learning Research <a href="http://web.stanford.edu/class/cs20si/">http://web.stanford.edu/class/cs20si/</a></li>\n<li>伯克利人工智能课程 <a href="http://www-inst.eecs.berkeley.edu/~cs188/archives.html">http://www-inst.eecs.berkeley.edu/~cs188/archives.html</a></li>\n<li><a href="http://www.deeplearningbook.org/">http://www.deeplearningbook.org/</a>, by Ian Goodfellow and Yoshua Bengio（深度学习四大金刚之一） and Aaron Courville</li>\n<li>udacity深度学习课程tensorflow <a href="https://classroom.udacity.com/courses/ud730/">https://classroom.udacity.com/courses/ud730/</a> （已完成）</li>\n<li><a href="https://keras.io">https://keras.io</a></li>\n<li><a href="https://scikit-learn.org">https://scikit-learn.org</a></li>\n<li><a href="https://www.tensorflow.org">https://www.tensorflow.org</a></li>\n<li><a href="http://deeplearning.net/">http://deeplearning.net/</a></li>\n<li><a href="https://www.kaggle.com">https://www.kaggle.com</a></li>\n</ul>',timeToRead:2,excerpt:"…",fields:{slug:"/ml-content/"},frontmatter:{title:"机器学习计划",date:"2017-02-12",category:"ML",tags:["AI","ML","machine learning","deep learning","深度学习"]}}},{node:{html:'<h1 id="什么是贝塞尔曲线"><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么是贝塞尔曲线</h1>\n<p>最近做一个动画效果时需要将物体做曲线移动， 本来记得css3里的动画是可以指定beizer curve的， 结果用的时候发现css3的beizer curve只用来做easing timing function。简单来说就是拿来控制动画“非线性”移动，比如越来越快（ease-in）， 越来越慢（ease-out），先慢后快再慢（ease-in-out）等， 让动画效果更“灵动”， 避免线性（linear）的死板。</p>\n<p>可以看看这两个页面， 有一个直观的感受。</p>\n<!-- more -->\n<ul>\n<li><a href="http://cubic-bezier.com/">http://cubic-bezier.com/</a></li>\n<li><a href="http://easings.net/zh-cn">http://easings.net/zh-cn</a></li>\n</ul>\n<p>beizer curve在css3中的使用， 可以自己google一下， 或者看下：</p>\n<ul>\n<li><a href="http://www.w3school.com.cn/css3/css3_transition.asp">http://www.w3school.com.cn/css3/css3_transition.asp</a></li>\n<li><a href="http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html">http://www.ruanyifeng.com/blog/2014/02/css<em>transition</em>and_animation.html</a></li>\n</ul>\n<p>引用wiki上的介绍：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">    在数学的数值分析领域中，贝塞尔曲线（英语：Bézier curve）是计算机图形学中相当重要的参数曲线。更高维度的广泛化贝塞尔曲线就称作贝塞尔曲面，其中贝塞尔三角是一种特殊的实例。\n    贝塞尔曲线于1962年，由法国工程师皮埃尔·贝塞尔（Pierre Bézier）所广泛发表，他运用贝塞尔曲线来为汽车的主体进行设计。贝塞尔曲线最初由Paul de Casteljau于1959年运用de Casteljau算法开发，以稳定数值的方法求出贝塞尔曲线。</code></pre>\n      </div>\n<p>有数学功底或者有兴趣的可以参考下面几篇文章， 我就不赘述了（最讨厌那种什么都要copy过来，弄得好像跟是自己写的样， 别人已经写得很清楚了， 干嘛再重复劳动一遍呢， 又没有自己的新的见解，赠人链接， 手留余香。 😁哈）。</p>\n<ul>\n<li><a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve">https://en.wikipedia.org/wiki/B%C3%A9zier_curve</a></li>\n<li><a href="https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A">https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A</a></li>\n<li><a href="http://www.html-js.com/article/1628">http://www.html-js.com/article/1628</a></li>\n<li><a href="http://www.cnblogs.com/hnfxs/p/3148483.html">http://www.cnblogs.com/hnfxs/p/3148483.html</a></li>\n<li></li>\n</ul>\n<h1 id="在线工具"><a href="#%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>在线工具</h1>\n<p>下面是几个比较有用的工具， 方便大家。</p>\n<ul>\n<li><a href="http://blogs.sitepointstatic.com/examples/tech/canvas-curves/quadratic-curve.html">http://blogs.sitepointstatic.com/examples/tech/canvas-curves/quadratic-curve.html</a></li>\n<li><a href="http://myst729.github.io/bezier-curve/">http://myst729.github.io/bezier-curve/</a></li>\n<li><a href="http://xuanfengge.com/easeing/ceaser/">http://xuanfengge.com/easeing/ceaser/</a></li>\n<li><a href="http://yisibl.github.io/cubic-bezier/#.17,.67,.83,.67">http://yisibl.github.io/cubic-bezier/#.17,.67,.83,.67</a></li>\n<li><a href="http://cubic-bezier.com/#.17,.67,.83,.67">http://cubic-bezier.com/#.17,.67,.83,.67</a></li>\n</ul>\n<h1 id="实现"><a href="#%E5%AE%9E%E7%8E%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>实现</h1>\n<p>前面资料都是把bezier curve拿来当timing function的， 而我的需求是要让物体（某个dom节点）沿着某条beizer curve移动，于是继续google， 找到了几个。</p>\n<ul>\n<li>Android实现: <a href="https://github.com/Yasic/QQBubbleView">https://github.com/Yasic/QQBubbleView</a></li>\n</ul>\n<p>Android的我用不到， 放这里主要是里面的gif图很直观，哈哈。</p>\n<ul>\n<li>CSS实现：<a href="http://jinlong.github.io/2016/01/14/moving-along-a-curved-path-in-css-with-layered-animation/%EF%BC%8C">http://jinlong.github.io/2016/01/14/moving-along-a-curved-path-in-css-with-layered-animation/，</a> 原文：<a href="http://tobiasahlin.com/blog/curved-path-animations-in-css/">http://tobiasahlin.com/blog/curved-path-animations-in-css/</a></li>\n</ul>\n<p>CSS的实现真是相当tricky， 我解释一下。CSS里面的animation translate是直接按照直线移动到目的地的， 这是因为沿X轴和Y轴都是匀速运动（linear），所以合成之后的速度必然是斜角45°移动过去的。我们可以把X轴看成时间轴， 这时如果Y轴的移动函数是某个beizer curve，那合成之后的移动曲线就是beizer curve了。具体实现的时候还用到了:after伪元素了。</p>\n<p>复杂一点的我觉得还是需要用js去控制， 于是自然想到了用js代码去按照beizer curve公式实现。</p>\n<ul>\n<li>JS实现： <a href="http://blog.csdn.net/cuixiping/article/details/6872095">http://blog.csdn.net/cuixiping/article/details/6872095</a></li>\n</ul>\n<p>这个用的公式不直观，应该是进行了变换之后的， 我直接照着公式写了一个。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="gatsby-highlight-code-line"><span class="token keyword">function</span> <span class="token function">PointOnCubicBezier2</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span> t<span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n</span><span class="gatsby-highlight-code-line">   <span class="token comment">// B(t) = P0 * (1-t)^3 + 3 * P1 * t * (1-t)^2 + 3 * P2 * t^2 * (1-t) + P3 * t^3</span>\n</span>        <span class="token keyword">const</span> one_t <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">-</span> t<span class="token punctuation">;</span>\n        <span class="token keyword">const</span> <span class="token constant">P0</span> <span class="token operator">=</span> cp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> <span class="token constant">P1</span> <span class="token operator">=</span> cp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> <span class="token constant">P2</span> <span class="token operator">=</span> cp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> <span class="token constant">P3</span> <span class="token operator">=</span> cp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> x <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token constant">P0</span><span class="token punctuation">.</span>x <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>one_t<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token constant">P1</span><span class="token punctuation">.</span>x <span class="token operator">*</span> t <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>one_t<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token constant">P2</span><span class="token punctuation">.</span>x <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> one_t <span class="token operator">+</span> <span class="token constant">P3</span><span class="token punctuation">.</span>x <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> y <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token constant">P0</span><span class="token punctuation">.</span>y <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>one_t<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token constant">P1</span><span class="token punctuation">.</span>y <span class="token operator">*</span> t <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>one_t<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token constant">P2</span><span class="token punctuation">.</span>y <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> one_t <span class="token operator">+</span> <span class="token constant">P3</span><span class="token punctuation">.</span>y <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> pointF <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point2D</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> pointF<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>对比了一下两个函数的输出值， 完全是一样的， 应该就是数学变换而已， 我懒得去做推倒了。</p>\n<p>后来找到一个三阶beizer curve的实现，看这里\n<a href="https://github.com/gre/bezier-easing%EF%BC%8C">https://github.com/gre/bezier-easing，</a> 这个实现可能有点NB，以至于<a href="https://facebook.github.io/react-native/">React Native</a>、<a href="http://velocityjs.org/">Velocity</a>等项目都使用了，屌屌的。</p>\n<p>用<a href="https://github.com/bestiejs/benchmark.js">benchmark</a>跑一下分：<a href="https://jsperf.com/beizer-curve5">看这里</a>， chrome下我写的方法居然慢了94%！看样子代码可读性是要付出代价的哈。我还是老老实实用<a href="https://github.com/gre/bezier-easing%E5%90%A7%E3%80%82">https://github.com/gre/bezier-easing吧。</a></p>\n<p>刚刚又搜到一篇文章， 讲解地更细致深入， 害得我不想继续写了。 直接看这里吧。<a href="http://www.jianshu.com/p/55c721887568">http://www.jianshu.com/p/55c721887568</a></p>\n<h1 id="如何将多个点用贝塞尔曲线连起来"><a href="#%E5%A6%82%E4%BD%95%E5%B0%86%E5%A4%9A%E4%B8%AA%E7%82%B9%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E8%BF%9E%E8%B5%B7%E6%9D%A5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>如何将多个点用贝塞尔曲线连起来</h1>\n<ul>\n<li><a href="http://www.zheng-hang.com/?id=43">http://www.zheng-hang.com/?id=43</a></li>\n<li><a href="http://www.cnblogs.com/hnfxs/p/3148743.html">http://www.cnblogs.com/hnfxs/p/3148743.html</a></li>\n</ul>',timeToRead:4,excerpt:"什么是贝塞尔曲线 最近做一个动画效果时需要将物体做曲线移动， 本来记得css3里的动画是可以指定beizer curve的， 结果用的时候发现css3的beizer curve只用来做easing timing function…",fields:{slug:"/bezier-curve/"},frontmatter:{title:"bezier-curve",date:"2016-11-29",category:"FE",tags:["js","css","animation","beizer curve"]}}},{node:{html:'<p>用了一年多的<a href="https://facebook.github.io/react/">React</a>，真是爽的不要不要的， 谁用谁知道， 一般人我不告诉他！</p>\n<p>最近用的过程中发现console里面总是出现这样的警告</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">react.js:20478 Warning: setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op. Please check the code for the Small component.</code></pre>\n      </div>\n<p>虽不影响使用， 但是对于一个有代码洁癖的有追求的程序员来说， 怎么受得了呢！</p>\n<p>react的error或者warning信息还是写得比较好的， 从上面我们可以看出原因是我们在一个unmounted的component上调用setState方法。分析业务代码， 发现是某个弹窗component需要从server加载数据， 有时候网络慢， 还没有加载出来用户就把弹窗关了， 所以对应的component变成了unmounted， 等到fetch请求成功之后， 再调用setState就warning了。</p>\n<p>为了方便分析问题， 我把问题简化了， 同时为了用户直接能在浏览器打开看到效果， 而不用nodejs、npm、babel、webpack、react等一堆东西install半天， 我直接引用了react cdn上的文件。代码如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/react@latest/dist/react.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/react-dom@latest/dist/react-dom.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/babel-standalone@6.15.0/babel.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">\n\n  <span class="token keyword">class</span> <span class="token class-name">Big</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n        small<span class="token punctuation">:</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function-variable function">closeSmall</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'closeSmall\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> small<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>h1<span class="token operator">></span>hello <span class="token keyword">from</span> Big Component <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n        <span class="token operator">&lt;</span>h2 onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>closeSmall<span class="token punctuation">}</span><span class="token operator">></span>close small <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>\n        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>small <span class="token operator">?</span> <span class="token operator">&lt;</span>Small <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">class</span> <span class="token class-name">Small</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n        data<span class="token punctuation">:</span> <span class="token string">\'init data\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'componentDidMount\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'fetch data from server succeed...\'</span><span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`this._isMounted: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>_isMounted<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token string">\'data from server\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>h1<span class="token operator">></span>hello <span class="token keyword">from</span> Small Component <span class="token operator">...</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n        data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n      ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>Big <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>\n        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>代码里面用setTimeout模拟了从server获取数据， 大家如果在5s内点击close small， 就可以重现这个问题。</p>\n<p>问题的解决方法很自然地想到，如果可以在setState之前检查一下this component是否还是mounted状态就可以了。查react的文档，发现原来之前确实是有isMounted()这个方法的， 不过已经不推荐使用了， 因为<a href="https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html">isMounted is an Antipattern</a>。</p>\n<p>第一种解决方法就是自己模拟实现isMounted这个方法， 虽然已经被贴上Antipattern的标签， 但是有些时候用这种方法还是比较方便的。代码如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/react@latest/dist/react.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/react-dom@latest/dist/react-dom.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/babel-standalone@6.15.0/babel.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">\n\n  <span class="token keyword">class</span> <span class="token class-name">Big</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n        small<span class="token punctuation">:</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function-variable function">closeSmall</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'closeSmall\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> small<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>h1<span class="token operator">></span>hello <span class="token keyword">from</span> Big Component <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n        <span class="token operator">&lt;</span>h2 onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>closeSmall<span class="token punctuation">}</span><span class="token operator">></span>close small <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>\n        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>small <span class="token operator">?</span> <span class="token operator">&lt;</span>Small <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">class</span> <span class="token class-name">Small</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n        data<span class="token punctuation">:</span> <span class="token string">\'init data\'</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>_isMounted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>_isMounted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'componentDidMount\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'fetch data from server succeed...\'</span><span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`this._isMounted: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>_isMounted<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token string">\'data from server\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>_isMounted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>h1<span class="token operator">></span>hello <span class="token keyword">from</span> Small Component <span class="token operator">...</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n        data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n      ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>Big <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>\n        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>对于callback现在已经有更好的解决方案， 伟大的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a>！如果这个promise能在componentWillUnmount()的时候cancel掉就完美了。可惜google之后发现官方Promise实现目前并不支持cancel！<a href="http://stackoverflow.com/questions/29478751/how-to-cancel-an-emcascript6-vanilla-javascript-promise-chain">看这里</a>， 还有<a href="http://stackoverflow.com/questions/30233302/promise-is-it-possible-to-force-cancel-a-promise">这里</a>，所以除非你使用第三方Promise库， 比如据说性能比原生还好的<a href="http://bluebirdjs.com/docs/api/cancellation.html">Bluebird</a>。</p>\n<p>当然有些时候没必要搞这么复杂， facebook的<a href="https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html">文档</a>给了一个简易的cancelable的Promise。最好代码如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/react@latest/dist/react.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/react-dom@latest/dist/react-dom.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/babel-standalone@6.15.0/babel.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">\n\n  <span class="token keyword">class</span> <span class="token class-name">Big</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n      small<span class="token punctuation">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function-variable function">closeSmall</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'closeSmall\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> small<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>\n      <span class="token operator">&lt;</span>h1<span class="token operator">></span>hello <span class="token keyword">from</span> Component <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n      <span class="token operator">&lt;</span>h2 onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>closeSmall<span class="token punctuation">}</span><span class="token operator">></span>close small <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>\n      <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>small <span class="token operator">?</span> <span class="token operator">&lt;</span>Small <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Small</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n      data<span class="token punctuation">:</span> <span class="token string">\'init data\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'componentDidMount\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>cancelablePromise <span class="token operator">=</span> <span class="token function">makeCancelable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'fetch data from server succeed...\'</span><span class="token punctuation">)</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'data from server\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>cancelablePromise\n      <span class="token punctuation">.</span>promise\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=></span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'resolved: \'</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>reason <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">,</span> <span class="token string">\' isCanceled\'</span><span class="token punctuation">,</span> reason<span class="token punctuation">.</span>isCanceled<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token punctuation">}</span>\n  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>cancelablePromise<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Cancel the promise</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>\n      <span class="token operator">&lt;</span>h1<span class="token operator">></span>hello <span class="token keyword">from</span> Small Component <span class="token operator">...</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n      data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">makeCancelable</span> <span class="token operator">=</span> <span class="token punctuation">(</span>promise<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> hasCanceled_ <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> wrappedPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=></span>\n      hasCanceled_ <span class="token operator">?</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isCanceled<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    promise<span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=></span>\n      hasCanceled_ <span class="token operator">?</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isCanceled<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    promise<span class="token punctuation">:</span> wrappedPromise<span class="token punctuation">,</span>\n    <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      hasCanceled_ <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n      ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>Big <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>\n        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>well, it’s ok now!</p>',
timeToRead:4,excerpt:"用了一年多的 React ，真是爽的不要不要的， 谁用谁知道， 一般人我不告诉他！ 最近用的过程中发现console里面总是出现这样的警告 虽不影响使用， 但是对于一个有代码洁癖的有追求的程序员来说， 怎么受得了呢！ react的error或者warning…",fields:{slug:"/react-ismounted-is-an-antipattern/"},frontmatter:{title:"react系列之isMounted is an Antipattern",date:"2016-11-19",category:"FE",tags:["react"]}}},{node:{html:'<p><a href="http://blog.coderzh.com/2015/09/13/use-webhook-automated-deploy-hugo/?hmsr=toutiao.io&#x26;utm_medium=toutiao.io&#x26;utm_source=toutiao.io">http://blog.coderzh.com/2015/09/13/use-webhook-automated-deploy-hugo/?hmsr=toutiao.io&#x26;utm<em>medium=toutiao.io&#x26;utm</em>source=toutiao.io</a></p>\n<p>…</p>',timeToRead:1,excerpt:"http://blog.coderzh.com/2015/09/13/use-webhook-automated-deploy-hugo/?hmsr=toutiao.io&utm medium=toutiao.io&utm source=toutiao.io …",fields:{slug:"/auto-deploy-githubPages-by-webhook-md/"},frontmatter:{title:"利用webhook实现github pages的自动部署",date:"2015-09-16",category:"default",tags:["github","webhook","ssh"]}}},{node:{html:'<p>javascript es6 arrow function.</p>\n<!-- more -->\n<p>开始学习ES6.\n<a href="https://hacks.mozilla.org/category/es6-in-depth/">https://hacks.mozilla.org/category/es6-in-depth/</a></p>',timeToRead:1,excerpt:"javascript es6 arrow function. 开始学习ES6.\n https://hacks.mozilla.org/category/es6-in-depth/",fields:{slug:"/js-arrow-functions-md/"},frontmatter:{title:"javascript箭头函数",date:"2015-09-07",category:"JS",tags:["js","javascript","es6"]}}},{node:{html:'<p>微信公共号现在很火，一些简单的应用，做一个公共号比开发一款app成本要小很多，而且利用朋友圈的转发，相比app去app store里上架等着用户下载，要容易很多。</p>\n<p>但是微信公共号的调试有点不方便，必须在微信<a href="https://mp.weixin.qq.com/">管理后台</a>配置一个微信能访问到（公网）的url，然后在公共号里输入内容，微信以xml格式转发给这个url，url回复之后微信再将response回复给使用公共号的微信用户。当然微信也提供了<a href="http://mp.weixin.qq.com/debug">调试工具</a>， 可以直接构造数据，方便调试各个接口。 但是依然需要一个公网的url作为接口。于是最原始的开发方式就是，修改代码，上传到server，（如果是有些静态语言还需要重启服务器），然后看是否正常work，如果不行的话，在可能错误的地方打出log，然后又是修改代码，上传server，重启。。。。。就这样，每次改一点点，你都可以泡杯咖啡了，老板就会觉得你很闲。参看<a href="http://www.oschina.net/news/15579/reasons-why-people-who-work-with-computers-seem-to">为什么搞计算机工作的人总是看上去很清闲</a>。</p>\n<!-- more -->\n<p>有没有办法可以直接在本地调试呢，简单说，就是微信把数据传到我本地的电脑上，我每次改完代码，不用重新上传server，直接在本地加log等。经过研究，找到几个方法，记录下来，与大家分享，绝对能节约很多很多很多时间，然后就可以去陪妹纸了， 如果你有的话，没有的话<a href="http://www.zhihu.com/question/20385321">here</a>。</p>\n<p>第一种方法，你本地电脑有公网ip。比如家里宽带，没用路由，直接把网线插上，应该就是公网IP，吧。 如果家里有多人使用，你可以再路由器里配置NAT地址转换。自行<a href="https://www.google.com.hk/webhp?sourceid=chrome-instant&#x26;ion=1&#x26;espv=2&#x26;ie=UTF-8#q=NAT%20%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2">Google</a>吧。</p>\n<p>第二种，也是我搜到的最多的，用ngrok这个神器！网上一堆资料，比如<a href="http://www.mbnow.tk/2014/12/05/ngrok/">这个</a>，我Google到的最多的也是这个，而且看上去也应该很简单。 <a href="http://www.oray.com/">花生壳</a>我10年前用过（x，不小心暴露年龄了），应该是一样的。网上说，缺点是</p>\n<blockquote>\n<p>不过 ngrok 速度较慢，微信服务器对实时性要求较高，每次通信超过 5 秒便超时，所以此法也不建议使用。</p>\n</blockquote>\n<p>我觉得用花生壳的话可能好点，因为是国内的（有兴趣的可以自己去试试哈）。没有用ngrok试一下，因为“无法显示此网页”！网上就是“骗子”多，明明没有的网站，大家都描绘的绘声绘色。</p>\n<p>第三种，用ssh建立反向通道。对了，使用此种方法，你还是需要一个公网IP的。 作为一名专业工程师，拥有公网 ip 地址的 VPS 服务器基本成了标配，<a href="http://www.qcloud.com/redirect.php?redirect=1002&#x26;cps_key=0a3641075e434bf76a016a44d2918e4a">腾讯云VPS</a> 最便宜的一款每年也就几百块钱，平时挂挂自己喜欢的服务，做个站长，跑跑自己的开源项目甚爽。</p>\n<ol>\n<li>申请<a href="http://www.qcloud.com/redirect.php?redirect=1001&#x26;cps_key=0a3641075e434bf76a016a44d2918e4a">腾讯云</a></li>\n<li>本地安装ssh，如果是linux或mac，都是自带的。如果是windows的话，可以安装<a href="https://www.cygwin.com/">Cygwin</a>，如果你嫌弃它太重了，安装了<a href="https://git-scm.com/download/gui/win">Git</a>也是可以的。如果你也不想装或者不会装Git，额，(⊙o⊙)…，好吧，那你还是不要写程序了。</li>\n<li>\n<p>建立ssh反向通道。\n这一步里有很多坑，我花了差不多一天才完全搞定。你们可以先参考这几篇文章，了解下原理啥的。</p>\n<ul>\n<li><a href="http://blog.zjutoe.net/?p=95">http://blog.zjutoe.net/?p=95</a></li>\n<li><a href="http://my.oschina.net/abcfy2/blog/177094">http://my.oschina.net/abcfy2/blog/177094</a></li>\n<li><a href="http://www.zzbaike.com/wiki/PuTTY/Putty%E5%BB%BA%E7%AB%8B%E9%9A%A7%E9%81%93%E7%9A%84%E6%96%B9%E6%B3%95">http://www.zzbaike.com/wiki/PuTTY/Putty%E5%BB%BA%E7%AB%8B%E9%9A%A7%E9%81%93%E7%9A%84%E6%96%B9%E6%B3%95</a></li>\n<li><a href="http://www.freeoa.net/osuport/netmanage/linux-ssh-tunneling-proxy_1892.html">http://www.freeoa.net/osuport/netmanage/linux-ssh-tunneling-proxy_1892.html</a></li>\n<li><a href="https://qdan.me/list/VOSXmsI4tv7fIciF">https://qdan.me/list/VOSXmsI4tv7fIciF</a></li>\n</ul>\n</li>\n</ol>\n<p>好吧，来看我的具体一步一步做法。</p>\n<ol>\n<li>\n<p>ssh -R 9999:localhost:9000 ubuntu@myserver<em>ip</em>address，输入密码</p>\n</li>\n<li>\n<p>server上查看一下是否监听了9999端口，netstat -anltp | grep 9999</p>\n<div class="gatsby-highlight">\n      <pre class="language-shell"><code class="language-shell">ubuntu@VM-39-45-ubuntu:~$ <span class="token function">netstat</span> -anltp <span class="token operator">|</span> <span class="token function">grep</span> 9999\n<span class="token punctuation">(</span>Not all processes could be identified, non-owned process info\nwill not be shown, you would have to be root to see it all.<span class="token punctuation">)</span>\ntcp        0      0 127.0.0.1:9999          0.0.0.0:*               LISTEN      -\ntcp6       0      0 ::1:9999                :::*                    LISTEN      -</code></pre>\n      </div>\n</li>\n<li>\n<p>在本地9000（我用的<a href="https://www.playframework.com/documentation/1.3.x/home">play 1</a>，可以了解下它到底为啥这么好用<a href="http://segmentfault.com/a/1190000000374033">Play Framework —— Java开发者的梦想框架</a>）上开启web服务</p>\n</li>\n<li>\n<p>在浏览器里输入<a href="http://myserver_ip_address:9999%EF%BC%8C">http://myserver<em>ip</em>address:9999，</a> 居然是没有响应！奇怪！直接在server上用curl <a href="http://localhost:9999">http://localhost:9999</a> 是可以的！仔细看netstat输出，发现监听的9999端口是本地的！！！也就是说只能在本地访问，那有xx用啊！！！</p>\n</li>\n<li>\n<p>看看ssh —help， 原来是可以指定bind_address的， man ssh看看</p>\n<blockquote>\n<p>By default, the listening socket on the server will be bound to the loopback interface only.  This may be overridden by specifying a bind<em>address. An empty bind</em>address, or the address ‘*’, indicates that the remote socket should listen on all interfaces.  Specifying a remote bind<em>address will only succeed if the server’s GatewayPorts option is enabled (see sshd</em>config(5)).</p>\n</blockquote>\n</li>\n</ol>\n<p>  继续看看 man sshd_config</p>\n<blockquote>\n<p>GatewayPorts\nSpecifies whether remote hosts are allowed to connect to ports forwarded for the client.  By default, sshd(8) binds remote port forwardings to the\nloopback address.  This prevents other remote hosts from connecting to forwarded ports.  GatewayPorts can be used to specify that sshd should allow</p>\n</blockquote>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">remote port forwardings to bind to non-loopback addresses, thus allowing other hosts to connect.  The argument may be “no” to force remote port\nforwardings to be available to the local host only, “yes” to force remote port forwardings to bind to the wildcard address, or “clientspecified” to\nallow the client to select the address to which the forwarding is bound.  The default is “no”.</code></pre>\n      </div>\n<p> sudo vim /etc/ssh/sshd<em>config，添加GatewayPorts clientspecified，GatewayPorts yes也可以，退出，sudo service sshd restart，重启ssh服务。重新ssh -R :9999:localhost:9000 ubuntu@myserver</em>ip<em>address（仔细看，就9999前多了一个冒号:），输入密码，netstat -anltp | grep 9999，果然\n<code class="language-text">tcp        0      0 0.0.0.0:9999            0.0.0.0:*               LISTEN      -\n\ttcp6       0      0 :::9999                 :::*                    LISTEN      -</code>\n浏览器里输入<a href="http://myserver">http://myserver</a></em>ip_address:9999， 这回可以看到本地打出日志了。</p>\n<ol start="6">\n<li>\n<p>然后发现微信里面配置的url只能是80端口。简单，直接改成ssh -R :80:localhost:9000 ubuntu@myserver<em>ip</em>address就可以了，吧！奇怪，直接访问<a href="http://myserver_ip_address%EF%BC%8C">http://myserver<em>ip</em>address，</a> 打不开网页！用netstat -anltp | grep 80，居然什么都没有！说明server没有在80端口监听呀！哦，对了ubuntu低于1024的端口是需要用root权限的。</p>\n</li>\n<li>\n<p>ubuntu里root默认是关闭的。sudo passwd root，设置root密码后，可以打开。还需要在sudo vim /etc/ssh/sshd_config\t添加</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">#PermitRootLogin without-password\nPermitRootLogin yes</code></pre>\n      </div>\n</li>\n<li>\n<p>重启ssh，再重新用root账号连接，ssh -R :80:localhost:9000 root@myserver<em>ip</em>address， 一切ok，<a href="http://myserver_ip_address%EF%BC%8C">http://myserver<em>ip</em>address，</a> 本地代码打出日志，说明流量已经导入到本地了。</p>\n</li>\n<li>\n<p>最后，就可以在<a href="http://mp.weixin.qq.com/debug">微信公众平台接口调试工具</a>里调试了，配合<a href="http://playframework.com/">Play!</a>的hot reload，随时修改代码，加log，然后马上就可以看到效果，不用重新编译，不用上传server，不用重启。。。。生活真是幸福美满啊。。。。</p>\n</li>\n<li>\n<p>几个问题说明：</p>\n<ol>\n<li>直接用ssh连接的话，断开之后端口映射就没有了，可以用autossh， 只是我就是临时需要调试用的时候才ssh建立反向隧道，所以我不用autossh。</li>\n<li>直接用root登陆ssh，开通80端口。应该是有安全隐患的， 吧！对安全不是很了解，但感觉直接用root肯定不是最佳实践。网上有各种方法解决这个问题，比如用iptables端口映射，或者nginx反向代理的，<a href="http://stackoverflow.com/questions/23281895/node-js-eacces-error-when-listening-on-http-80-port-permission-denied">看这里</a>，参看1的原因，我没有采用。还是一次focus一个点吧，不然光环境就配置几天，有点太慢了。</li>\n</ol>\n</li>\n</ol>\n<p>通过本文的配置，可以在本地方便的开发调试微信公共号了。但是对于微信提供的<a href="http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html">JS-SDK</a>，又存在另外的问题，这个我会<a href="http://my.oschina.net/magicly007/blog/480704">另外写一篇blog来解决</a>。毕竟，我们程序员应该坚持<a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">Single responsibility principle</a>嘛。</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ol>\n<li><a href="http://www.mbnow.tk/2014/12/05/ngrok/">http://www.mbnow.tk/2014/12/05/ngrok/</a></li>\n<li><a href="http://my.oschina.net/jfinal/blog/336861">http://my.oschina.net/jfinal/blog/336861</a></li>\n<li><a href="http://www.mbnow.tk/2014/12/05/ngrok/">http://www.mbnow.tk/2014/12/05/ngrok/</a></li>\n<li><a href="http://liyaodong.com/2015/07/06/%E5%BE%AE%E4%BF%A1%E8%B0%83%E8%AF%95%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/">http://liyaodong.com/2015/07/06/%E5%BE%AE%E4%BF%A1%E8%B0%83%E8%AF%95%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</a></li>\n<li><a href="http://my.oschina.net/abcfy2/blog/177094">http://my.oschina.net/abcfy2/blog/177094</a></li>\n<li><a href="http://www.zhihu.com/question/25456655">http://www.zhihu.com/question/25456655</a></li>\n<li><a href="http://my.oschina.net/atanl/blog/391611">http://my.oschina.net/atanl/blog/391611</a></li>\n</ol>\n<blockquote>\n<p>Written with <a href="https://stackedit.io/">StackEdit</a>.</p>\n</blockquote>',timeToRead:5,excerpt:"微信公共号现在很火，一些简单的应用，做一个公共号比开发一款app成本要小很多，而且利用朋友圈的转发，相比app去app store里上架等着用户下载，要容易很多。 但是微信公共号的调试有点不方便，必须在微信 管理后台 配置一个微信能访问到（公网）的url…",fields:{slug:"/ssh-reverse-tunnel-wx-local/"},frontmatter:{title:"利用SSH反向通道在本地调试微信公共号",date:"2015-07-26",category:"weixin",tags:["ssh","weixin","微信"]}}},{node:{html:'<p>引用<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">阮老师</a>的话，</p>\n<blockquote>\n<p>喜欢写Blog的人，会经历三个阶段。</p>\n</blockquote>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。\n第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。\n第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</code></pre>\n      </div>\n<p>自己比较懒惰，也就偶尔在<a href="http://my.oschina.net/magicly007/blog">OC</a>上写点闲散的笔记，最近觉得还是应该要把自己的知识系统地梳理一下，便决定开一个独立的域名，自己记录Blog。</p>\n<p>之前就了解Github Pages，也断断续续用MarkDown写过几篇放着，但是没有用<a href="http://jekyllrb.com/">jekyll</a>，或者<a href="http://octopress.org/">octpress</a>等串起来，上个月再次想配置好jekyll，结果在mac下始终配置不好（怪我咯）。今天决定一定要配置好，搜集了大量资料（google “jekyll 像黑客一样”），结果意外在<a href="http://www.douban.com/group/topic/39939196/">http://www.douban.com/group/topic/39939196/</a>的回复中看到“用pelican吧 python的 还有hexo是nodejs的 ”。因为最近刚好在看nodejs，觉得很有兴趣，于是改为尝试<a href="https://hexo.io/zh-cn/">hexo</a>。</p>\n<!-- more -->\n<h1 id="简介"><a href="#%E7%AE%80%E4%BB%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>简介</h1>\n<p><a href="http://ibruce.info/2013/11/22/hexo-your-blog/">http://ibruce.info/2013/11/22/hexo-your-blog/</a></p>\n<blockquote>\n<p>hexo出自台湾大学生<a href="https://twitter.com/tommy351">tommy351</a>之手，是一个基于<a href="https://nodejs.org/">Node.js</a>的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。先看看tommy是如何吐槽Octopress的 →＿→ <a href="http://zespia.tw/blog/2012/10/11/hexo-debut/">Hexo颯爽登場</a>。</p>\n</blockquote>\n<h1 id="安装"><a href="#%E5%AE%89%E8%A3%85" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装</h1>\n<p>首先安装Node.js，然后运行</p>\n<div class="gatsby-highlight">\n      <pre class="language-shell"><code class="language-shell">\t<span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli\n\t<span class="token function">npm</span> <span class="token function">install</span> hexo --save</code></pre>\n      </div>\n<h1 id="初始化配置"><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>初始化配置</h1>\n<div class="gatsby-highlight">\n      <pre class="language-shell"><code class="language-shell">\thexo init\n\t<span class="token function">npm</span> <span class="token function">install</span></code></pre>\n      </div>\n<h1 id="写blog"><a href="#%E5%86%99blog" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>写blog</h1>\n<div class="gatsby-highlight">\n      <pre class="language-shell"><code class="language-shell">\thexo n</code></pre>\n      </div>\n<h1 id="生成"><a href="#%E7%94%9F%E6%88%90" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>生成</h1>\n<div class="gatsby-highlight">\n      <pre class="language-shell"><code class="language-shell">\thexo g</code></pre>\n      </div>\n<h1 id="本地预览"><a href="#%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>本地预览</h1>\n<div class="gatsby-highlight">\n      <pre class="language-shell"><code class="language-shell">\thexo s</code></pre>\n      </div>\n<h1 id="发布"><a href="#%E5%8F%91%E5%B8%83" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>发布</h1>\n<div class="gatsby-highlight">\n      <pre class="language-shell"><code class="language-shell">\thexo d</code></pre>\n      </div>\n<p>实在觉得没必<a href="https://en.wikipedia.org/wiki/Reinventing_the_wheel">重复造轮子</a>，重写已经有很详细资料的东西。强烈推荐<a href="http://ibruce.info/2013/11/22/hexo-your-blog/">这篇</a>。 我觉得基本涵盖了方方面面，如果以后有新东西这里面没有的，我再写吧~</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ol>\n<li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/">http://ibruce.info/2013/11/22/hexo-your-blog/</a></li>\n<li><a href="http://wsgzao.github.io/post/hexo-guide/">http://wsgzao.github.io/post/hexo-guide/</a></li>\n<li><a href="http://www.jianshu.com/p/05289a4bc8b2">http://www.jianshu.com/p/05289a4bc8b2</a></li>\n<li><a href="http://yangjian.me/workspace/building-blog-with-hexo/">http://yangjian.me/workspace/building-blog-with-hexo/</a></li>\n<li><a href="http://yangjian.me/workspace/building-blog-with-hexo/">http://yangjian.me/workspace/building-blog-with-hexo/</a></li>\n<li><a href="http://blog.csdn.net/jackystudio/article/details/16117585">http://blog.csdn.net/jackystudio/article/details/16117585</a></li>\n</ol>\n<blockquote>\n<p>Written with <a href="https://stackedit.io/">StackEdit</a>.</p>\n</blockquote>',timeToRead:2,excerpt:"引用 阮老师 的话， 喜欢写Blog的人，会经历三个阶段。 自己比较懒惰，也就偶尔在 OC 上写点闲散的笔记，最近觉得还是应该要把自己的知识系统地梳理一下，便决定开一个独立的域名，自己记录Blog。 之前就了解Github Pages，也断断续续用MarkDown…",fields:{slug:"/my-first-hexo-blog/"},frontmatter:{title:"我的第一个hexo Blog",date:"2015-07-26",category:"default",tags:["hexo","github","githubPages"]}}},{node:{html:'<p>需要在代码里面发邮件是很经常的事情，包括找回密码，通知用户领奖，监控报警等。</p>\n<p>在Java里面实现比较简单，Oracle自己提供了<a href="http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-eeplat-419426.html#javamail-1.4.7-oth-JPR">JavaMail</a>， 不过API比较底层，用起来不方便，可以自己封装下，也可以直接使用Apache的开源项目<a href="https://commons.apache.org/proper/commons-email/">Commons Email</a>。 下面的代码，可以以小马哥的名义给自己发邮件，该功能仅用于测试，请谨慎使用，产生的问题，本人概不负责。 /微笑</p>\n<!-- more -->\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>EmailAttachment<span class="token punctuation">;</span>\n<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>EmailException<span class="token punctuation">;</span>\n<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>MultiPartEmail<span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>MalformedURLException<span class="token punctuation">;</span>\n<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Created by magicalli on 2015/7/6.\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiPartEmailTest</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> EmailException<span class="token punctuation">,</span> MalformedURLException <span class="token punctuation">{</span>\n        MultiPartEmail email <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiPartEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        email<span class="token punctuation">.</span><span class="token function">setHostName</span><span class="token punctuation">(</span><span class="token string">"smtp.tencent.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//        email.setAuthentication("youremail@tencent.com", "***");//邮件服务器验证：用户名/密码</span>\n        email<span class="token punctuation">.</span><span class="token function">setCharset</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        email<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"pony@qq.com"</span><span class="token punctuation">,</span> <span class="token string">"马化腾"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        email<span class="token punctuation">.</span><span class="token function">addTo</span><span class="token punctuation">(</span><span class="token string">"magicalli@tencent.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        email<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"加油奋斗！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        email<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token string">"come on! 加油奋斗吧，早晚有一天你会出任CEO，迎娶白富美，走上人生巅峰！ http://www.qq.com\\n\\n\\n pony"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        EmailAttachment attachment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmailAttachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        attachment<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">"d:/lzl.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 本地文件</span>\n        attachment<span class="token punctuation">.</span><span class="token function">setDisposition</span><span class="token punctuation">(</span>EmailAttachment<span class="token punctuation">.</span>ATTACHMENT<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        attachment<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">"林志玲1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        attachment<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"lzl_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        email<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>attachment<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        EmailAttachment attachment2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmailAttachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        attachment2<span class="token punctuation">.</span><span class="token function">setURL</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://mat1.qq.com/datalib_img/star/pic/lib/2007-01-15/2007011511104716122311.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//远程文件, 如果不是qq.com域名下，内网是访问不了的哈</span>\n        attachment2<span class="token punctuation">.</span><span class="token function">setDisposition</span><span class="token punctuation">(</span>EmailAttachment<span class="token punctuation">.</span>ATTACHMENT<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        attachment2<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">"林志玲2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        attachment2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"lzl_2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        email<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>attachment2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        email<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><a href="https://commons.apache.org/proper/commons-email/">Commons Email</a>支持好几种格式，包括简单文本，html，带附件等。需要的可以自己查看文档。</p>\n<p>基于smtp的协议邮件协议很简单，大家甚至可以直接用telnet来发送，可以参考这边文章<a href="http://blog.csdn.net/ghsau/article/details/8602076">Java Mail(一)：telnet实现发送收取邮件</a>. </p>\n<p>一般公司内网没有验证发送方，你可以冒充公司任何一个员工发送邮件（包括你们老板），一般外面的邮件服务器，比如qq, 126, 163等，是需要验证密码的。</p>\n<p>重申一遍，别用这个代码干坏事，后果自负， 与本人无关！</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ol>\n<li><a href="http://blog.csdn.net/ghsau/article/details/8602076">http://blog.csdn.net/ghsau/article/details/8602076</a></li>\n<li><a href="http://blog.csdn.net/ghsau/article/details/17839983">http://blog.csdn.net/ghsau/article/details/17839983</a></li>\n<li><a href="http://haolloyin.blog.51cto.com/1177454/354320">http://haolloyin.blog.51cto.com/1177454/354320</a></li>\n<li><a href="http://www.runoob.com/java/java-sending-email.html">http://www.runoob.com/java/java-sending-email.html</a></li>\n<li><a href="https://commons.apache.org/proper/commons-email/">https://commons.apache.org/proper/commons-email/</a></li>\n<li><a href="http://blog.csdn.net/qiaqia609/article/details/11580589">http://blog.csdn.net/qiaqia609/article/details/11580589</a></li>\n</ol>\n<blockquote>\n<p>Written with <a href="https://stackedit.io/">StackEdit</a>.</p>\n</blockquote>',timeToRead:2,excerpt:"需要在代码里面发邮件是很经常的事情，包括找回密码，通知用户领奖，监控报警等。 在Java里面实现比较简单，Oracle自己提供了 JavaMail ， 不过API比较底层，用起来不方便，可以自己封装下，也可以直接使用Apache的开源项目 Commons Email…",fields:{slug:"/java-email/"},frontmatter:{title:"Java发送邮件",date:"2015-07-13",category:"Java",tags:["Java","Email","JavaMail","Apache Commons"]}}},{node:{html:'<p>经常遇到一个问题，需要在内存里缓存一批数据来提高效率（避免每次都读取DB）。那问题来了，这些对象到底会占用多大内存呢，这直接决定了可以缓存多少条记录，以及上线之后是否会内存不够等问题。</p>\n<p>来看几种解决方法。</p>\n<!-- more -->\n<h1 id="测试"><a href="#%E6%B5%8B%E8%AF%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试</h1>\n<p>实践是检验真理的唯一标准！比如你要想cache10w条记录，那你就把10w条记录加载到内存，然后看看到底用了多少内存。至于怎么看内存花了多少，你可以</p>\n<ol>\n<li>任务管理器</li>\n<li>top</li>\n<li>Java Runtime类</li>\n<li>blabla。。。。</li>\n</ol>\n<p>我们来看看直接从Java程序里能获取到的Runtime。</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Created by magicalli on 2015/2/3.\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMemory</span> <span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> a<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--- Memory Usage ---:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Runtime rt <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//打印总内存大小 //打印空闲内存大小 //打印已用内存大小 单位(字节)</span>\n        <span class="token keyword">long</span> usedMemory <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> rt<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total Memory= "</span> <span class="token operator">+</span> rt<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" Free Memory = "</span> <span class="token operator">+</span> rt<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" Used　Memory="</span> <span class="token operator">+</span> usedMemory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 把你要测试的占用内存的代码放在这里------start--------------</span>\n        <span class="token keyword">final</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        A<span class="token punctuation">[</span><span class="token punctuation">]</span> arrA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>\n<span class="token comment">//            arr2[i] = i;</span>\n<span class="token comment">//            arrA[i] = new A();</span>\n        <span class="token punctuation">}</span>\n<span class="token comment">//        List&lt;Integer> list = new ArrayList&lt;Integer>();</span>\n        Map<span class="token generics function"><span class="token punctuation">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics function"><span class="token punctuation">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//        for (int i = 0; i &lt; N; i++) {</span>\n<span class="token comment">//            list.add(i);</span>\n<span class="token comment">//            map.put(i, UUID.randomUUID().toString());</span>\n<span class="token comment">//        }</span>\n<span class="token comment">//        System.out.println(map.size());</span>\n        <span class="token comment">// 把你要测试的占用内存的代码放在这里------end--------------</span>\n\n        <span class="token keyword">long</span> usedMemory2 <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> rt<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total Memory= "</span> <span class="token operator">+</span> rt<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" Free Memory = "</span> <span class="token operator">+</span> rt<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" Used　Memory="</span> <span class="token operator">+</span> usedMemory2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">long</span> objMemory <span class="token operator">=</span> usedMemory2 <span class="token operator">-</span> usedMemory<span class="token punctuation">;</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"object use memory: "</span> <span class="token operator">+</span> objMemory <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">"k"</span> <span class="token operator">+</span> <span class="token string">" each is: "</span> <span class="token operator">+</span> objMemory <span class="token operator">/</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>上面方法的最大好处就是可以直接获得实际占用内存大小，是比较简单有效的方法。不好的地方就是如果数据量比较小，可能偏差比较大，而且你也不能解释为什么Integer[]比int[]占用内存大很多，关键是专家说：这种内存占用应该是心里算出来的，你还要去run一下程序，明显就low了，还想晋级？再练练吧！所以我们来看看怎么掐指一算！</p>\n<h1 id="计算"><a href="#%E8%AE%A1%E7%AE%97" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>计算</h1>\n<p>这个需要了解JVM里的内存分布，知道每个对象都有object header，blabal。这里推荐一篇好文<a href="http://www.cnblogs.com/magialmoon/p/3757767.html">一个Java对象到底占用多大内存？</a>，我就不重复了。</p>\n<p>还看到另一种计算方式，用的Unsafe，不过感觉没有前面用Instrumentation的好。参考这里<a href="http://blog.csdn.net/bobpauline/article/details/20699233">Java计算一个对象占用内存的大小</a></p>\n<h1 id="线上查看"><a href="#%E7%BA%BF%E4%B8%8A%E6%9F%A5%E7%9C%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>线上查看</h1>\n<p>如果是要查看线上程序哪个对象占用了大量内存（比如分析内存泄露），那么可以使用jmap。</p>\n<h1 id="相关知识"><a href="#%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>相关知识</h1>\n<p>你可能需要了解jps，jinfo，打包jar，manifest，查看jvm运行参数等。</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ol>\n<li><a href="http://www.importnew.com/14948.html">http://www.importnew.com/14948.html</a></li>\n<li><a href="http://www.cnblogs.com/magialmoon/p/3757767.html">http://www.cnblogs.com/magialmoon/p/3757767.html</a></li>\n<li><a href="http://www.oschina.net/question/1_4486">http://www.oschina.net/question/1_4486</a></li>\n<li><a href="http://blog.csdn.net/bobpauline/article/details/20699233">http://blog.csdn.net/bobpauline/article/details/20699233</a></li>\n<li><a href="http://happyqing.iteye.com/blog/2013639">http://happyqing.iteye.com/blog/2013639</a></li>\n<li><a href="http://sunqi.iteye.com/blog/1917802">http://sunqi.iteye.com/blog/1917802</a></li>\n<li><a href="http://www.blogjava.net/stone2083/archive/2013/06/08/400410.html">http://www.blogjava.net/stone2083/archive/2013/06/08/400410.html</a></li>\n<li><a href="http://yueyemaitian.iteye.com/blog/2033046">http://yueyemaitian.iteye.com/blog/2033046</a></li>\n<li><a href="http://www.ibm.com/developerworks/cn/java/j-lo-jse61/index.html">http://www.ibm.com/developerworks/cn/java/j-lo-jse61/index.html</a></li>\n<li><a href="http://www.ibm.com/developerworks/cn/java/j-lo-instrumentation/">http://www.ibm.com/developerworks/cn/java/j-lo-instrumentation/</a></li>\n</ol>\n<blockquote>\n<p>Written with <a href="https://stackedit.io/">StackEdit</a>.</p>\n</blockquote>',
timeToRead:2,excerpt:"经常遇到一个问题，需要在内存里缓存一批数据来提高效率（避免每次都读取DB）。那问题来了，这些对象到底会占用多大内存呢，这直接决定了可以缓存多少条记录，以及上线之后是否会内存不够等问题。 来看几种解决方法。 测试 实践是检验真理的唯一标准！比如你要想cache10w…",fields:{slug:"/how-big-is-a-java-object/"},frontmatter:{title:"一个Java对象到底有多大",date:"2015-06-13",category:"Java",tags:["Java","JVM","Java反射"]}}},{node:{html:'<p>java5之后的java.util.concurrent包是世界级并发大师Doug Lea的作品，里面主要实现了</p>\n<ol>\n<li>atomic包里Integer/Long对应的原子类，主要基于CAS；</li>\n<li>一些同步子，包括Lock，CountDownLatch，Semaphore，FutureTask等，这些都是基于AbstractQueuedSynchronizer类；</li>\n<li>关于线程执行的Executors类等；</li>\n<li>一些并发的集合类，比如ConcurrentHashMap，ConcurrentLinkedQueue，CopyOnWriteArrayList等。</li>\n</ol>\n<p>今天我们主要介绍AbstractQueuedSynchronizer这个可以说是最核心的类，没有之一。整个concurrent包里，基本都直接或间接地用到了这个类。Doug Lea的这篇<a href="http://gee.cs.oswego.edu/dl/papers/aqs.pdf">论文</a>里面讲AQS的实现。</p>\n<!-- more -->\n<h1 id="aqs"><a href="#aqs" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AQS</h1>\n<p>首先，我们来想象一下，一间屋里有一个大家都想要得到的会让你很爽的东西（something which makes you so happy, e.g. W.C）。当有人进去把门关起来在独占享用的时候，其他人就只能在外面排队等待，既然在等待，你就不能老是去敲门说哎，好了没有啊。老是这样的话里面的人就很不爽了，而且你可以利用这点等待时间干点别的，比如看看小说视频背背单词或者就干脆椅子上睡觉，当前面独占的人爽完之后，就会出来说，啊，好爽，到你们了。然后大家可能按照排队顺序获取或者大家疯抢这个状态，有可能一个人自己进去独占，有可能几个人说，哎没关系，我们可以一起来。然后他们进去爽，爽完之后再出来通知下一个。</p>\n<p>我们来把上面这段话翻译成AQS里面的术语。有一个状态state，会有多个Thread尝试获取，当一个Thread独占（EXCLUSIVE，比如Lock）之后，其他后面到来的Thread就会被放到一个Queue的队尾（tail），然后睡眠（park），一直等到前面的Thread唤醒（unpark）它，当然这里有可能被假唤醒（就好比你定了闹钟8点起床，结果7点就自然醒或者被外面车吵醒），所以这个Thread会判断一下是不是到自己了，没有的话就继续park（在一个死循环里）；当拥有state的Thread释放（release）之后，它会唤醒Queue中的下一个Thread（unparkSuccessor）。然后下一个Thread获取（acquire）到state，完成自己的任务，然后继续unparkSuccessor。前面主要说的是EXCLUSIVE模式，AQS还支持共享（SHARED）模式，区别在于尝试获取（tryAcquireShared）的时候即使之前已经有Thread获取了state，但是可能仍然能获取（比如ReadLock）。同样释放（doReleaseShared）的时候除了通知Queue里面第一个（head），还会继续通知后续的节点（Node），只要它们是SHARED。</p>\n<p>AQS就是实现了：</p>\n<ol>\n<li>自动管理这个同步状态state（int类型），更新的时候需要用CAS保证原子性</li>\n<li>阻塞和唤醒线程park/unpark</li>\n<li>队列管理，一个双向链表实现queue</li>\n</ol>\n<p>AQS是一个abstract class，可以通过继承AQS，定义state的含义，以及tryAcquire，tryRelease，以及对应的share模式下tryAcquireShared，tryReleaseShared这几个方法，定义出自己想要的同步子（Synchronizers）。一般而言，是定义一个内部类Sync extends AQS，实现前面说的几个方法，然后再包一层，暴露出相应的方法。这样做的好处是你可以在包装器类里面取更直观的名字，如ReentrantLock里的lock，unlock和CountDownLatch里的countDown，await，而不是太通用的acquire和release等。而且AQS里面一些方法是为了监控和调试使用，直接暴露出来也不好。</p>\n<p>下面我们来看J.U.C里面两个常用的Synchronizers。</p>\n<h1 id="reentrantlock"><a href="#reentrantlock" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ReentrantLock</h1>\n<h2 id="使用"><a href="#%E4%BD%BF%E7%94%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用</h2>\n<p>ReentrantLock的语义跟synchronized关键字基本一样，而且我之前看<a href="http://book.douban.com/subject/6522893/">《深入理解Java虚拟机》</a>里面的评测说JDK6之后，两者的效率基本一致了（JDK5之前ReentrantLock要比synchronized快很多）。Javadoc里面说基本用法如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// block until condition holds</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token comment">// ... method body</span>\n    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n      lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="源码"><a href="#%E6%BA%90%E7%A0%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>源码</h2>\n<p>ReentrantLock用state表示是否被锁，0表示没有线程获取到锁，>=1表示某个线程获取了N次锁（因为是重入的，只要保证lock和unlock成对出现就没有问题）。</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">    <span class="token comment">/** Synchronizer providing all implementation mechanics */</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> Sync sync<span class="token punctuation">;</span>\n\n    <span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span></code></pre>\n      </div>\n<p>定义了一个内部类，基本任务都代理给sync完成。而Sync又是一个abstract class，这里主要是因为实现了两种抢占锁的机制，公平锁和非公平锁。</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">\t<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span>\n\t\n\t<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonfairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span></code></pre>\n      </div>\n<p>所谓公平不公平简单来说就是本文开头说的，当资源释放的时候，大家是按照排队顺序先到先得，还是有人插队大家疯抢。</p>\n<p>提供了两个构造函数：</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">\t<span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认非公平锁，AQS论文说非公平锁效率高些，理由其实很简单，公平锁通知队列第一个节点，要把它唤醒，而唤醒是需要时间的，在锁释放到第一个节点被唤醒这段时间其实锁是可以用但是没有被用的（available but not used）；而非公平锁，释放了之后立马就可以被别人用，所以提高了效率，但是有可能导致饥饿锁，这个就要具体看业务需求了。</span>\n    <span class="token punctuation">}</span>\n\n\t<span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定公平与否</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>加锁的实现</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        sync<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>简单代理给了sync，在FairSync里为</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">\t<span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>acquire的实现在AQS里面：</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n            <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>tryAcquire是要在子类里自己实现的，在FairSync如下;</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">\t\t <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//0表示锁没有被线程用，1表示已经有线程占用</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">//判断自己是否是第一个节点，实现公平</span>\n                    <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//CAS更新状态</span>\n                    <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置当前线程拥有状态</span>\n                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//1表示已经有线程占用，再判断一下是否被当前线程占用，来实现重入（Reentrant）特性</span>\n                <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新状态</span>\n                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>如果获取失败，addWaiter(Node.EXCLUSIVE)将当前线程加入队尾</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">\t<span class="token keyword">private</span> Node <span class="token function">addWaiter</span><span class="token punctuation">(</span>Node mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用当前线程构造Node，独占模式</span>\n        <span class="token comment">// Try the fast path of enq; backup to full enq on failure</span>\n        Node pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//快速判断，CAS更新tail节点</span>\n                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>\n                <span class="token keyword">return</span> node<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果失败，进入enq方法</span>\n        <span class="token keyword">return</span> node<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n\t <span class="token keyword">private</span> Node <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Must initialize</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果还没有head，CAS初始化一个head</span>\n                    tail <span class="token operator">=</span> head<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//这段代码跟addWaiter里一样，CAS更新tail节点</span>\n                node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>\n                    <span class="token keyword">return</span> t<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>现在我们已经将获取不到锁的线程加入队尾了，现在要将它挂起acquireQueued(addWaiter(Node.EXCLUSIVE), arg))：</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">\t<span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//在一个死循环中，避免假唤醒</span>\n                <span class="token keyword">final</span> Node p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前节点的前一个节点，如果是head说明自己是第一个可以获取资源的线程，实现公平</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//是第一个可以获取资源的线程并且尝试获取成功</span>\n                    <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment">// help GC</span>\n                    failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n                    <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n                    <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//没有获取到资源，睡眠park去</span>\n                    interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>\n                <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n\t<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>上面完成了获取锁的过程，简单来说就是尝试获取，失败就加入队尾，挂起，等待被唤醒。</p>\n<p>下面来看看释放锁</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代理给sync，调用AQS的release</span>\n    <span class="token punctuation">}</span>\n\n<span class="token comment">//下面代码在AQS中</span>\n\t<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//尝试释放资源，需要在子类里实现</span>\n            Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n                <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通知下一个节点</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n\t<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">/*\n         * If status is negative (i.e., possibly needing signal) try\n         * to clear in anticipation of signalling.  It is OK if this\n         * fails or if status is changed by waiting thread.\n         */</span>\n        <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n            <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * Thread to unpark is held in successor, which is normally\n         * just the next node.  But if cancelled or apparently null,\n         * traverse backwards from tail to find the actual\n         * non-cancelled successor.\n         */</span>\n         <span class="token comment">// 主要在这里找到下一个需要通知的节点，如果node.next就是需要通知的节点，则直接通知；否则，可能node.next == null（原因是双向链表设置b.pre = a和a.next = b的时候不能保证原子性，只能保证b.pre = a成功，这时候另一条线程可能看到a.next == null）或者s.waitStatus > 0（原因是线程等不及被取消了static final int CANCELLED = 1;），这个时候就要从队尾tail开始找，找到离队头head最近的一个需要通知的节点Node。</span>\n        Node s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            s <span class="token operator">=</span> null<span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n                    s <span class="token operator">=</span> t<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> null<span class="token punctuation">)</span>\n            LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//唤醒线程</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>看看需要在子类里实现的tryRelease：</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">\t\t<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span><span class="token comment">//释放锁，state减去相应的值</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//避免A线程锁了之后，B线程故意捣乱释放锁</span>\n            <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//当前线程已经完全释放了锁</span>\n                free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放锁的拥有者</span>\n            <span class="token punctuation">}</span>\n            <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置状态，这个方面没有同步，没有CAS，有同学问过岂不是有线程并发问题？其实到这里，只有一个线程会调用这个方法，所以不会有并发错误，仔细想想，是吧？是吧？</span>\n            <span class="token keyword">return</span> free<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>到这里，基本都已经完成，对了，还没有说非公平锁NonfairSync是怎么抢占锁的。</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">\t\t<span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//先抢一把（插队），万一成功了就不排队，不公平性就体现在这里！</span>\n                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">else</span>\n                <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>跟FairSync.lock()对比，可以看出，只是在acquire(1)之前，先抢一把，抢不到才乖乖的去排队。</p>\n<p>我们再看看NonfairSync.tryAcquire()怎么实现的</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">\t\t<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用父类方法nonfairTryAcquire</span>\n        <span class="token punctuation">}</span>\n\n\t\t<span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//跟FairSync.tryAcquire只有这里一行有差异，即少了!hasQueuedPredecessors()，也就是说不判断前面有没有人，任何时候只要它醒来，都会去抢，所以不公平！============刚又看了一遍，发现其实final boolean acquireQueued(final Node node, int arg)方法里已经有node.predecessor() == head的判断，感觉这个不公平的tryAcquire貌似没有意义，各位看官怎么看呢，请留言哈，谢谢~</span>\n                    <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>\n                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span></code></pre>\n      </div>\n<h1 id="countdownlatch"><a href="#countdownlatch" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CountDownLatch</h1>\n<p>我们之前说了，AQS支持独占EXCLUSIVE和共享SHARED两种模式，而刚刚的ReentrantLock的就是独占模式，我们来看看一个使用共享模式的类。</p>\n<h2 id="使用-1"><a href="#%E4%BD%BF%E7%94%A8-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用</h2>\n<p>CountDownLatch就好比一道门，它可以用来等所有资源都到齐了，才开门，让这些线程同时通过。比如如下是CountDownLatch一个通用用法：</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java"><span class="token keyword">package</span> concurrentStudy<span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Created by magicalli on 2014/12/13.\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexPlusPlusTest01</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NThreads <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 线程数</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span><span class="token comment">//循环次数，太小的话（比如10）可能看不出来效果</span>\n    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//加volatile的目的是为了证明volatile没有“原子性”！</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>\n        <span class="token keyword">final</span> CountDownLatch startGate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">final</span> CountDownLatch endGate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>NThreads<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NThreads<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token annotation punctuation">@Override</span>\n                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                        startGate<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//所有线程start之后等待“门“打开，保证同时真正开始运行</span>\n                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n\n                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        n <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n\n                    endGate<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        startGate<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开“门”，让所有线程同时run起来</span>\n        <span class="token keyword">long</span> t1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        endGate<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等所有线程都结束之后才打印n，否则总是会打出错误的n；我见过这里用Thread.sleep()，但是问题在于，你怎么知道该等多久才能保证所有线程结束以及刚好结束呢？！</span>\n        <span class="token keyword">long</span> t2 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cost time: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n: "</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>对了，上面代码是拿来验证volatile不具备原子性的，是错误的代码哦。如果想并发安全，大家可以想想可以用哪些方式实现。</p>\n<h2 id="源码-1"><a href="#%E6%BA%90%E7%A0%81-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>源码</h2>\n<p>CountDownLatch同样也是定义了一个继承自AQS的内部类Sync：</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">\t<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span></code></pre>\n      </div>\n<p>构造函数如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">CountDownLatch</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"count &lt; 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sync</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>count表示有多少个任务还在运行，每个Thread完成了任务或者准备好开始之前，就会调用countDown方法将count-1，当count==0时候，await就不再阻塞，所有在上面阻塞的Thread都可以顺利通过。</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>\n        sync<span class="token punctuation">.</span><span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>直接调用AQS的acquireSharedInterruptibly方法，从方法名可以看出，支持中断响应</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>\n            <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//响应中断</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n            <span class="token function">doAcquireSharedInterruptibly</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>tryAcquireShared在子类中实现：</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">        <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//如果state为0，说明所有Thread完成任务，可以不阻塞了</span>\n        <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>如果没有获取到，将Thread加入队尾，挂起。下面这个方法跟独占模式下acquireQueued(addWaiter(Node.EXCLUSIVE), arg))这个方法代码是基本一致的。</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">\t<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doAcquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>\n        <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>\n        <span class="token keyword">final</span> Node node <span class="token operator">=</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>SHARED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//共享模式</span>\n        <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">final</span> Node p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token function">setHeadAndPropagate</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//跟EXCLUSIVE的一大区别</span>\n                        p<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment">// help GC</span>\n                        failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n                        <span class="token keyword">return</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n                    <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//响应中断，这里直接抛异常</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>\n                <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n\t<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setHeadAndPropagate</span><span class="token punctuation">(</span>Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> propagate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        Node h <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment">// Record old head for check below</span>\n        <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">/*\n         * Try to signal next queued node if:\n         *   Propagation was indicated by caller,\n         *     or was recorded (as h.waitStatus either before\n         *     or after setHead) by a previous operation\n         *     (note: this uses sign-check of waitStatus because\n         *      PROPAGATE status may transition to SIGNAL.)\n         * and\n         *   The next node is waiting in shared mode,\n         *     or we don\'t know, because it appears null\n         *\n         * The conservatism in both of these checks may cause\n         * unnecessary wake-ups, but only when there are multiple\n         * racing acquires/releases, so most need signals now or soon\n         * anyway.\n         */</span>\n         <span class="token comment">// 如果当前节点是愿意共享，并且下一个节点也是愿意共享的，那么就进入doReleaseShared，唤醒下一个节点，下面会详解</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>propagate <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> h <span class="token operator">==</span> null <span class="token operator">||</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>\n            <span class="token punctuation">(</span>h <span class="token operator">=</span> head<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            Node s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>前面完成了等待CountDownLatch的count变成0的过程，下面看看countDown</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        sync<span class="token punctuation">.</span><span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用AQS的</span>\n    <span class="token punctuation">}</span>\n\n\t<span class="token comment">// AQS中</span>\n\t<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryReleaseShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//尝试释放，需要在子类中实现</span>\n            <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//真正释放</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n\t\t<span class="token comment">// Sync子类中实现</span>\n\t    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// Decrement count; signal when transition to zero</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n                <span class="token keyword">int</span> nextc <span class="token operator">=</span> c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> nextc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 在死循环中CAS将count-1</span>\n                    <span class="token keyword">return</span> nextc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        \n    <span class="token comment">// AQS中</span>\n\t<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">/*\n         * Ensure that a release propagates, even if there are other\n         * in-progress acquires/releases.  This proceeds in the usual\n         * way of trying to unparkSuccessor of head if it needs\n         * signal. But if it does not, status is set to PROPAGATE to\n         * ensure that upon release, propagation continues.\n         * Additionally, we must loop in case a new node is added\n         * while we are doing this. Also, unlike other uses of\n         * unparkSuccessor, we need to know if CAS to reset status\n         * fails, if so rechecking.\n         */</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">int</span> ws <span class="token operator">=</span> h<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                        <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment">// loop to recheck cases</span>\n                    <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历queue，通知所有SHARED的节点，因为是共享模式，这些Node都应该被唤醒，直到遇到某个EXCLUSIVE的Node</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>\n                         <span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Node<span class="token punctuation">.</span>PROPAGATE<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token comment">// loop on failed CAS</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> head<span class="token punctuation">)</span>                   <span class="token comment">// loop if head changed</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>unparkSuccessor跟之前独占模式里面的是同一个函数，即调用unpark唤醒Thread。</p>\n<p>我们知道为了避免获取不到锁长时间等待，一般阻塞的方法都会支持带超时时间的方法，比如CountDownLatch里就有</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">\t<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>\n        <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquireSharedNanos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>调用AQS里面的tryAcquireSharedNanos方法</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquireSharedNanos</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">,</span> <span class="token keyword">long</span> nanosTimeout<span class="token punctuation">)</span>\n            <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span>\n            <span class="token function">doAcquireSharedNanos</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> nanosTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n\t<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">doAcquireSharedNanos</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">,</span> <span class="token keyword">long</span> nanosTimeout<span class="token punctuation">)</span>\n            <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nanosTimeout <span class="token operator">&lt;=</span> <span class="token number">0</span>L<span class="token punctuation">)</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token keyword">final</span> <span class="token keyword">long</span> deadline <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nanosTimeout<span class="token punctuation">;</span>\n        <span class="token keyword">final</span> Node node <span class="token operator">=</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>SHARED<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">final</span> Node p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token function">setHeadAndPropagate</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        p<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment">// help GC</span>\n                        failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n                nanosTimeout <span class="token operator">=</span> deadline <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>nanosTimeout <span class="token operator">&lt;=</span> <span class="token number">0</span>L<span class="token punctuation">)</span>\n                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//如果已经没时间了，直接return false</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n                    nanosTimeout <span class="token operator">></span> spinForTimeoutThreshold<span class="token punctuation">)</span><span class="token comment">//大于某个阈值，才park，否则进入自旋</span>\n                    LockSupport<span class="token punctuation">.</span><span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nanosTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用带超时的park方法</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>\n                <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>可以看到，跟不带超时的doAcquireSharedInterruptibly方法相比，区别主要在于每次for循环期间，检查时间是否过期和调用带超时的park。nanosTimeout > spinForTimeoutThreshold这个判断主要是因为park/unpark本身也需要花时间，为了更准确地完成超时的机制，在超时时间马上就要到了的时候，就进入自旋，不再park了，这应该是Doug Lea测试了park/unpark时间比1000纳秒要长吧。</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">\t<span class="token comment">/**\n     * The number of nanoseconds for which it is faster to spin\n     * rather than to use timed park. A rough estimate suffices\n     * to improve responsiveness with very short timeouts.\n     */</span>\n    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> spinForTimeoutThreshold <span class="token operator">=</span> <span class="token number">1000</span>L<span class="token punctuation">;</span></code></pre>\n      </div>\n<h1 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h1>\n<p>J.U.C里AQS是一个相当核心的类，可以说没有它就没有J.U.C包。推荐大家看看<a href="http://gee.cs.oswego.edu/dl/papers/aqs.pdf">AQS</a>这篇论文（网上有一些翻译，推荐大家还是看原文吧）。主要是用一个state表示状态，子类可以根据需要来定义state的含义，以及获取释放资源时具体如何操作state，当然需要通过CAS实现原子更改。当获取不到state的时候，线程加入队列，挂起。释放之后，唤醒队列中的线程。AQS支持两种模式，独占EXCLUSIVE和共享SHARED。J.U.C里本身也有很多直接继承AQS实现的类，包括Lock，CountDownLatch，Semaphore，FutureTask等，如果这些还不能满足你的使用，那么可以直接继承AQS来实现需要。</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ol>\n<li><a href="http://gee.cs.oswego.edu/dl/papers/aqs.pdf">http://gee.cs.oswego.edu/dl/papers/aqs.pdf</a></li>\n<li><a href="http://ifeve.com/introduce-abstractqueuedsynchronizer/">http://ifeve.com/introduce-abstractqueuedsynchronizer/</a></li>\n<li><a href="http://ifeve.com/jdk1-8-abstractqueuedsynchronizer/">http://ifeve.com/jdk1-8-abstractqueuedsynchronizer/</a></li>\n<li><a href="http://ifeve.com/jdk1-8-abstractqueuedsynchronizer-part2/">http://ifeve.com/jdk1-8-abstractqueuedsynchronizer-part2/</a></li>\n<li><a href="http://book.douban.com/subject/6522893/">http://book.douban.com/subject/6522893/</a></li>\n<li><a href="http://my.oschina.net/magicly007/blog/364102">http://my.oschina.net/magicly007/blog/364102</a></li>\n</ol>\n<blockquote>\n<p>Written with <a href="https://stackedit.io/">StackEdit</a>.</p>\n</blockquote>',
timeToRead:9,excerpt:"java5之后的java.util.concurrent包是世界级并发大师Doug Lea的作品，里面主要实现了 atomic包里Integer/Long对应的原子类，主要基于CAS； 一些同步子，包括Lock，CountDownLatch，Semaphore…",fields:{slug:"/java-concurrrency-3-juc-source-code-read/"},frontmatter:{title:"Java Concurrency（三）——J.U.C AQS源码解读",date:"2015-01-13",category:"Java",tags:["Java","concurrency","jdk","源码阅读"]}}},{node:{html:'<p>java5之后的java.util.concurrent包是世界级并发大师Doug Lea的作品，里面主要实现了</p>\n<ol>\n<li>atomic包里Integer/Long对应的原子类，主要基于CAS；</li>\n<li>一些同步子，包括Lock，CountDownLatch，Semaphore，FutureTask等，这些都是基于AbstractQueuedSynchronizer类；</li>\n<li>关于线程执行的Executors类等；</li>\n<li>一些并发的集合类，比如ConcurrentHashMap，ConcurrentLinkedQueue，CopyOnWriteArrayList等。</li>\n</ol>\n<p>今天我们主要介绍atomic包下相关内容。</p>\n<!-- more -->\n<h1 id="cas"><a href="#cas" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CAS</h1>\n<p>atomic包下的类主要基于现代主流 CPU 都支持的一种指令，Compare and Swap（CAS），这个指令能为多线程编程带来更好的性能。引用《Java Concurrency in Practice》里的一段描述：</p>\n<blockquote>\n<p>在这里，CAS 指的是现代 CPU 广泛支持的一种对内存中的共享数据进行操作的一种特殊指令。这个指令会对内存中的共享数据做原子的读写操作。简单介绍一下这个指令的操作过程：首先，CPU 会将内存中将要被更改的数据与期望的值做比较。然后，当这两个值相等时，CPU 才会将内存中的数值替换为新的值。否则便不做操作。最后，CPU 会将旧的数值返回。这一系列的操作是原子的。它们虽然看似复杂，但却是 Java 5 并发机制优于原有锁机制的根本。简单来说，CAS 的含义是“我认为原有的值应该是什么，如果是，则将原有的值更新为新值，否则不做修改，并告诉我原来的值是多少”。</p>\n</blockquote>\n<h1 id="atomicinteger"><a href="#atomicinteger" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AtomicInteger</h1>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>AtomicInteger里面只包含一个字段，用来记录当前值，定义为volatile是为了满足<strong>可见性</strong>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">  <span class="token comment">// setup to use Unsafe.compareAndSwapInt for updates</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Unsafe unsafe <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span>\n\n    <span class="token keyword">static</span> <span class="token punctuation">{</span>\n      <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        valueOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span>objectFieldOffset\n            <span class="token punctuation">(</span>AtomicInteger<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>一开始定义了static变量Unsafe，AtomicInteger里面的方法都是对unsafe里面</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">,</span> <span class="token keyword">int</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>方法的封装。\n我们来看原子性的i++，</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">int</span> current <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">int</span> next <span class="token operator">=</span> current <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">return</span> current<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>在一个无限循环里面，首先获取当前值，用当前值+1，然后调用</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>unsafe.compareAndSwapInt(this, valueOffset, expect, update)的含义是把this对象里面valueOffset（在一开始static代码里面获取）这个位置（即value值）跟expect比较，如果相等，则修改为update，返回true；如果不相等，说明在获取到current之后有其他线程修改过value的值，则重新来一遍，一直到修改成功为止。这里就可以看出，理论上来说，这个方法是有可能永远不能返回的，实际而言，当并发冲突很严重，反复compareAndSet(current, next)失败，有可能也需要花费很多时间。</p>\n<p>AtomicInteger里面的其他方法，基本类似；其他类包括AtomicLong，AtomicReference等也是基本对Unsafe里面compareAndSet的一个封装。</p>\n<h1 id="unsafe"><a href="#unsafe" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Unsafe</h1>\n<p>前面可以看到Unsafe类在实现atomic的重要性。为什么有Unsafe这个class呢，基本原因是Java不允许代码直接操作内存，好处是更安全，一般不会出现内存泄露，因为有JVM的GC；坏处是有些底层调用执行不了。我的理解是，Unsafe就是这个java安全围城通向比如c++这个不安全外围的一道门，所以叫Unsafe嘛。Unsafe里面基本都是native，即通过JNI调用c/c++等代码。大部分是直接内存操作，以及后面会讲到的挂起唤醒线程等，包括park和unpark。</p>\n<p>前面到</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">,</span> <span class="token keyword">int</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>这个方法就不是java代码了，如果想看实现的话，需要下载OpenJDK源码，里面是c++代码调用汇编代码，blabla。我不建议大家再往下继续了，原因有几个，一是我们用java等高级语言的目的就是为了避免纠结复杂的底层细节，站在更高层的角度思考问题，而且java里面还有更多的问题等待你去解决，更多的知识可以学习呢！如果你说你已经把java完全掌握了，包括把jdk源码，tomcat、spring，xxxxx源码都看过了，实在没得看了，那我会说，多陪陪家人吧~除非你是JVM开发工程师，哦，那不好意思，大神，当我啥都没说。。。。为了完整性，我贴几个参考链接<a href="http://www.blogjava.net/mstar/archive/2013/04/24/398351.html">http://www.blogjava.net/mstar/archive/2013/04/24/398351.html</a>, <a href="http://zl198751.iteye.com/blog/1848575">http://zl198751.iteye.com/blog/1848575</a>.</p>\n<p>那么如果获取Unsafe呢？Unsafe有一个static方法可以获取Unsafe实例，如下</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> Unsafe <span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        Class <span class="token class-name">var0</span> <span class="token operator">=</span> Reflection<span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>var0<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SecurityException</span><span class="token punctuation">(</span><span class="token string">"Unsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> theUnsafe<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>可是你如果在自己代码里使用，可以编译通过，但是运行时候报错。因为里面限制了调用getUnsafe()这个方法的类必须是启动类加载器Bootstrap Loader。所以如果想在自己代码里面调用Unsafe的话（强烈建议不要这样子做），可以用Java的反射来实现：</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UnsafeSupport</span> <span class="token punctuation">{</span>\n        <span class="token keyword">private</span> <span class="token keyword">static</span> Unsafe unsafe<span class="token punctuation">;</span>\n\n        <span class="token keyword">static</span> <span class="token punctuation">{</span>\n            Field field<span class="token punctuation">;</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 由反编译Unsafe类获得的信息</span>\n                field <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">// 获取静态属性,Unsafe在启动JVM时随rt.jar装载</span>\n                unsafe <span class="token operator">=</span> <span class="token punctuation">(</span>Unsafe<span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">public</span> <span class="token keyword">static</span> Unsafe <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token comment">//            return Unsafe.getUnsafe();//没有用，只能native获取，否则会抛异常</span>\n            <span class="token keyword">return</span> unsafe<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>    </code></pre>\n      </div>\n<p>获取到了Unsafe的实例之后，你照样可以自己实现Atomic类，再说一遍，强烈建议不要这样做！！！</p>\n<h1 id="cas优点"><a href="#cas%E4%BC%98%E7%82%B9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CAS优点</h1>\n<p>Compare and Set 是一个非阻塞的算法，这是它的优势。因为使用的是CPU支持的指令，提供了比原有的并发机制更好的性能和伸缩性。可以认为一般情况下性能更好，并且也更容易使用（这才是关键啊）。</p>\n<h1 id="cas缺点"><a href="#cas%E7%BC%BA%E7%82%B9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CAS缺点</h1>\n<h2 id="aba问题"><a href="#aba%E9%97%AE%E9%A2%98" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ABA问题</h2>\n<p>CAS操作容易导致ABA问题,也就是在做a++之间，a可能被多个线程修改过了，只不过回到了最初的值，这时CAS会认为a的值没有变。a在外面逛了一圈回来，你能保证它没有做任何坏事，不能！！也许它讨闲，把b的值减了一下，把c的值加了一下等等。解决ABA问题的方法有很多，可以考虑增加一个修改计数（版本号），只有修改计数不变的且a值不变的情况下才做a++，atomic包下有AtomicStampedReference类做这个事情，这和事务原子性处理有点类似！</p>\n<h2 id="循环时间长开销大"><a href="#%E5%BE%AA%E7%8E%AF%E6%97%B6%E9%97%B4%E9%95%BF%E5%BC%80%E9%94%80%E5%A4%A7" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>循环时间长开销大</h2>\n<ol>\n<li>即使没有任何争用也会做一些无用功</li>\n<li>如果冲突比较严重的话，可能导致多次修改失败，for循环时间很长，可能比同步还慢</li>\n</ol>\n<p>我在自己的电脑上用100个线程去修改一个共享变量，发现用AtomicInteger就比synchronized慢，但是都很快！所以还是那个建议，不要过早优化，不要纠结到底是1ms还是2ms，除非测试之后发现确实是性能瓶颈，然后再仔细看一下，是不是代码的使用有问题，要相信，能写到JDK里的代码，一般都不会有问题。一般不到一天几千万上亿的PV，应该是没啥问题的。而且JVM对synchronized做了很多优化，包括锁去除（Lock Elimination），轻量级锁，偏向锁等，所以写代码的时候首先还是主要考虑代码正确、清晰、可维护。</p>\n<h2 id="只能保证一个共享变量的原子操作"><a href="#%E5%8F%AA%E8%83%BD%E4%BF%9D%E8%AF%81%E4%B8%80%E4%B8%AA%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F%E7%9A%84%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>只能保证一个共享变量的原子操作</h2>\n<p>如果并发约束条件涉及到两个变量，就不能用两个原子变量来达到整体的原子性，还是得用同步。当然你也可以用一个变通的方法，定义一个class，里面包含约束条件涉及到的变量，然后用AtomicReference来实现原子性。</p>\n<h1 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h1>\n<p>atomic包下的类比如AtomicInteger实现原子性的方法主要是依靠现代主流 CPU 都支持的CAS指令，它是通过Unsafe类的native方法调用的。一般而言性能比用锁同步要好，但是都已经很好了，一般而言不会遇到性能问题，关键还是看它的语义是否满足使用要求，以及是否可以让代码更清新。</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ol>\n<li><a href="http://my.oschina.net/lifany/blog/133513">http://my.oschina.net/lifany/blog/133513</a></li>\n<li><a href="http://zl198751.iteye.com/blog/1848575">http://zl198751.iteye.com/blog/1848575</a></li>\n<li><a href="http://blog.csdn.net/aesop_wubo/article/details/7537960">http://blog.csdn.net/aesop_wubo/article/details/7537960</a></li>\n<li><a href="http://my.oschina.net/u/177808/blog/166819">http://my.oschina.net/u/177808/blog/166819</a></li>\n<li><a href="http://www.blogjava.net/mstar/archive/2013/04/24/398351.html">http://www.blogjava.net/mstar/archive/2013/04/24/398351.html</a></li>\n<li><a href="http://mishadoff.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/">http://mishadoff.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/</a></li>\n<li><a href="http://zeroturnaround.com/rebellabs/dangerous-code-how-to-be-unsafe-with-java-classes-objects-in-memory/">http://zeroturnaround.com/rebellabs/dangerous-code-how-to-be-unsafe-with-java-classes-objects-in-memory/</a></li>\n<li><a href="http://www.pwendell.com/2012/08/13/java-lock-free-deepdive.html">http://www.pwendell.com/2012/08/13/java-lock-free-deepdive.html</a></li>\n</ol>',timeToRead:4,excerpt:"java5之后的java.util.concurrent包是世界级并发大师Doug Lea的作品，里面主要实现了 atomic包里Integer/Long对应的原子类，主要基于CAS； 一些同步子，包括Lock，CountDownLatch，Semaphore…",fields:{slug:"/juc-source-code-read-atomic/"},frontmatter:{title:"J.U.C源码解读之atomic",date:"2015-01-13",category:"Java",tags:["Java","concurrency","jdk","源码阅读"]}}}]}},pathContext:{}}}});
//# sourceMappingURL=path---archives-3bf541418d660688b523.js.map
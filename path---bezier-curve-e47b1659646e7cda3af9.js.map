{"version":3,"sources":["webpack:///path---bezier-curve-e47b1659646e7cda3af9.js","webpack:///./.cache/json/bezier-curve.json"],"names":["webpackJsonp","591","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","timeToRead","frontmatter","date","category","tags","math","pathContext","prev","url","slug","next"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,iBAAAC,OAAA,YAA6CC,gBAAmBC,GAAA,0GAAAC,KAAA,umaAAs+XC,WAAA,EAAAC,aAA+tDN,MAAA,eAAAO,KAAA,aAAAC,SAAA,KAAAC,MAAA,uCAAAC,KAAA,QAAwHC,aAAgBC,MAAQC,IAAA,eAAAb,MAAA,UAAsCc,KAAA,iBAAAC,MAAiCF,IAAA,sCAAAb,MAAA","file":"path---bezier-curve-e47b1659646e7cda3af9.js","sourcesContent":["webpackJsonp([8199923997814],{\n\n/***/ 591:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Magicly's Blog\",\"author\":\"Magicly\"}},\"markdownRemark\":{\"id\":\"/Users/spring/Developer/Gatsby/gatsby-blog/src/pages/bezier-curve.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1 id=\\\"什么是贝塞尔曲线\\\"><a href=\\\"#%E4%BB%80%E4%B9%88%E6%98%AF%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>什么是贝塞尔曲线</h1>\\n<p>最近做一个动画效果时需要将物体做曲线移动， 本来记得css3里的动画是可以指定beizer curve的， 结果用的时候发现css3的beizer curve只用来做easing timing function。简单来说就是拿来控制动画“非线性”移动，比如越来越快（ease-in）， 越来越慢（ease-out），先慢后快再慢（ease-in-out）等， 让动画效果更“灵动”， 避免线性（linear）的死板。</p>\\n<p>可以看看这两个页面， 有一个直观的感受。</p>\\n<!-- more -->\\n<ul>\\n<li><a href=\\\"http://cubic-bezier.com/\\\">http://cubic-bezier.com/</a></li>\\n<li><a href=\\\"http://easings.net/zh-cn\\\">http://easings.net/zh-cn</a></li>\\n</ul>\\n<p>beizer curve在css3中的使用， 可以自己google一下， 或者看下：</p>\\n<ul>\\n<li><a href=\\\"http://www.w3school.com.cn/css3/css3_transition.asp\\\">http://www.w3school.com.cn/css3/css3_transition.asp</a></li>\\n<li><a href=\\\"http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html\\\">http://www.ruanyifeng.com/blog/2014/02/css<em>transition</em>and_animation.html</a></li>\\n</ul>\\n<p>引用wiki上的介绍：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">    在数学的数值分析领域中，贝塞尔曲线（英语：Bézier curve）是计算机图形学中相当重要的参数曲线。更高维度的广泛化贝塞尔曲线就称作贝塞尔曲面，其中贝塞尔三角是一种特殊的实例。\\n    贝塞尔曲线于1962年，由法国工程师皮埃尔·贝塞尔（Pierre Bézier）所广泛发表，他运用贝塞尔曲线来为汽车的主体进行设计。贝塞尔曲线最初由Paul de Casteljau于1959年运用de Casteljau算法开发，以稳定数值的方法求出贝塞尔曲线。</code></pre>\\n      </div>\\n<p>有数学功底或者有兴趣的可以参考下面几篇文章， 我就不赘述了（最讨厌那种什么都要copy过来，弄得好像跟是自己写的样， 别人已经写得很清楚了， 干嘛再重复劳动一遍呢， 又没有自己的新的见解，赠人链接， 手留余香。 😁哈）。</p>\\n<ul>\\n<li><a href=\\\"https://en.wikipedia.org/wiki/B%C3%A9zier_curve\\\">https://en.wikipedia.org/wiki/B%C3%A9zier_curve</a></li>\\n<li><a href=\\\"https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A\\\">https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A</a></li>\\n<li><a href=\\\"http://www.html-js.com/article/1628\\\">http://www.html-js.com/article/1628</a></li>\\n<li><a href=\\\"http://www.cnblogs.com/hnfxs/p/3148483.html\\\">http://www.cnblogs.com/hnfxs/p/3148483.html</a></li>\\n<li></li>\\n</ul>\\n<h1 id=\\\"在线工具\\\"><a href=\\\"#%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>在线工具</h1>\\n<p>下面是几个比较有用的工具， 方便大家。</p>\\n<ul>\\n<li><a href=\\\"http://blogs.sitepointstatic.com/examples/tech/canvas-curves/quadratic-curve.html\\\">http://blogs.sitepointstatic.com/examples/tech/canvas-curves/quadratic-curve.html</a></li>\\n<li><a href=\\\"http://myst729.github.io/bezier-curve/\\\">http://myst729.github.io/bezier-curve/</a></li>\\n<li><a href=\\\"http://xuanfengge.com/easeing/ceaser/\\\">http://xuanfengge.com/easeing/ceaser/</a></li>\\n<li><a href=\\\"http://yisibl.github.io/cubic-bezier/#.17,.67,.83,.67\\\">http://yisibl.github.io/cubic-bezier/#.17,.67,.83,.67</a></li>\\n<li><a href=\\\"http://cubic-bezier.com/#.17,.67,.83,.67\\\">http://cubic-bezier.com/#.17,.67,.83,.67</a></li>\\n</ul>\\n<h1 id=\\\"实现\\\"><a href=\\\"#%E5%AE%9E%E7%8E%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>实现</h1>\\n<p>前面资料都是把bezier curve拿来当timing function的， 而我的需求是要让物体（某个dom节点）沿着某条beizer curve移动，于是继续google， 找到了几个。</p>\\n<ul>\\n<li>Android实现: <a href=\\\"https://github.com/Yasic/QQBubbleView\\\">https://github.com/Yasic/QQBubbleView</a></li>\\n</ul>\\n<p>Android的我用不到， 放这里主要是里面的gif图很直观，哈哈。</p>\\n<ul>\\n<li>CSS实现：<a href=\\\"http://jinlong.github.io/2016/01/14/moving-along-a-curved-path-in-css-with-layered-animation/%EF%BC%8C\\\">http://jinlong.github.io/2016/01/14/moving-along-a-curved-path-in-css-with-layered-animation/，</a> 原文：<a href=\\\"http://tobiasahlin.com/blog/curved-path-animations-in-css/\\\">http://tobiasahlin.com/blog/curved-path-animations-in-css/</a></li>\\n</ul>\\n<p>CSS的实现真是相当tricky， 我解释一下。CSS里面的animation translate是直接按照直线移动到目的地的， 这是因为沿X轴和Y轴都是匀速运动（linear），所以合成之后的速度必然是斜角45°移动过去的。我们可以把X轴看成时间轴， 这时如果Y轴的移动函数是某个beizer curve，那合成之后的移动曲线就是beizer curve了。具体实现的时候还用到了:after伪元素了。</p>\\n<p>复杂一点的我觉得还是需要用js去控制， 于是自然想到了用js代码去按照beizer curve公式实现。</p>\\n<ul>\\n<li>JS实现： <a href=\\\"http://blog.csdn.net/cuixiping/article/details/6872095\\\">http://blog.csdn.net/cuixiping/article/details/6872095</a></li>\\n</ul>\\n<p>这个用的公式不直观，应该是进行了变换之后的， 我直接照着公式写了一个。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">PointOnCubicBezier2</span><span class=\\\"token punctuation\\\">(</span>cp<span class=\\\"token punctuation\\\">,</span> t<span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">   <span class=\\\"token comment\\\">// B(t) = P0 * (1-t)^3 + 3 * P1 * t * (1-t)^2 + 3 * P2 * t^2 * (1-t) + P3 * t^3</span>\\n</span>        <span class=\\\"token keyword\\\">const</span> one_t <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1.0</span> <span class=\\\"token operator\\\">-</span> t<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">P0</span> <span class=\\\"token operator\\\">=</span> cp<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">P1</span> <span class=\\\"token operator\\\">=</span> cp<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">P2</span> <span class=\\\"token operator\\\">=</span> cp<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">P3</span> <span class=\\\"token operator\\\">=</span> cp<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> x <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">P0</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>one_t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token constant\\\">P1</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">*</span> t <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>one_t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token constant\\\">P2</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> one_t <span class=\\\"token operator\\\">+</span> <span class=\\\"token constant\\\">P3</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> y <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">P0</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>one_t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token constant\\\">P1</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">*</span> t <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>one_t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token constant\\\">P2</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> one_t <span class=\\\"token operator\\\">+</span> <span class=\\\"token constant\\\">P3</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> pointF <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Point2D</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> pointF<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>对比了一下两个函数的输出值， 完全是一样的， 应该就是数学变换而已， 我懒得去做推倒了。</p>\\n<p>后来找到一个三阶beizer curve的实现，看这里\\n<a href=\\\"https://github.com/gre/bezier-easing%EF%BC%8C\\\">https://github.com/gre/bezier-easing，</a> 这个实现可能有点NB，以至于<a href=\\\"https://facebook.github.io/react-native/\\\">React Native</a>、<a href=\\\"http://velocityjs.org/\\\">Velocity</a>等项目都使用了，屌屌的。</p>\\n<p>用<a href=\\\"https://github.com/bestiejs/benchmark.js\\\">benchmark</a>跑一下分：<a href=\\\"https://jsperf.com/beizer-curve5\\\">看这里</a>， chrome下我写的方法居然慢了94%！看样子代码可读性是要付出代价的哈。我还是老老实实用<a href=\\\"https://github.com/gre/bezier-easing%E5%90%A7%E3%80%82\\\">https://github.com/gre/bezier-easing吧。</a></p>\\n<p>刚刚又搜到一篇文章， 讲解地更细致深入， 害得我不想继续写了。 直接看这里吧。<a href=\\\"http://www.jianshu.com/p/55c721887568\\\">http://www.jianshu.com/p/55c721887568</a></p>\\n<h1 id=\\\"如何将多个点用贝塞尔曲线连起来\\\"><a href=\\\"#%E5%A6%82%E4%BD%95%E5%B0%86%E5%A4%9A%E4%B8%AA%E7%82%B9%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E8%BF%9E%E8%B5%B7%E6%9D%A5\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>如何将多个点用贝塞尔曲线连起来</h1>\\n<ul>\\n<li><a href=\\\"http://www.zheng-hang.com/?id=43\\\">http://www.zheng-hang.com/?id=43</a></li>\\n<li><a href=\\\"http://www.cnblogs.com/hnfxs/p/3148743.html\\\">http://www.cnblogs.com/hnfxs/p/3148743.html</a></li>\\n</ul>\",\"timeToRead\":4,\"frontmatter\":{\"title\":\"bezier-curve\",\"date\":\"2016-11-29\",\"category\":\"FE\",\"tags\":[\"js\",\"css\",\"animation\",\"beizer curve\"],\"math\":null}}},\"pathContext\":{\"prev\":{\"url\":\"/ml-content/\",\"title\":\"机器学习计划\"},\"slug\":\"/bezier-curve/\",\"next\":{\"url\":\"/react-ismounted-is-an-antipattern/\",\"title\":\"react系列之isMounted is an Antipattern\"}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---bezier-curve-e47b1659646e7cda3af9.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Magicly's Blog\",\"author\":\"Magicly\"}},\"markdownRemark\":{\"id\":\"/Users/spring/Developer/Gatsby/gatsby-blog/src/pages/bezier-curve.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1 id=\\\"什么是贝塞尔曲线\\\"><a href=\\\"#%E4%BB%80%E4%B9%88%E6%98%AF%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>什么是贝塞尔曲线</h1>\\n<p>最近做一个动画效果时需要将物体做曲线移动， 本来记得css3里的动画是可以指定beizer curve的， 结果用的时候发现css3的beizer curve只用来做easing timing function。简单来说就是拿来控制动画“非线性”移动，比如越来越快（ease-in）， 越来越慢（ease-out），先慢后快再慢（ease-in-out）等， 让动画效果更“灵动”， 避免线性（linear）的死板。</p>\\n<p>可以看看这两个页面， 有一个直观的感受。</p>\\n<!-- more -->\\n<ul>\\n<li><a href=\\\"http://cubic-bezier.com/\\\">http://cubic-bezier.com/</a></li>\\n<li><a href=\\\"http://easings.net/zh-cn\\\">http://easings.net/zh-cn</a></li>\\n</ul>\\n<p>beizer curve在css3中的使用， 可以自己google一下， 或者看下：</p>\\n<ul>\\n<li><a href=\\\"http://www.w3school.com.cn/css3/css3_transition.asp\\\">http://www.w3school.com.cn/css3/css3_transition.asp</a></li>\\n<li><a href=\\\"http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html\\\">http://www.ruanyifeng.com/blog/2014/02/css<em>transition</em>and_animation.html</a></li>\\n</ul>\\n<p>引用wiki上的介绍：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">    在数学的数值分析领域中，贝塞尔曲线（英语：Bézier curve）是计算机图形学中相当重要的参数曲线。更高维度的广泛化贝塞尔曲线就称作贝塞尔曲面，其中贝塞尔三角是一种特殊的实例。\\n    贝塞尔曲线于1962年，由法国工程师皮埃尔·贝塞尔（Pierre Bézier）所广泛发表，他运用贝塞尔曲线来为汽车的主体进行设计。贝塞尔曲线最初由Paul de Casteljau于1959年运用de Casteljau算法开发，以稳定数值的方法求出贝塞尔曲线。</code></pre>\\n      </div>\\n<p>有数学功底或者有兴趣的可以参考下面几篇文章， 我就不赘述了（最讨厌那种什么都要copy过来，弄得好像跟是自己写的样， 别人已经写得很清楚了， 干嘛再重复劳动一遍呢， 又没有自己的新的见解，赠人链接， 手留余香。 😁哈）。</p>\\n<ul>\\n<li><a href=\\\"https://en.wikipedia.org/wiki/B%C3%A9zier_curve\\\">https://en.wikipedia.org/wiki/B%C3%A9zier_curve</a></li>\\n<li><a href=\\\"https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A\\\">https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A</a></li>\\n<li><a href=\\\"http://www.html-js.com/article/1628\\\">http://www.html-js.com/article/1628</a></li>\\n<li><a href=\\\"http://www.cnblogs.com/hnfxs/p/3148483.html\\\">http://www.cnblogs.com/hnfxs/p/3148483.html</a></li>\\n<li></li>\\n</ul>\\n<h1 id=\\\"在线工具\\\"><a href=\\\"#%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>在线工具</h1>\\n<p>下面是几个比较有用的工具， 方便大家。</p>\\n<ul>\\n<li><a href=\\\"http://blogs.sitepointstatic.com/examples/tech/canvas-curves/quadratic-curve.html\\\">http://blogs.sitepointstatic.com/examples/tech/canvas-curves/quadratic-curve.html</a></li>\\n<li><a href=\\\"http://myst729.github.io/bezier-curve/\\\">http://myst729.github.io/bezier-curve/</a></li>\\n<li><a href=\\\"http://xuanfengge.com/easeing/ceaser/\\\">http://xuanfengge.com/easeing/ceaser/</a></li>\\n<li><a href=\\\"http://yisibl.github.io/cubic-bezier/#.17,.67,.83,.67\\\">http://yisibl.github.io/cubic-bezier/#.17,.67,.83,.67</a></li>\\n<li><a href=\\\"http://cubic-bezier.com/#.17,.67,.83,.67\\\">http://cubic-bezier.com/#.17,.67,.83,.67</a></li>\\n</ul>\\n<h1 id=\\\"实现\\\"><a href=\\\"#%E5%AE%9E%E7%8E%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>实现</h1>\\n<p>前面资料都是把bezier curve拿来当timing function的， 而我的需求是要让物体（某个dom节点）沿着某条beizer curve移动，于是继续google， 找到了几个。</p>\\n<ul>\\n<li>Android实现: <a href=\\\"https://github.com/Yasic/QQBubbleView\\\">https://github.com/Yasic/QQBubbleView</a></li>\\n</ul>\\n<p>Android的我用不到， 放这里主要是里面的gif图很直观，哈哈。</p>\\n<ul>\\n<li>CSS实现：<a href=\\\"http://jinlong.github.io/2016/01/14/moving-along-a-curved-path-in-css-with-layered-animation/%EF%BC%8C\\\">http://jinlong.github.io/2016/01/14/moving-along-a-curved-path-in-css-with-layered-animation/，</a> 原文：<a href=\\\"http://tobiasahlin.com/blog/curved-path-animations-in-css/\\\">http://tobiasahlin.com/blog/curved-path-animations-in-css/</a></li>\\n</ul>\\n<p>CSS的实现真是相当tricky， 我解释一下。CSS里面的animation translate是直接按照直线移动到目的地的， 这是因为沿X轴和Y轴都是匀速运动（linear），所以合成之后的速度必然是斜角45°移动过去的。我们可以把X轴看成时间轴， 这时如果Y轴的移动函数是某个beizer curve，那合成之后的移动曲线就是beizer curve了。具体实现的时候还用到了:after伪元素了。</p>\\n<p>复杂一点的我觉得还是需要用js去控制， 于是自然想到了用js代码去按照beizer curve公式实现。</p>\\n<ul>\\n<li>JS实现： <a href=\\\"http://blog.csdn.net/cuixiping/article/details/6872095\\\">http://blog.csdn.net/cuixiping/article/details/6872095</a></li>\\n</ul>\\n<p>这个用的公式不直观，应该是进行了变换之后的， 我直接照着公式写了一个。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">PointOnCubicBezier2</span><span class=\\\"token punctuation\\\">(</span>cp<span class=\\\"token punctuation\\\">,</span> t<span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">   <span class=\\\"token comment\\\">// B(t) = P0 * (1-t)^3 + 3 * P1 * t * (1-t)^2 + 3 * P2 * t^2 * (1-t) + P3 * t^3</span>\\n</span>        <span class=\\\"token keyword\\\">const</span> one_t <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1.0</span> <span class=\\\"token operator\\\">-</span> t<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">P0</span> <span class=\\\"token operator\\\">=</span> cp<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">P1</span> <span class=\\\"token operator\\\">=</span> cp<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">P2</span> <span class=\\\"token operator\\\">=</span> cp<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">P3</span> <span class=\\\"token operator\\\">=</span> cp<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> x <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">P0</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>one_t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token constant\\\">P1</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">*</span> t <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>one_t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token constant\\\">P2</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> one_t <span class=\\\"token operator\\\">+</span> <span class=\\\"token constant\\\">P3</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> y <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">P0</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>one_t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token constant\\\">P1</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">*</span> t <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>one_t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token constant\\\">P2</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> one_t <span class=\\\"token operator\\\">+</span> <span class=\\\"token constant\\\">P3</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> pointF <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Point2D</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> pointF<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>对比了一下两个函数的输出值， 完全是一样的， 应该就是数学变换而已， 我懒得去做推倒了。</p>\\n<p>后来找到一个三阶beizer curve的实现，看这里\\n<a href=\\\"https://github.com/gre/bezier-easing%EF%BC%8C\\\">https://github.com/gre/bezier-easing，</a> 这个实现可能有点NB，以至于<a href=\\\"https://facebook.github.io/react-native/\\\">React Native</a>、<a href=\\\"http://velocityjs.org/\\\">Velocity</a>等项目都使用了，屌屌的。</p>\\n<p>用<a href=\\\"https://github.com/bestiejs/benchmark.js\\\">benchmark</a>跑一下分：<a href=\\\"https://jsperf.com/beizer-curve5\\\">看这里</a>， chrome下我写的方法居然慢了94%！看样子代码可读性是要付出代价的哈。我还是老老实实用<a href=\\\"https://github.com/gre/bezier-easing%E5%90%A7%E3%80%82\\\">https://github.com/gre/bezier-easing吧。</a></p>\\n<p>刚刚又搜到一篇文章， 讲解地更细致深入， 害得我不想继续写了。 直接看这里吧。<a href=\\\"http://www.jianshu.com/p/55c721887568\\\">http://www.jianshu.com/p/55c721887568</a></p>\\n<h1 id=\\\"如何将多个点用贝塞尔曲线连起来\\\"><a href=\\\"#%E5%A6%82%E4%BD%95%E5%B0%86%E5%A4%9A%E4%B8%AA%E7%82%B9%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E8%BF%9E%E8%B5%B7%E6%9D%A5\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>如何将多个点用贝塞尔曲线连起来</h1>\\n<ul>\\n<li><a href=\\\"http://www.zheng-hang.com/?id=43\\\">http://www.zheng-hang.com/?id=43</a></li>\\n<li><a href=\\\"http://www.cnblogs.com/hnfxs/p/3148743.html\\\">http://www.cnblogs.com/hnfxs/p/3148743.html</a></li>\\n</ul>\",\"timeToRead\":4,\"frontmatter\":{\"title\":\"bezier-curve\",\"date\":\"2016-11-29\",\"category\":\"FE\",\"tags\":[\"js\",\"css\",\"animation\",\"beizer curve\"],\"math\":null}}},\"pathContext\":{\"prev\":{\"url\":\"/ml-content/\",\"title\":\"机器学习计划\"},\"slug\":\"/bezier-curve/\",\"next\":{\"url\":\"/react-ismounted-is-an-antipattern/\",\"title\":\"react系列之isMounted is an Antipattern\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/bezier-curve.json\n// module id = 591\n// module chunks = 8199923997814"],"sourceRoot":""}
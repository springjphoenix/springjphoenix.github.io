webpackJsonp([0x86a53944317f],{595:function(n,a){n.exports={data:{site:{siteMetadata:{title:"Magicly's Blog",author:"Magicly"}},markdownRemark:{id:"/Users/spring/Developer/Gatsby/gatsby-blog/src/pages/blockchain-ethereum-0.md absPath of file >>> MarkdownRemark",html:'<p>本文介绍以太坊开发的基础知识。</p>\n<!-- more -->\n<h1 id="为啥不讲比特币呢"><a href="#%E4%B8%BA%E5%95%A5%E4%B8%8D%E8%AE%B2%E6%AF%94%E7%89%B9%E5%B8%81%E5%91%A2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>为啥不讲比特币呢</h1>\n<p>很少有基于比特币做开发的， 如果大家有兴趣可以看下面几个资料：</p>\n<ul>\n<li><a href="https://github.com/bitcoinbook/bitcoinbook">Mastering Bitcoin 2nd Edition</a></li>\n<li><a href="http://bitcoinbook.cs.princeton.edu/">Bitcoin and Cryptocurrency Technologies</a> <a href="https://www.coursera.org/learn/cryptocurrency/home/welcome">Coursera上课程</a> <a href="https://piazza.com/princeton/spring2015/btctech/home">课程资料</a></li>\n<li><a href="https://bitcoin.org/en/">Bitcoin官网</a></li>\n</ul>\n<p>只需要看上面三个资料来源即可， 不用看太多资料。</p>\n<h1 id="ethereum基础概念介绍"><a href="#ethereum%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Ethereum基础概念介绍</h1>\n<h2 id="p2p网络"><a href="#p2p%E7%BD%91%E7%BB%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>P2P网络</h2>\n<p>区块链底层是一个P2P网络，全球有很多电脑节点连在这个网络上， 没有中心节点， 每个节点互相通信， 各自保留一份完整的账本。</p>\n<h2 id="客户端"><a href="#%E5%AE%A2%E6%88%B7%E7%AB%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>客户端</h2>\n<p>就是P2P网络中的一个节点， 包含有一些功能以支持整个P2P网络的运行。 比如转账， 记录账本， 挖矿等， 还有一个完整的虚拟机EVM， 可以在上面执行智能合约。</p>\n<p>官方支持三种语言的客户端， 分别是：</p>\n<ul>\n<li>Go语言版本的<a href="https://github.com/ethereum/go-ethereum/">Geth</a></li>\n<li>C++语言版本<a href="https://github.com/ethereum/cpp-ethereum">Eth</a></li>\n<li>python语言版本的<a href="https://github.com/ethereum/pyethapp">pyethapp</a></li>\n</ul>\n<p>另外社区还开发了各种语言版本的客户端， 可以看<a href="http://www.ethdocs.org/en/latest/ethereum-clients/index.html">Ethereum Clients</a>。</p>\n<h2 id="rpc"><a href="#rpc" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RPC</h2>\n<p>客户端通过<a href="https://github.com/ethereum/wiki/wiki/JSON-RPC">JSON RPC</a>暴露了一些API给用户使用， 比如生成账户、查看自己账户余额、部署智能合约等。 用户可以用curl或者postman工具调用RPC来实现功能， 但是一般还是通过一些SDK去做RPC调用，用的较多的有<a href="https://github.com/ethereum/web3.js/">web3.js</a>，其他语言版本的可以参考<a href="http://www.ethdocs.org/en/latest/connecting-to-clients/index.html">Connecting to Ethereum Clients</a>。</p>\n<p>RPC、客户端、以太坊网络三者的关系如下：用户通过RPC调用客户端功能， 客户端通过EVM执行智能合约以及跟整个以太坊P2P网络连接。</p>\n<h2 id="账户"><a href="#%E8%B4%A6%E6%88%B7" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>账户</h2>\n<p>Ethereum有两种类型的账户， 一种叫External owned account，可以简单理解为人控制的账户， 里面有“币”ether， 需要提供secret key，即可转账等。  一定要保护好自己的密钥， 不要让别人知道了（相当于把银行卡密码告诉了别人）否则钱就没了（被别人取走了）； 也不要自己给搞丢了， 因为没有“找回密码”的功能， 记得经常备份， 也可以拿纸记下来存放在保险柜里， 但是小心别被火烧了哈(谁都不能用这笔钱了)。。。   本质上而言账号就是一个公钥-私钥对， 可以通过之前提到的各种客户端生成任意数量的EOA， 具体可以看<a href="http://www.ethdocs.org/en/latest/account-management.html">Account Management</a>。</p>\n<p>另一种叫Contract account， 其实是存储在blockchain上的一些代码和数据， 可以类比为面向对象语言里面的一个对象， 可以被EOA调用修改其中的状态。 代码执行需要花费一定数量的Gas。</p>\n<h2 id="gas"><a href="#gas" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Gas</h2>\n<p>为了避免以太坊网络被滥用或者攻击， 在EVM中执行的代码(contract)需要执行一定的费用，这就是gas了。 gas对应现实生活中的燃油费， 是驱动整个加密经济体系运转的动力。 gas涉及到三个概念：</p>\n<ul>\n<li>gasUsed， 每一条EVM指令都对应一定数量的gas， gasUsed表示整个contract执行完需要的gas总和</li>\n<li>gasPrice， 调用contract的用户愿意支付的单价</li>\n</ul>\n<p>执行一个contract的总花费 = gasUsed * gasPrice。</p>\n<p>想想自己一不小心写出个死循环把自己几个亿的ether给用光了是什么感觉！ 所以我们一般会设置<strong>gasLimit</strong>，即最大花费。 如果花费超过了gasLimit则contract执行过的操作会回滚，然后停止执行。 如果花费没有达到gasLimit， 则剩下的会原路退回。 客户端可以帮你估计一个contract大概的花费， 便于合理设置gasLimit。 问大家个问题， 如果花费超过了gasLimit会回滚contract操作， 那么还会扣掉gas么？为什么？</p>\n<p>更多资料可以看<a href="http://ethdocs.org/en/latest/contracts-and-transactions/account-types-gas-and-transactions.html">Account Types, Gas, and Transactions</a>。</p>\n<h2 id="智能合约"><a href="#%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>智能合约</h2>\n<p>前面多次提到contract， 到底是啥呢？ 说白了，就是一段代码以及相关的一个状态， 智能表示能自动执行。 比如你跟小明打赌， 说明天下不下雨，如果下雨你输10块给他。 结果第二天真的下雨了， 然后你赖账了。。。。为了避免赖账， 我们可以建一份智能合约， 里面一开始存储的状态是“你有10块钱， 小明有10块钱”，以及一段代码“如果明天下雨， 你的10块钱归小明， 反之亦然”。 然后第二天下雨了， 合约就自动执行，然后状态变成了“你有0块钱， 小明有20块钱”。</p>\n<h2 id="evm"><a href="#evm" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>EVM</h2>\n<p>以太坊的虚拟机， 执行智能合约， 类似于JVM。 EVM是一个隔离的沙盒， 里面不能访问网络、文件系统等。EVM支持的功能是图灵完备的。 注意图灵完备不代表能做任何事情， 比如不能访问网络等。</p>\n<h2 id="solidity"><a href="#solidity" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Solidity</h2>\n<p>EVM上执行的智能合约是底层的二进制， 但是我们开发要用高级语言呢。 <a href="https://solidity.readthedocs.io">Solidity</a>就是开发智能合约的一门高级语言， 类似于javascript， 通过solidity的编译器编译成二进制。</p>\n<h1 id="hello-ethereum"><a href="#hello-ethereum" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hello Ethereum!</h1>\n<h2 id="安装客户端"><a href="#%E5%AE%89%E8%A3%85%E5%AE%A2%E6%88%B7%E7%AB%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装客户端</h2>\n<p>这里我们选择安装<a href="https://geth.ethereum.org/">geth</a>， 最简单的方式是<a href="https://geth.ethereum.org/downloads/">下载压缩包</a>， 直接解压即可。 安装其他客户端可以参考<a href="https://www.ethereum.org/cli">GETH &#x26; ETH</a>。 为了在任何路径都能执行geth， 可以将其加入系统PATH中。</p>\n<p>安装好之后执行如下命令启动geth：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">geth</code></pre>\n      </div>\n<p>geth提供了一个console，整合了web3.js，我们可以在里面直接写javascript代码进行操作， 比如生成账户、转账等， 通过如下命令进入console:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">geth console</code></pre>\n      </div>\n<p>另外也可以单独执行<code class="language-text">geth</code>把客户端启动起来， 然后在新的终端里面执行<code class="language-text">geth attach</code>打开一个新的console。进入之后执行:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">eth.accounts</code></pre>\n      </div>\n<p>会发现返回的是空数组<code class="language-text">[]</code>， 我们用下面命令生成一个新账号：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> personal.newAccount<span class="token punctuation">(</span><span class="token punctuation">)</span>\nPassphrase:\nRepeat passphrase:\n<span class="token string">"0xecbc12eaef5fa1300cb9aad0a17bd2e40bde2a61"</span></code></pre>\n      </div>\n<h2 id="运行测试网络testnetwork"><a href="#%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9Ctestnetwork" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>运行测试网络TestNetwork</h2>\n<p>直接用<code class="language-text">geth</code>启动客户端， geth进去的是主网络（main network），也就是说任何操作都会真实进入以太坊P2P网络，比如转账、部署智能合约等。当然，我们账户里面没钱， 所以也没法转账和部署智能合约。 为了便于测试，我们可以建立一个私有测试网络。</p>\n<p>区块链第一块叫创世块(Genesis block)，建立私有测试链需要提供genesis block的配置，简单如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"nonce"</span><span class="token operator">:</span> <span class="token string">"0x0000000000000042"</span><span class="token punctuation">,</span>\n  <span class="token property">"timestamp"</span><span class="token operator">:</span> <span class="token string">"0x0"</span><span class="token punctuation">,</span>\n  <span class="token property">"parentHash"</span><span class="token operator">:</span>\n    <span class="token string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>\n  <span class="token property">"extraData"</span><span class="token operator">:</span> <span class="token string">"0x"</span><span class="token punctuation">,</span>\n  <span class="token property">"gasLimit"</span><span class="token operator">:</span> <span class="token string">"0x8000000"</span><span class="token punctuation">,</span>\n  <span class="token property">"difficulty"</span><span class="token operator">:</span> <span class="token string">"0x400"</span><span class="token punctuation">,</span>\n  <span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"mixhash"</span><span class="token operator">:</span>\n    <span class="token string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>\n  <span class="token property">"coinbase"</span><span class="token operator">:</span> <span class="token string">"0x3333333333333333333333333333333333333333"</span><span class="token punctuation">,</span>\n  <span class="token property">"alloc"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>保存为<code class="language-text">myGenesis.json</code>，然后执行下面命令：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth --identity <span class="token string">"MyEther"</span> --rpc --datadir ~/.ethereum_private --nodiscover --networkid 1999 init ./myGenesis.json\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:33:36<span class="token punctuation">]</span> Maximum peer count                       ETH<span class="token operator">=</span>25 LES<span class="token operator">=</span>0 total<span class="token operator">=</span>25\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:33:36<span class="token punctuation">]</span> Allocated cache and <span class="token function">file</span> handles         database<span class="token operator">=</span>/Users/magicly/.ethereum_private/geth/chaindata cache<span class="token operator">=</span>16 handles<span class="token operator">=</span>16\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:33:36<span class="token punctuation">]</span> Writing custom genesis block\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:33:36<span class="token punctuation">]</span> Persisted trie from memory database      nodes<span class="token operator">=</span>0 size<span class="token operator">=</span>0.00B time<span class="token operator">=</span>10.416µs gcnodes<span class="token operator">=</span>0 gcsize<span class="token operator">=</span>0.00B gctime<span class="token operator">=</span>0s livenodes<span class="token operator">=</span>1 livesize<span class="token operator">=</span>0.00B\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:33:36<span class="token punctuation">]</span> Successfully wrote genesis state         database<span class="token operator">=</span>chaindata                                       hash<span class="token operator">=</span>6231b0…a0300b\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:33:36<span class="token punctuation">]</span> Allocated cache and <span class="token function">file</span> handles         database<span class="token operator">=</span>/Users/magicly/.ethereum_private/geth/lightchaindata cache<span class="token operator">=</span>16 handles<span class="token operator">=</span>16\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:33:36<span class="token punctuation">]</span> Writing custom genesis block\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:33:36<span class="token punctuation">]</span> Persisted trie from memory database      nodes<span class="token operator">=</span>0 size<span class="token operator">=</span>0.00B time<span class="token operator">=</span>3.22µs   gcnodes<span class="token operator">=</span>0 gcsize<span class="token operator">=</span>0.00B gctime<span class="token operator">=</span>0s livenodes<span class="token operator">=</span>1 livesize<span class="token operator">=</span>0.00B\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:33:36<span class="token punctuation">]</span> Successfully wrote genesis state         database<span class="token operator">=</span>lightchaindata                                       hash<span class="token operator">=</span>6231b0…a0300b</code></pre>\n      </div>\n<p>其中<code class="language-text">--identity</code>是网络名称。 <code class="language-text">--rpc</code>表示开启RPC功能。 <code class="language-text">--datadir</code>是这个私有网络的数据存储目录，避免覆盖主网数据。 <code class="language-text">--nodiscover</code>表示不要被其他节点发现。 <code class="language-text">--networid</code>是网络id， 随便设置一个数即可， 默认为1（即主网）。</p>\n<blockquote>\n<p> —networkid value                     Network identifier (integer, 1=Frontier, 2=Morden (disused), 3=Ropsten, 4=Rinkeby) (default: 1)</p>\n</blockquote>\n<p>更多命令行选项可以执行<code class="language-text">geth --help</code>查看， 或者访问<a href="https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options">go ethereum Command Line Options</a>。</p>\n<p>然后执行下面命令，启动geth：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">geth --identity <span class="token string">"MyEther"</span> --rpc --datadir ~/.ethereum_private --nodiscover --networkid 1999</code></pre>\n      </div>\n<p>连接客户端：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth attach\nFatal: Unable to attach to remote geth: dial unix /Users/magicly/Library/Ethereum/geth.ipc: connect: no such <span class="token function">file</span> or directory\n➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth attach ipc:/Users/magicly/.ethereum_private/geth.ipc\nWelcome to the Geth JavaScript console<span class="token operator">!</span>\n\ninstance: Geth/MyEther/v1.8.2-stable-b8b9f7f4/darwin-amd64/go1.9.4\n modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0\n\n<span class="token operator">></span> eth.accounts\n<span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token operator">></span> personal.newAccount<span class="token punctuation">(</span><span class="token punctuation">)</span>\nPassphrase:\nRepeat passphrase:\n<span class="token string">"0xa736f13951da77c39e035c4c1b1970478a758340"</span></code></pre>\n      </div>\n<p>注意， 这里直接用<code class="language-text">geth attach</code>连不上客户端， 因为不是用的默认配置。并且如果是用http方式attach的， 虽然连上了， 但是创建新账号的时候会报错：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth attach http://localhost:8545\nWelcome to the Geth JavaScript console<span class="token operator">!</span>\n\ninstance: Geth/MyEther/v1.8.2-stable-b8b9f7f4/darwin-amd64/go1.9.4\ncoinbase: 0xa736f13951da77c39e035c4c1b1970478a758340\nat block: 0 <span class="token punctuation">(</span>Thu, 01 Jan 1970 08:00:00 CST<span class="token punctuation">)</span>\n modules: eth:1.0 net:1.0 rpc:1.0 web3:1.0\n\n<span class="token operator">></span> personal.newAccount<span class="token punctuation">(</span><span class="token punctuation">)</span>\nPassphrase:\nRepeat passphrase:\nError: The method personal_newAccount does not exist/is not available\n<span class="token operator">></span></code></pre>\n      </div>\n<p>只有通过IPC连接上的客户端， 才认为足够安全， 才允许创建账号。 当然也可指直接用<code class="language-text">geth</code>创建账号：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth --datadir ~/.ethereum_private account new\nINFO <span class="token punctuation">[</span>04-03<span class="token operator">|</span>15:55:47<span class="token punctuation">]</span> Maximum peer count                       ETH<span class="token operator">=</span>25 LES<span class="token operator">=</span>0 total<span class="token operator">=</span>25\nYour new account is locked with a password. Please give a password. Do not forget this password.\nPassphrase:\nRepeat passphrase:\nAddress: <span class="token punctuation">{</span>53707514492dda75eccb8ff621759af7f0f3c0f0<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>注意，必须加上<code class="language-text">--datadir</code>，否则创建的账号在默认目录， 不能访问。然后在<code class="language-text">console</code>里看， 确实有两个账号了：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> eth.accounts\n<span class="token punctuation">[</span><span class="token string">"0xa736f13951da77c39e035c4c1b1970478a758340"</span>, <span class="token string">"0x53707514492dda75eccb8ff621759af7f0f3c0f0"</span><span class="token punctuation">]</span></code></pre>\n      </div>\n<p>刚创建的账号， 肯定都没钱嘛：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> pa <span class="token operator">=</span> eth.accounts<span class="token punctuation">[</span>0<span class="token punctuation">]</span>\n<span class="token string">"0xa736f13951da77c39e035c4c1b1970478a758340"</span>\n<span class="token operator">></span> eth.getBalance<span class="token punctuation">(</span>pa<span class="token punctuation">)</span>\n0</code></pre>\n      </div>\n<p>我们可以通过挖矿给自己搞点ether，因为我们在<code class="language-text">myGenesis.json</code>里面配置的<code class="language-text">&quot;difficulty&quot;: &quot;0x400&quot;,</code>， 所以很容易就挖到了。<a href="http://www.unminer.com/eth">http://www.unminer.com/eth</a> 显示主网真实挖矿难度目前是1600T左右，是我们的<code class="language-text">1600, 000, 000, 000</code>倍！所以知道为什么要搭建测试环境了吧。用下面命令开始挖矿：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> miner.setEtherbase<span class="token punctuation">(</span>pa<span class="token punctuation">)</span>\n<span class="token boolean">true</span>\n<span class="token operator">></span> miner.start<span class="token punctuation">(</span><span class="token punctuation">)</span>\nnull\n<span class="token operator">></span> miner.stop<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token boolean">true</span>\n<span class="token operator">></span> eth.getBalance<span class="token punctuation">(</span>pa<span class="token punctuation">)</span>\n55000000000000000000\n<span class="token operator">></span> web3.fromWei<span class="token punctuation">(</span>eth.getBalance<span class="token punctuation">(</span>pa<span class="token punctuation">)</span>, <span class="token string">\'ether\'</span><span class="token punctuation">)</span>\n55</code></pre>\n      </div>\n<p>start之后几秒钟， CPU飚到800%， 风扇狂转， 赶紧关掉， 然后发现， 已经挖到55个以太坊了， 按照目前市值400刀一个， 我们挖到了价值22000刀的以太坊， 可惜都是测试环境的， 哈哈哈。</p>\n<h2 id="编写智能合约solidity"><a href="#%E7%BC%96%E5%86%99%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6solidity" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>编写智能合约Solidity</h2>\n<p>solidity是编写以太坊智能合约的高级语言， 首先需要安装编译器， 参考<a href="http://solidity.readthedocs.io/en/develop/installing-solidity.html">Installing the Solidity Compiler</a>。当然， 最简单的当然是直接用online版本<a href="https://remix.ethereum.org">Remix</a>。</p>\n<p>复制下列代码到remix编辑器中：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.0</span><span class="token punctuation">;</span>\ncontract mortal <span class="token punctuation">{</span>\n    <span class="token comment">/* Define variable owner of the type address */</span>\n    address owner<span class="token punctuation">;</span>\n\n    <span class="token comment">/* This function is executed at initialization and sets the owner of the contract */</span>\n    <span class="token keyword">function</span> <span class="token function">mortal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span> owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token comment">/* Function to recover the funds on the contract */</span>\n    <span class="token keyword">function</span> <span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">)</span> <span class="token function">selfdestruct</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\ncontract greeter is mortal <span class="token punctuation">{</span>\n    <span class="token comment">/* Define variable greeting of the type string */</span>\n    string greeting<span class="token punctuation">;</span>\n    \n    <span class="token comment">/* This runs when the contract is executed */</span>\n    <span class="token keyword">function</span> <span class="token function">greeter</span><span class="token punctuation">(</span>string _greeting<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>\n        greeting <span class="token operator">=</span> _greeting<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/* Main function */</span>\n    <span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> constant <span class="token function">returns</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> greeting<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>然后执行编译， 之后可以查看编译结果， 如下图：\n<img src="/blogimgs/blockchain/remix-greeter.png" alt="Remix"></p>\n<h2 id="部署智能合约web3js"><a href="#%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6web3js" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>部署智能合约Web3.js</h2>\n<p>将前面图中代码<code class="language-text">web3deploy</code>部分代码复制下来， 给变量<code class="language-text">__greeting</code>一个值， 直接复制到geth的console中， 或者保存到文件比如<code class="language-text">web3.js</code>，然后在console中执行<code class="language-text">loadScript(&#39;./web3.js&#39;)</code>即可。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// web3.js</span>\n<span class="token keyword">var</span> _greeting <span class="token operator">=</span> <span class="token string">\'Hello Ethereum!\'</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> greeterContract <span class="token operator">=</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span><span class="token function">contract</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"constant"</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"inputs"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"kill"</span><span class="token punctuation">,</span><span class="token string">"outputs"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"payable"</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"stateMutability"</span><span class="token punctuation">:</span><span class="token string">"nonpayable"</span><span class="token punctuation">,</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"function"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"constant"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"inputs"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"greet"</span><span class="token punctuation">,</span><span class="token string">"outputs"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"string"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"payable"</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"stateMutability"</span><span class="token punctuation">:</span><span class="token string">"view"</span><span class="token punctuation">,</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"function"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"inputs"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"_greeting"</span><span class="token punctuation">,</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"string"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"payable"</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"stateMutability"</span><span class="token punctuation">:</span><span class="token string">"nonpayable"</span><span class="token punctuation">,</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"constructor"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> greeter <span class="token operator">=</span> greeterContract<span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>\n   _greeting<span class="token punctuation">,</span>\n   <span class="token punctuation">{</span>\n     <span class="token keyword">from</span><span class="token punctuation">:</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>accounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \n     data<span class="token punctuation">:</span> <span class="token string">\'0x6060604052341561000f57600080fd5b6040516103a93803806103a983398101604052808051820191905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060019080519060200190610081929190610088565b505061012d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100c957805160ff19168380011785556100f7565b828001600101855582156100f7579182015b828111156100f65782518255916020019190600101906100db565b5b5090506101049190610108565b5090565b61012a91905b8082111561012657600081600090555060010161010e565b5090565b90565b61026d8061013c6000396000f30060606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610066575b600080fd5b341561005c57600080fd5b6100646100f4565b005b341561007157600080fd5b610079610185565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b957808201518184015260208101905061009e565b50505050905090810190601f1680156100e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610183576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b61018d61022d565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102235780601f106101f857610100808354040283529160200191610223565b820191906000526020600020905b81548152906001019060200180831161020657829003601f168201915b5050505050905090565b6020604051908101604052806000815250905600a165627a7a723058206787dd51eae8103738c5112e2d5c1636972e888ace270061dd0cf0e3f802f4cc0029\'</span><span class="token punctuation">,</span> \n     gas<span class="token punctuation">:</span> <span class="token string">\'4700000\'</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> contract<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> contract<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> contract<span class="token punctuation">.</span>address <span class="token operator">!==</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Contract mined! address: \'</span> <span class="token operator">+</span> contract<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token string">\' transactionHash: \'</span> <span class="token operator">+</span> contract<span class="token punctuation">.</span>transactionHash<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>其中data就是<code class="language-text">greeter</code>编译之后的二进制。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> loadScript<span class="token punctuation">(</span><span class="token string">\'./web3.js\'</span><span class="token punctuation">)</span>\nError: authentication needed: password or unlock undefined\n<span class="token boolean">true</span></code></pre>\n      </div>\n<p>额， 我们需要先解锁我们的主账户</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> personal.unlockAccount<span class="token punctuation">(</span>web3.eth.accounts<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">)</span>\nUnlock account 0xa736f13951da77c39e035c4c1b1970478a758340\nPassphrase:\n<span class="token boolean">true</span></code></pre>\n      </div>\n<p>然后再加载加载脚本即可:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> loadScript<span class="token punctuation">(</span><span class="token string">\'./web3.js\'</span><span class="token punctuation">)</span>\nnull <span class="token punctuation">[</span>object Object<span class="token punctuation">]</span>\n<span class="token boolean">true</span></code></pre>\n      </div>\n<p>这时候合约并没有入链的:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> greeter.address\nundefined</code></pre>\n      </div>\n<p>想想也对， 这会儿没有miner干活呢， 那我们来自己挖一下吧：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> miner.start<span class="token punctuation">(</span><span class="token punctuation">)</span>\nnull\n<span class="token operator">></span> null <span class="token punctuation">[</span>object Object<span class="token punctuation">]</span>\nContract mined<span class="token operator">!</span> address: 0xf0406e7bcb75326a9b9fa47a05d3ce2126d95148 transactionHash: 0x01e70a7b0927cf70e9f0a2fcb904e6fff57009ae3d18350941fc4dc254283caf\n<span class="token operator">></span> miner.stop<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token boolean">true</span>\n<span class="token operator">></span> web3.fromWei<span class="token punctuation">(</span>eth.getBalance<span class="token punctuation">(</span>pa<span class="token punctuation">)</span>, <span class="token string">\'ether\'</span><span class="token punctuation">)</span>\n85\n<span class="token operator">></span> greeter.address\n<span class="token string">"0xf0406e7bcb75326a9b9fa47a05d3ce2126d95148"</span></code></pre>\n      </div>\n<p>可以看到， contract已经计入blockchain了， 另外，我们又挖到了30个eth哈哈哈。我们可以通过contract的address找到代码，当然，是二进制：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> eth.getCode<span class="token punctuation">(</span>greeter.address<span class="token punctuation">)</span>\n<span class="token string">"0x60606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610066575b600080fd5b341561005c57600080fd5b6100646100f4565b005b341561007157600080fd5b610079610185565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b957808201518184015260208101905061009e565b50505050905090810190601f1680156100e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610183576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b61018d61022d565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102235780601f106101f857610100808354040283529160200191610223565b820191906000526020600020905b81548152906001019060200180831161020657829003601f168201915b5050505050905090565b6020604051908101604052806000815250905600a165627a7a723058206787dd51eae8103738c5112e2d5c1636972e888ace270061dd0cf0e3f802f4cc0029"</span></code></pre>\n      </div>\n<p>然后我们就可以执行合约了：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> greeter.greet<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token string">"Hello Ethereum!"</span></code></pre>\n      </div>\n<p>别人也能访问我们deploy的智能合约， 只要他们知道代码的地址以及接口类型(ABI (Application Binary Interface)))。 ABI是干嘛的呢， 基本就是告诉你前面的二进制代码要怎么调用， 因为估计没人能看了那串二进制就知道它是干嘛的吧。我们新开一个console：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth attach http://localhost:8545\nWelcome to the Geth JavaScript console<span class="token operator">!</span>\n\ninstance: Geth/MyEther/v1.8.2-stable-b8b9f7f4/darwin-amd64/go1.9.4\ncoinbase: 0xa736f13951da77c39e035c4c1b1970478a758340\nat block: 17 <span class="token punctuation">(</span>Tue, 03 Apr 2018 16:30:06 CST<span class="token punctuation">)</span>\n modules: eth:1.0 net:1.0 rpc:1.0 web3:1.0\n\n<span class="token operator">></span> var greeter2 <span class="token operator">=</span> eth.contract<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"constant"</span>:true,<span class="token string">"inputs"</span>:<span class="token punctuation">[</span><span class="token punctuation">]</span>,<span class="token string">"name"</span><span class="token keyword">:</span><span class="token string">"greet"</span>,<span class="token string">"outputs"</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token keyword">:</span><span class="token string">""</span>,<span class="token string">"type"</span><span class="token keyword">:</span><span class="token string">"string"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>,<span class="token string">"payable"</span>:false,<span class="token string">"stateMutability"</span><span class="token keyword">:</span><span class="token string">"view"</span>,<span class="token string">"type"</span><span class="token keyword">:</span><span class="token string">"function"</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"inputs"</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token keyword">:</span><span class="token string">"_greeting"</span>,<span class="token string">"type"</span><span class="token keyword">:</span><span class="token string">"string"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>,<span class="token string">"payable"</span>:false,<span class="token string">"stateMutability"</span><span class="token keyword">:</span><span class="token string">"nonpayable"</span>,<span class="token string">"type"</span><span class="token keyword">:</span><span class="token string">"constructor"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>.at<span class="token punctuation">(</span><span class="token string">\'0xf0406e7bcb75326a9b9fa47a05d3ce2126d95148\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nundefined\n<span class="token operator">></span> greeter2.address\n<span class="token string">"0xf0406e7bcb75326a9b9fa47a05d3ce2126d95148"</span>\n<span class="token operator">></span> greeter2.greet<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token string">"Hello Ethereum!"</span>\n<span class="token operator">></span></code></pre>\n      </div>\n<p>像上面这样获取到contract的代码然后直接调用<code class="language-text">greeter2.greet()</code>，其实是在本地的EVM上调用， 不会修改blockchain上的状态的（因此也不用花费ether）。如果需要修改blockchain上的状态，需要通过<code class="language-text">sendTransaction</code>调用。 我们先在一个没有ehter的账户上调用一下试试：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> pa <span class="token operator">=</span> eth.accounts<span class="token punctuation">[</span>1<span class="token punctuation">]</span>\n<span class="token string">"0x53707514492dda75eccb8ff621759af7f0f3c0f0"</span>\n<span class="token operator">></span> greeter2.greet.sendTransaction<span class="token punctuation">(</span><span class="token punctuation">{</span>from: pa<span class="token punctuation">}</span><span class="token punctuation">)</span>\nError: insufficient funds <span class="token keyword">for</span> gas * price + value\n    at web3.js:3143:20\n    at web3.js:6347:15\n    at web3.js:5081:36\n    at web3.js:4137:16\n    at <span class="token operator">&lt;</span>anonymous<span class="token operator">></span>:1:1\n\n<span class="token operator">></span> eth.getBalance<span class="token punctuation">(</span>pa<span class="token punctuation">)</span>\n0</code></pre>\n      </div>\n<p>看来，没钱真的不行啊。那我们在之前有ether的账户（之前有85ether，不过由于每次都交易都需要挖矿入链， 又多产生了一些，最后另外新开了一个账号来mine，才让pa0这个账号没有新增ether）上试一下呢：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> personal.unlockAccount<span class="token punctuation">(</span>pa0<span class="token punctuation">)</span>\nUnlock account 0xa736f13951da77c39e035c4c1b1970478a758340\nPassphrase:\n<span class="token boolean">true</span>\n<span class="token operator">></span> eth.getBalance<span class="token punctuation">(</span>pa0<span class="token punctuation">)</span>\n109991138204000000000\n<span class="token operator">></span> greeter.greet.sendTransaction<span class="token punctuation">(</span><span class="token punctuation">{</span>from: pa0<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token string">"0x5e4090be8ad2fcf6eeae05174f0e9eac3134a1857928d278f8ef4dd13ef2fded"</span>\n<span class="token operator">></span> eth.getBalance<span class="token punctuation">(</span>pa0<span class="token punctuation">)</span>\n109991138204000000000\n<span class="token operator">></span> txpool.status\n<span class="token punctuation">{</span>\n  pending: 1,\n  queued: 0\n<span class="token punctuation">}</span>\n<span class="token operator">></span> txpool.status\n<span class="token punctuation">{</span>\n  pending: 0,\n  queued: 0\n<span class="token punctuation">}</span>\n<span class="token operator">></span> eth.getBalance<span class="token punctuation">(</span>pa0<span class="token punctuation">)</span>\n109990737038000000000\n<span class="token operator">></span> greeter.greet.sendTransaction<span class="token punctuation">(</span><span class="token punctuation">{</span>from: pa0<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token string">"0xec58cbf73512fd5aad75b9e60ebbe5a90f3bf36ceec63f704a7bbdf2a23ca4a1"</span>\n<span class="token operator">></span> txpool.status\n<span class="token punctuation">{</span>\n  pending: 1,\n  queued: 0\n<span class="token punctuation">}</span>\n<span class="token operator">></span> eth.getBalance<span class="token punctuation">(</span>pa0<span class="token punctuation">)</span>\n109990335872000000000\n<span class="token operator">></span></code></pre>\n      </div>\n<p>可以看出来，每次都需要消费<code class="language-text">109991138204000000000 - 109990737038000000000 == 109990737038000000000 - 109990335872000000000 == 401165999996928</code>个wei，wei是以太坊的最小单位，<code class="language-text">1 ether == 10 ** 18 wei</code>， 所以执行一次<code class="language-text">greet</code>交易，需要花费<code class="language-text">401165999996928 / 10 ** 18 == ~=0.0004</code>个ether，现在差不多1快rmb了。 我们可以看到，字符串确实存到blockchain上了：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> eth.getStorageAt<span class="token punctuation">(</span>greeter.address<span class="token punctuation">)</span>\n<span class="token string">"0x000000000000000000000000a736f13951da77c39e035c4c1b1970478a758340"</span></code></pre>\n      </div>\n<p>如果我们最后不需要这个合约了， 我们可以把他删除， 避免占用blockchain的空间：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">></span> personal.unlockAccount<span class="token punctuation">(</span>eth.accounts<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">)</span>\nUnlock account 0xa736f13951da77c39e035c4c1b1970478a758340\nPassphrase:\n<span class="token boolean">true</span>\n<span class="token operator">></span> greeter.kill.sendTransaction<span class="token punctuation">(</span><span class="token punctuation">{</span>from: eth.accounts<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token operator">></span> eth.getCode<span class="token punctuation">(</span>greeter.address<span class="token punctuation">)</span>\n<span class="token string">"0x60606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610066575b600080fd5b341561005c57600080fd5b6100646100f4565b005b341561007157600080fd5b610079610185565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b957808201518184015260208101905061009e565b50505050905090810190601f1680156100e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610183576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b61018d61022d565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102235780601f106101f857610100808354040283529160200191610223565b820191906000526020600020905b81548152906001019060200180831161020657829003601f168201915b5050505050905090565b6020604051908101604052806000815250905600a165627a7a723058206787dd51eae8103738c5112e2d5c1636972e888ace270061dd0cf0e3f802f4cc0029"</span>\n<span class="token operator">></span> txpool.status\n<span class="token punctuation">{</span>\n  pending: 1,\n  queued: 0\n<span class="token punctuation">}</span>\n<span class="token operator">></span> txpool.status\n<span class="token punctuation">{</span>\n  pending: 0,\n  queued: 0\n<span class="token punctuation">}</span>\n<span class="token operator">></span> eth.getCode<span class="token punctuation">(</span>greeter.address<span class="token punctuation">)</span>\n<span class="token string">"0x"</span>\n<span class="token operator">></span> eth.getBalance<span class="token punctuation">(</span>pa0<span class="token punctuation">)</span>\n109990141400000000000</code></pre>\n      </div>\n<p>注意<code class="language-text">kill</code>之后要mine才可以修改blockchain上的状态。也可以看出，kill也是需要花费gas的，当然，远比执行contract要低， 相当于网络进行了补贴， 否则估计就没人愿意删除合约了，这样会导致网络膨胀。 注意， 只有contract的owner才可以kill掉此contract， 其他人也能调用kill方法， 但是是没办法删掉contract的， 而且还扣了gas（貌似还比较高）。</p>\n<p>ok，我们已经实现了一个Ethereum版本的<code class="language-text">Hello World</code>， 后面我们就来考虑自己发一个币吧。</p>\n<h1 id="参考资料"><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>参考资料</h1>\n<ul>\n<li><a href="https://www.ethereum.org">https://www.ethereum.org</a></li>\n<li><a href="http://www.ethdocs.org">http://www.ethdocs.org</a></li>\n<li><a href="https://github.com/ethereum/go-ethereum/wiki/">https://github.com/ethereum/go-ethereum/wiki/</a></li>\n<li><a href="https://solidity.readthedocs.io">https://solidity.readthedocs.io</a></li>\n<li><a href="http://web3js.readthedocs.io/en/1.0/index.html">http://web3js.readthedocs.io/en/1.0/index.html</a> </li>\n</ul>',
timeToRead:14,frontmatter:{title:"区块链系列四：Hello Ethereum!",date:"2018-04-03",category:"Blockchain",tags:["Ethereum","以太坊"],math:null}}},pathContext:{prev:{url:"/blockchain-ethereum-1/",title:"区块链系列五：Ethereum学习笔记"},slug:"/blockchain-ethereum-0/",next:{url:"/blockchain-crytography-desrsa/",title:"区块链系列三：区块链涉及到的密码学知识之加密、签名与认证"}}}}});
//# sourceMappingURL=path---blockchain-ethereum-0-e0dd83f06b2cebeba3c9.js.map
{"version":3,"sources":["webpack:///path---blockchain-ethereum-2-813e884d47b4b8d4f5ce.js","webpack:///./.cache/json/blockchain-ethereum-2.json"],"names":["webpackJsonp","597","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","timeToRead","frontmatter","date","category","tags","math","pathContext","prev","url","slug","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,iBAAAC,OAAA,YAA6CC,gBAAmBC,GAAA,gIAAAC,KAAA,6onBAA4giBC,WAAA,EAAAC,aAAygHN,MAAA,6BAAAO,KAAA,aAAAC,SAAA,aAAAC,MAAA,kBAAAC,KAAA,QAAyHC,aAAgBC,MAAQC,IAAA,0BAAAb,MAAA,uBAA8Dc,KAAA,0BAAAC,MAA0CF,IAAA,0BAAAb,MAAA","file":"path---blockchain-ethereum-2-813e884d47b4b8d4f5ce.js","sourcesContent":["webpackJsonp([278883057223883],{\n\n/***/ 597:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Magicly's Blog\",\"author\":\"Magicly\"}},\"markdownRemark\":{\"id\":\"/Users/spring/Developer/Gatsby/springjphoenix.github.io/src/pages/blockchain-ethereum-2.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><a href=\\\"/blockchain-ethereum-0\\\">区块链系列四：Hello Ethereum!</a>介绍了Ethereum的一些基础知识， 本文我们来用Ethereum发一个币玩玩。</p>\\n<!-- more -->\\n<h1 id=\\\"安装客户端和钱包\\\"><a href=\\\"#%E5%AE%89%E8%A3%85%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E9%92%B1%E5%8C%85\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>安装客户端和钱包</h1>\\n<p>按之前介绍安装客户端， 我们用Go语言版本的<a href=\\\"https://github.com/ethereum/go-ethereum/\\\">Geth</a>。</p>\\n<p>下载安装<a href=\\\"https://github.com/ethereum/mist/releases\\\">Mist或Ethereum Wallet</a>，Mist其实包含了钱包功能以及Remix IDE， 功能很强大的。</p>\\n<h1 id=\\\"启动测试网络\\\"><a href=\\\"#%E5%90%AF%E5%8A%A8%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>启动测试网络</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth --identity <span class=\\\"token string\\\">\\\"MyEther\\\"</span> --rpc --rpccorsdomain <span class=\\\"token string\\\">\\\"*\\\"</span> --datadir ~/.ethereum_private --nodiscover --networkid 1999 --ipcpath ~/Library/Ethereum/geth.ipc</code></pre>\\n      </div>\\n<p>注意， 如果我们用<code class=\\\"language-text\\\">--datadir</code>指定了自定义的存储位置， <code class=\\\"language-text\\\">geth.ipc</code>会存储在此目录下。 而Mist自带一个geth客户端， 默认会去连localhost的默认客户端， 如果连不到则会启动自己的geth， 尝试连接mainnet。 所以为了让Mist连接我们的private network， 需要用<code class=\\\"language-text\\\">--ipcpath</code>将<code class=\\\"language-text\\\">geth.ipc</code>指定到默认位置。这样Mist就会连接到我们的客户端启动的private network了。</p>\\n<h1 id=\\\"最小可行token：-mvtminimum-viable-token\\\"><a href=\\\"#%E6%9C%80%E5%B0%8F%E5%8F%AF%E8%A1%8Ctoken%EF%BC%9A-mvtminimum-viable-token\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>最小可行Token： MVT(Minimum Viable Token)</h1>\\n<p>Show me the code!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.20</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 指定编译器版本</span>\\n\\ncontract MyToken <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 记录每个address的账户余额</span>\\n    <span class=\\\"token function\\\">mapping</span> <span class=\\\"token punctuation\\\">(</span>address <span class=\\\"token operator\\\">=></span> uint256<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> balanceOf<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// 构造函数， 指定contract创建者的初始余额</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">MyToken</span><span class=\\\"token punctuation\\\">(</span>\\n        uint256 initialSupply\\n        <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> initialSupply<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// 转账</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>address _to<span class=\\\"token punctuation\\\">,</span> uint256 _value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">>=</span> _value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>           <span class=\\\"token comment\\\">// 账户余额是否足够</span>\\n        <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> _value <span class=\\\"token operator\\\">>=</span> balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 是否会溢出</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"理解contract\\\"><a href=\\\"#%E7%90%86%E8%A7%A3contract\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>理解contract</h1>\\n<p>现在我们来从零开始逐渐构建一份完整的contract，并添加一些高级功能。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.20</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 指定编译器版本</span>\\n\\n    contract Chips <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">mapping</span> <span class=\\\"token punctuation\\\">(</span>address <span class=\\\"token operator\\\">=></span> uint256<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> balanceOf<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">pragma</code>指定编译器版本。 contract类似于class， Chips是contract的名称（也就是我们token的名称）。balanceOf是Chips的一个字段， 类型为<code class=\\\"language-text\\\">mapping (address =&gt; uint256)</code>。 mapping是一种数据类型， 类似于Hashmap， 这里拿来存每个地址都多少token。 public表示所有人都可以访问。 </p>\\n<p>我们可以如下图操作， 打开Mist，将代码copy到Mist中的编辑器中即可：\\n<img src=\\\"/blogimgs/blockchain/deploy-contract.png\\\" alt=\\\"部署contract\\\">\\n<img src=\\\"/blogimgs/blockchain/copy-solidity.png\\\" alt=\\\"复制solidity代码\\\"></p>\\n<p>PS， 从上图中我们可以看出Mist其实里面包含的是一个网页， 直接在浏览器里访问网页url也可以：<a href=\\\"https://wallet.ethereum.org/\\\">https://wallet.ethereum.org/</a> 。</p>\\n<p>是可以部署了， 但是没啥用， 因为balanceOf里每个地址都是0。 我们来给自己分配的token：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Chips</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">21000000</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Chips是构造函数， 名称需要与contract名称一致， 只会在contract被部署的时候执行一次。<code class=\\\"language-text\\\">msg.sender</code>是部署合约的人。 分配多少你可以随便写， 21000000是致敬BTC， 当然也可以用参数传递进去：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Chips</span><span class=\\\"token punctuation\\\">(</span>uint256 initialSupply<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> initialSupply<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>现在所有的token都在自己手里， 没啥价值， 我们要分点给其他人啊， 于是需要转账功能：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>address _to<span class=\\\"token punctuation\\\">,</span> uint256 _value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>代码简单直接， 就是从发送者(msg.sender)转给to。 但是这里显然有问题， 万一发送者余额不足呢， 这种情况我们应该终止交易。 要提前终止代码执行有两种方法： return和throw。 return花费更少的gas， 但是之前修改的状态会被保留； 而throw会回滚所有的修改， 但是会花费掉所有gas。所以我们加一下判断：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>address _to<span class=\\\"token punctuation\\\">,</span> uint256 _value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 检查账户token够不够， 以及是否会溢出</span>\\n        <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">>=</span> _value <span class=\\\"token operator\\\">&amp;&amp;</span> balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> _value <span class=\\\"token operator\\\">>=</span> balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"contract信息\\\"><a href=\\\"#contract%E4%BF%A1%E6%81%AF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>contract信息</h2>\\n<p>现在我们来添加一些关于contract的信息， 在contract中添加几个字段：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">string <span class=\\\"token keyword\\\">public</span> name<span class=\\\"token punctuation\\\">;</span>\\nstring <span class=\\\"token keyword\\\">public</span> symbol<span class=\\\"token punctuation\\\">;</span>\\nuint8 <span class=\\\"token keyword\\\">public</span> decimals<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>然后修改构造函数：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Chips</span><span class=\\\"token punctuation\\\">(</span>uint256 initialSupply<span class=\\\"token punctuation\\\">,</span> string tokenName<span class=\\\"token punctuation\\\">,</span> string tokenSymbol<span class=\\\"token punctuation\\\">,</span> uint8 decimalUnits<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> initialSupply<span class=\\\"token punctuation\\\">;</span>              <span class=\\\"token comment\\\">// 初始token数量</span>\\n        name <span class=\\\"token operator\\\">=</span> tokenName<span class=\\\"token punctuation\\\">;</span>                                   <span class=\\\"token comment\\\">// token显示名称</span>\\n        symbol <span class=\\\"token operator\\\">=</span> tokenSymbol<span class=\\\"token punctuation\\\">;</span>                               <span class=\\\"token comment\\\">// token显示符号</span>\\n        decimals <span class=\\\"token operator\\\">=</span> decimalUnits<span class=\\\"token punctuation\\\">;</span>                            <span class=\\\"token comment\\\">// 小数位数</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这里需要注意的是decimals，它的含义是1个token可以拆分成多少个最小基本单位。 比如1ether = 10 ** 18 wei， 所以Ethereum里decimals是18； 而如果是美刀， 则1美刀=100美分， 所以decimals是2。 这个地方没理解好后面会有坑，我们稍后介绍。</p>\\n<h2 id=\\\"events\\\"><a href=\\\"#events\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Events</h2>\\n<p>我们想监听contract的某些状态， 比如当contract发生修改时，我们想获得通知。只需要写一个空函数（首字母大写）即可：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    event <span class=\\\"token function\\\">Transfer</span><span class=\\\"token punctuation\\\">(</span>address indexed <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> address indexed to<span class=\\\"token punctuation\\\">,</span> uint256 value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>然后我们可以在<code class=\\\"language-text\\\">transfer</code>函数中调用：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">        emit <span class=\\\"token function\\\">Transfer</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> _to<span class=\\\"token punctuation\\\">,</span> _value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>这样钱包会收到通知。</p>\\n<h2 id=\\\"deploy\\\"><a href=\\\"#deploy\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Deploy</h2>\\n<p>我们来用Mist把前面代码部署到Ethereum网络吧！</p>\\n<p>选“合约” -》 “部署新合约”， 然后把solidity代码复制到编辑器里， 在“选择欲部署的合约”里选择Chips， 然后填上初始参数，如下图：\\n<img src=\\\"/blogimgs/blockchain/deploy-contract2.png\\\" alt=\\\"部署contract\\\"></p>\\n<p>注意，这里我们初始给了10000， 但是decimal units为2， 其实表示的是100“块”token， 最小单位是0.01“块”token。</p>\\n<p>滚动到最下面， 设置一个合适的gas， 然后点击“部署”， 在弹出框中输入密码，点确定。 然后在<code class=\\\"language-text\\\">geth console</code>里开启挖矿， <code class=\\\"language-text\\\">miner.start(1)</code>， 过一会就会在主界面看到确认信息。\\n<img src=\\\"/blogimgs/blockchain/confirmations.png\\\" alt=\\\"确认\\\"></p>\\n<p>点击<code class=\\\"language-text\\\">[Main account](Etherbase)</code>进入账号页面， 会看到自己拥有全部的<code class=\\\"language-text\\\">FirstChips</code>： 100, 00$$。\\n<img src=\\\"/blogimgs/blockchain/mainaccount.png\\\" alt=\\\"main account\\\"></p>\\n<p>点击<code class=\\\"language-text\\\">FirstChips（管理页面）</code>进入合约页面， 可以查看合约的信息。\\n<img src=\\\"/blogimgs/blockchain/firstchips.png\\\" alt=\\\"FirstChips\\\"></p>\\n<p>现在我们可以转点token给朋友了。 点击发送， 配置好地址和数量， 选好token类型， 拖到最下面点击发送即可。\\n<img src=\\\"/blogimgs/blockchain/send-ok.png\\\" alt=\\\"send-ok\\\">\\n注意这里有个小坑， 数量这里输入10， 是指的token（相当于“块”）， 而我们之前设置decimal units是2， 所以是1000“分”。第一次的时候没注意， 在构造函数填的只是100（相当于只有1块），结果这边转10块的时候， 总是报错。\\n<img src=\\\"/blogimgs/blockchain/transfer-error.png\\\" alt=\\\"transfer-error\\\"></p>\\n<p>输入密码， 继续挖一会矿， 会发现main account里面只有90, 00$$了， 然后在另一个账号里多了10,00$$。 如果另一个账号是在其他客户端上（比如转给其他朋友）， 则他们是看不到新的token的。 需要在FirstChips的合约页面， 点击复制地址， 将地址发给朋友， 然后他们在合约页面，点查看代币， 然后把地址复制进去即可。\\n<img src=\\\"/blogimgs/blockchain/watch-token0.png\\\" alt=\\\"watch-token0\\\">\\n<img src=\\\"/blogimgs/blockchain/watch-token.png\\\" alt=\\\"watch-token\\\"></p>\\n<p>当然，你也可以调用contract的transfer函数来转账，注意这里的单位是“分”！\\n<img src=\\\"/blogimgs/blockchain/transfer2.png\\\" alt=\\\"transfer2\\\"></p>\\n<p>就这样我们很快就发了一个币， 当然只是运行在私有网络上， 要想部署到main net， 需要花费ethereum， 目前还没必要。</p>\\n<p>目前只有转账功能， 接下来我们打算设计一些复杂功能， 比如自动跟ether交易啊， POW机制啊， 账户冻结啊， 通过oraclize访问外部资源等， 敬请期待！</p>\\n<h1 id=\\\"参考资料\\\"><a href=\\\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考资料</h1>\\n<ul>\\n<li><a href=\\\"https://www.ethereum.org/token\\\">https://www.ethereum.org/token</a></li>\\n<li><a href=\\\"http://www.ethdocs.org\\\">http://www.ethdocs.org</a></li>\\n<li><a href=\\\"https://github.com/ethereum/go-ethereum/wiki/\\\">https://github.com/ethereum/go-ethereum/wiki/</a></li>\\n<li><a href=\\\"https://solidity.readthedocs.io\\\">https://solidity.readthedocs.io</a></li>\\n<li><a href=\\\"http://web3js.readthedocs.io/en/1.0/index.html\\\">http://web3js.readthedocs.io/en/1.0/index.html</a> </li>\\n</ul>\",\"timeToRead\":4,\"frontmatter\":{\"title\":\"区块链系列六：设计自己的cryptocurrency\",\"date\":\"2018-04-07\",\"category\":\"Blockchain\",\"tags\":[\"Ethereum\",\"以太坊\"],\"math\":null}}},\"pathContext\":{\"prev\":{\"url\":\"/blockchain-ethereum-3/\",\"title\":\"区块链系列七：Solidity学习笔记\"},\"slug\":\"/blockchain-ethereum-2/\",\"next\":{\"url\":\"/blockchain-ethereum-1/\",\"title\":\"区块链系列五：Ethereum学习笔记\"}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blockchain-ethereum-2-813e884d47b4b8d4f5ce.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Magicly's Blog\",\"author\":\"Magicly\"}},\"markdownRemark\":{\"id\":\"/Users/spring/Developer/Gatsby/springjphoenix.github.io/src/pages/blockchain-ethereum-2.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><a href=\\\"/blockchain-ethereum-0\\\">区块链系列四：Hello Ethereum!</a>介绍了Ethereum的一些基础知识， 本文我们来用Ethereum发一个币玩玩。</p>\\n<!-- more -->\\n<h1 id=\\\"安装客户端和钱包\\\"><a href=\\\"#%E5%AE%89%E8%A3%85%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E9%92%B1%E5%8C%85\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>安装客户端和钱包</h1>\\n<p>按之前介绍安装客户端， 我们用Go语言版本的<a href=\\\"https://github.com/ethereum/go-ethereum/\\\">Geth</a>。</p>\\n<p>下载安装<a href=\\\"https://github.com/ethereum/mist/releases\\\">Mist或Ethereum Wallet</a>，Mist其实包含了钱包功能以及Remix IDE， 功能很强大的。</p>\\n<h1 id=\\\"启动测试网络\\\"><a href=\\\"#%E5%90%AF%E5%8A%A8%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>启动测试网络</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth --identity <span class=\\\"token string\\\">\\\"MyEther\\\"</span> --rpc --rpccorsdomain <span class=\\\"token string\\\">\\\"*\\\"</span> --datadir ~/.ethereum_private --nodiscover --networkid 1999 --ipcpath ~/Library/Ethereum/geth.ipc</code></pre>\\n      </div>\\n<p>注意， 如果我们用<code class=\\\"language-text\\\">--datadir</code>指定了自定义的存储位置， <code class=\\\"language-text\\\">geth.ipc</code>会存储在此目录下。 而Mist自带一个geth客户端， 默认会去连localhost的默认客户端， 如果连不到则会启动自己的geth， 尝试连接mainnet。 所以为了让Mist连接我们的private network， 需要用<code class=\\\"language-text\\\">--ipcpath</code>将<code class=\\\"language-text\\\">geth.ipc</code>指定到默认位置。这样Mist就会连接到我们的客户端启动的private network了。</p>\\n<h1 id=\\\"最小可行token：-mvtminimum-viable-token\\\"><a href=\\\"#%E6%9C%80%E5%B0%8F%E5%8F%AF%E8%A1%8Ctoken%EF%BC%9A-mvtminimum-viable-token\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>最小可行Token： MVT(Minimum Viable Token)</h1>\\n<p>Show me the code!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.20</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 指定编译器版本</span>\\n\\ncontract MyToken <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 记录每个address的账户余额</span>\\n    <span class=\\\"token function\\\">mapping</span> <span class=\\\"token punctuation\\\">(</span>address <span class=\\\"token operator\\\">=></span> uint256<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> balanceOf<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// 构造函数， 指定contract创建者的初始余额</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">MyToken</span><span class=\\\"token punctuation\\\">(</span>\\n        uint256 initialSupply\\n        <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> initialSupply<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// 转账</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>address _to<span class=\\\"token punctuation\\\">,</span> uint256 _value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">>=</span> _value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>           <span class=\\\"token comment\\\">// 账户余额是否足够</span>\\n        <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> _value <span class=\\\"token operator\\\">>=</span> balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 是否会溢出</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"理解contract\\\"><a href=\\\"#%E7%90%86%E8%A7%A3contract\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>理解contract</h1>\\n<p>现在我们来从零开始逐渐构建一份完整的contract，并添加一些高级功能。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.20</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 指定编译器版本</span>\\n\\n    contract Chips <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">mapping</span> <span class=\\\"token punctuation\\\">(</span>address <span class=\\\"token operator\\\">=></span> uint256<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> balanceOf<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">pragma</code>指定编译器版本。 contract类似于class， Chips是contract的名称（也就是我们token的名称）。balanceOf是Chips的一个字段， 类型为<code class=\\\"language-text\\\">mapping (address =&gt; uint256)</code>。 mapping是一种数据类型， 类似于Hashmap， 这里拿来存每个地址都多少token。 public表示所有人都可以访问。 </p>\\n<p>我们可以如下图操作， 打开Mist，将代码copy到Mist中的编辑器中即可：\\n<img src=\\\"/blogimgs/blockchain/deploy-contract.png\\\" alt=\\\"部署contract\\\">\\n<img src=\\\"/blogimgs/blockchain/copy-solidity.png\\\" alt=\\\"复制solidity代码\\\"></p>\\n<p>PS， 从上图中我们可以看出Mist其实里面包含的是一个网页， 直接在浏览器里访问网页url也可以：<a href=\\\"https://wallet.ethereum.org/\\\">https://wallet.ethereum.org/</a> 。</p>\\n<p>是可以部署了， 但是没啥用， 因为balanceOf里每个地址都是0。 我们来给自己分配的token：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Chips</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">21000000</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Chips是构造函数， 名称需要与contract名称一致， 只会在contract被部署的时候执行一次。<code class=\\\"language-text\\\">msg.sender</code>是部署合约的人。 分配多少你可以随便写， 21000000是致敬BTC， 当然也可以用参数传递进去：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Chips</span><span class=\\\"token punctuation\\\">(</span>uint256 initialSupply<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> initialSupply<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>现在所有的token都在自己手里， 没啥价值， 我们要分点给其他人啊， 于是需要转账功能：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>address _to<span class=\\\"token punctuation\\\">,</span> uint256 _value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>代码简单直接， 就是从发送者(msg.sender)转给to。 但是这里显然有问题， 万一发送者余额不足呢， 这种情况我们应该终止交易。 要提前终止代码执行有两种方法： return和throw。 return花费更少的gas， 但是之前修改的状态会被保留； 而throw会回滚所有的修改， 但是会花费掉所有gas。所以我们加一下判断：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>address _to<span class=\\\"token punctuation\\\">,</span> uint256 _value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 检查账户token够不够， 以及是否会溢出</span>\\n        <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">>=</span> _value <span class=\\\"token operator\\\">&amp;&amp;</span> balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> _value <span class=\\\"token operator\\\">>=</span> balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"contract信息\\\"><a href=\\\"#contract%E4%BF%A1%E6%81%AF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>contract信息</h2>\\n<p>现在我们来添加一些关于contract的信息， 在contract中添加几个字段：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">string <span class=\\\"token keyword\\\">public</span> name<span class=\\\"token punctuation\\\">;</span>\\nstring <span class=\\\"token keyword\\\">public</span> symbol<span class=\\\"token punctuation\\\">;</span>\\nuint8 <span class=\\\"token keyword\\\">public</span> decimals<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>然后修改构造函数：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Chips</span><span class=\\\"token punctuation\\\">(</span>uint256 initialSupply<span class=\\\"token punctuation\\\">,</span> string tokenName<span class=\\\"token punctuation\\\">,</span> string tokenSymbol<span class=\\\"token punctuation\\\">,</span> uint8 decimalUnits<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> initialSupply<span class=\\\"token punctuation\\\">;</span>              <span class=\\\"token comment\\\">// 初始token数量</span>\\n        name <span class=\\\"token operator\\\">=</span> tokenName<span class=\\\"token punctuation\\\">;</span>                                   <span class=\\\"token comment\\\">// token显示名称</span>\\n        symbol <span class=\\\"token operator\\\">=</span> tokenSymbol<span class=\\\"token punctuation\\\">;</span>                               <span class=\\\"token comment\\\">// token显示符号</span>\\n        decimals <span class=\\\"token operator\\\">=</span> decimalUnits<span class=\\\"token punctuation\\\">;</span>                            <span class=\\\"token comment\\\">// 小数位数</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这里需要注意的是decimals，它的含义是1个token可以拆分成多少个最小基本单位。 比如1ether = 10 ** 18 wei， 所以Ethereum里decimals是18； 而如果是美刀， 则1美刀=100美分， 所以decimals是2。 这个地方没理解好后面会有坑，我们稍后介绍。</p>\\n<h2 id=\\\"events\\\"><a href=\\\"#events\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Events</h2>\\n<p>我们想监听contract的某些状态， 比如当contract发生修改时，我们想获得通知。只需要写一个空函数（首字母大写）即可：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    event <span class=\\\"token function\\\">Transfer</span><span class=\\\"token punctuation\\\">(</span>address indexed <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> address indexed to<span class=\\\"token punctuation\\\">,</span> uint256 value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>然后我们可以在<code class=\\\"language-text\\\">transfer</code>函数中调用：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">        emit <span class=\\\"token function\\\">Transfer</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> _to<span class=\\\"token punctuation\\\">,</span> _value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>这样钱包会收到通知。</p>\\n<h2 id=\\\"deploy\\\"><a href=\\\"#deploy\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Deploy</h2>\\n<p>我们来用Mist把前面代码部署到Ethereum网络吧！</p>\\n<p>选“合约” -》 “部署新合约”， 然后把solidity代码复制到编辑器里， 在“选择欲部署的合约”里选择Chips， 然后填上初始参数，如下图：\\n<img src=\\\"/blogimgs/blockchain/deploy-contract2.png\\\" alt=\\\"部署contract\\\"></p>\\n<p>注意，这里我们初始给了10000， 但是decimal units为2， 其实表示的是100“块”token， 最小单位是0.01“块”token。</p>\\n<p>滚动到最下面， 设置一个合适的gas， 然后点击“部署”， 在弹出框中输入密码，点确定。 然后在<code class=\\\"language-text\\\">geth console</code>里开启挖矿， <code class=\\\"language-text\\\">miner.start(1)</code>， 过一会就会在主界面看到确认信息。\\n<img src=\\\"/blogimgs/blockchain/confirmations.png\\\" alt=\\\"确认\\\"></p>\\n<p>点击<code class=\\\"language-text\\\">[Main account](Etherbase)</code>进入账号页面， 会看到自己拥有全部的<code class=\\\"language-text\\\">FirstChips</code>： 100, 00$$。\\n<img src=\\\"/blogimgs/blockchain/mainaccount.png\\\" alt=\\\"main account\\\"></p>\\n<p>点击<code class=\\\"language-text\\\">FirstChips（管理页面）</code>进入合约页面， 可以查看合约的信息。\\n<img src=\\\"/blogimgs/blockchain/firstchips.png\\\" alt=\\\"FirstChips\\\"></p>\\n<p>现在我们可以转点token给朋友了。 点击发送， 配置好地址和数量， 选好token类型， 拖到最下面点击发送即可。\\n<img src=\\\"/blogimgs/blockchain/send-ok.png\\\" alt=\\\"send-ok\\\">\\n注意这里有个小坑， 数量这里输入10， 是指的token（相当于“块”）， 而我们之前设置decimal units是2， 所以是1000“分”。第一次的时候没注意， 在构造函数填的只是100（相当于只有1块），结果这边转10块的时候， 总是报错。\\n<img src=\\\"/blogimgs/blockchain/transfer-error.png\\\" alt=\\\"transfer-error\\\"></p>\\n<p>输入密码， 继续挖一会矿， 会发现main account里面只有90, 00$$了， 然后在另一个账号里多了10,00$$。 如果另一个账号是在其他客户端上（比如转给其他朋友）， 则他们是看不到新的token的。 需要在FirstChips的合约页面， 点击复制地址， 将地址发给朋友， 然后他们在合约页面，点查看代币， 然后把地址复制进去即可。\\n<img src=\\\"/blogimgs/blockchain/watch-token0.png\\\" alt=\\\"watch-token0\\\">\\n<img src=\\\"/blogimgs/blockchain/watch-token.png\\\" alt=\\\"watch-token\\\"></p>\\n<p>当然，你也可以调用contract的transfer函数来转账，注意这里的单位是“分”！\\n<img src=\\\"/blogimgs/blockchain/transfer2.png\\\" alt=\\\"transfer2\\\"></p>\\n<p>就这样我们很快就发了一个币， 当然只是运行在私有网络上， 要想部署到main net， 需要花费ethereum， 目前还没必要。</p>\\n<p>目前只有转账功能， 接下来我们打算设计一些复杂功能， 比如自动跟ether交易啊， POW机制啊， 账户冻结啊， 通过oraclize访问外部资源等， 敬请期待！</p>\\n<h1 id=\\\"参考资料\\\"><a href=\\\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考资料</h1>\\n<ul>\\n<li><a href=\\\"https://www.ethereum.org/token\\\">https://www.ethereum.org/token</a></li>\\n<li><a href=\\\"http://www.ethdocs.org\\\">http://www.ethdocs.org</a></li>\\n<li><a href=\\\"https://github.com/ethereum/go-ethereum/wiki/\\\">https://github.com/ethereum/go-ethereum/wiki/</a></li>\\n<li><a href=\\\"https://solidity.readthedocs.io\\\">https://solidity.readthedocs.io</a></li>\\n<li><a href=\\\"http://web3js.readthedocs.io/en/1.0/index.html\\\">http://web3js.readthedocs.io/en/1.0/index.html</a> </li>\\n</ul>\",\"timeToRead\":4,\"frontmatter\":{\"title\":\"区块链系列六：设计自己的cryptocurrency\",\"date\":\"2018-04-07\",\"category\":\"Blockchain\",\"tags\":[\"Ethereum\",\"以太坊\"],\"math\":null}}},\"pathContext\":{\"prev\":{\"url\":\"/blockchain-ethereum-3/\",\"title\":\"区块链系列七：Solidity学习笔记\"},\"slug\":\"/blockchain-ethereum-2/\",\"next\":{\"url\":\"/blockchain-ethereum-1/\",\"title\":\"区块链系列五：Ethereum学习笔记\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blockchain-ethereum-2.json\n// module id = 597\n// module chunks = 278883057223883"],"sourceRoot":""}
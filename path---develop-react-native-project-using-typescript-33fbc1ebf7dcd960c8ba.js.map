{"version":3,"sources":["webpack:///path---develop-react-native-project-using-typescript-33fbc1ebf7dcd960c8ba.js","webpack:///./.cache/json/develop-react-native-project-using-typescript.json"],"names":["webpackJsonp","351","module","exports","data","markdownRemark","html","frontmatter","title","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,o3GAAkxFC,aAAgtBC,MAAA,mDAA0DC,aAAgBC,KAAA","file":"path---develop-react-native-project-using-typescript-33fbc1ebf7dcd960c8ba.js","sourcesContent":["webpackJsonp([103205617662649],{\n\n/***/ 351:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h5>1、生成项目</h5>\\n<pre><code class=\\\"language-bash\\\">react-native init newshunguang\\n</code></pre>\\n<h5>2、添加开发依赖</h5>\\n<pre><code class=\\\"language-bash\\\">yarn add react-native-typescript-transformer typescript tslib ts-jest --dev\\n</code></pre>\\n<p><code>react-native-typescript-transformer</code>是比较关键的一步，它的作用是在构建期间将typescript转换成JavaScript。要达到我们想要的效果，我们需要在项目根目录下创建一个文件：<code>rn-cli.config.js</code>：</p>\\n<pre><code class=\\\"language-javascript\\\">module.exports = {\\n    getTransformModulePath() {\\n      return require.resolve('react-native-typescript-transformer')\\n    },\\n    getSourceExts() {\\n      return ['ts', 'tsx'];\\n    }\\n}\\n</code></pre>\\n<h5>3、添加<code>tsconfig.json</code>文件来做一些ts编译的配置</h5>\\n<pre><code class=\\\"language-javascript\\\">{\\n    \\\"compilerOptions\\\": {\\n      \\\"target\\\": \\\"es2015\\\",\\n      \\\"jsx\\\": \\\"react\\\",\\n      \\\"noEmit\\\": true,\\n      \\\"moduleResolution\\\": \\\"node\\\",\\n      \\\"importHelpers\\\": true,\\n      \\\"allowSyntheticDefaultImports\\\": true,\\n      \\\"experimentalDecorators\\\": true,\\n      \\\"locale\\\": \\\"en-us\\\",\\n      \\\"allowJs\\\": true,\\n      \\\"skipLibCheck\\\": true\\n    },\\n    \\\"exclude\\\": [\\n      \\\"node_modules\\\"\\n    ]\\n}\\n</code></pre>\\n<h5>4、添加typings（一些有用的类型的声明）：</h5>\\n<pre><code class=\\\"language-bash\\\">yarn add @types/jest @types/react @types/react-native @types/react-navigation @types/react-redux @types/react-test-renderer --dev\\n</code></pre>\\n<h5>5、添加typescript依赖：</h5>\\n<pre><code class=\\\"language-bash\\\">yarn add typescript tslint\\n</code></pre>\\n<p>然后我们需要添加规则，创建一个<code>tslint.json</code>文件（可以通过<code>tslint -init</code>创建）：</p>\\n<pre><code class=\\\"language-json\\\">{\\n    \\\"defaultSeverity\\\": \\\"error\\\",\\n    \\\"extends\\\": [\\n        \\\"tslint:recommended\\\"\\n    ],\\n    \\\"jsRules\\\": {},\\n    \\\"rules\\\": {\\n        \\\"quotemark\\\": [true, \\\"single\\\"],\\n        \\\"object-literal-sort-keys\\\": false,\\n        \\\"no-console\\\": [false],\\n        \\\"ordered-imports\\\": false,\\n        \\\"no-unused-expression\\\": false,\\n        \\\"indent\\\": [true, \\\"spaces\\\", 2],\\n        \\\"arrow-return-shorthand\\\": true,\\n        \\\"arrow-parens\\\": [false],\\n        \\\"no-var-requires\\\": false,        \\n        \\\"no-shadowed-variable\\\": [\\n          true,\\n          { \\\"temporalDeadZone\\\": false }\\n        ],\\n        \\\"max-line-length\\\":[\\n            true,\\n            260\\n        ]\\n    },\\n    \\\"rulesDirectory\\\": [\\\"src/\\\", \\\"App.tsx\\\"]\\n}\\n</code></pre>\\n<p>到目前为止，我们就可以通过<code>tsc</code> 和 <code>tslint -p tsconfig.json</code>（执行命令前需要全局安装typsescript 和 tslint：<code>npm i -g typescript tslint</code>）来确定我们需要去解决哪些错误了。</p>\\n<h5>6、改造生成的项目</h5>\\n<p>现在执行上一步中的<code>tsc</code> 和 <code>tslint -p tsconfig.json</code>命令会报错，那么接下来我们就要对生成的项目进行改造。</p>\\n<p>1）将App.js改为App.tsx；</p>\\n<p>2）将App.tsx中<code>import React, { Component } from 'react';</code></p>\\n<p>改为<code>import * as React from 'react';</code>。现在执行<code>tsc</code>可以发现错误已经消失了；</p>\\n<p>3）添加<code>src</code>目录，将来我们的项目中的一些组件及目录就放在src目录下；</p>\\n<p>现在运行<code>react-native run-ios</code>，如果一切顺利，我们可以看到以下的界面：</p>\\n<p><img src=\\\"https://ws1.sinaimg.cn/large/006tKfTcly1fqhy3hyp2cj30h00z8jte.jpg\\\"></p>\\n<h5>7、技术选型</h5>\\n<p>我们选择的一些主要的组件：</p>\\n<p>1）状态管理：redux、dva</p>\\n<p>2）路由：react-navigation</p>\\n<p>3）屏幕适配：react-native-extended-stylesheet</p>\\n<p>4）组件库、图表：and-mobile native-echarts</p>\\n<p>5）生产、测试环境配置：react-native-config</p>\\n<pre><code class=\\\"language-bash\\\">yarn add react-redux redux-logger dva-core react-navigation react-navigation-redux-helpers react-native-extended-stylesheet antd-mobile native-echarts react-native-config\\n</code></pre>\",\"frontmatter\":{\"title\":\"develop react native project using typescript\"}}},\"pathContext\":{\"slug\":\"/develop_react-native_project_using_typescript/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---develop-react-native-project-using-typescript-33fbc1ebf7dcd960c8ba.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h5>1、生成项目</h5>\\n<pre><code class=\\\"language-bash\\\">react-native init newshunguang\\n</code></pre>\\n<h5>2、添加开发依赖</h5>\\n<pre><code class=\\\"language-bash\\\">yarn add react-native-typescript-transformer typescript tslib ts-jest --dev\\n</code></pre>\\n<p><code>react-native-typescript-transformer</code>是比较关键的一步，它的作用是在构建期间将typescript转换成JavaScript。要达到我们想要的效果，我们需要在项目根目录下创建一个文件：<code>rn-cli.config.js</code>：</p>\\n<pre><code class=\\\"language-javascript\\\">module.exports = {\\n    getTransformModulePath() {\\n      return require.resolve('react-native-typescript-transformer')\\n    },\\n    getSourceExts() {\\n      return ['ts', 'tsx'];\\n    }\\n}\\n</code></pre>\\n<h5>3、添加<code>tsconfig.json</code>文件来做一些ts编译的配置</h5>\\n<pre><code class=\\\"language-javascript\\\">{\\n    \\\"compilerOptions\\\": {\\n      \\\"target\\\": \\\"es2015\\\",\\n      \\\"jsx\\\": \\\"react\\\",\\n      \\\"noEmit\\\": true,\\n      \\\"moduleResolution\\\": \\\"node\\\",\\n      \\\"importHelpers\\\": true,\\n      \\\"allowSyntheticDefaultImports\\\": true,\\n      \\\"experimentalDecorators\\\": true,\\n      \\\"locale\\\": \\\"en-us\\\",\\n      \\\"allowJs\\\": true,\\n      \\\"skipLibCheck\\\": true\\n    },\\n    \\\"exclude\\\": [\\n      \\\"node_modules\\\"\\n    ]\\n}\\n</code></pre>\\n<h5>4、添加typings（一些有用的类型的声明）：</h5>\\n<pre><code class=\\\"language-bash\\\">yarn add @types/jest @types/react @types/react-native @types/react-navigation @types/react-redux @types/react-test-renderer --dev\\n</code></pre>\\n<h5>5、添加typescript依赖：</h5>\\n<pre><code class=\\\"language-bash\\\">yarn add typescript tslint\\n</code></pre>\\n<p>然后我们需要添加规则，创建一个<code>tslint.json</code>文件（可以通过<code>tslint -init</code>创建）：</p>\\n<pre><code class=\\\"language-json\\\">{\\n    \\\"defaultSeverity\\\": \\\"error\\\",\\n    \\\"extends\\\": [\\n        \\\"tslint:recommended\\\"\\n    ],\\n    \\\"jsRules\\\": {},\\n    \\\"rules\\\": {\\n        \\\"quotemark\\\": [true, \\\"single\\\"],\\n        \\\"object-literal-sort-keys\\\": false,\\n        \\\"no-console\\\": [false],\\n        \\\"ordered-imports\\\": false,\\n        \\\"no-unused-expression\\\": false,\\n        \\\"indent\\\": [true, \\\"spaces\\\", 2],\\n        \\\"arrow-return-shorthand\\\": true,\\n        \\\"arrow-parens\\\": [false],\\n        \\\"no-var-requires\\\": false,        \\n        \\\"no-shadowed-variable\\\": [\\n          true,\\n          { \\\"temporalDeadZone\\\": false }\\n        ],\\n        \\\"max-line-length\\\":[\\n            true,\\n            260\\n        ]\\n    },\\n    \\\"rulesDirectory\\\": [\\\"src/\\\", \\\"App.tsx\\\"]\\n}\\n</code></pre>\\n<p>到目前为止，我们就可以通过<code>tsc</code> 和 <code>tslint -p tsconfig.json</code>（执行命令前需要全局安装typsescript 和 tslint：<code>npm i -g typescript tslint</code>）来确定我们需要去解决哪些错误了。</p>\\n<h5>6、改造生成的项目</h5>\\n<p>现在执行上一步中的<code>tsc</code> 和 <code>tslint -p tsconfig.json</code>命令会报错，那么接下来我们就要对生成的项目进行改造。</p>\\n<p>1）将App.js改为App.tsx；</p>\\n<p>2）将App.tsx中<code>import React, { Component } from 'react';</code></p>\\n<p>改为<code>import * as React from 'react';</code>。现在执行<code>tsc</code>可以发现错误已经消失了；</p>\\n<p>3）添加<code>src</code>目录，将来我们的项目中的一些组件及目录就放在src目录下；</p>\\n<p>现在运行<code>react-native run-ios</code>，如果一切顺利，我们可以看到以下的界面：</p>\\n<p><img src=\\\"https://ws1.sinaimg.cn/large/006tKfTcly1fqhy3hyp2cj30h00z8jte.jpg\\\"></p>\\n<h5>7、技术选型</h5>\\n<p>我们选择的一些主要的组件：</p>\\n<p>1）状态管理：redux、dva</p>\\n<p>2）路由：react-navigation</p>\\n<p>3）屏幕适配：react-native-extended-stylesheet</p>\\n<p>4）组件库、图表：and-mobile native-echarts</p>\\n<p>5）生产、测试环境配置：react-native-config</p>\\n<pre><code class=\\\"language-bash\\\">yarn add react-redux redux-logger dva-core react-navigation react-navigation-redux-helpers react-native-extended-stylesheet antd-mobile native-echarts react-native-config\\n</code></pre>\",\"frontmatter\":{\"title\":\"develop react native project using typescript\"}}},\"pathContext\":{\"slug\":\"/develop_react-native_project_using_typescript/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/develop-react-native-project-using-typescript.json\n// module id = 351\n// module chunks = 103205617662649"],"sourceRoot":""}
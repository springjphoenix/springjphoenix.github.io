webpackJsonp([0x6c631a76220e],{606:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Magicly's Blog",author:"Magicly"}},markdownRemark:{id:"/Users/spring/Developer/Gatsby/gatsby-blog/src/pages/electron-starter.md absPath of file >>> MarkdownRemark",html:'<p>最近要做个 Desktop 软件， 当然首选 Electron， 另外最近用 Typescript 感觉很爽， 所以技术选型为 Electron + React + Typescript， 为了省事想找个 starter 脚手架， 大概找了下面这些。</p>\n<!-- more -->\n<p>------------2018-05-13 更新----------</p>\n<p>使用<a href="https://github.com/iRath96/electron-react-typescript-boilerplate">electron-react-typescript-boilerplate</a>的时候发现一个问题： 在 class 里面不能使用<code class="language-text">arrow function</code>！ 比如如下代码有问题：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token comment">// import { remote } from \'electron\';</span>\n<span class="token comment">// import \'./App.css\';</span>\n\n<span class="token comment">// const electron = (window as any).require(\'electron\');</span>\n<span class="token comment">// const fs = electron.remote.require(\'fs\');</span>\n<span class="token comment">// const ipcRenderer = electron.ipcRenderer;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ipcRenderer<span class="token punctuation">,</span> remote <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'electron\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ipcRenderer<span class="token punctuation">,</span> remote<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// console.log(fs, ipcRenderer);</span>\n\n<span class="token comment">// const logo = require(\'./logo.svg\');</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// state = {} as any;</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> any<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'componentDidMount \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// handleClick() {</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'handleClick\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'magicly\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>header className<span class="token operator">=</span><span class="token string">"App-header"</span><span class="token operator">></span>\n          <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">"App-title"</span><span class="token operator">></span>Welcome to React<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span>\n        <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">"App-intro"</span><span class="token operator">></span>\n          To <span class="token keyword">get</span> started<span class="token punctuation">,</span> edit <span class="token operator">&lt;</span>code<span class="token operator">></span>src<span class="token operator">/</span>App<span class="token punctuation">.</span>tsx<span class="token operator">&lt;</span><span class="token operator">/</span>code<span class="token operator">></span> and save to reload<span class="token punctuation">.</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>butotn<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>点击 button 的时候会报错:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">warning<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">33</span> Warning<span class="token punctuation">:</span> Can\'t call setState on a component that is not yet mounted<span class="token punctuation">.</span> This is a no<span class="token operator">-</span>op<span class="token punctuation">,</span> but it might indicate a bug <span class="token keyword">in</span> your application<span class="token punctuation">.</span> Instead<span class="token punctuation">,</span> assign to <span class="token template-string"><span class="token string">`this.state`</span></span> directly or define a <span class="token template-string"><span class="token string">`state = {};`</span></span> <span class="token keyword">class</span> <span class="token class-name">property</span> <span class="token keyword">with</span> the desired state <span class="token keyword">in</span> the App component<span class="token punctuation">.</span></code></pre>\n      </div>\n<p>但其实这个是再正常不过的代码了啊， 在普通的<code class="language-text">create-react-app</code>建的项目里面完全没有问题， 即使运行在<code class="language-text">electron</code>中也是完全 ok 的。 所以决定最后还是选择<code class="language-text">create-react-app</code>新建 Typescript 项目， 然后添加 electron 依赖好了。 当然这个脚手架也有好处，就是可以直接使用<code class="language-text">import { ipcRenderer, remote } from &#39;electron&#39;;</code>。</p>\n<p>其实后来仔细想了下， 为啥要用 electron 呢？ 相比直接网页多了什么？</p>\n<ul>\n<li>能获得更多的原生接口？</li>\n</ul>\n<p>现在 H5 的丰富接口已经完全够用， 包括 service worker 可以离线， web worker 多线程， websocket， notification 等。</p>\n<ul>\n<li>高性能？</li>\n</ul>\n<p>可以使用 WebAssembly， 并发可以用 web workers.</p>\n<ul>\n<li>接口请求跨域？</li>\n</ul>\n<p>可以通过添加 chrome 插件来支持。</p>\n<ul>\n<li>浏览器兼容性！</li>\n</ul>\n<p>对了， 这个似乎说到了重点， electron 把 node 和 chrome 打包进去了， 能保证运行环境一致， 不用再为兼容性问题头痛！</p>\n<p>总之， 如果是自己使用的项目（或者可以跟客户协商的话），其实 chrome 网页基本完全够用了， so， 先就做网页吧。</p>\n<hr>\n<h1 id="httpsgithubcomelectronelectron-quick-start"><a href="#httpsgithubcomelectronelectron-quick-start" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="https://github.com/electron/electron-quick-start">https://github.com/electron/electron-quick-start</a></h1>\n<p>electron 自己出的， 其实就是个 Hello World， 用 JS 语言， 不满足要求。</p>\n<h1 id="httpsgithubcomelectronelectron-quick-start-typescript"><a href="#httpsgithubcomelectronelectron-quick-start-typescript" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="https://github.com/electron/electron-quick-start-typescript">https://github.com/electron/electron-quick-start-typescript</a></h1>\n<p>上一个的 Typescript 版本， 只是 Hello World，不行。</p>\n<h1 id="httpsgithubcomchentsulinelectron-react-boilerplate"><a href="#httpsgithubcomchentsulinelectron-react-boilerplate" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="https://github.com/chentsulin/electron-react-boilerplate">https://github.com/chentsulin/electron-react-boilerplate</a></h1>\n<p>这个算是 stars 数比较多的一个了， 综合了 React + Redux + React Router + Webpack + HMR， 算是满足我的要求了。 Static Type Checking 用的<a href="https://flow.org/">Flow</a>， 之前也用过， 还不错， 不过感觉使用场景没有 Typescript 那么广呢， 后来决定用 TS， 所以这次也用 TS 吧。</p>\n<h1 id="httpsgithubcomirath96electron-react-typescript-boilerplate"><a href="#httpsgithubcomirath96electron-react-typescript-boilerplate" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="https://github.com/iRath96/electron-react-typescript-boilerplate">https://github.com/iRath96/electron-react-typescript-boilerplate</a></h1>\n<blockquote>\n<p>This is a slight modificiation of the great electron-react-boilerplate by chentsulin. Instead of Babel and flow this version uses TypeScript. Support for Sass has also been added.</p>\n</blockquote>\n<p>上一个的 Typescript 版本， 哎， 正好！</p>\n<h1 id="create-react-app--electron"><a href="#create-react-app--electron" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Create React App + Electron</h1>\n<p>前面的感觉都是以 Electron 为主， 然后加上一些前端技术栈。 可以反过来想， 能不能直接用<a href="https://github.com/facebook/create-react-app">CRA</a>新建项目， 然后加上 Electron 依赖呢？</p>\n<p>还真有人这样做了， 就是这篇<a href="https://medium.freecodecamp.org/building-an-electron-application-with-create-react-app-97945861647c">How to build an Electron app using create-react-app. No webpack configuration or “ejecting” necessary.</a>。</p>\n<p>大概步骤如下：</p>\n<ol>\n<li>create-react-app 新建项目（现在可以添加<code class="language-text">--scripts-version=react-scripts-ts</code>创建 Typescript 项目了）</li>\n<li><code class="language-text">npm i -D electron</code>，添加 electron 为依赖</li>\n<li>将<a href="https://github.com/electron/electron-quick-start">electron-quick-start</a>里的<code class="language-text">main.js</code>（是 electron 的入口文件）copy 过来，可以改个名字比如<code class="language-text">electron-starter.js</code></li>\n<li>修改 3 中的<code class="language-text">mainWindow.loadURL</code>参数为<code class="language-text">localhost:3000</code></li>\n<li>在<code class="language-text">package.json</code>中添加如下内容：</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"src/electron-starter.js"</span><span class="token punctuation">,</span>\n  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"electron"</span><span class="token punctuation">:</span> <span class="token string">"electron ."</span>\n  <span class="token punctuation">}</span></code></pre>\n      </div>\n<ol start="6">\n<li>执行<code class="language-text">npm start</code>然后执行<code class="language-text">npm run electron</code></li>\n</ol>\n<p>这样就可以享受所有 CRA 的好处了， 如果是已经有一个 react 项目的话， 这样迁移过来是最容易的了。</p>\n<p>有两个小问题， 一是 4 中<code class="language-text">mainWindow.loadURL</code>的参数， 我们指定为<code class="language-text">localhost:3000</code>， 这个其实是 CRA 的开发环境的地址，如果最后正式发布的话， 应该配置<code class="language-text">npm run build</code>之后的<code class="language-text">index.html</code>， 可以通过环境变量控制。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token string">"electron-dev"</span><span class="token punctuation">:</span> <span class="token string">"ELECTRON_START_URL=http://localhost:3000 electron ."</span></code></pre>\n      </div>\n<p>然后将<code class="language-text">electron-starter.js</code>相应内容改为:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> startUrl <span class="token operator">=</span>\n  process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ELECTRON_START_URL</span> <span class="token operator">||</span>\n  url<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    pathname<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/../build/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    protocol<span class="token punctuation">:</span> <span class="token string">"file:"</span><span class="token punctuation">,</span>\n    slashes<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span>startUrl<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>还有一个问题， CRA 默认打包出来的<code class="language-text">index.html</code>里面引用资源是认为放在根目录下， 所以需要在<code class="language-text">package.json</code>里面配置<code class="language-text">home</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token string">"homepage"</span><span class="token punctuation">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span></code></pre>\n      </div>\n<p>最后还有一个问题， 在我们通常写的 JS 代码里面直接 require <code class="language-text">electron</code>是有问题的，可以通过如下方法解决（参看<a href="https://github.com/electron/electron/issues/7300">讨论</a>）：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> electron <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"electron"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> electron<span class="token punctuation">.</span>remote<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ipcRenderer <span class="token operator">=</span> electron<span class="token punctuation">.</span>ipcRenderer<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>感觉这种方式是从现有 React 项目迁移的最好方法了， 不过对 electron 的其他东西，比如打包之类的都没有涉及。</p>\n<p>这里还有更多<a href="https://electronjs.org/community#boilerplates">boilerplates</a>， 下面这几个还没有看过仅供参考：</p>\n<ul>\n<li><a href="https://github.com/emk/electron-test">https://github.com/emk/electron-test</a> ， 这个还整合了 Rust， 也是我后面可能需要的， mark 一下。</li>\n<li><a href="https://github.com/skellock/typescript-with-electron-react-kit">https://github.com/skellock/typescript-with-electron-react-kit</a></li>\n<li><a href="http://blog.scottlogic.com/2017/06/06/typescript-electron-webpack.html">http://blog.scottlogic.com/2017/06/06/typescript-electron-webpack.html</a></li>\n</ul>\n<p>下面几个 repo 也可以看一下， 作为入门 electron 资料还是很不错的：</p>\n<ul>\n<li><a href="https://github.com/electron/simple-samples">https://github.com/electron/simple-samples</a></li>\n<li><a href="https://github.com/electron/electron-api-demos">https://github.com/electron/electron-api-demos</a></li>\n<li><a href="https://github.com/hokein/electron-sample-apps">https://github.com/hokein/electron-sample-apps</a></li>\n</ul>\n<p>当然， 最完整权威的资料还是<a href="https://electronjs.org/docs">官网文档</a>了！</p>',timeToRead:4,frontmatter:{title:"Electron入门资料",date:"2018-05-12",category:"FE",tags:["electron","typescript","create react app","react"],math:null}}},pathContext:{prev:{url:"/tools-used/",title:"那些年使用过的技术"},slug:"/electron-starter/",next:{url:"/typescript-import-json/",title:"Typescript如何import json文件"}}}}});
//# sourceMappingURL=path---electron-starter-f0c3f69af47147f68d1b.js.map
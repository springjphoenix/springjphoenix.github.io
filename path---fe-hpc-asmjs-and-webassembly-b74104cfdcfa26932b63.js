webpackJsonp([78476115392674],{611:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Magicly's Blog",author:"Magicly"}},markdownRemark:{id:"/Users/spring/Developer/Gatsby/springjphoenix.github.io/src/pages/fe-hpc/asmjs-and-webassembly.md absPath of file >>> MarkdownRemark",html:'<p><a href="/fe-hpc/webworkers">前一篇</a>我们说了要解决高性能计算的两个方法，一个是并发用WebWorkers，另一个就是用更底层的静态语言。</p>\n<p>2012年，Mozilla的工程师<a href="https://twitter.com/kripken">Alon Zakai</a>在研究<a href="http://llvm.org/">LLVM</a>编译器时突发奇想：能不能把C/C++编译成Javascript，并且尽量达到Native代码的速度呢？于是他开发了<a href="https://kripken.github.io/emscripten-site/index.html">Emscripten</a>编译器，用于将C/C++代码编译成Javascript的一个子集<a href="http://asmjs.org/">asm.js</a>，性能差不多是原生代码的50%。大家可以看看<a href="http://kripken.github.io/mloc_emscripten_talk/">这个PPT</a>。</p>\n<p>之后Google开发了<a href="">Portable Native Client</a>，也是一种能让浏览器运行C/C++代码的技术。\n后来估计大家都觉得各搞各的不行啊，居然Google, Microsoft, Mozilla, Apple等几家大公司一起合作开发了一个面向Web的通用二进制和文本格式的项目，那就是<a href="http://webassembly.org/">WebAssembly</a>，官网上的介绍是：</p>\n<blockquote>\n<p>WebAssembly or wasm is a new portable, size- and load-time-efficient format suitable for compilation to the web.</p>\n</blockquote>\n<blockquote>\n<p>WebAssembly is currently being designed as an open standard by a W3C Community Group that includes representatives from all major browsers.</p>\n</blockquote>\n<p>所以，<a href="http://webassembly.org/">WebAssembly</a>应该是一个前景很好的项目。我们可以看一下<a href="https://caniuse.com/#search=webassembly">目前浏览器的支持情况</a>：\n<img src="/blogimgs/caniuse-webassembly.png" alt="can i use webassembly"></p>\n<!-- more -->\n<h1 id="安装emscripten"><a href="#%E5%AE%89%E8%A3%85emscripten" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装Emscripten</h1>\n<p>访问<a href="https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html">https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html</a></p>\n<p>1. 下载对应平台版本的SDK</p>\n<p>2. 通过emsdk获取最新版工具</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token comment"># Fetch the latest registry of available tools.</span>\n./emsdk update\n\n<span class="token comment"># Download and install the latest SDK tools.</span>\n./emsdk <span class="token function">install</span> latest\n\n<span class="token comment"># Make the "latest" SDK "active" for the current user. (writes ~/.emscripten file)</span>\n./emsdk activate latest\n\n<span class="token comment"># Activate PATH and other environment variables in the current terminal</span>\n<span class="token function">source</span> ./emsdk_env.sh</code></pre>\n      </div>\n<p>3. 将下列添加到环境变量PATH中</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">~/emsdk-portable\n~/emsdk-portable/clang/fastcomp/build_incoming_64/bin\n~/emsdk-portable/emscripten/incoming</code></pre>\n      </div>\n<p>4. 其他</p>\n<p>我在执行的时候碰到报错说<code class="language-text">LLVM</code>版本不对，后来参考<a href="https://kripken.github.io/emscripten-site/docs/building_from_source/configuring_emscripten_settings.html">文档</a>配置了<code class="language-text">LLVM_ROOT</code>变量就好了，如果你没有遇到问题，可以忽略。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">LLVM_ROOT <span class="token operator">=</span> os.path.expanduser<span class="token punctuation">(</span>os.getenv<span class="token punctuation">(</span><span class="token string">\'LLVM\'</span>, <span class="token string">\'/home/ubuntu/a-path/emscripten-fastcomp/build/bin\'</span><span class="token punctuation">))</span></code></pre>\n      </div>\n<p>5. 验证是否安装好</p>\n<p>执行<code class="language-text">emcc -v</code>，如果安装好会出现如下信息：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc <span class="token punctuation">(</span>Emscripten gcc/clang-like replacement + linker emulating GNU ld<span class="token punctuation">)</span> 1.37.21\nclang version 4.0.0 <span class="token punctuation">(</span>https://github.com/kripken/emscripten-fastcomp-clang.git 974b55fd84ca447c4297fc3b00cefb6394571d18<span class="token punctuation">)</span> <span class="token punctuation">(</span>https://github.com/kripken/emscripten-fastcomp.git 9e4ee9a67c3b67239bd1438e31263e2e86653db5<span class="token punctuation">)</span> <span class="token punctuation">(</span>emscripten 1.37.21 <span class="token keyword">:</span> 1.37.21<span class="token punctuation">)</span>\nTarget: x86_64-apple-darwin15.5.0\nThread model: posix\nInstalledDir: /Users/magicly/emsdk-portable/clang/fastcomp/build_incoming_64/bin\nINFO:root:<span class="token punctuation">(</span>Emscripten: Running sanity checks<span class="token punctuation">)</span></code></pre>\n      </div>\n<h1 id="hello-webassembly"><a href="#hello-webassembly" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hello, WebAssembly!</h1>\n<p>创建一个文件<code class="language-text">hello.c</code>：</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, WebAssembly!\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>编译<code class="language-text">C/C++</code>代码：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc hello.c</code></pre>\n      </div>\n<p>上述命令会生成一个<code class="language-text">a.out.js</code>文件，我们可以直接用<code class="language-text">Node.js</code>执行：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">node a.out.js</code></pre>\n      </div>\n<p>输出</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">Hello, WebAssembly<span class="token operator">!</span></code></pre>\n      </div>\n<p>为了让代码运行在网页里面，执行下面命令会生成<code class="language-text">hello.html</code>和<code class="language-text">hello.js</code>两个文件，其中<code class="language-text">hello.js</code>和<code class="language-text">a.out.js</code>内容是完全一样的。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc hello.c -o hello.html</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  webasm-study md5 a.out.js\nMD5 <span class="token punctuation">(</span>a.out.js<span class="token punctuation">)</span> <span class="token operator">=</span> d7397f44f817526a4d0f94bc85e46429\n➜  webasm-study md5 hello.js\nMD5 <span class="token punctuation">(</span>hello.js<span class="token punctuation">)</span> <span class="token operator">=</span> d7397f44f817526a4d0f94bc85e46429</code></pre>\n      </div>\n<p>然后在浏览器打开hello.html，可以看到页面\n<img src="/blogimgs/hello1.png" alt="hello1.html"></p>\n<p>前面生成的代码都是<code class="language-text">asm.js</code>，毕竟<a href="https://kripken.github.io/emscripten-site/index.html">Emscripten</a>是人家作者<a href="https://twitter.com/kripken">Alon Zakai</a>最早用来生成<code class="language-text">asm.js</code>的，默认输出<code class="language-text">asm.js</code>也就不足为奇了。当然，可以通过option生成<code class="language-text">wasm</code>，会生成三个文件：<code class="language-text">hello-wasm.html</code>, <code class="language-text">hello-wasm.js</code>, <code class="language-text">hello-wasm.wasm</code>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc hello.c -s WASM<span class="token operator">=</span>1 -o hello-wasm.html</code></pre>\n      </div>\n<p>然后浏览器打开<code class="language-text">hello-wasm.html</code>，发现报错<code class="language-text">TypeError: Failed to fetch</code>。原因是<code class="language-text">wasm</code>文件是通过<code class="language-text">XHR</code>异步加载的，用<code class="language-text">file:////</code>访问会报错，所以我们需要启一个服务器。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g serve\nserve <span class="token keyword">.</span></code></pre>\n      </div>\n<p>然后访问<code class="language-text">http://localhost:5000/hello-wasm.html</code>，就可以看到正常结果了。</p>\n<h1 id="调用cc函数"><a href="#%E8%B0%83%E7%94%A8cc%E5%87%BD%E6%95%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>调用C/C++函数</h1>\n<p>前面的<code class="language-text">Hello, WebAssembly!</code>都是<code class="language-text">main</code>函数直接打出来的，而我们使用<code class="language-text">WebAssembly</code>的目的是为了高性能计算，做法多半是用C/C++实现某个函数进行耗时的计算，然后编译成<code class="language-text">wasm</code>，暴露给js去调用。</p>\n<p>在文件<code class="language-text">add.c</code>中写如下代码：</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a + b: %d"</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>有两种方法可以把<code class="language-text">add</code>方法暴露出来给js调用。</p>\n<h2 id="通过命令行参数暴露api"><a href="#%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E6%9A%B4%E9%9C%B2api" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>通过命令行参数暴露API</h2>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc -s EXPORTED_FUNCTIONS<span class="token operator">=</span><span class="token string">"[\'_add\']"</span> add.c -o add.js</code></pre>\n      </div>\n<p>注意方法名<code class="language-text">add</code>前必须加<code class="language-text">_</code>。\n然后我们可以在<code class="language-text">Node.js</code>里面这样使用：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// file node-add.js</span>\n<span class="token keyword">const</span> add_module <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./add.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>add_module<span class="token punctuation">.</span><span class="token function">ccall</span><span class="token punctuation">(</span><span class="token string">\'add\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>执行<code class="language-text">node node-add.js</code>会输出<code class="language-text">5</code>。\n如果需要在web页面使用的话，执行：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc -s EXPORTED_FUNCTIONS<span class="token operator">=</span><span class="token string">"[\'_add\']"</span> add.c -o add.html</code></pre>\n      </div>\n<p>然后在生成的<code class="language-text">add.html</code>中加入如下代码：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nativeAdd()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>text/javascript<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">\n    <span class="token keyword">function</span> <span class="token function">nativeAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> result <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">ccall</span><span class="token punctuation">(</span><span class="token string">\'add\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>然后点击button，就可以看到执行结果了。</p>\n<p><code class="language-text">Module.ccall</code>会直接调用<code class="language-text">C/C++</code>代码的方法，更通用的场景是我们获取到一个包装过的函数，可以在js里面反复调用，这需要用<code class="language-text">Module.cwrap</code>，具体细节可以参看<a href="https://kripken.github.io/emscripten-site/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html#interacting-with-code-ccall-cwrap">文档</a>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> cAdd <span class="token operator">=</span> add_module<span class="token punctuation">.</span><span class="token function">cwrap</span><span class="token punctuation">(</span><span class="token string">\'add\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cAdd</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cAdd</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="定义函数的时候添加code-classlanguage-textemscripten_keepalivecode"><a href="#%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E7%9A%84%E6%97%B6%E5%80%99%E6%B7%BB%E5%8A%A0code-classlanguage-textemscripten_keepalivecode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>定义函数的时候添加<code class="language-text">EMSCRIPTEN_KEEPALIVE</code></h2>\n<p>添加文件<code class="language-text">add2.c</code>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;emscripten.h></span></span>\n\n<span class="token keyword">int</span> EMSCRIPTEN_KEEPALIVE <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a + b: %d"</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>执行命令：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc add2.c -o add2.html</code></pre>\n      </div>\n<p>同样在<code class="language-text">add2.html</code>中添加代码：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nativeAdd()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>text/javascript<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">\n    <span class="token keyword">function</span> <span class="token function">nativeAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> result <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">ccall</span><span class="token punctuation">(</span><span class="token string">\'add\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>但是，当你点击button的时候，报错：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">Assertion failed: the runtime was exited <span class="token punctuation">(</span>use NO_EXIT_RUNTIME to keep it alive after main<span class="token punctuation">(</span><span class="token punctuation">)</span> exits<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>可以通过在<code class="language-text">main()</code>中添加<code class="language-text">emscripten_exit_with_live_runtime()</code>解决：</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;emscripten.h></span></span>\n\n<span class="token keyword">int</span> EMSCRIPTEN_KEEPALIVE <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a + b: %d"</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">emscripten_exit_with_live_runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>或者也可以直接在命令行中添加<code class="language-text">-s NO_EXIT_RUNTIME=1</code>来解决，</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc add2.c -o add2.js -s NO_EXIT_RUNTIME<span class="token operator">=</span>1</code></pre>\n      </div>\n<p>不过会报一个警告：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">exit<span class="token punctuation">(</span>0<span class="token punctuation">)</span> implicitly called by end of main<span class="token punctuation">(</span><span class="token punctuation">)</span>, but noExitRuntime, so not exiting the runtime <span class="token punctuation">(</span>you can use emscripten_force_exit, <span class="token keyword">if</span> you want to force a <span class="token boolean">true</span> shutdown<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>所以建议采用第一种方法。</p>\n<p>上述生成的代码都是<code class="language-text">asm.js</code>，只需要在编译参数中添加<code class="language-text">-s WASM=1</code>中就可以生成<code class="language-text">wasm</code>，然后使用方法都一样。</p>\n<h1 id="用asmjs和webassembly执行耗时计算"><a href="#%E7%94%A8asmjs%E5%92%8Cwebassembly%E6%89%A7%E8%A1%8C%E8%80%97%E6%97%B6%E8%AE%A1%E7%AE%97" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>用asm.js和WebAssembly执行耗时计算</h1>\n<p>前面准备工作都做完了， 现在我们来试一下用<code class="language-text">C</code>代码来优化<a href="./webworkers">前一篇</a>中提过的问题。代码很简单：</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code class="language-c"><span class="token comment">// file sum.c</span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token comment">// #include &lt;emscripten.h></span>\n\n<span class="token keyword">long</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">long</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    total <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    total <span class="token operator">-</span><span class="token operator">=</span> i<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> total<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum(0, 1000000000): %ld"</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// emscripten_exit_with_live_runtime();</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>注意用<code class="language-text">gcc</code>编译的时候需要把跟<code class="language-text">emscriten</code>相关的两行代码注释掉，否则编译不过。\n我们先直接用<code class="language-text">gcc</code>编译成<code class="language-text">native code</code>看看代码运行多块呢？</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  webasm-study gcc sum.c\n➜  webasm-study <span class="token function">time</span> ./a.out\nsum<span class="token punctuation">(</span>0, 1000000000<span class="token punctuation">)</span>: 0./a.out  5.70s user 0.02s system 99% cpu 5.746 total\n➜  webasm-study gcc -O1 sum.c\n➜  webasm-study <span class="token function">time</span> ./a.out\nsum<span class="token punctuation">(</span>0, 1000000000<span class="token punctuation">)</span>: 0./a.out  0.00s user 0.00s system 64% cpu 0.003 total\n➜  webasm-study gcc -O2 sum.c\n➜  webasm-study <span class="token function">time</span> ./a.out\nsum<span class="token punctuation">(</span>0, 1000000000<span class="token punctuation">)</span>: 0./a.out  0.00s user 0.00s system 64% cpu 0.003 total</code></pre>\n      </div>\n<p>可以看到有没有优化差别还是很大的，优化过的代码执行时间是<strong>3ms!</strong>。really？仔细想想，我for循环了10亿次啊，每次for执行大概是两次加法，两次赋值，一次比较，而我总共做了两次for循环，也就是说至少是100亿次操作，而我的mac pro是<code class="language-text">2.5 GHz Intel Core i7</code>，所以1s应该也就执行25亿次CPU指令操作吧，怎么可能逆天到这种程度，肯定是哪里错了。想起之前看到的<a href="http://ling0322.info/2014/01/20/rust-vs-go-in-code-optimization.html">一篇rust测试性能的文章</a>，说rust直接在编译的时候算出了答案， 然后把结果直接写到了编译出来的代码里， 不知道gcc是不是也做了类似的事情。在知乎上<a href="https://www.zhihu.com/question/27090458">GCC中-O1 -O2 -O3 优化的原理是什么？</a>这篇文章里， 还真有loop-invariant code motion（LICM）针对for的优化，所以我把代码增加了一些if判断，希望能“糊弄”得了gcc的优化。</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token comment">// #include &lt;emscripten.h></span>\n\n<span class="token comment">// long EMSCRIPTEN_KEEPALIVE sum(long start, long end) {</span>\n<span class="token keyword">long</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">long</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">+</span><span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">-</span><span class="token operator">=</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">-</span><span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> total<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum(0, 1000000000): %ld"</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// emscripten_exit_with_live_runtime();</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>执行结果大概要正常一些了。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">➜  webasm-study gcc -O2 sum.c\n➜  webasm-study <span class="token function">time</span> ./a.out\nsum<span class="token punctuation">(</span>0, 1000000000<span class="token punctuation">)</span>: 0./a.out  0.32s user 0.00s system 99% cpu 0.324 total</code></pre>\n      </div>\n<p>ok，我们来编译成<code class="language-text">asm.js</code>了。</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;emscripten.h></span></span>\n\n<span class="token keyword">long</span> EMSCRIPTEN_KEEPALIVE <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token comment">// long sum(long start, long end) {</span>\n  <span class="token keyword">long</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">+</span><span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">-</span><span class="token operator">=</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">-</span><span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> total<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum(0, 1000000000): %ld"</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">emscripten_exit_with_live_runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>执行</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc sum.c -o sum.html</code></pre>\n      </div>\n<p>然后在<code class="language-text">sum.html</code>中添加代码</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nativeSum()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>NativeSum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jsSumCalc()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>JSSum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>text/javascript<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">\n    <span class="token keyword">function</span> <span class="token function">nativeSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> result <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">ccall</span><span class="token punctuation">(</span><span class="token string">\'sum\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'number\'</span><span class="token punctuation">,</span> <span class="token string">\'number\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`result: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, cost time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t2 <span class="token operator">-</span> t1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>text/javascript<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">\n    <span class="token keyword">function</span> <span class="token function">jsSum</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          total <span class="token operator">+=</span> i<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          total <span class="token operator">+=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          total <span class="token operator">-=</span> i<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          total <span class="token operator">-=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">return</span> total<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">function</span> <span class="token function">jsSumCalc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token constant">N</span> <span class="token operator">=</span> <span class="token number">100000000</span><span class="token punctuation">;</span><span class="token comment">// 总次数1亿</span>\n      t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      result <span class="token operator">=</span> <span class="token function">jsSum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`result: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, cost time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t2 <span class="token operator">-</span> t1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>另外，我们修改成编译成WebAssembly看看效果呢？</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc sum.c -o sum.js -s WASM<span class="token operator">=</span>1</code></pre>\n      </div>\n<table>\n<thead>\n<tr>\n<th>Browser</th>\n<th>webassembly</th>\n<th>asm.js</th>\n<th>js</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Chrome61</td>\n<td>1300ms</td>\n<td>600ms</td>\n<td>3300ms</td>\n</tr>\n<tr>\n<td>Firefox55</td>\n<td>600ms</td>\n<td>800ms</td>\n<td>700ms</td>\n</tr>\n<tr>\n<td>Safari9.1</td>\n<td>不支持</td>\n<td>2800ms</td>\n<td>因不支持ES6我懒得改写没测试</td>\n</tr>\n</tbody>\n</table>\n<p>感觉Firefox有点不合理啊， 默认的JS太强了吧。然后觉得webassembly也没有特别强啊，突然发现<code class="language-text">emcc</code>编译的时候没有指定优化选项<code class="language-text">-O2</code>。再来一次：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">emcc -O2 sum.c -o sum.js <span class="token comment"># for asm.js</span>\nemcc -O2 sum.c -o sum.js -s WASM<span class="token operator">=</span>1 <span class="token comment"># for webassembly</span></code></pre>\n      </div>\n<table>\n<thead>\n<tr>\n<th>Browser</th>\n<th>webassembly -O2</th>\n<th>asm.js -O2</th>\n<th>js</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Chrome61</td>\n<td>1300ms</td>\n<td>600ms</td>\n<td>3300ms</td>\n</tr>\n<tr>\n<td>Firefox55</td>\n<td>650ms</td>\n<td>630ms</td>\n<td>700ms</td>\n</tr>\n</tbody>\n</table>\n<p>居然没什么变化， 大失所望。号称<code class="language-text">asm.js</code>可以达到native的50%速度么，这个倒是好像达到了。但是今年<a href="https://www.youtube.com/watch?v=6v4E6oksar0">Compiling for the Web with WebAssembly (Google I/O ‘17)</a>里说WebAssembly是<code class="language-text">1.2x slower than native code</code>，感觉不对呢。<a href="http://asmjs.org/">asm.js</a>还有一个好处是，它就是js，所以即使浏览器不支持，也能当成不同的js执行，只是没有加速效果。当然<a href="http://webassembly.org/">WebAssembly</a>受到各大厂商一致推崇，作为一个新的标准，肯定前景会更好，期待会有更好的表现。</p>\n<h1 id="rust"><a href="#rust" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Rust</h1>\n<p>本来还想写Rust编译成WebAssembly的，不过感觉本文已经太长了， 后期再写如果结合Rust做WebAssembly吧。</p>\n<p>着急的可以先看看这两篇</p>\n<ul>\n<li><a href="https://users.rust-lang.org/t/compiling-to-the-web-with-rust-and-emscripten/7627">Compiling to the web with Rust and emscripten</a></li>\n<li><a href="https://www.slideshare.net/RReverser/rust-javascript">Rust ⇋ JavaScript</a></li>\n</ul>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="http://asmjs.org/">http://asmjs.org/</a></li>\n<li><a href="http://webassembly.org/">http://webassembly.org/</a></li>\n<li><a href="https://kripken.github.io/emscripten-site/index.html">https://kripken.github.io/emscripten-site/index.html</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly">https://developer.mozilla.org/en-US/docs/WebAssembly</a></li>\n<li><a href="http://www.codepool.biz/emscripten-compile-cc-javascript.html">http://www.codepool.biz/emscripten-compile-cc-javascript.html</a></li>\n<li><a href="http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html">http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html</a></li>\n<li><a href="https://zhuanlan.zhihu.com/p/25865972">https://zhuanlan.zhihu.com/p/25865972</a></li>\n</ul>',
timeToRead:11,frontmatter:{title:"前端高性能计算之二：asm.js & webassembly",date:"2017-09-25",category:"FE",tags:["asm.js","webassembly"],math:null}}},pathContext:{prev:{url:"/fe-hpc/rust-asmjs-and-webassembly",title:"前端高性能计算之三：Rust -> asm.js & webassembly"},slug:"/fe-hpc/asmjs-and-webassembly",next:{url:"/fe-hpc/webworkers",title:"前端高性能计算之一：WebWorkers"}}}}});
//# sourceMappingURL=path---fe-hpc-asmjs-and-webassembly-b74104cfdcfa26932b63.js.map
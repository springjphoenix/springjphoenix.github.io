webpackJsonp([22267116088497],{611:function(s,n){s.exports={data:{site:{siteMetadata:{title:"Magicly's Blog",author:"Magicly"}},markdownRemark:{id:"/Users/spring/Developer/Gatsby/springjphoenix.github.io/src/pages/fe-hpc/webworkers.md absPath of file >>> MarkdownRemark",html:'<p>最近做一个项目，里面涉及到在前端做大量计算，直接用js跑了一下，大概需要15s的时间， 也就是用户的浏览器会卡死15s，这个完全接受不了。</p>\n<p>虽说有V8这样牛逼的引擎，但大家知道js并不适合做CPU密集型的计算，一是因为单线程，二是因为动态语言。我们就从这两个突破口入手，首先搞定“单线程”的限制，尝试用WebWorkers来加速计算。</p>\n<!-- more -->\n<h1 id="什么是webworkers"><a href="#%E4%BB%80%E4%B9%88%E6%98%AFwebworkers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么是WebWorkers</h1>\n<p>简单说，<a href="http://www.whatwg.org/specs/web-workers/current-work/">WebWorkers</a>是一个HTML5的新API，web开发者可以通过此API在后台运行一个脚本而不阻塞UI，可以用来做需要大量计算的事情，充分利用CPU多核。</p>\n<p>大家可以看看这篇文章介绍<a href="https://www.html5rocks.com/en/tutorials/workers/basics/%EF%BC%8C">https://www.html5rocks.com/en/tutorials/workers/basics/，</a> 或者<a href="https://www.html5rocks.com/zh/tutorials/workers/basics/">对应的中文版</a>。</p>\n<blockquote>\n<p>The Web Workers specification defines an API for spawning background scripts in your web application. Web Workers allow you to do things like fire up long-running scripts to handle computationally intensive tasks, but without blocking the UI or other scripts to handle user interactions. </p>\n</blockquote>\n<p>可以打开<a href="https://nerget.com/rayjs-mt/rayjs.html">这个链接</a>自己体验一下WebWorkers的加速效果。</p>\n<p>现在浏览器基本都<a href="https://caniuse.com/#search=webworkers">支持WebWorkers了</a>。\n<img src="/blogimgs/caniuse-webworkers.png" alt="can i use webworkers"></p>\n<h1 id="paralleljs"><a href="#paralleljs" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Parallel.js</h1>\n<p>直接使用<a href="http://www.whatwg.org/specs/web-workers/current-work/">WebWorkers</a>接口还是太繁琐，好在有人已经对此作了封装：<a href="https://parallel.js.org/">Parallel.js</a>。</p>\n<p>注意<a href="https://parallel.js.org/">Parallel.js</a>可以通过node安装：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> paralleljs</code></pre>\n      </div>\n<p>不过这个是在node.js下用的，用的node的cluster模块。如果要在浏览器里使用的话， 需要直接应用js:</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parallel.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>然后可以得到一个全局变量，<code class="language-text">Parallel</code>。<code class="language-text">Parallel</code>提供了<code class="language-text">map</code>和<code class="language-text">reduce</code>两个函数式编程的接口，可以非常方便的进行并发操作。</p>\n<p>我们先来定义一下我们的问题，由于业务比较复杂，我这里把问题简化成求1-1,0000,0000的和，然后在依次减去1-1,0000,0000，答案显而易见： 0！ 这样做是因为数字太大的话会有数据精度的问题，两种方法的结果会有一些差异，会让人觉得并行的方法不可靠。此问题在我的mac pro chrome61下直接简单地跑js运行的话大概是1.5s（我们实际业务问题需要15s，这里为了避免用户测试的时候把浏览器搞死，我们简化了问题）。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">N</span> <span class="token operator">=</span> <span class="token number">100000000</span><span class="token punctuation">;</span><span class="token comment">// 总次数1亿</span>\n\n<span class="token comment">// 更新自2017-10-24 16：47：00</span>\n<span class="token comment">// 代码没有任何含义，纯粹是为了模拟一个耗时计算，直接用</span>\n<span class="token comment">//   for (let i = start; i &lt;= end; i += 1) total += i;</span>\n<span class="token comment">// 有几个问题，一是代码太简单没有任何稍微复杂一点的操作，后面用C代码优化的时候会优化得很夸张，没法对比。</span>\n<span class="token comment">// 二是数据溢出问题， 我懒得处理这个问题，下面代码简单地先加起来，然后再减掉，答案显而易见为0，便于测试。</span>\n<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">+=</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">+=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">-=</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">-=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> total<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">paraSum</span><span class="token punctuation">(</span><span class="token constant">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token constant">N1</span> <span class="token operator">=</span> <span class="token constant">N</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//我们分成10分，没分分别交给一个web worker，parallel.js会根据电脑的CPU核数建立适量的workers</span>\n  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parallel</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n <span class="token operator">=></span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000000</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">*</span> <span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 在parallel.js里面没法直接应用外部变量N1</span>\n    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>data <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> acc <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> e <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> acc <span class="token operator">+</span> e<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token constant">N</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> paraSum <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>代码比较简单，我这里说几个刚用的时候遇到的坑。</p>\n<ul>\n<li><strong>require所有需要的函数</strong></li>\n</ul>\n<p>比如在上诉代码中用到了<code class="language-text">sum</code>，你需要提前<code class="language-text">require(sum)</code>，如果sum中由用到了另一个函数<code class="language-text">f</code>，你还需要<code class="language-text">require(f)</code>，同样如果<code class="language-text">f</code>中用到了<code class="language-text">g</code>，则还需要<code class="language-text">require(g)</code>，直到你require了所有用到的定义的函数。。。。</p>\n<ul>\n<li><strong>没法<code class="language-text">require</code>变量</strong></li>\n</ul>\n<p>我们上诉代码我本来定义了<code class="language-text">N1</code>，但是没法用</p>\n<ul>\n<li><strong><code class="language-text">ES6</code>编译成<code class="language-text">ES5</code>之后的问题以及Chrome没报错</strong></li>\n</ul>\n<p>实际项目中一开始我们用到了<code class="language-text">ES6</code>的特性：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">数组解构</a>。本来这是很简单的特性，现在大部分浏览器都已经支持了，不过我当时配置的babel会编译成<code class="language-text">ES5</code>，所以会生成代码<code class="language-text">_slicedToArray</code>，大家可以<a href="http://babeljs.io/repl/#?babili=false&#x26;browsers=&#x26;build=&#x26;builtIns=false&#x26;code_lz=GYVwdgxgLglg9mABMAFAbQIYBpECMC6AlIgN4BQiiATgKZQhVIaIDUeA3GQL5lkDmiALzJ0AJhwBmImQgIAznAA2NAHSK4fFH0JA&#x26;debug=false&#x26;circleciRepo=&#x26;evaluate=true&#x26;lineWrap=false&#x26;presets=es2015%2Creact%2Cstage-2&#x26;prettier=false&#x26;targets=&#x26;version=6.26.0">在线上Babel测试</a>，然后Chrome下面始终不work，也没有任何报错信息，查了很久，后来在Firefox下打开，有报错信息：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html">ReferenceError: _slicedToArray is not defined</code></pre>\n      </div>\n<p>看来Chrome也不是万能的啊。。。</p>\n<p>大家可以在<a href="./parallel-test">此Demo页面</a>测试， 提速大概在4倍左右，当然还是得看自己电脑CPU的核数。\n另外我后来在同样的电脑上Firefox55.0.3（64位）测试，上诉代码居然只要190ms！！！在Safari9.1.1下也是190ms左右。。。</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers">https://developer.mozilla.org/zh-CN/docs/Web/API/Web<em>Workers</em>API/Using<em>web</em>workers</a></li>\n<li><a href="https://www.html5rocks.com/en/tutorials/workers/basics/">https://www.html5rocks.com/en/tutorials/workers/basics/</a></li>\n<li><a href="https://parallel.js.org/">https://parallel.js.org/</a></li>\n<li><a href="https://johnresig.com/blog/web-workers/">https://johnresig.com/blog/web-workers/</a></li>\n<li><a href="http://javascript.ruanyifeng.com/htmlapi/webworker.html">http://javascript.ruanyifeng.com/htmlapi/webworker.html</a></li>\n<li><a href="http://blog.teamtreehouse.com/using-web-workers-to-speed-up-your-javascript-applications">http://blog.teamtreehouse.com/using-web-workers-to-speed-up-your-javascript-applications</a></li>\n</ul>',timeToRead:3,frontmatter:{title:"前端高性能计算之一：WebWorkers",date:"2017-09-22",category:"FE",tags:["js","hpc"],math:null}}},pathContext:{prev:{url:"/fe-hpc/asmjs-and-webassembly",title:"前端高性能计算之二：asm.js & webassembly"},slug:"/fe-hpc/webworkers",next:{url:"/chrome-extentions/",title:"推荐一些Chrome插件"}}}}});
//# sourceMappingURL=path---fe-hpc-webworkers-3b13da79d6cc0f9e1db0.js.map
{"version":3,"sources":["webpack:///path---index-08116c0db91351a5adbe.js","webpack:///./.cache/json/index.json"],"names":["webpackJsonp","616","module","exports","data","site","siteMetadata","title","allMarkdownRemark","edges","node","html","timeToRead","excerpt","fields","slug","frontmatter","date","category","tags","pathContext","current","skip","total"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,mBAA0BC,mBAAsBC,QAAUC,MAAQC,KAAA,4teAA82TC,WAAA,EAAAC,QAAA,IAAAC,QAA42LC,KAAA,gBAAsBC,aAAgBT,MAAA,YAAAU,KAAA,aAAAC,SAAA,SAAAC,MAAA,SAA6ET,MAAQC,KAAA;AAA84nBC,WAAA,EAAAC,QAAA,kHAAAC,QAAsyCC,KAAA,sBAA4BC,aAAgBT,MAAA,eAAAU,KAAA,aAAAC,SAAA,KAAAC,MAAA,wDAA2HT,MAAQC,KAAA,8nLAAylKC,WAAA,EAAAC,QAAA,iHAAAC,QAA86BC,KAAA,4BAAkCC,aAAgBT,MAAA,4BAAAU,KAAA,aAAAC,SAAA,KAAAC,MAAA,yBAAyGT,MAAQC,KAAA;AAA0o3DC,WAAA,GAAAC,QAAA,sIAAAC,QAAm/EC,KAAA,2BAAiCC,aAAgBT,MAAA,sBAAAU,KAAA,aAAAC,SAAA,aAAAC,MAAA,iCAAmHT,MAAQC,KAAA,6onBAAu4hBC,WAAA,EAAAC,QAAA,2IAAAC,QAAypHC,KAAA,2BAAiCC,aAAgBT,MAAA,6BAAAU,KAAA,aAAAC,SAAA,aAAAC,MAAA,sBAA+GT,MAAQC,KAAA,giMAAAC,WAAA,EAAAC,QAAA,+IAAAC,QAA24MC,KAAA,2BAAiCC,aAAgBT,MAAA,sBAAAU,KAAA,aAAAC,SAAA,aAAAC,MAAA,+BAAiHT,MAAQC,KAAA;AAAiotDC,WAAA,GAAAC,QAAA,6IAAAC,QAAi9DC,KAAA,2BAAiCC,aAAgBT,MAAA,yBAAAU,KAAA,aAAAC,SAAA,aAAAC,MAAA,sBAA2GT,MAAQC,KAAA,yxWAAAC,WAAA,EAAAC,QAAA,mIAAAC,QAAkwXC,KAAA,mCAAyCC,aAAgBT,MAAA,+BAAAU,KAAA,aAAAC,SAAA,aAAAC,MAAA,+BAA0HT,MAAQC,KAAA,wufAAAC,WAAA,EAAAC,QAAA,uIAAAC,QAAmzgBC,KAAA,iCAAuCC,aAAgBT,MAAA,2BAAAU,KAAA,aAAAC,SAAA,aAAAC,MAAA,sCAA6HT,MAAQC,KAAA;AAA+1tEC,WAAA,EAAAC,QAAA,kIAAAC,QAA02DC,KAAA,4BAAkCC,aAAgBT,MAAA,+BAAAU,KAAA,aAAAC,SAAA,KAAAC,MAAA,qDAAuIC,aAAgBC,QAAA,EAAAC,KAAA,EAAAC,MAAA","file":"path---index-08116c0db91351a5adbe.js","sourcesContent":["webpackJsonp([142629428675168],{\n\n/***/ 616:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Magicly's Blog\"}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"html\":\"<p>这两天整理一下以前的收藏夹， 发现很多以前花时间学过的但是早就不用了的技术资料， 心生感慨，记录下来留作纪念吧。</p>\\n<p>很多已经打不开了， 而居然发现有些好几年前工作中写的代码还在线上， 惊喜。</p>\\n<p><strong>排序没有啥意义， 只是整理顺序， 有些分类也不是很合理。 另外有些技术已经过时， 有些没有过时但是现在我不用了， 有些还在使用。</strong></p>\\n<h1 id=\\\"前端\\\"><a href=\\\"#%E5%89%8D%E7%AB%AF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>前端</h1>\\n<ul>\\n<li>浏览器兼容性， IE6！！！</li>\\n<li>jQuery 以及各种插件</li>\\n<li>圆角实现</li>\\n<li>各种编码乱码问题</li>\\n<li>跨域</li>\\n<li>用 Web 做 ppt</li>\\n<li>各种浏览器（Firefox，Opera，Chrome， IE， Safari）以及插件</li>\\n<li>HTTP 各种 status</li>\\n<li>Cache</li>\\n<li>Emmet</li>\\n<li>Angular</li>\\n<li>React</li>\\n<li>浏览器插件开发</li>\\n<li>微信公众号开发</li>\\n<li>如何在手机上调试 H5</li>\\n</ul>\\n<h1 id=\\\"java\\\"><a href=\\\"#java\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Java</h1>\\n<ul>\\n<li>阻塞非阻塞，同步异步， NIO， AIO</li>\\n<li>Enum</li>\\n<li>Classloader</li>\\n<li>Netty</li>\\n<li>Mina</li>\\n<li>Excel</li>\\n<li>Spring</li>\\n<li>Hibernate</li>\\n<li>Structs</li>\\n<li>Servlet / JSP / JSTL</li>\\n<li>Tomcat / Jetty</li>\\n<li>Eclipse / Idea</li>\\n<li>Ant</li>\\n<li>Zookeeper</li>\\n<li>设计模式</li>\\n<li>Concurrency: JDK 库, fork/join, Disruptor, actor(Akka)</li>\\n<li>内存模型</li>\\n<li>Socket</li>\\n<li>单点登录</li>\\n<li>Session / Cookie</li>\\n<li>计算各种对象所占内存大小</li>\\n<li>安全地实现单例模式， Double-checked locking, Enum, Static class</li>\\n<li>Annotations</li>\\n</ul>\\n<h1 id=\\\"编程语言\\\"><a href=\\\"#%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>编程语言</h1>\\n<ul>\\n<li>Ruby</li>\\n<li>Scala</li>\\n<li>LISP / Clojure</li>\\n<li>F#</li>\\n<li>Haskell</li>\\n<li>JS / TS</li>\\n<li>CoffeeScript</li>\\n<li>Flow</li>\\n<li>AWK &#x26; Sed</li>\\n<li>SML</li>\\n<li>Lua</li>\\n<li>C</li>\\n<li>C++</li>\\n<li>Object-C</li>\\n<li>Swift</li>\\n<li>Go</li>\\n<li>Rust</li>\\n<li>Python</li>\\n<li>PHP</li>\\n<li>Matlab / Octave</li>\\n</ul>\\n<p>有很多只是简单了解了下， 没有深入使用。 比较熟悉的有 Java/Scala/JS/TS, 现在用 Typescript 较多。</p>\\n<h1 id=\\\"函数式编程\\\"><a href=\\\"#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>函数式编程</h1>\\n<h1 id=\\\"scala\\\"><a href=\\\"#scala\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Scala</h1>\\n<ul>\\n<li>sbt</li>\\n<li>scalaz</li>\\n<li>Akka</li>\\n<li>Spray</li>\\n<li>Play!</li>\\n<li>Lift</li>\\n<li>Scalatra</li>\\n<li>ScalaTest</li>\\n<li>Scala.js</li>\\n<li>Scala vim 开发环境配置</li>\\n<li>Scala Android: scaloid</li>\\n<li>Scala-ios</li>\\n<li>Scala Native</li>\\n</ul>\\n<h1 id=\\\"app\\\"><a href=\\\"#app\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>APP</h1>\\n<ul>\\n<li>Scala Android: scaloid</li>\\n<li>Scala-ios， 还有其他语言开发 ios 的</li>\\n<li>PhoneGap / Cordova</li>\\n<li>ionicframework</li>\\n<li>React Native</li>\\n</ul>\\n<h1 id=\\\"vim--emacs\\\"><a href=\\\"#vim--emacs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Vim &#x26; Emacs</h1>\\n<p>两个都用过，花了时间去配置成<strong>IDE</strong>，现在主要用 VSCode / Idea / XCode。。。。Vim 最大的影响就是不管用什么编辑器或 IDE，都要装 Vim 插件， 不然很不习惯。</p>\\n<h1 id=\\\"各种免费-fq-方式\\\"><a href=\\\"#%E5%90%84%E7%A7%8D%E5%85%8D%E8%B4%B9-fq-%E6%96%B9%E5%BC%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>各种免费 FQ 方式</h1>\\n<ul>\\n<li>ssh 隧道</li>\\n<li>IPv6 隧道</li>\\n<li>各种代理</li>\\n<li>VPN</li>\\n<li>Goagent</li>\\n<li>Tor</li>\\n</ul>\\n<p>现在主要用 lantern 和 ss， 踏踏实实花钱买， 省事儿。</p>\\n<h1 id=\\\"reactive--fpr\\\"><a href=\\\"#reactive--fpr\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Reactive &#x26; FPR</h1>\\n<ul>\\n<li>RxJava</li>\\n<li>RxJS</li>\\n</ul>\\n<h1 id=\\\"正则表达式\\\"><a href=\\\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>正则表达式</h1>\\n<h1 id=\\\"github-pages-搭建-blog\\\"><a href=\\\"#github-pages-%E6%90%AD%E5%BB%BA-blog\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>github pages 搭建 blog</h1>\\n<ul>\\n<li>Jekyll</li>\\n<li>Hexo</li>\\n<li>Gatsby（现在在用的）</li>\\n</ul>\\n<h1 id=\\\"linux\\\"><a href=\\\"#linux\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Linux</h1>\\n<ul>\\n<li>fedora</li>\\n<li>ubuntu</li>\\n<li>系统性能诊断</li>\\n<li>Shell</li>\\n</ul>\\n<p>最早的时候要刻四张光盘安装， 后来用 U 盘安装。</p>\\n<h1 id=\\\"爬虫--搜索引擎\\\"><a href=\\\"#%E7%88%AC%E8%99%AB--%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>爬虫 &#x26; 搜索引擎</h1>\\n<ul>\\n<li>Lucene</li>\\n<li>Solr</li>\\n<li>nutch</li>\\n<li>Scrapy</li>\\n</ul>\\n<h1 id=\\\"算法、大数据、mlai\\\"><a href=\\\"#%E7%AE%97%E6%B3%95%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%81mlai\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>算法、大数据、ML/AI</h1>\\n<ul>\\n<li>Mahout</li>\\n<li>OpenCV</li>\\n<li>SIFT</li>\\n<li>OCR / Tesseract</li>\\n<li>LeetCode</li>\\n<li>ACM</li>\\n<li>自然语言处理</li>\\n<li>word2vec</li>\\n<li>神经网络，CNN / RNN</li>\\n<li>推荐， 协同过滤， 矩阵分解</li>\\n<li>Bloom filter</li>\\n<li>MCTS</li>\\n<li>五子棋， 国际象棋</li>\\n</ul>\\n<h1 id=\\\"web-安全\\\"><a href=\\\"#web-%E5%AE%89%E5%85%A8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Web 安全</h1>\\n<ul>\\n<li>XSS</li>\\n<li>CSRF</li>\\n<li>浏览劫持</li>\\n<li>HTTPS</li>\\n<li>对称加密， 非对称加密， Hash， 随机数</li>\\n</ul>\\n<h1 id=\\\"db\\\"><a href=\\\"#db\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>DB</h1>\\n<ul>\\n<li>mysql， 各种索引优化，复合索引。。。</li>\\n<li>Postgrel</li>\\n<li>MongoDB</li>\\n<li>Memcached</li>\\n<li>Redis</li>\\n<li>ssdb</li>\\n</ul>\\n<h1 id=\\\"nodejs\\\"><a href=\\\"#nodejs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Node.js</h1>\\n<ul>\\n<li>Express</li>\\n<li>Koa</li>\\n<li>Egg</li>\\n<li>meteor</li>\\n</ul>\\n<h1 id=\\\"测试\\\"><a href=\\\"#%E6%B5%8B%E8%AF%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>测试</h1>\\n<ul>\\n<li>单元</li>\\n<li>自动化测试</li>\\n<li>截图测试</li>\\n<li>Property based Testing</li>\\n<li>压力测试</li>\\n</ul>\\n<h1 id=\\\"其他\\\"><a href=\\\"#%E5%85%B6%E4%BB%96\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>其他</h1>\\n<ul>\\n<li>DSL</li>\\n<li>Git</li>\\n<li>自由职业</li>\\n<li>敏捷开发</li>\\n<li>重构</li>\\n<li>Firebase / Clouda</li>\\n<li>GTD</li>\\n<li>魔术</li>\\n<li>羽毛球</li>\\n<li>旅游 / 摄影</li>\\n<li>飞叠杯</li>\\n<li>。。。。</li>\\n</ul>\\n<h1 id=\\\"比特币！！！\\\"><a href=\\\"#%E6%AF%94%E7%89%B9%E5%B8%81%EF%BC%81%EF%BC%81%EF%BC%81\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>比特币！！！</h1>\\n<p>最后， 发现自己 2011 年的时候看了一篇比特币的报道， <a href=\\\"http://www.bitecoin.com/online/2011/05/61.html\\\">“比特币是个骗局”，吗？</a>！！！</p>\\n<h1 id=\\\"总结\\\"><a href=\\\"#%E6%80%BB%E7%BB%93\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>总结</h1>\\n<p>由于东西太多了， 目前并没有整理完， 定期整理资料是一个好习惯， 删除东西真的很爽，因为删的都是自己已经了解不需要了的东西。</p>\\n<p>不要只做资料收藏着， 要转化为自己的知识。</p>\\n<p>另外也可以看出， 很多以前花了很多时间研究的东西， 其实早就被淘汰了， 所以很多时候我们不要太纠结技术， 而要关注解决问题本身！</p>\\n<p>因为， 终究， 所有技术都会死的， 我们也是。。。</p>\",\"timeToRead\":4,\"excerpt\":\"…\",\"fields\":{\"slug\":\"/tools-used/\"},\"frontmatter\":{\"title\":\"那些年使用过的技术\",\"date\":\"2018-05-18\",\"category\":\"Others\",\"tags\":[\"杂\"]}}},{\"node\":{\"html\":\"<p>最近要做个 Desktop 软件， 当然首选 Electron， 另外最近用 Typescript 感觉很爽， 所以技术选型为 Electron + React + Typescript， 为了省事想找个 starter 脚手架， 大概找了下面这些。</p>\\n<!-- more -->\\n<p>------------2018-05-13 更新----------</p>\\n<p>使用<a href=\\\"https://github.com/iRath96/electron-react-typescript-boilerplate\\\">electron-react-typescript-boilerplate</a>的时候发现一个问题： 在 class 里面不能使用<code class=\\\"language-text\\\">arrow function</code>！ 比如如下代码有问题：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// import { remote } from 'electron';</span>\\n<span class=\\\"token comment\\\">// import './App.css';</span>\\n\\n<span class=\\\"token comment\\\">// const electron = (window as any).require('electron');</span>\\n<span class=\\\"token comment\\\">// const fs = electron.remote.require('fs');</span>\\n<span class=\\\"token comment\\\">// const ipcRenderer = electron.ipcRenderer;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> ipcRenderer<span class=\\\"token punctuation\\\">,</span> remote <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'electron'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>ipcRenderer<span class=\\\"token punctuation\\\">,</span> remote<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// console.log(fs, ipcRenderer);</span>\\n\\n<span class=\\\"token comment\\\">// const logo = require('./logo.svg');</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span><span class=\\\"token operator\\\">&lt;</span>any<span class=\\\"token punctuation\\\">,</span> any<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// state = {} as any;</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">:</span> any<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">as</span> any<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'componentDidMount '</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function-variable function\\\">handleClick</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// handleClick() {</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'handleClick'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'magicly'</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"App\\\"</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>header className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"App-header\\\"</span><span class=\\\"token operator\\\">></span>\\n          <span class=\\\"token operator\\\">&lt;</span>h1 className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"App-title\\\"</span><span class=\\\"token operator\\\">></span>Welcome to React<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>header<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>p className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"App-intro\\\"</span><span class=\\\"token operator\\\">></span>\\n          To <span class=\\\"token keyword\\\">get</span> started<span class=\\\"token punctuation\\\">,</span> edit <span class=\\\"token operator\\\">&lt;</span>code<span class=\\\"token operator\\\">></span>src<span class=\\\"token operator\\\">/</span>App<span class=\\\"token punctuation\\\">.</span>tsx<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>code<span class=\\\"token operator\\\">></span> and save to reload<span class=\\\"token punctuation\\\">.</span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleClick<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>butotn<span class=\\\"token operator\\\">...</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> App<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>点击 button 的时候会报错:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">warning<span class=\\\"token punctuation\\\">.</span>js<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">33</span> Warning<span class=\\\"token punctuation\\\">:</span> Can't call setState on a component that is not yet mounted<span class=\\\"token punctuation\\\">.</span> This is a no<span class=\\\"token operator\\\">-</span>op<span class=\\\"token punctuation\\\">,</span> but it might indicate a bug <span class=\\\"token keyword\\\">in</span> your application<span class=\\\"token punctuation\\\">.</span> Instead<span class=\\\"token punctuation\\\">,</span> assign to <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`this.state`</span></span> directly or define a <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`state = {};`</span></span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">property</span> <span class=\\\"token keyword\\\">with</span> the desired state <span class=\\\"token keyword\\\">in</span> the App component<span class=\\\"token punctuation\\\">.</span></code></pre>\\n      </div>\\n<p>但其实这个是再正常不过的代码了啊， 在普通的<code class=\\\"language-text\\\">create-react-app</code>建的项目里面完全没有问题， 即使运行在<code class=\\\"language-text\\\">electron</code>中也是完全 ok 的。 所以决定最后还是选择<code class=\\\"language-text\\\">create-react-app</code>新建 Typescript 项目， 然后添加 electron 依赖好了。 当然这个脚手架也有好处，就是可以直接使用<code class=\\\"language-text\\\">import { ipcRenderer, remote } from &#39;electron&#39;;</code>。</p>\\n<p>其实后来仔细想了下， 为啥要用 electron 呢？ 相比直接网页多了什么？</p>\\n<ul>\\n<li>能获得更多的原生接口？</li>\\n</ul>\\n<p>现在 H5 的丰富接口已经完全够用， 包括 service worker 可以离线， web worker 多线程， websocket， notification 等。</p>\\n<ul>\\n<li>高性能？</li>\\n</ul>\\n<p>可以使用 WebAssembly， 并发可以用 web workers.</p>\\n<ul>\\n<li>接口请求跨域？</li>\\n</ul>\\n<p>可以通过添加 chrome 插件来支持。</p>\\n<ul>\\n<li>浏览器兼容性！</li>\\n</ul>\\n<p>对了， 这个似乎说到了重点， electron 把 node 和 chrome 打包进去了， 能保证运行环境一致， 不用再为兼容性问题头痛！</p>\\n<p>总之， 如果是自己使用的项目（或者可以跟客户协商的话），其实 chrome 网页基本完全够用了， so， 先就做网页吧。</p>\\n<hr>\\n<h1 id=\\\"httpsgithubcomelectronelectron-quick-start\\\"><a href=\\\"#httpsgithubcomelectronelectron-quick-start\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><a href=\\\"https://github.com/electron/electron-quick-start\\\">https://github.com/electron/electron-quick-start</a></h1>\\n<p>electron 自己出的， 其实就是个 Hello World， 用 JS 语言， 不满足要求。</p>\\n<h1 id=\\\"httpsgithubcomelectronelectron-quick-start-typescript\\\"><a href=\\\"#httpsgithubcomelectronelectron-quick-start-typescript\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><a href=\\\"https://github.com/electron/electron-quick-start-typescript\\\">https://github.com/electron/electron-quick-start-typescript</a></h1>\\n<p>上一个的 Typescript 版本， 只是 Hello World，不行。</p>\\n<h1 id=\\\"httpsgithubcomchentsulinelectron-react-boilerplate\\\"><a href=\\\"#httpsgithubcomchentsulinelectron-react-boilerplate\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><a href=\\\"https://github.com/chentsulin/electron-react-boilerplate\\\">https://github.com/chentsulin/electron-react-boilerplate</a></h1>\\n<p>这个算是 stars 数比较多的一个了， 综合了 React + Redux + React Router + Webpack + HMR， 算是满足我的要求了。 Static Type Checking 用的<a href=\\\"https://flow.org/\\\">Flow</a>， 之前也用过， 还不错， 不过感觉使用场景没有 Typescript 那么广呢， 后来决定用 TS， 所以这次也用 TS 吧。</p>\\n<h1 id=\\\"httpsgithubcomirath96electron-react-typescript-boilerplate\\\"><a href=\\\"#httpsgithubcomirath96electron-react-typescript-boilerplate\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><a href=\\\"https://github.com/iRath96/electron-react-typescript-boilerplate\\\">https://github.com/iRath96/electron-react-typescript-boilerplate</a></h1>\\n<blockquote>\\n<p>This is a slight modificiation of the great electron-react-boilerplate by chentsulin. Instead of Babel and flow this version uses TypeScript. Support for Sass has also been added.</p>\\n</blockquote>\\n<p>上一个的 Typescript 版本， 哎， 正好！</p>\\n<h1 id=\\\"create-react-app--electron\\\"><a href=\\\"#create-react-app--electron\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Create React App + Electron</h1>\\n<p>前面的感觉都是以 Electron 为主， 然后加上一些前端技术栈。 可以反过来想， 能不能直接用<a href=\\\"https://github.com/facebook/create-react-app\\\">CRA</a>新建项目， 然后加上 Electron 依赖呢？</p>\\n<p>还真有人这样做了， 就是这篇<a href=\\\"https://medium.freecodecamp.org/building-an-electron-application-with-create-react-app-97945861647c\\\">How to build an Electron app using create-react-app. No webpack configuration or “ejecting” necessary.</a>。</p>\\n<p>大概步骤如下：</p>\\n<ol>\\n<li>create-react-app 新建项目（现在可以添加<code class=\\\"language-text\\\">--scripts-version=react-scripts-ts</code>创建 Typescript 项目了）</li>\\n<li><code class=\\\"language-text\\\">npm i -D electron</code>，添加 electron 为依赖</li>\\n<li>将<a href=\\\"https://github.com/electron/electron-quick-start\\\">electron-quick-start</a>里的<code class=\\\"language-text\\\">main.js</code>（是 electron 的入口文件）copy 过来，可以改个名字比如<code class=\\\"language-text\\\">electron-starter.js</code></li>\\n<li>修改 3 中的<code class=\\\"language-text\\\">mainWindow.loadURL</code>参数为<code class=\\\"language-text\\\">localhost:3000</code></li>\\n<li>在<code class=\\\"language-text\\\">package.json</code>中添加如下内容：</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">  <span class=\\\"token string\\\">\\\"main\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"src/electron-starter.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">\\\"scripts\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"electron\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"electron .\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ol start=\\\"6\\\">\\n<li>执行<code class=\\\"language-text\\\">npm start</code>然后执行<code class=\\\"language-text\\\">npm run electron</code></li>\\n</ol>\\n<p>这样就可以享受所有 CRA 的好处了， 如果是已经有一个 react 项目的话， 这样迁移过来是最容易的了。</p>\\n<p>有两个小问题， 一是 4 中<code class=\\\"language-text\\\">mainWindow.loadURL</code>的参数， 我们指定为<code class=\\\"language-text\\\">localhost:3000</code>， 这个其实是 CRA 的开发环境的地址，如果最后正式发布的话， 应该配置<code class=\\\"language-text\\\">npm run build</code>之后的<code class=\\\"language-text\\\">index.html</code>， 可以通过环境变量控制。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token string\\\">\\\"electron-dev\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"ELECTRON_START_URL=http://localhost:3000 electron .\\\"</span></code></pre>\\n      </div>\\n<p>然后将<code class=\\\"language-text\\\">electron-starter.js</code>相应内容改为:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> startUrl <span class=\\\"token operator\\\">=</span>\\n  process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">ELECTRON_START_URL</span> <span class=\\\"token operator\\\">||</span>\\n  url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">format</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    pathname<span class=\\\"token punctuation\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"/../build/index.html\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    protocol<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"file:\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    slashes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nmainWindow<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">loadURL</span><span class=\\\"token punctuation\\\">(</span>startUrl<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>还有一个问题， CRA 默认打包出来的<code class=\\\"language-text\\\">index.html</code>里面引用资源是认为放在根目录下， 所以需要在<code class=\\\"language-text\\\">package.json</code>里面配置<code class=\\\"language-text\\\">home</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token string\\\">\\\"homepage\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"./\\\"</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>最后还有一个问题， 在我们通常写的 JS 代码里面直接 require <code class=\\\"language-text\\\">electron</code>是有问题的，可以通过如下方法解决（参看<a href=\\\"https://github.com/electron/electron/issues/7300\\\">讨论</a>）：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> electron <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"electron\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> electron<span class=\\\"token punctuation\\\">.</span>remote<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"fs\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> ipcRenderer <span class=\\\"token operator\\\">=</span> electron<span class=\\\"token punctuation\\\">.</span>ipcRenderer<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>感觉这种方式是从现有 React 项目迁移的最好方法了， 不过对 electron 的其他东西，比如打包之类的都没有涉及。</p>\\n<p>这里还有更多<a href=\\\"https://electronjs.org/community#boilerplates\\\">boilerplates</a>， 下面这几个还没有看过仅供参考：</p>\\n<ul>\\n<li><a href=\\\"https://github.com/emk/electron-test\\\">https://github.com/emk/electron-test</a> ， 这个还整合了 Rust， 也是我后面可能需要的， mark 一下。</li>\\n<li><a href=\\\"https://github.com/skellock/typescript-with-electron-react-kit\\\">https://github.com/skellock/typescript-with-electron-react-kit</a></li>\\n<li><a href=\\\"http://blog.scottlogic.com/2017/06/06/typescript-electron-webpack.html\\\">http://blog.scottlogic.com/2017/06/06/typescript-electron-webpack.html</a></li>\\n</ul>\\n<p>下面几个 repo 也可以看一下， 作为入门 electron 资料还是很不错的：</p>\\n<ul>\\n<li><a href=\\\"https://github.com/electron/simple-samples\\\">https://github.com/electron/simple-samples</a></li>\\n<li><a href=\\\"https://github.com/electron/electron-api-demos\\\">https://github.com/electron/electron-api-demos</a></li>\\n<li><a href=\\\"https://github.com/hokein/electron-sample-apps\\\">https://github.com/hokein/electron-sample-apps</a></li>\\n</ul>\\n<p>当然， 最完整权威的资料还是<a href=\\\"https://electronjs.org/docs\\\">官网文档</a>了！</p>\",\"timeToRead\":4,\"excerpt\":\"最近要做个 Desktop 软件， 当然首选 Electron， 另外最近用 Typescript 感觉很爽， 所以技术选型为 Electron + React + Typescript， 为了省事想找个 starter…\",\"fields\":{\"slug\":\"/electron-starter/\"},\"frontmatter\":{\"title\":\"Electron入门资料\",\"date\":\"2018-05-12\",\"category\":\"FE\",\"tags\":[\"electron\",\"typescript\",\"create react app\",\"react\"]}}},{\"node\":{\"html\":\"<p>Node.js 里面引用 json 文件很容易， 如果是 ES5 的话， 用<code class=\\\"language-text\\\">require</code>，如果是 ES6 的话用<code class=\\\"language-text\\\">import</code>。 比如 <code class=\\\"language-text\\\">test.json</code> 文件如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"hello\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"typescript\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>js 代码如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// ES5 testjson.js</span>\\n<span class=\\\"token keyword\\\">const</span> json <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"./test.json\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>json<span class=\\\"token punctuation\\\">.</span>hello<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ES6</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> json <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./test.json\\\"</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>json<span class=\\\"token punctuation\\\">.</span>hello<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>注意， Node9 以上才支持 ES6 的 import/export 机制， 且后缀名是<code class=\\\"language-text\\\">.mjs</code>。</p>\\n<p>直接把<code class=\\\"language-text\\\">testjson.js</code>改为<code class=\\\"language-text\\\">testjson.ts</code>会报错，说<code class=\\\"language-text\\\">[ts] Cannot find module &#39;./test.json&#39;.</code>。</p>\\n<h1 id=\\\"解决方案\\\"><a href=\\\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>解决方案</h1>\\n<p>Typescript2 支持<a href=\\\"https://www.typescriptlang.org/docs/handbook/modules.html\\\">Wildcard module declarations</a>，很好地解决了这个问题。 添加<code class=\\\"language-text\\\">typings.d.ts</code>文件， 在里面配置：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">declare module &#39;*.json&#39; {\\n  const value: any;\\n  export default value;\\n}</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> json <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./test.json\\\"</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>json<span class=\\\"token punctuation\\\">.</span>hello<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>还会报错说没有<code class=\\\"language-text\\\">hello</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">[</span>ts<span class=\\\"token punctuation\\\">]</span> Property <span class=\\\"token string\\\">'hello'</span> does not exist on type <span class=\\\"token string\\\">'typeof '</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">.</span>json<span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">.</span>\\nany</code></pre>\\n      </div>\\n<p>可以做一次 any 转换即可：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> json <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./test.json'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>json <span class=\\\"token keyword\\\">as</span> any<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>hello<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h1 id=\\\"参考资料\\\"><a href=\\\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考资料</h1>\\n<ul>\\n<li><a href=\\\"https://hackernoon.com/import-json-into-typescript-8d465beded79\\\">https://hackernoon.com/import-json-into-typescript-8d465beded79</a></li>\\n</ul>\",\"timeToRead\":1,\"excerpt\":\"Node.js 里面引用 json 文件很容易， 如果是 ES5 的话， 用 ，如果是 ES6 的话用 。 比如   文件如下： js 代码如下： 注意， Node9 以上才支持 ES6 的 import/export…\",\"fields\":{\"slug\":\"/typescript-import-json/\"},\"frontmatter\":{\"title\":\"Typescript如何import json文件\",\"date\":\"2018-04-26\",\"category\":\"FE\",\"tags\":[\"Typescript\",\"json\"]}}},{\"node\":{\"html\":\"<p>Solidity学习笔记。</p>\\n<!-- more -->\\n<h1 id=\\\"solidity\\\"><a href=\\\"#solidity\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Solidity</h1>\\n<p>It was influenced by C++, Python and JavaScript and is designed to target the Ethereum Virtual Machine (EVM).</p>\\n<p>statically typed, supports inheritance, libraries and complex user-defined types among other features.</p>\\n<p>create contracts for voting, crowdfunding, blind auctions, multi-signature wallets and more.</p>\\n<p>最快速简单的开发环境： <a href=\\\"https://remix.ethereum.org/\\\">Remix</a></p>\\n<h1 id=\\\"introduction-to-smart-contracts\\\"><a href=\\\"#introduction-to-smart-contracts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Introduction to Smart Contracts</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.0</span><span class=\\\"token punctuation\\\">;</span>\\n\\ncontract SimpleStorage <span class=\\\"token punctuation\\\">{</span>\\n    uint storedData<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>uint x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        storedData <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> constant <span class=\\\"token function\\\">returns</span> <span class=\\\"token punctuation\\\">(</span>uint<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> storedData<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>The first line simply tells that the source code is written for Solidity version 0.4.0 or anything newer that does not break functionality (up to, but not including, version 0.5.0). </p>\\n<p>A contract in the sense of Solidity is a collection of code (its functions) and data (its state) that resides at a specific address on the Ethereum blockchain. </p>\\n<p>uint (unsigned integer of 256 bits)</p>\\n<p>do not need the prefix this.</p>\\n<p>All identifiers (contract names, function names and variable names) are restricted to the ASCII character set.</p>\\n<h2 id=\\\"subcurrency-example\\\"><a href=\\\"#subcurrency-example\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Subcurrency Example</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.21</span><span class=\\\"token punctuation\\\">;</span>\\n\\ncontract Coin <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// The keyword \\\"public\\\" makes those variables</span>\\n    <span class=\\\"token comment\\\">// readable from outside.</span>\\n    address <span class=\\\"token keyword\\\">public</span> minter<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">mapping</span> <span class=\\\"token punctuation\\\">(</span>address <span class=\\\"token operator\\\">=></span> uint<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> balances<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// Events allow light clients to react on</span>\\n    <span class=\\\"token comment\\\">// changes efficiently.</span>\\n    event <span class=\\\"token function\\\">Sent</span><span class=\\\"token punctuation\\\">(</span>address <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> address to<span class=\\\"token punctuation\\\">,</span> uint amount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// This is the constructor whose code is</span>\\n    <span class=\\\"token comment\\\">// run only when the contract is created.</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Coin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        minter <span class=\\\"token operator\\\">=</span> msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mint</span><span class=\\\"token punctuation\\\">(</span>address receiver<span class=\\\"token punctuation\\\">,</span> uint amount<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>sender <span class=\\\"token operator\\\">!=</span> minter<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n        balances<span class=\\\"token punctuation\\\">[</span>receiver<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> amount<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span>address receiver<span class=\\\"token punctuation\\\">,</span> uint amount<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>balances<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;</span> amount<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n        balances<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-=</span> amount<span class=\\\"token punctuation\\\">;</span>\\n        balances<span class=\\\"token punctuation\\\">[</span>receiver<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> amount<span class=\\\"token punctuation\\\">;</span>\\n        emit <span class=\\\"token function\\\">Sent</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> receiver<span class=\\\"token punctuation\\\">,</span> amount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">address public minter;</code>, address type is a 160-bit value that does not allow any arithmetic operations.</p>\\n<p>加了public会自动生成一个getter函数，类似：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">minter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token function\\\">returns</span> <span class=\\\"token punctuation\\\">(</span>address<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> minter<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>但是不能手写这个函数， 否则编译报错。</p>\\n<p><code class=\\\"language-text\\\">mapping (address =&gt; uint) public balances;</code>, Mappings can be seen as hash tables which are virtually initialized such that every possible key exists and is mapped to a value whose byte-representation is all zeros.  任何没有放进map的key， value都是0值。 所以也没办法遍历mapping的， 如果需要记住key， 自己用array记。 由public生成的getter函数类似如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">balances</span><span class=\\\"token punctuation\\\">(</span>address _account<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> view <span class=\\\"token function\\\">returns</span> <span class=\\\"token punctuation\\\">(</span>uint<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> balances<span class=\\\"token punctuation\\\">[</span>_account<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">event Sent(address from, address to, uint amount);</code>, As soon as it is emitted, the listener(比如钱包啊， 自己代码加的监听器等) will also receive the arguments from, to and amount, which makes it easy to track transactions.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">Coin<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Sent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">,</span> result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Coin transfer: \\\"</span> <span class=\\\"token operator\\\">+</span> result<span class=\\\"token punctuation\\\">.</span>args<span class=\\\"token punctuation\\\">.</span>amount <span class=\\\"token operator\\\">+</span>\\n            <span class=\\\"token string\\\">\\\" coins were sent from \\\"</span> <span class=\\\"token operator\\\">+</span> result<span class=\\\"token punctuation\\\">.</span>args<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span> <span class=\\\"token operator\\\">+</span>\\n            <span class=\\\"token string\\\">\\\" to \\\"</span> <span class=\\\"token operator\\\">+</span> result<span class=\\\"token punctuation\\\">.</span>args<span class=\\\"token punctuation\\\">.</span>to <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\".\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Balances now:\\\\n\\\"</span> <span class=\\\"token operator\\\">+</span>\\n            <span class=\\\"token string\\\">\\\"Sender: \\\"</span> <span class=\\\"token operator\\\">+</span> Coin<span class=\\\"token punctuation\\\">.</span>balances<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>args<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span>\\n            <span class=\\\"token string\\\">\\\"Receiver: \\\"</span> <span class=\\\"token operator\\\">+</span> Coin<span class=\\\"token punctuation\\\">.</span>balances<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>args<span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">Coin</code> is the constructor which is run during creation of the contract and cannot be called afterwards.  <code class=\\\"language-text\\\">msg</code> (together with <code class=\\\"language-text\\\">tx</code> and <code class=\\\"language-text\\\">block</code>) is a magic global variable that contains some properties which allow access to the blockchain.</p>\\n<h2 id=\\\"blockchain-basics\\\"><a href=\\\"#blockchain-basics\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Blockchain Basics</h2>\\n<p>The reason is that most of the complications (mining, hashing, elliptic-curve cryptography, peer-to-peer networks, etc.) are just there to provide a certain set of features and promises. Once you accept these features as given, you do not have to worry about the underlying technology - or do you have to know how Amazon’s AWS works internally in order to use it?</p>\\n<h3 id=\\\"transactions\\\"><a href=\\\"#transactions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Transactions</h3>\\n<p>原子性、持久性、globally accepted。 a transaction is always cryptographically signed by the sender (creator).  防止抵赖</p>\\n<h3 id=\\\"blocks\\\"><a href=\\\"#blocks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Blocks</h3>\\n<p>“double-spend attack”</p>\\n<p>An order of the transactions will be selected for you, the transactions will be bundled into what is called a “block” and then they will be executed and distributed among all participating nodes. If two transactions contradict each other, the one that ends up being second will be rejected and not become part of the block.</p>\\n<p>Ethereum this is roughly every 17 seconds.</p>\\n<p> “order selection mechanism” (which is called “mining”)</p>\\n<h2 id=\\\"the-ethereum-virtual-machine\\\"><a href=\\\"#the-ethereum-virtual-machine\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>The Ethereum Virtual Machine</h2>\\n<p>not only sandboxed but actually completely isolated, which means that code running inside the EVM has no access to network, filesystem or other processes. Smart contracts even have limited access to other smart contracts.</p>\\n<h3 id=\\\"accounts\\\"><a href=\\\"#accounts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Accounts</h3>\\n<p><strong>External accounts</strong>: 由公钥私钥控制（一般是人）， 地址是public key决定</p>\\n<p><strong>contract accounts</strong>: 由里面的code控制， 地址是在contract被创建的时候由创建者的address以及发送过的transactions数量（叫nonce）决定的。</p>\\n<p>Every account has a persistent key-value store mapping 256-bit words to 256-bit words called storage.</p>\\n<p>Furthermore, every account has a balance in Ether (in “Wei” to be exact) which can be modified by sending transactions that include Ether.</p>\\n<h3 id=\\\"transactions-1\\\"><a href=\\\"#transactions-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Transactions</h3>\\n<p>这里的事务其实就是一个account发送给另一个account的msg， 可以带参数和ether。 如果目标账号包含code（contract account)， code被执行。</p>\\n<p>如果目标地址是0， 则认为是创建一个新contract， 新contract地址由发送者的地址和已经发送过的transactions数量（nonce）决定。 所带的参数当做EVM的bytecode执行， 返回值作为contract的code存储在blockchain上。</p>\\n<blockquote>\\n<p>This means that in order to create a contract, you do not send the actual code of the contract, but in fact code that returns that code when executed.</p>\\n</blockquote>\\n<h3 id=\\\"gas\\\"><a href=\\\"#gas\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Gas</h3>\\n<p>执行transaction的费用， 每条bytecode指令都有对应的gas。 你可以指定<strong>gas price</strong>， 然后最后会花费<strong>gas price * gas used</strong>， 没花完的原路退回， 如果不够， 会报<strong>out-of-gas exception</strong>， 所有操作回滚。</p>\\n<p>这个设计是为了奖励节点， 同时也能提高DOS攻击成本。</p>\\n<h3 id=\\\"storage-memory-and-the-stack\\\"><a href=\\\"#storage-memory-and-the-stack\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Storage, Memory and the Stack</h3>\\n<p>每个account都有一个Storage，是永久存储的一个key-value数据库， key和value都是256-bit words。 读和写操作都很贵（花费gas）， 一个contract也只能读写自己的storage。</p>\\n<p>memory是内存，每次方法调用都会开辟新的空间， 用的内存越多越贵（成平方增长的）。</p>\\n<p>EVM是stack机， 不是基于寄存器的。</p>\\n<h3 id=\\\"instruction-set\\\"><a href=\\\"#instruction-set\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Instruction Set</h3>\\n<p>为了安全， 指令集设计得比较小。</p>\\n<p> All instructions operate on the basic data type, 256-bit words. The usual arithmetic, bit, logical and comparison operations are present. Conditional and unconditional jumps are possible. Furthermore, contracts can access relevant properties of the current block like its number and timestamp.</p>\\n<h3 id=\\\"message-calls\\\"><a href=\\\"#message-calls\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Message Calls</h3>\\n<p>contract可以通过消息调用其他contract的代码， 也可以转账（ether）给非contract账户。</p>\\n<p>Message calls are similar to transactions, in that they have a source, a target, data payload, Ether, gas and return data.</p>\\n<p>Calls are limited to a depth of 1024, which means that for more complex operations, loops should be preferred over recursive calls.</p>\\n<h3 id=\\\"delegatecall--callcode-and-libraries\\\"><a href=\\\"#delegatecall--callcode-and-libraries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Delegatecall / Callcode and Libraries</h3>\\n<p><strong>delegatecall</strong>是一种特殊的message call， 目标地址的code是在调用方的context下执行的， 即msg.sender &#x26; msg.value都是调用方。 实现的效果就是可以在运行时动态加载别的地址的代码， 可以实现”library”的效果。</p>\\n<h3 id=\\\"logs\\\"><a href=\\\"#logs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Logs</h3>\\n<p><strong>logs</strong>特性用来实现<strong>events</strong>。 contract访问不了logs， 但logs可以在blockchain之外访问到。 一部分logs用bloom filter存储， 可以高效地检索， 所以“light clinets”可以用到logs。</p>\\n<h3 id=\\\"create\\\"><a href=\\\"#create\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Create</h3>\\n<p>Contracts can even create other contracts using a special opcode.</p>\\n<h3 id=\\\"self-destruct\\\"><a href=\\\"#self-destruct\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Self-destruct</h3>\\n<p>调用<strong>selfdestruct</strong>指令可以将contract从blockchain删除。 The remaining Ether stored at that address is sent to a designated target and then the storage and code is removed from the state.</p>\\n<p>Even if a contract’s code does not contain a call to selfdestruct, it can still perform that operation using delegatecall or callcode.</p>\\n<h1 id=\\\"installing-the-solidity-compiler\\\"><a href=\\\"#installing-the-solidity-compiler\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Installing the Solidity Compiler</h1>\\n<h2 id=\\\"remix\\\"><a href=\\\"#remix\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Remix</h2>\\n<p>最简单快捷的Solidity开发环境， 可以直接访问<a href=\\\"https://remix.ethereum.org\\\">Remix在线版</a>， 或者下载离线使用<a href=\\\"https://github.com/ethereum/remix-ide%E3%80%82\\\">https://github.com/ethereum/remix-ide。</a></p>\\n<p>另外还提供了npm安装（solcjs， 功能不全）， docker安装， 二进制包， 或者源码安装。</p>\\n<p>推荐使用自己操作系统的包管理工具直接安装二进制包， mac如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">brew update\\nbrew upgrade\\nbrew tap ethereum/ethereum\\nbrew <span class=\\\"token function\\\">install</span> solidity</code></pre>\\n      </div>\\n<h1 id=\\\"solidity-by-example\\\"><a href=\\\"#solidity-by-example\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Solidity by Example</h1>\\n<p>一个投票， 一个竞拍（包括盲拍）， 一个电商的例子。 </p>\\n<h1 id=\\\"solidity-in-depth\\\"><a href=\\\"#solidity-in-depth\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Solidity in Depth</h1>\\n<p>东西比较多， 专门写一篇吧。</p>\\n<h1 id=\\\"security-considerations\\\"><a href=\\\"#security-considerations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Security Considerations</h1>\\n<p>凡程序必有bug， 哪怕是自己的smart contract是bug-free， 可能compiler或者EVM本身也可能有bug的， 而blockchain往往涉及到很重要的资产， 所以安全问题尤为重要。</p>\\n<p>一些典型的问题。</p>\\n<h2 id=\\\"private-information-and-randomness\\\"><a href=\\\"#private-information-and-randomness\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Private Information and Randomness</h2>\\n<p>Using random numbers in smart contracts is quite tricky if you do not want miners to be able to cheat.</p>\\n<h2 id=\\\"re-entrancy\\\"><a href=\\\"#re-entrancy\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Re-Entrancy</h2>\\n<p>contract A调用contract B或者transfer的时候控制权会转移给B， 而B有可能反过来调用A。下面的代码就有问题：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 有bug， 勿用！！！</span>\\ncontract Fund <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">mapping</span><span class=\\\"token punctuation\\\">(</span>address <span class=\\\"token operator\\\">=></span> uint<span class=\\\"token punctuation\\\">)</span> shares<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withdraw</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span>shares<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            shares<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">msg.sender</code>可能是一个contract， 并且再次调用<code class=\\\"language-text\\\">withdraw</code>， 这样就会多次提现。 可以用<code class=\\\"language-text\\\">Checks-Effects-Interactions</code>模式来解决， 如下代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.11</span><span class=\\\"token punctuation\\\">;</span>\\n\\ncontract Fund <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">mapping</span><span class=\\\"token punctuation\\\">(</span>address <span class=\\\"token operator\\\">=></span> uint<span class=\\\"token punctuation\\\">)</span> shares<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withdraw</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> share <span class=\\\"token operator\\\">=</span> shares<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        shares<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n        msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>share<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>任何对另一个contract的调用都应该考虑re-entry问题。</p>\\n<h2 id=\\\"gas-limit-and-loops\\\"><a href=\\\"#gas-limit-and-loops\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Gas Limit and Loops</h2>\\n<p>慎用Loops，因为很可能烧光gas！！！</p>\\n<h2 id=\\\"sending-and-receiving-ether\\\"><a href=\\\"#sending-and-receiving-ether\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Sending and Receiving Ether</h2>\\n<p>有很多种转账方式， 也有很多原因可能失败。 对于给contract转账， 建议不要失败后直接退还， 而是给其提供withdraw机会。</p>\\n<h2 id=\\\"callstack-depth\\\"><a href=\\\"#callstack-depth\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Callstack Depth</h2>\\n<p>External function calls can fail any time because they exceed the maximum call stack of 1024.</p>\\n<h2 id=\\\"txorigin\\\"><a href=\\\"#txorigin\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>tx.origin</h2>\\n<p>不要用<code class=\\\"language-text\\\">tx.origin</code>来验证授权！ 假设你的contract如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.11</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 有bug， 勿用！！！</span>\\ncontract TxUserWallet <span class=\\\"token punctuation\\\">{</span>\\n    address owner<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">TxUserWallet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        owner <span class=\\\"token operator\\\">=</span> msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">transferTo</span><span class=\\\"token punctuation\\\">(</span>address dest<span class=\\\"token punctuation\\\">,</span> uint amount<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>tx<span class=\\\"token punctuation\\\">.</span>origin <span class=\\\"token operator\\\">==</span> owner<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        dest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>amount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>则下面的contract就会把你ether偷光：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.11</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">TxUserWallet</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">transferTo</span><span class=\\\"token punctuation\\\">(</span>address dest<span class=\\\"token punctuation\\\">,</span> uint amount<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\ncontract TxAttackWallet <span class=\\\"token punctuation\\\">{</span>\\n    address owner<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">TxAttackWallet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        owner <span class=\\\"token operator\\\">=</span> msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">TxUserWallet</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">transferTo</span><span class=\\\"token punctuation\\\">(</span>owner<span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">.</span>balance<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>感觉这块没太明白， 欢迎留言讨论。</p>\\n<h2 id=\\\"一些小细节\\\"><a href=\\\"#%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%BB%86%E8%8A%82\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>一些小细节</h2>\\n<ul>\\n<li><code class=\\\"language-text\\\">for (var i = 0; i &lt; arrayName.length; i++) { ... }</code>， 这段代码里i会被推断为<code class=\\\"language-text\\\">uint8</code>，所以如果<code class=\\\"language-text\\\">arrayName.length &gt; 255</code>， 循环就不会终止了！ 所以应该用<code class=\\\"language-text\\\">for (uint i = 0; i &lt; arrayName.length; i++) {...}</code>。</li>\\n<li><code class=\\\"language-text\\\">constant</code>关键字目前并没有被compiler和EVM保证， 所以声明为constanct的函数依然可能修改state</li>\\n<li>“dirty higher order bits”， 比如用<code class=\\\"language-text\\\">msg.data</code>调用<code class=\\\"language-text\\\">f(uint8 x)</code>的时候传<code class=\\\"language-text\\\">0xff000001</code>和<code class=\\\"language-text\\\">0x00000001</code>在函数里都会认为是1， 但是其实<code class=\\\"language-text\\\">msg.data</code>是不一样的，所以如果用到<code class=\\\"language-text\\\">keccak256(msg.data)</code>结果是不一样的。</li>\\n</ul>\\n<h2 id=\\\"建议\\\"><a href=\\\"#%E5%BB%BA%E8%AE%AE\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>建议</h2>\\n<h3 id=\\\"限制智能合约上存储的ether或者其他token数量\\\"><a href=\\\"#%E9%99%90%E5%88%B6%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E4%B8%8A%E5%AD%98%E5%82%A8%E7%9A%84ether%E6%88%96%E8%80%85%E5%85%B6%E4%BB%96token%E6%95%B0%E9%87%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>限制智能合约上存储的ether或者其他token数量</h3>\\n<p>这样万一程序有问题（包括contract、compiler、EVM等）， 损失也不会太大。</p>\\n<h3 id=\\\"功能单一、模块化！\\\"><a href=\\\"#%E5%8A%9F%E8%83%BD%E5%8D%95%E4%B8%80%E3%80%81%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%81\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>功能单一、模块化！</h3>\\n<p>良好的编码习惯吧！</p>\\n<h3 id=\\\"checks-effects-interactions模式\\\"><a href=\\\"#checks-effects-interactions%E6%A8%A1%E5%BC%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Checks-Effects-Interactions模式</h3>\\n<ol>\\n<li>先做检查， 包括谁是发送者， 钱够不够， 参数范围合法么。。。</li>\\n<li>修改当前contract的state variables</li>\\n<li>调用其他contract</li>\\n</ol>\\n<p>2和3交换会导致之前提到的<code class=\\\"language-text\\\">re-entrancy</code>问题。</p>\\n<h3 id=\\\"fail-safe-mode\\\"><a href=\\\"#fail-safe-mode\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Fail-Safe Mode</h3>\\n<p>新手最好预留一手“保护模式”。 可以定期检查一下有没有ether泄露啊， token总量是否banlance啊。。。如果出现问题， 可以切换到安全模式， 限制大部分功能， 或者只能由少数可信的人去调用contract， 或者just converts the contract into a simple “give me back my money” contract.</p>\\n<h3 id=\\\"formal-verification\\\"><a href=\\\"#formal-verification\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Formal Verification</h3>\\n<p>感觉有点像<a href=\\\"https://hypothesis.works/articles/what-is-property-based-testing/\\\">Property Based Testing?</a></p>\\n<h1 id=\\\"using-the-compiler\\\"><a href=\\\"#using-the-compiler\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Using the compiler</h1>\\n<p>编译器solc的一些命令行选项。</p>\\n<h1 id=\\\"contract-metadata\\\"><a href=\\\"#contract-metadata\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Contract Metadata</h1>\\n<p>用<code class=\\\"language-text\\\">solc --metadata</code>可以生成contract的metadata。 其中包括了源代码的的hash值以及Swarm位置 ， metadata的Swarm位置保存在contract bytecode最后， 因此通过bytecode就可以找到metadata，进而找到源代码， 来验证代码可信。</p>\\n<h1 id=\\\"application-binary-interface-specification\\\"><a href=\\\"#application-binary-interface-specification\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Application Binary Interface Specification</h1>\\n<p>contract的ABI规范， 一般做编译器的才会需要了解吧。</p>\\n<h1 id=\\\"joyfully-universal-language-for-inline-assembly\\\"><a href=\\\"#joyfully-universal-language-for-inline-assembly\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Joyfully Universal Language for (Inline) Assembly</h1>\\n<p>JULIA is an intermediate language that can compile to various different backends (EVM 1.0, EVM 1.5 and eWASM are planned). </p>\\n<p>也就是编译器的中间语言， 不同的后端可以编译到不同的EVM上。 应该只有做EVM开发的才会需要了解吧。</p>\\n<h1 id=\\\"style-guide\\\"><a href=\\\"#style-guide\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Style Guide</h1>\\n<p>主要参考了<a href=\\\"https://www.python.org/dev/peps/pep-0008/\\\">python的pep8 style guide</a>， 代码风格的目的是为了一致性！摘自 <a href=\\\"https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds\\\">https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds</a></p>\\n<blockquote>\\n<p>A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is most important. But most importantly: know when to be inconsistent – sometimes the style guide just doesn’t apply. When in doubt, use your best judgement. Look at other examples and decide what looks best. And don’t hesitate to ask!</p>\\n</blockquote>\\n<h1 id=\\\"常用模式\\\"><a href=\\\"#%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%BC%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>常用模式</h1>\\n<h2 id=\\\"withdrawal-from-contracts\\\"><a href=\\\"#withdrawal-from-contracts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Withdrawal from Contracts</h2>\\n<p>之前说过transfer可能失败， 因此如果要退钱给用户， 让他们自己withdraw， 否则有可能让整个contract“卡死”。</p>\\n<h2 id=\\\"restricting-access\\\"><a href=\\\"#restricting-access\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Restricting Access</h2>\\n<p>chain上的东西是公开透明任何人都可以看得， 因此没办法隐藏。 只能限制别的合约读取你的合约state，默认就是这样， 除非你显示地指定public。 结合<strong>function modifiers</strong>可以让代码可读性更高， 比如：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">modifier <span class=\\\"token function\\\">onlyBy</span><span class=\\\"token punctuation\\\">(</span>address _account<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>sender <span class=\\\"token operator\\\">==</span> _account<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// Do not forget the \\\"_;\\\"! It will</span>\\n        <span class=\\\"token comment\\\">// be replaced by the actual function</span>\\n        <span class=\\\"token comment\\\">// body when the modifier is used.</span>\\n        _<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"state-machine\\\"><a href=\\\"#state-machine\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>State Machine</h2>\\n<p>contract很多时候是一个State Machine， 就是说contract的状态会根据不同的条件变化（包括时间变化）。 有些函数可能只能在特定的状态下执行， 同样， 结合<strong>function modifiers</strong>可以让代码可读性更高， 比如：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">enum</span> Stages <span class=\\\"token punctuation\\\">{</span>\\n        AcceptingBlindedBids<span class=\\\"token punctuation\\\">,</span>\\n        RevealBids<span class=\\\"token punctuation\\\">,</span>\\n        AnotherStage<span class=\\\"token punctuation\\\">,</span>\\n        AreWeDoneYet<span class=\\\"token punctuation\\\">,</span>\\n        Finished\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// This is the current stage.</span>\\n    Stages <span class=\\\"token keyword\\\">public</span> stage <span class=\\\"token operator\\\">=</span> Stages<span class=\\\"token punctuation\\\">.</span>AcceptingBlindedBids<span class=\\\"token punctuation\\\">;</span>\\n\\n    uint <span class=\\\"token keyword\\\">public</span> creationTime <span class=\\\"token operator\\\">=</span> now<span class=\\\"token punctuation\\\">;</span>\\n\\n    modifier <span class=\\\"token function\\\">atStage</span><span class=\\\"token punctuation\\\">(</span>Stages _stage<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>stage <span class=\\\"token operator\\\">==</span> _stage<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        _<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">nextStage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> internal <span class=\\\"token punctuation\\\">{</span>\\n        stage <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Stages</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">uint</span><span class=\\\"token punctuation\\\">(</span>stage<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// Perform timed transitions. Be sure to mention</span>\\n    <span class=\\\"token comment\\\">// this modifier first, otherwise the guards</span>\\n    <span class=\\\"token comment\\\">// will not take the new stage into account.</span>\\n    modifier <span class=\\\"token function\\\">timedTransitions</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>stage <span class=\\\"token operator\\\">==</span> Stages<span class=\\\"token punctuation\\\">.</span>AcceptingBlindedBids <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                    now <span class=\\\"token operator\\\">>=</span> creationTime <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">10</span> days<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token function\\\">nextStage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>stage <span class=\\\"token operator\\\">==</span> Stages<span class=\\\"token punctuation\\\">.</span>RevealBids <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                now <span class=\\\"token operator\\\">>=</span> creationTime <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">12</span> days<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token function\\\">nextStage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// The other stages transition by transaction</span>\\n        _<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><strong>注意</strong>， Solidity v0.4.0之前有个问题： <strong>Modifier May be Skipped</strong>。 因为modifier只是简单的代码替换而不是函数调用， 如果那部分代码里面return了， 后面的代码可能不执行。v0.4.0之后没这个问题。</p>\\n<h1 id=\\\"list-of-known-bugs\\\"><a href=\\\"#list-of-known-bugs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>List of Known Bugs</h1>\\n<p>列出了一些Solidity compiler已知bugs。</p>\\n<p>在考虑一份contract的时候， 简单地说可以这样看： 如果不是用contract创建时候的最新发布版本编译器编译的， 就值得怀疑！ 有可能有bug， 有可能是contract作者故意想利用某个bug呢！！！</p>\\n<h1 id=\\\"faq\\\"><a href=\\\"#faq\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>FAQ</h1>\\n<p>一些常见的问题， 最初由<a href=\\\"https://github.com/fivedogit\\\">fivedogit</a>整理， 有些代码可以参考<a href=\\\"https://github.com/fivedogit/solidity-baby-steps\\\">solidity-baby-steps</a>。</p>\\n<h1 id=\\\"参考资料\\\"><a href=\\\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考资料</h1>\\n<ul>\\n<li><a href=\\\"https://solidity.readthedocs.io\\\">https://solidity.readthedocs.io</a></li>\\n</ul>\",\"timeToRead\":10,\"excerpt\":\"Solidity学习笔记。 Solidity It was influenced by C++, Python and JavaScript and is designed to target the Ethereum Virtual Machine (EVM…\",\"fields\":{\"slug\":\"/blockchain-ethereum-3/\"},\"frontmatter\":{\"title\":\"区块链系列七：Solidity学习笔记\",\"date\":\"2018-04-11\",\"category\":\"Blockchain\",\"tags\":[\"Ethereum\",\"以太坊\",\"Solidity\"]}}},{\"node\":{\"html\":\"<p><a href=\\\"/blockchain-ethereum-0\\\">区块链系列四：Hello Ethereum!</a>介绍了Ethereum的一些基础知识， 本文我们来用Ethereum发一个币玩玩。</p>\\n<!-- more -->\\n<h1 id=\\\"安装客户端和钱包\\\"><a href=\\\"#%E5%AE%89%E8%A3%85%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E9%92%B1%E5%8C%85\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>安装客户端和钱包</h1>\\n<p>按之前介绍安装客户端， 我们用Go语言版本的<a href=\\\"https://github.com/ethereum/go-ethereum/\\\">Geth</a>。</p>\\n<p>下载安装<a href=\\\"https://github.com/ethereum/mist/releases\\\">Mist或Ethereum Wallet</a>，Mist其实包含了钱包功能以及Remix IDE， 功能很强大的。</p>\\n<h1 id=\\\"启动测试网络\\\"><a href=\\\"#%E5%90%AF%E5%8A%A8%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>启动测试网络</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth --identity <span class=\\\"token string\\\">\\\"MyEther\\\"</span> --rpc --rpccorsdomain <span class=\\\"token string\\\">\\\"*\\\"</span> --datadir ~/.ethereum_private --nodiscover --networkid 1999 --ipcpath ~/Library/Ethereum/geth.ipc</code></pre>\\n      </div>\\n<p>注意， 如果我们用<code class=\\\"language-text\\\">--datadir</code>指定了自定义的存储位置， <code class=\\\"language-text\\\">geth.ipc</code>会存储在此目录下。 而Mist自带一个geth客户端， 默认会去连localhost的默认客户端， 如果连不到则会启动自己的geth， 尝试连接mainnet。 所以为了让Mist连接我们的private network， 需要用<code class=\\\"language-text\\\">--ipcpath</code>将<code class=\\\"language-text\\\">geth.ipc</code>指定到默认位置。这样Mist就会连接到我们的客户端启动的private network了。</p>\\n<h1 id=\\\"最小可行token：-mvtminimum-viable-token\\\"><a href=\\\"#%E6%9C%80%E5%B0%8F%E5%8F%AF%E8%A1%8Ctoken%EF%BC%9A-mvtminimum-viable-token\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>最小可行Token： MVT(Minimum Viable Token)</h1>\\n<p>Show me the code!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.20</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 指定编译器版本</span>\\n\\ncontract MyToken <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 记录每个address的账户余额</span>\\n    <span class=\\\"token function\\\">mapping</span> <span class=\\\"token punctuation\\\">(</span>address <span class=\\\"token operator\\\">=></span> uint256<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> balanceOf<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// 构造函数， 指定contract创建者的初始余额</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">MyToken</span><span class=\\\"token punctuation\\\">(</span>\\n        uint256 initialSupply\\n        <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> initialSupply<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// 转账</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>address _to<span class=\\\"token punctuation\\\">,</span> uint256 _value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">>=</span> _value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>           <span class=\\\"token comment\\\">// 账户余额是否足够</span>\\n        <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> _value <span class=\\\"token operator\\\">>=</span> balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 是否会溢出</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"理解contract\\\"><a href=\\\"#%E7%90%86%E8%A7%A3contract\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>理解contract</h1>\\n<p>现在我们来从零开始逐渐构建一份完整的contract，并添加一些高级功能。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.20</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 指定编译器版本</span>\\n\\n    contract Chips <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">mapping</span> <span class=\\\"token punctuation\\\">(</span>address <span class=\\\"token operator\\\">=></span> uint256<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> balanceOf<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">pragma</code>指定编译器版本。 contract类似于class， Chips是contract的名称（也就是我们token的名称）。balanceOf是Chips的一个字段， 类型为<code class=\\\"language-text\\\">mapping (address =&gt; uint256)</code>。 mapping是一种数据类型， 类似于Hashmap， 这里拿来存每个地址都多少token。 public表示所有人都可以访问。 </p>\\n<p>我们可以如下图操作， 打开Mist，将代码copy到Mist中的编辑器中即可：\\n<img src=\\\"/blogimgs/blockchain/deploy-contract.png\\\" alt=\\\"部署contract\\\">\\n<img src=\\\"/blogimgs/blockchain/copy-solidity.png\\\" alt=\\\"复制solidity代码\\\"></p>\\n<p>PS， 从上图中我们可以看出Mist其实里面包含的是一个网页， 直接在浏览器里访问网页url也可以：<a href=\\\"https://wallet.ethereum.org/\\\">https://wallet.ethereum.org/</a> 。</p>\\n<p>是可以部署了， 但是没啥用， 因为balanceOf里每个地址都是0。 我们来给自己分配的token：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Chips</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">21000000</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Chips是构造函数， 名称需要与contract名称一致， 只会在contract被部署的时候执行一次。<code class=\\\"language-text\\\">msg.sender</code>是部署合约的人。 分配多少你可以随便写， 21000000是致敬BTC， 当然也可以用参数传递进去：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Chips</span><span class=\\\"token punctuation\\\">(</span>uint256 initialSupply<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> initialSupply<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>现在所有的token都在自己手里， 没啥价值， 我们要分点给其他人啊， 于是需要转账功能：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>address _to<span class=\\\"token punctuation\\\">,</span> uint256 _value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>代码简单直接， 就是从发送者(msg.sender)转给to。 但是这里显然有问题， 万一发送者余额不足呢， 这种情况我们应该终止交易。 要提前终止代码执行有两种方法： return和throw。 return花费更少的gas， 但是之前修改的状态会被保留； 而throw会回滚所有的修改， 但是会花费掉所有gas。所以我们加一下判断：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>address _to<span class=\\\"token punctuation\\\">,</span> uint256 _value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 检查账户token够不够， 以及是否会溢出</span>\\n        <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">>=</span> _value <span class=\\\"token operator\\\">&amp;&amp;</span> balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> _value <span class=\\\"token operator\\\">>=</span> balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"contract信息\\\"><a href=\\\"#contract%E4%BF%A1%E6%81%AF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>contract信息</h2>\\n<p>现在我们来添加一些关于contract的信息， 在contract中添加几个字段：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">string <span class=\\\"token keyword\\\">public</span> name<span class=\\\"token punctuation\\\">;</span>\\nstring <span class=\\\"token keyword\\\">public</span> symbol<span class=\\\"token punctuation\\\">;</span>\\nuint8 <span class=\\\"token keyword\\\">public</span> decimals<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>然后修改构造函数：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Chips</span><span class=\\\"token punctuation\\\">(</span>uint256 initialSupply<span class=\\\"token punctuation\\\">,</span> string tokenName<span class=\\\"token punctuation\\\">,</span> string tokenSymbol<span class=\\\"token punctuation\\\">,</span> uint8 decimalUnits<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> initialSupply<span class=\\\"token punctuation\\\">;</span>              <span class=\\\"token comment\\\">// 初始token数量</span>\\n        name <span class=\\\"token operator\\\">=</span> tokenName<span class=\\\"token punctuation\\\">;</span>                                   <span class=\\\"token comment\\\">// token显示名称</span>\\n        symbol <span class=\\\"token operator\\\">=</span> tokenSymbol<span class=\\\"token punctuation\\\">;</span>                               <span class=\\\"token comment\\\">// token显示符号</span>\\n        decimals <span class=\\\"token operator\\\">=</span> decimalUnits<span class=\\\"token punctuation\\\">;</span>                            <span class=\\\"token comment\\\">// 小数位数</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这里需要注意的是decimals，它的含义是1个token可以拆分成多少个最小基本单位。 比如1ether = 10 ** 18 wei， 所以Ethereum里decimals是18； 而如果是美刀， 则1美刀=100美分， 所以decimals是2。 这个地方没理解好后面会有坑，我们稍后介绍。</p>\\n<h2 id=\\\"events\\\"><a href=\\\"#events\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Events</h2>\\n<p>我们想监听contract的某些状态， 比如当contract发生修改时，我们想获得通知。只需要写一个空函数（首字母大写）即可：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    event <span class=\\\"token function\\\">Transfer</span><span class=\\\"token punctuation\\\">(</span>address indexed <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> address indexed to<span class=\\\"token punctuation\\\">,</span> uint256 value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>然后我们可以在<code class=\\\"language-text\\\">transfer</code>函数中调用：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">        emit <span class=\\\"token function\\\">Transfer</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> _to<span class=\\\"token punctuation\\\">,</span> _value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>这样钱包会收到通知。</p>\\n<h2 id=\\\"deploy\\\"><a href=\\\"#deploy\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Deploy</h2>\\n<p>我们来用Mist把前面代码部署到Ethereum网络吧！</p>\\n<p>选“合约” -》 “部署新合约”， 然后把solidity代码复制到编辑器里， 在“选择欲部署的合约”里选择Chips， 然后填上初始参数，如下图：\\n<img src=\\\"/blogimgs/blockchain/deploy-contract2.png\\\" alt=\\\"部署contract\\\"></p>\\n<p>注意，这里我们初始给了10000， 但是decimal units为2， 其实表示的是100“块”token， 最小单位是0.01“块”token。</p>\\n<p>滚动到最下面， 设置一个合适的gas， 然后点击“部署”， 在弹出框中输入密码，点确定。 然后在<code class=\\\"language-text\\\">geth console</code>里开启挖矿， <code class=\\\"language-text\\\">miner.start(1)</code>， 过一会就会在主界面看到确认信息。\\n<img src=\\\"/blogimgs/blockchain/confirmations.png\\\" alt=\\\"确认\\\"></p>\\n<p>点击<code class=\\\"language-text\\\">[Main account](Etherbase)</code>进入账号页面， 会看到自己拥有全部的<code class=\\\"language-text\\\">FirstChips</code>： 100, 00$$。\\n<img src=\\\"/blogimgs/blockchain/mainaccount.png\\\" alt=\\\"main account\\\"></p>\\n<p>点击<code class=\\\"language-text\\\">FirstChips（管理页面）</code>进入合约页面， 可以查看合约的信息。\\n<img src=\\\"/blogimgs/blockchain/firstchips.png\\\" alt=\\\"FirstChips\\\"></p>\\n<p>现在我们可以转点token给朋友了。 点击发送， 配置好地址和数量， 选好token类型， 拖到最下面点击发送即可。\\n<img src=\\\"/blogimgs/blockchain/send-ok.png\\\" alt=\\\"send-ok\\\">\\n注意这里有个小坑， 数量这里输入10， 是指的token（相当于“块”）， 而我们之前设置decimal units是2， 所以是1000“分”。第一次的时候没注意， 在构造函数填的只是100（相当于只有1块），结果这边转10块的时候， 总是报错。\\n<img src=\\\"/blogimgs/blockchain/transfer-error.png\\\" alt=\\\"transfer-error\\\"></p>\\n<p>输入密码， 继续挖一会矿， 会发现main account里面只有90, 00$$了， 然后在另一个账号里多了10,00$$。 如果另一个账号是在其他客户端上（比如转给其他朋友）， 则他们是看不到新的token的。 需要在FirstChips的合约页面， 点击复制地址， 将地址发给朋友， 然后他们在合约页面，点查看代币， 然后把地址复制进去即可。\\n<img src=\\\"/blogimgs/blockchain/watch-token0.png\\\" alt=\\\"watch-token0\\\">\\n<img src=\\\"/blogimgs/blockchain/watch-token.png\\\" alt=\\\"watch-token\\\"></p>\\n<p>当然，你也可以调用contract的transfer函数来转账，注意这里的单位是“分”！\\n<img src=\\\"/blogimgs/blockchain/transfer2.png\\\" alt=\\\"transfer2\\\"></p>\\n<p>就这样我们很快就发了一个币， 当然只是运行在私有网络上， 要想部署到main net， 需要花费ethereum， 目前还没必要。</p>\\n<p>目前只有转账功能， 接下来我们打算设计一些复杂功能， 比如自动跟ether交易啊， POW机制啊， 账户冻结啊， 通过oraclize访问外部资源等， 敬请期待！</p>\\n<h1 id=\\\"参考资料\\\"><a href=\\\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考资料</h1>\\n<ul>\\n<li><a href=\\\"https://www.ethereum.org/token\\\">https://www.ethereum.org/token</a></li>\\n<li><a href=\\\"http://www.ethdocs.org\\\">http://www.ethdocs.org</a></li>\\n<li><a href=\\\"https://github.com/ethereum/go-ethereum/wiki/\\\">https://github.com/ethereum/go-ethereum/wiki/</a></li>\\n<li><a href=\\\"https://solidity.readthedocs.io\\\">https://solidity.readthedocs.io</a></li>\\n<li><a href=\\\"http://web3js.readthedocs.io/en/1.0/index.html\\\">http://web3js.readthedocs.io/en/1.0/index.html</a> </li>\\n</ul>\",\"timeToRead\":4,\"excerpt\":\"区块链系列四：Hello Ethereum! 介绍了Ethereum的一些基础知识， 本文我们来用Ethereum发一个币玩玩。 安装客户端和钱包 按之前介绍安装客户端， 我们用Go语言版本的 Geth 。 下载安装 Mist或Ethereum Wallet ，Mist…\",\"fields\":{\"slug\":\"/blockchain-ethereum-2/\"},\"frontmatter\":{\"title\":\"区块链系列六：设计自己的cryptocurrency\",\"date\":\"2018-04-07\",\"category\":\"Blockchain\",\"tags\":[\"Ethereum\",\"以太坊\"]}}},{\"node\":{\"html\":\"<p>Ethereum的一些笔记。</p>\\n<!-- more -->\\n<h1 id=\\\"账号管理\\\"><a href=\\\"#%E8%B4%A6%E5%8F%B7%E7%AE%A1%E7%90%86\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>账号管理</h1>\\n<p>externally owned accounts (EOAs) and contract accounts</p>\\n<h1 id=\\\"contracts-and-transactions\\\"><a href=\\\"#contracts-and-transactions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Contracts and Transactions</h1>\\n<p>This execution needs to be completely deterministic, its only context is the position of the block on the blockchain and all data available. </p>\\n<h2 id=\\\"gas\\\"><a href=\\\"#gas\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Gas</h2>\\n<p>Clearly Ethereum is not about optimising efficiency of computation. Its parallel processing is redundantly parallel.</p>\\n<p>The fact that contract executions are redundantly replicated across nodes, naturally makes them expensive, which generally creates an incentive not to use the blockchain for computation that can be done offchain.</p>\\n<h2 id=\\\"estimating-transaction-costs\\\"><a href=\\\"#estimating-transaction-costs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Estimating transaction costs</h2>\\n<p><code class=\\\"language-text\\\">Total cost = gasUsed * gasPrice</code></p>\\n<p>Contracts generally serve four purposes:</p>\\n<ul>\\n<li>Maintain a data store</li>\\n<li>“forwarding contract”</li>\\n<li>Manage an ongoing contract or relationship between multiple users.</li>\\n<li>serving as a software library.</li>\\n</ul>\\n<h1 id=\\\"dapps\\\"><a href=\\\"#dapps\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Dapps</h1>\\n<p>Remember that because of the redundant nature of computation on the Ethereum network, the gas costs of execution will always be higher than private execution offchain. This incentivizes dapp developers to restrict the amount of code they execute and amount of data they store on the blockchain.</p>\\n<ul>\\n<li>Dapp directories</li>\\n<li>Dapp browsers</li>\\n<li>IDE / frameworks</li>\\n<li>console</li>\\n<li>Whisper</li>\\n<li>Swarm</li>\\n<li>RANDAO</li>\\n<li>…</li>\\n<li>EVM</li>\\n</ul>\\n<h1 id=\\\"开发工具\\\"><a href=\\\"#%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>开发工具</h1>\\n<ul>\\n<li><a href=\\\"https://solidity.readthedocs.io/\\\">Solidity</a></li>\\n<li><a href=\\\"https://github.com/ethereum/web3.js/\\\">Web3.js</a></li>\\n<li><a href=\\\"https://github.com/trufflesuite/truffle\\\">Truffle</a></li>\\n<li><a href=\\\"https://github.com/OpenZeppelin/zeppelin-solidity\\\">OpenZeppelin</a></li>\\n<li><a href=\\\"https://remix.readthedocs.io/en/latest/\\\">Remix IDE</a></li>\\n<li><a href=\\\"https://github.com/juanfranblanco/vscode-solidity\\\">VSCode solidity</a></li>\\n<li><a href=\\\"http://www.oraclize.it/\\\">Oraclize</a></li>\\n<li><a href=\\\"https://tlsnotary.org/pagesigner.html\\\">PageSigner</a></li>\\n</ul>\\n<h1 id=\\\"其他\\\"><a href=\\\"#%E5%85%B6%E4%BB%96\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>其他</h1>\\n<ul>\\n<li><a href=\\\"https://ipfs.io/\\\">IPFS</a></li>\\n<li><a href=\\\"https://github.com/paritytech/parity\\\">Parity</a></li>\\n<li><a href=\\\"https://github.com/jpmorganchase/quorum\\\">Quorum</a></li>\\n</ul>\",\"timeToRead\":2,\"excerpt\":\"Ethereum的一些笔记。 账号管理 externally owned accounts (EOAs) and contract accounts Contracts and Transactions This execution needs to be completely…\",\"fields\":{\"slug\":\"/blockchain-ethereum-1/\"},\"frontmatter\":{\"title\":\"区块链系列五：Ethereum学习笔记\",\"date\":\"2018-04-06\",\"category\":\"Blockchain\",\"tags\":[\"BTC\",\"密码学\",\"crytography\"]}}},{\"node\":{\"html\":\"<p>本文介绍以太坊开发的基础知识。</p>\\n<!-- more -->\\n<h1 id=\\\"为啥不讲比特币呢\\\"><a href=\\\"#%E4%B8%BA%E5%95%A5%E4%B8%8D%E8%AE%B2%E6%AF%94%E7%89%B9%E5%B8%81%E5%91%A2\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>为啥不讲比特币呢</h1>\\n<p>很少有基于比特币做开发的， 如果大家有兴趣可以看下面几个资料：</p>\\n<ul>\\n<li><a href=\\\"https://github.com/bitcoinbook/bitcoinbook\\\">Mastering Bitcoin 2nd Edition</a></li>\\n<li><a href=\\\"http://bitcoinbook.cs.princeton.edu/\\\">Bitcoin and Cryptocurrency Technologies</a> <a href=\\\"https://www.coursera.org/learn/cryptocurrency/home/welcome\\\">Coursera上课程</a> <a href=\\\"https://piazza.com/princeton/spring2015/btctech/home\\\">课程资料</a></li>\\n<li><a href=\\\"https://bitcoin.org/en/\\\">Bitcoin官网</a></li>\\n</ul>\\n<p>只需要看上面三个资料来源即可， 不用看太多资料。</p>\\n<h1 id=\\\"ethereum基础概念介绍\\\"><a href=\\\"#ethereum%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Ethereum基础概念介绍</h1>\\n<h2 id=\\\"p2p网络\\\"><a href=\\\"#p2p%E7%BD%91%E7%BB%9C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>P2P网络</h2>\\n<p>区块链底层是一个P2P网络，全球有很多电脑节点连在这个网络上， 没有中心节点， 每个节点互相通信， 各自保留一份完整的账本。</p>\\n<h2 id=\\\"客户端\\\"><a href=\\\"#%E5%AE%A2%E6%88%B7%E7%AB%AF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>客户端</h2>\\n<p>就是P2P网络中的一个节点， 包含有一些功能以支持整个P2P网络的运行。 比如转账， 记录账本， 挖矿等， 还有一个完整的虚拟机EVM， 可以在上面执行智能合约。</p>\\n<p>官方支持三种语言的客户端， 分别是：</p>\\n<ul>\\n<li>Go语言版本的<a href=\\\"https://github.com/ethereum/go-ethereum/\\\">Geth</a></li>\\n<li>C++语言版本<a href=\\\"https://github.com/ethereum/cpp-ethereum\\\">Eth</a></li>\\n<li>python语言版本的<a href=\\\"https://github.com/ethereum/pyethapp\\\">pyethapp</a></li>\\n</ul>\\n<p>另外社区还开发了各种语言版本的客户端， 可以看<a href=\\\"http://www.ethdocs.org/en/latest/ethereum-clients/index.html\\\">Ethereum Clients</a>。</p>\\n<h2 id=\\\"rpc\\\"><a href=\\\"#rpc\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>RPC</h2>\\n<p>客户端通过<a href=\\\"https://github.com/ethereum/wiki/wiki/JSON-RPC\\\">JSON RPC</a>暴露了一些API给用户使用， 比如生成账户、查看自己账户余额、部署智能合约等。 用户可以用curl或者postman工具调用RPC来实现功能， 但是一般还是通过一些SDK去做RPC调用，用的较多的有<a href=\\\"https://github.com/ethereum/web3.js/\\\">web3.js</a>，其他语言版本的可以参考<a href=\\\"http://www.ethdocs.org/en/latest/connecting-to-clients/index.html\\\">Connecting to Ethereum Clients</a>。</p>\\n<p>RPC、客户端、以太坊网络三者的关系如下：用户通过RPC调用客户端功能， 客户端通过EVM执行智能合约以及跟整个以太坊P2P网络连接。</p>\\n<h2 id=\\\"账户\\\"><a href=\\\"#%E8%B4%A6%E6%88%B7\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>账户</h2>\\n<p>Ethereum有两种类型的账户， 一种叫External owned account，可以简单理解为人控制的账户， 里面有“币”ether， 需要提供secret key，即可转账等。  一定要保护好自己的密钥， 不要让别人知道了（相当于把银行卡密码告诉了别人）否则钱就没了（被别人取走了）； 也不要自己给搞丢了， 因为没有“找回密码”的功能， 记得经常备份， 也可以拿纸记下来存放在保险柜里， 但是小心别被火烧了哈(谁都不能用这笔钱了)。。。   本质上而言账号就是一个公钥-私钥对， 可以通过之前提到的各种客户端生成任意数量的EOA， 具体可以看<a href=\\\"http://www.ethdocs.org/en/latest/account-management.html\\\">Account Management</a>。</p>\\n<p>另一种叫Contract account， 其实是存储在blockchain上的一些代码和数据， 可以类比为面向对象语言里面的一个对象， 可以被EOA调用修改其中的状态。 代码执行需要花费一定数量的Gas。</p>\\n<h2 id=\\\"gas\\\"><a href=\\\"#gas\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Gas</h2>\\n<p>为了避免以太坊网络被滥用或者攻击， 在EVM中执行的代码(contract)需要执行一定的费用，这就是gas了。 gas对应现实生活中的燃油费， 是驱动整个加密经济体系运转的动力。 gas涉及到三个概念：</p>\\n<ul>\\n<li>gasUsed， 每一条EVM指令都对应一定数量的gas， gasUsed表示整个contract执行完需要的gas总和</li>\\n<li>gasPrice， 调用contract的用户愿意支付的单价</li>\\n</ul>\\n<p>执行一个contract的总花费 = gasUsed * gasPrice。</p>\\n<p>想想自己一不小心写出个死循环把自己几个亿的ether给用光了是什么感觉！ 所以我们一般会设置<strong>gasLimit</strong>，即最大花费。 如果花费超过了gasLimit则contract执行过的操作会回滚，然后停止执行。 如果花费没有达到gasLimit， 则剩下的会原路退回。 客户端可以帮你估计一个contract大概的花费， 便于合理设置gasLimit。 问大家个问题， 如果花费超过了gasLimit会回滚contract操作， 那么还会扣掉gas么？为什么？</p>\\n<p>更多资料可以看<a href=\\\"http://ethdocs.org/en/latest/contracts-and-transactions/account-types-gas-and-transactions.html\\\">Account Types, Gas, and Transactions</a>。</p>\\n<h2 id=\\\"智能合约\\\"><a href=\\\"#%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>智能合约</h2>\\n<p>前面多次提到contract， 到底是啥呢？ 说白了，就是一段代码以及相关的一个状态， 智能表示能自动执行。 比如你跟小明打赌， 说明天下不下雨，如果下雨你输10块给他。 结果第二天真的下雨了， 然后你赖账了。。。。为了避免赖账， 我们可以建一份智能合约， 里面一开始存储的状态是“你有10块钱， 小明有10块钱”，以及一段代码“如果明天下雨， 你的10块钱归小明， 反之亦然”。 然后第二天下雨了， 合约就自动执行，然后状态变成了“你有0块钱， 小明有20块钱”。</p>\\n<h2 id=\\\"evm\\\"><a href=\\\"#evm\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>EVM</h2>\\n<p>以太坊的虚拟机， 执行智能合约， 类似于JVM。 EVM是一个隔离的沙盒， 里面不能访问网络、文件系统等。EVM支持的功能是图灵完备的。 注意图灵完备不代表能做任何事情， 比如不能访问网络等。</p>\\n<h2 id=\\\"solidity\\\"><a href=\\\"#solidity\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Solidity</h2>\\n<p>EVM上执行的智能合约是底层的二进制， 但是我们开发要用高级语言呢。 <a href=\\\"https://solidity.readthedocs.io\\\">Solidity</a>就是开发智能合约的一门高级语言， 类似于javascript， 通过solidity的编译器编译成二进制。</p>\\n<h1 id=\\\"hello-ethereum\\\"><a href=\\\"#hello-ethereum\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hello Ethereum!</h1>\\n<h2 id=\\\"安装客户端\\\"><a href=\\\"#%E5%AE%89%E8%A3%85%E5%AE%A2%E6%88%B7%E7%AB%AF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>安装客户端</h2>\\n<p>这里我们选择安装<a href=\\\"https://geth.ethereum.org/\\\">geth</a>， 最简单的方式是<a href=\\\"https://geth.ethereum.org/downloads/\\\">下载压缩包</a>， 直接解压即可。 安装其他客户端可以参考<a href=\\\"https://www.ethereum.org/cli\\\">GETH &#x26; ETH</a>。 为了在任何路径都能执行geth， 可以将其加入系统PATH中。</p>\\n<p>安装好之后执行如下命令启动geth：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">geth</code></pre>\\n      </div>\\n<p>geth提供了一个console，整合了web3.js，我们可以在里面直接写javascript代码进行操作， 比如生成账户、转账等， 通过如下命令进入console:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">geth console</code></pre>\\n      </div>\\n<p>另外也可以单独执行<code class=\\\"language-text\\\">geth</code>把客户端启动起来， 然后在新的终端里面执行<code class=\\\"language-text\\\">geth attach</code>打开一个新的console。进入之后执行:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">eth.accounts</code></pre>\\n      </div>\\n<p>会发现返回的是空数组<code class=\\\"language-text\\\">[]</code>， 我们用下面命令生成一个新账号：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> personal.newAccount<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nPassphrase:\\nRepeat passphrase:\\n<span class=\\\"token string\\\">\\\"0xecbc12eaef5fa1300cb9aad0a17bd2e40bde2a61\\\"</span></code></pre>\\n      </div>\\n<h2 id=\\\"运行测试网络testnetwork\\\"><a href=\\\"#%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9Ctestnetwork\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>运行测试网络TestNetwork</h2>\\n<p>直接用<code class=\\\"language-text\\\">geth</code>启动客户端， geth进去的是主网络（main network），也就是说任何操作都会真实进入以太坊P2P网络，比如转账、部署智能合约等。当然，我们账户里面没钱， 所以也没法转账和部署智能合约。 为了便于测试，我们可以建立一个私有测试网络。</p>\\n<p>区块链第一块叫创世块(Genesis block)，建立私有测试链需要提供genesis block的配置，简单如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"nonce\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"0x0000000000000042\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"timestamp\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"0x0\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"parentHash\\\"</span><span class=\\\"token operator\\\">:</span>\\n    <span class=\\\"token string\\\">\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"extraData\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"0x\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"gasLimit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"0x8000000\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"difficulty\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"0x400\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"config\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"mixhash\\\"</span><span class=\\\"token operator\\\">:</span>\\n    <span class=\\\"token string\\\">\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"coinbase\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"0x3333333333333333333333333333333333333333\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"alloc\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>保存为<code class=\\\"language-text\\\">myGenesis.json</code>，然后执行下面命令：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth --identity <span class=\\\"token string\\\">\\\"MyEther\\\"</span> --rpc --datadir ~/.ethereum_private --nodiscover --networkid 1999 init ./myGenesis.json\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:33:36<span class=\\\"token punctuation\\\">]</span> Maximum peer count                       ETH<span class=\\\"token operator\\\">=</span>25 LES<span class=\\\"token operator\\\">=</span>0 total<span class=\\\"token operator\\\">=</span>25\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:33:36<span class=\\\"token punctuation\\\">]</span> Allocated cache and <span class=\\\"token function\\\">file</span> handles         database<span class=\\\"token operator\\\">=</span>/Users/magicly/.ethereum_private/geth/chaindata cache<span class=\\\"token operator\\\">=</span>16 handles<span class=\\\"token operator\\\">=</span>16\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:33:36<span class=\\\"token punctuation\\\">]</span> Writing custom genesis block\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:33:36<span class=\\\"token punctuation\\\">]</span> Persisted trie from memory database      nodes<span class=\\\"token operator\\\">=</span>0 size<span class=\\\"token operator\\\">=</span>0.00B time<span class=\\\"token operator\\\">=</span>10.416µs gcnodes<span class=\\\"token operator\\\">=</span>0 gcsize<span class=\\\"token operator\\\">=</span>0.00B gctime<span class=\\\"token operator\\\">=</span>0s livenodes<span class=\\\"token operator\\\">=</span>1 livesize<span class=\\\"token operator\\\">=</span>0.00B\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:33:36<span class=\\\"token punctuation\\\">]</span> Successfully wrote genesis state         database<span class=\\\"token operator\\\">=</span>chaindata                                       hash<span class=\\\"token operator\\\">=</span>6231b0…a0300b\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:33:36<span class=\\\"token punctuation\\\">]</span> Allocated cache and <span class=\\\"token function\\\">file</span> handles         database<span class=\\\"token operator\\\">=</span>/Users/magicly/.ethereum_private/geth/lightchaindata cache<span class=\\\"token operator\\\">=</span>16 handles<span class=\\\"token operator\\\">=</span>16\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:33:36<span class=\\\"token punctuation\\\">]</span> Writing custom genesis block\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:33:36<span class=\\\"token punctuation\\\">]</span> Persisted trie from memory database      nodes<span class=\\\"token operator\\\">=</span>0 size<span class=\\\"token operator\\\">=</span>0.00B time<span class=\\\"token operator\\\">=</span>3.22µs   gcnodes<span class=\\\"token operator\\\">=</span>0 gcsize<span class=\\\"token operator\\\">=</span>0.00B gctime<span class=\\\"token operator\\\">=</span>0s livenodes<span class=\\\"token operator\\\">=</span>1 livesize<span class=\\\"token operator\\\">=</span>0.00B\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:33:36<span class=\\\"token punctuation\\\">]</span> Successfully wrote genesis state         database<span class=\\\"token operator\\\">=</span>lightchaindata                                       hash<span class=\\\"token operator\\\">=</span>6231b0…a0300b</code></pre>\\n      </div>\\n<p>其中<code class=\\\"language-text\\\">--identity</code>是网络名称。 <code class=\\\"language-text\\\">--rpc</code>表示开启RPC功能。 <code class=\\\"language-text\\\">--datadir</code>是这个私有网络的数据存储目录，避免覆盖主网数据。 <code class=\\\"language-text\\\">--nodiscover</code>表示不要被其他节点发现。 <code class=\\\"language-text\\\">--networid</code>是网络id， 随便设置一个数即可， 默认为1（即主网）。</p>\\n<blockquote>\\n<p> —networkid value                     Network identifier (integer, 1=Frontier, 2=Morden (disused), 3=Ropsten, 4=Rinkeby) (default: 1)</p>\\n</blockquote>\\n<p>更多命令行选项可以执行<code class=\\\"language-text\\\">geth --help</code>查看， 或者访问<a href=\\\"https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options\\\">go ethereum Command Line Options</a>。</p>\\n<p>然后执行下面命令，启动geth：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">geth --identity <span class=\\\"token string\\\">\\\"MyEther\\\"</span> --rpc --datadir ~/.ethereum_private --nodiscover --networkid 1999</code></pre>\\n      </div>\\n<p>连接客户端：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth attach\\nFatal: Unable to attach to remote geth: dial unix /Users/magicly/Library/Ethereum/geth.ipc: connect: no such <span class=\\\"token function\\\">file</span> or directory\\n➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth attach ipc:/Users/magicly/.ethereum_private/geth.ipc\\nWelcome to the Geth JavaScript console<span class=\\\"token operator\\\">!</span>\\n\\ninstance: Geth/MyEther/v1.8.2-stable-b8b9f7f4/darwin-amd64/go1.9.4\\n modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0\\n\\n<span class=\\\"token operator\\\">></span> eth.accounts\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token operator\\\">></span> personal.newAccount<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nPassphrase:\\nRepeat passphrase:\\n<span class=\\\"token string\\\">\\\"0xa736f13951da77c39e035c4c1b1970478a758340\\\"</span></code></pre>\\n      </div>\\n<p>注意， 这里直接用<code class=\\\"language-text\\\">geth attach</code>连不上客户端， 因为不是用的默认配置。并且如果是用http方式attach的， 虽然连上了， 但是创建新账号的时候会报错：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth attach http://localhost:8545\\nWelcome to the Geth JavaScript console<span class=\\\"token operator\\\">!</span>\\n\\ninstance: Geth/MyEther/v1.8.2-stable-b8b9f7f4/darwin-amd64/go1.9.4\\ncoinbase: 0xa736f13951da77c39e035c4c1b1970478a758340\\nat block: 0 <span class=\\\"token punctuation\\\">(</span>Thu, 01 Jan 1970 08:00:00 CST<span class=\\\"token punctuation\\\">)</span>\\n modules: eth:1.0 net:1.0 rpc:1.0 web3:1.0\\n\\n<span class=\\\"token operator\\\">></span> personal.newAccount<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nPassphrase:\\nRepeat passphrase:\\nError: The method personal_newAccount does not exist/is not available\\n<span class=\\\"token operator\\\">></span></code></pre>\\n      </div>\\n<p>只有通过IPC连接上的客户端， 才认为足够安全， 才允许创建账号。 当然也可指直接用<code class=\\\"language-text\\\">geth</code>创建账号：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth --datadir ~/.ethereum_private account new\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:55:47<span class=\\\"token punctuation\\\">]</span> Maximum peer count                       ETH<span class=\\\"token operator\\\">=</span>25 LES<span class=\\\"token operator\\\">=</span>0 total<span class=\\\"token operator\\\">=</span>25\\nYour new account is locked with a password. Please give a password. Do not forget this password.\\nPassphrase:\\nRepeat passphrase:\\nAddress: <span class=\\\"token punctuation\\\">{</span>53707514492dda75eccb8ff621759af7f0f3c0f0<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>注意，必须加上<code class=\\\"language-text\\\">--datadir</code>，否则创建的账号在默认目录， 不能访问。然后在<code class=\\\"language-text\\\">console</code>里看， 确实有两个账号了：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> eth.accounts\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"0xa736f13951da77c39e035c4c1b1970478a758340\\\"</span>, <span class=\\\"token string\\\">\\\"0x53707514492dda75eccb8ff621759af7f0f3c0f0\\\"</span><span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>刚创建的账号， 肯定都没钱嘛：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> pa <span class=\\\"token operator\\\">=</span> eth.accounts<span class=\\\"token punctuation\\\">[</span>0<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token string\\\">\\\"0xa736f13951da77c39e035c4c1b1970478a758340\\\"</span>\\n<span class=\\\"token operator\\\">></span> eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa<span class=\\\"token punctuation\\\">)</span>\\n0</code></pre>\\n      </div>\\n<p>我们可以通过挖矿给自己搞点ether，因为我们在<code class=\\\"language-text\\\">myGenesis.json</code>里面配置的<code class=\\\"language-text\\\">&quot;difficulty&quot;: &quot;0x400&quot;,</code>， 所以很容易就挖到了。<a href=\\\"http://www.unminer.com/eth\\\">http://www.unminer.com/eth</a> 显示主网真实挖矿难度目前是1600T左右，是我们的<code class=\\\"language-text\\\">1600, 000, 000, 000</code>倍！所以知道为什么要搭建测试环境了吧。用下面命令开始挖矿：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> miner.setEtherbase<span class=\\\"token punctuation\\\">(</span>pa<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token operator\\\">></span> miner.start<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nnull\\n<span class=\\\"token operator\\\">></span> miner.stop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token operator\\\">></span> eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa<span class=\\\"token punctuation\\\">)</span>\\n55000000000000000000\\n<span class=\\\"token operator\\\">></span> web3.fromWei<span class=\\\"token punctuation\\\">(</span>eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa<span class=\\\"token punctuation\\\">)</span>, <span class=\\\"token string\\\">'ether'</span><span class=\\\"token punctuation\\\">)</span>\\n55</code></pre>\\n      </div>\\n<p>start之后几秒钟， CPU飚到800%， 风扇狂转， 赶紧关掉， 然后发现， 已经挖到55个以太坊了， 按照目前市值400刀一个， 我们挖到了价值22000刀的以太坊， 可惜都是测试环境的， 哈哈哈。</p>\\n<h2 id=\\\"编写智能合约solidity\\\"><a href=\\\"#%E7%BC%96%E5%86%99%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6solidity\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>编写智能合约Solidity</h2>\\n<p>solidity是编写以太坊智能合约的高级语言， 首先需要安装编译器， 参考<a href=\\\"http://solidity.readthedocs.io/en/develop/installing-solidity.html\\\">Installing the Solidity Compiler</a>。当然， 最简单的当然是直接用online版本<a href=\\\"https://remix.ethereum.org\\\">Remix</a>。</p>\\n<p>复制下列代码到remix编辑器中：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.0</span><span class=\\\"token punctuation\\\">;</span>\\ncontract mortal <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">/* Define variable owner of the type address */</span>\\n    address owner<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/* This function is executed at initialization and sets the owner of the contract */</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mortal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span> owner <span class=\\\"token operator\\\">=</span> msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">/* Function to recover the funds on the contract */</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">kill</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>sender <span class=\\\"token operator\\\">==</span> owner<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token function\\\">selfdestruct</span><span class=\\\"token punctuation\\\">(</span>owner<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\ncontract greeter is mortal <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">/* Define variable greeting of the type string */</span>\\n    string greeting<span class=\\\"token punctuation\\\">;</span>\\n    \\n    <span class=\\\"token comment\\\">/* This runs when the contract is executed */</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">greeter</span><span class=\\\"token punctuation\\\">(</span>string _greeting<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        greeting <span class=\\\"token operator\\\">=</span> _greeting<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">/* Main function */</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">greet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> constant <span class=\\\"token function\\\">returns</span> <span class=\\\"token punctuation\\\">(</span>string<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> greeting<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>然后执行编译， 之后可以查看编译结果， 如下图：\\n<img src=\\\"/blogimgs/blockchain/remix-greeter.png\\\" alt=\\\"Remix\\\"></p>\\n<h2 id=\\\"部署智能合约web3js\\\"><a href=\\\"#%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6web3js\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>部署智能合约Web3.js</h2>\\n<p>将前面图中代码<code class=\\\"language-text\\\">web3deploy</code>部分代码复制下来， 给变量<code class=\\\"language-text\\\">__greeting</code>一个值， 直接复制到geth的console中， 或者保存到文件比如<code class=\\\"language-text\\\">web3.js</code>，然后在console中执行<code class=\\\"language-text\\\">loadScript(&#39;./web3.js&#39;)</code>即可。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// web3.js</span>\\n<span class=\\\"token keyword\\\">var</span> _greeting <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Hello Ethereum!'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> greeterContract <span class=\\\"token operator\\\">=</span> web3<span class=\\\"token punctuation\\\">.</span>eth<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">contract</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"constant\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"inputs\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"kill\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"outputs\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"payable\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"stateMutability\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"nonpayable\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"function\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"constant\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"inputs\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"greet\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"outputs\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"string\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"payable\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"stateMutability\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"view\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"function\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"inputs\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"_greeting\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"string\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"payable\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"stateMutability\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"nonpayable\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"constructor\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> greeter <span class=\\\"token operator\\\">=</span> greeterContract<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">new</span><span class=\\\"token punctuation\\\">(</span>\\n   _greeting<span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token punctuation\\\">{</span>\\n     <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">:</span> web3<span class=\\\"token punctuation\\\">.</span>eth<span class=\\\"token punctuation\\\">.</span>accounts<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> \\n     data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'0x6060604052341561000f57600080fd5b6040516103a93803806103a983398101604052808051820191905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060019080519060200190610081929190610088565b505061012d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100c957805160ff19168380011785556100f7565b828001600101855582156100f7579182015b828111156100f65782518255916020019190600101906100db565b5b5090506101049190610108565b5090565b61012a91905b8082111561012657600081600090555060010161010e565b5090565b90565b61026d8061013c6000396000f30060606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610066575b600080fd5b341561005c57600080fd5b6100646100f4565b005b341561007157600080fd5b610079610185565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b957808201518184015260208101905061009e565b50505050905090810190601f1680156100e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610183576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b61018d61022d565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102235780601f106101f857610100808354040283529160200191610223565b820191906000526020600020905b81548152906001019060200180831161020657829003601f168201915b5050505050905090565b6020604051908101604052806000815250905600a165627a7a723058206787dd51eae8103738c5112e2d5c1636972e888ace270061dd0cf0e3f802f4cc0029'</span><span class=\\\"token punctuation\\\">,</span> \\n     gas<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'4700000'</span>\\n   <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">,</span> contract<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">,</span> contract<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> contract<span class=\\\"token punctuation\\\">.</span>address <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'undefined'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n         console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Contract mined! address: '</span> <span class=\\\"token operator\\\">+</span> contract<span class=\\\"token punctuation\\\">.</span>address <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">' transactionHash: '</span> <span class=\\\"token operator\\\">+</span> contract<span class=\\\"token punctuation\\\">.</span>transactionHash<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>其中data就是<code class=\\\"language-text\\\">greeter</code>编译之后的二进制。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> loadScript<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./web3.js'</span><span class=\\\"token punctuation\\\">)</span>\\nError: authentication needed: password or unlock undefined\\n<span class=\\\"token boolean\\\">true</span></code></pre>\\n      </div>\\n<p>额， 我们需要先解锁我们的主账户</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> personal.unlockAccount<span class=\\\"token punctuation\\\">(</span>web3.eth.accounts<span class=\\\"token punctuation\\\">[</span>0<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\nUnlock account 0xa736f13951da77c39e035c4c1b1970478a758340\\nPassphrase:\\n<span class=\\\"token boolean\\\">true</span></code></pre>\\n      </div>\\n<p>然后再加载加载脚本即可:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> loadScript<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./web3.js'</span><span class=\\\"token punctuation\\\">)</span>\\nnull <span class=\\\"token punctuation\\\">[</span>object Object<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token boolean\\\">true</span></code></pre>\\n      </div>\\n<p>这时候合约并没有入链的:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> greeter.address\\nundefined</code></pre>\\n      </div>\\n<p>想想也对， 这会儿没有miner干活呢， 那我们来自己挖一下吧：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> miner.start<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nnull\\n<span class=\\\"token operator\\\">></span> null <span class=\\\"token punctuation\\\">[</span>object Object<span class=\\\"token punctuation\\\">]</span>\\nContract mined<span class=\\\"token operator\\\">!</span> address: 0xf0406e7bcb75326a9b9fa47a05d3ce2126d95148 transactionHash: 0x01e70a7b0927cf70e9f0a2fcb904e6fff57009ae3d18350941fc4dc254283caf\\n<span class=\\\"token operator\\\">></span> miner.stop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token operator\\\">></span> web3.fromWei<span class=\\\"token punctuation\\\">(</span>eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa<span class=\\\"token punctuation\\\">)</span>, <span class=\\\"token string\\\">'ether'</span><span class=\\\"token punctuation\\\">)</span>\\n85\\n<span class=\\\"token operator\\\">></span> greeter.address\\n<span class=\\\"token string\\\">\\\"0xf0406e7bcb75326a9b9fa47a05d3ce2126d95148\\\"</span></code></pre>\\n      </div>\\n<p>可以看到， contract已经计入blockchain了， 另外，我们又挖到了30个eth哈哈哈。我们可以通过contract的address找到代码，当然，是二进制：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> eth.getCode<span class=\\\"token punctuation\\\">(</span>greeter.address<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token string\\\">\\\"0x60606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610066575b600080fd5b341561005c57600080fd5b6100646100f4565b005b341561007157600080fd5b610079610185565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b957808201518184015260208101905061009e565b50505050905090810190601f1680156100e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610183576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b61018d61022d565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102235780601f106101f857610100808354040283529160200191610223565b820191906000526020600020905b81548152906001019060200180831161020657829003601f168201915b5050505050905090565b6020604051908101604052806000815250905600a165627a7a723058206787dd51eae8103738c5112e2d5c1636972e888ace270061dd0cf0e3f802f4cc0029\\\"</span></code></pre>\\n      </div>\\n<p>然后我们就可以执行合约了：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> greeter.greet<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token string\\\">\\\"Hello Ethereum!\\\"</span></code></pre>\\n      </div>\\n<p>别人也能访问我们deploy的智能合约， 只要他们知道代码的地址以及接口类型(ABI (Application Binary Interface)))。 ABI是干嘛的呢， 基本就是告诉你前面的二进制代码要怎么调用， 因为估计没人能看了那串二进制就知道它是干嘛的吧。我们新开一个console：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth attach http://localhost:8545\\nWelcome to the Geth JavaScript console<span class=\\\"token operator\\\">!</span>\\n\\ninstance: Geth/MyEther/v1.8.2-stable-b8b9f7f4/darwin-amd64/go1.9.4\\ncoinbase: 0xa736f13951da77c39e035c4c1b1970478a758340\\nat block: 17 <span class=\\\"token punctuation\\\">(</span>Tue, 03 Apr 2018 16:30:06 CST<span class=\\\"token punctuation\\\">)</span>\\n modules: eth:1.0 net:1.0 rpc:1.0 web3:1.0\\n\\n<span class=\\\"token operator\\\">></span> var greeter2 <span class=\\\"token operator\\\">=</span> eth.contract<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"constant\\\"</span>:true,<span class=\\\"token string\\\">\\\"inputs\\\"</span>:<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>,<span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"greet\\\"</span>,<span class=\\\"token string\\\">\\\"outputs\\\"</span>:<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"\\\"</span>,<span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"string\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span>,<span class=\\\"token string\\\">\\\"payable\\\"</span>:false,<span class=\\\"token string\\\">\\\"stateMutability\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"view\\\"</span>,<span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"function\\\"</span><span class=\\\"token punctuation\\\">}</span>,<span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"inputs\\\"</span>:<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"_greeting\\\"</span>,<span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"string\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span>,<span class=\\\"token string\\\">\\\"payable\\\"</span>:false,<span class=\\\"token string\\\">\\\"stateMutability\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"nonpayable\\\"</span>,<span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"constructor\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>.at<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'0xf0406e7bcb75326a9b9fa47a05d3ce2126d95148'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nundefined\\n<span class=\\\"token operator\\\">></span> greeter2.address\\n<span class=\\\"token string\\\">\\\"0xf0406e7bcb75326a9b9fa47a05d3ce2126d95148\\\"</span>\\n<span class=\\\"token operator\\\">></span> greeter2.greet<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token string\\\">\\\"Hello Ethereum!\\\"</span>\\n<span class=\\\"token operator\\\">></span></code></pre>\\n      </div>\\n<p>像上面这样获取到contract的代码然后直接调用<code class=\\\"language-text\\\">greeter2.greet()</code>，其实是在本地的EVM上调用， 不会修改blockchain上的状态的（因此也不用花费ether）。如果需要修改blockchain上的状态，需要通过<code class=\\\"language-text\\\">sendTransaction</code>调用。 我们先在一个没有ehter的账户上调用一下试试：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> pa <span class=\\\"token operator\\\">=</span> eth.accounts<span class=\\\"token punctuation\\\">[</span>1<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token string\\\">\\\"0x53707514492dda75eccb8ff621759af7f0f3c0f0\\\"</span>\\n<span class=\\\"token operator\\\">></span> greeter2.greet.sendTransaction<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>from: pa<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\nError: insufficient funds <span class=\\\"token keyword\\\">for</span> gas * price + value\\n    at web3.js:3143:20\\n    at web3.js:6347:15\\n    at web3.js:5081:36\\n    at web3.js:4137:16\\n    at <span class=\\\"token operator\\\">&lt;</span>anonymous<span class=\\\"token operator\\\">></span>:1:1\\n\\n<span class=\\\"token operator\\\">></span> eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa<span class=\\\"token punctuation\\\">)</span>\\n0</code></pre>\\n      </div>\\n<p>看来，没钱真的不行啊。那我们在之前有ether的账户（之前有85ether，不过由于每次都交易都需要挖矿入链， 又多产生了一些，最后另外新开了一个账号来mine，才让pa0这个账号没有新增ether）上试一下呢：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> personal.unlockAccount<span class=\\\"token punctuation\\\">(</span>pa0<span class=\\\"token punctuation\\\">)</span>\\nUnlock account 0xa736f13951da77c39e035c4c1b1970478a758340\\nPassphrase:\\n<span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token operator\\\">></span> eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa0<span class=\\\"token punctuation\\\">)</span>\\n109991138204000000000\\n<span class=\\\"token operator\\\">></span> greeter.greet.sendTransaction<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>from: pa0<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token string\\\">\\\"0x5e4090be8ad2fcf6eeae05174f0e9eac3134a1857928d278f8ef4dd13ef2fded\\\"</span>\\n<span class=\\\"token operator\\\">></span> eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa0<span class=\\\"token punctuation\\\">)</span>\\n109991138204000000000\\n<span class=\\\"token operator\\\">></span> txpool.status\\n<span class=\\\"token punctuation\\\">{</span>\\n  pending: 1,\\n  queued: 0\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">></span> txpool.status\\n<span class=\\\"token punctuation\\\">{</span>\\n  pending: 0,\\n  queued: 0\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">></span> eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa0<span class=\\\"token punctuation\\\">)</span>\\n109990737038000000000\\n<span class=\\\"token operator\\\">></span> greeter.greet.sendTransaction<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>from: pa0<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token string\\\">\\\"0xec58cbf73512fd5aad75b9e60ebbe5a90f3bf36ceec63f704a7bbdf2a23ca4a1\\\"</span>\\n<span class=\\\"token operator\\\">></span> txpool.status\\n<span class=\\\"token punctuation\\\">{</span>\\n  pending: 1,\\n  queued: 0\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">></span> eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa0<span class=\\\"token punctuation\\\">)</span>\\n109990335872000000000\\n<span class=\\\"token operator\\\">></span></code></pre>\\n      </div>\\n<p>可以看出来，每次都需要消费<code class=\\\"language-text\\\">109991138204000000000 - 109990737038000000000 == 109990737038000000000 - 109990335872000000000 == 401165999996928</code>个wei，wei是以太坊的最小单位，<code class=\\\"language-text\\\">1 ether == 10 ** 18 wei</code>， 所以执行一次<code class=\\\"language-text\\\">greet</code>交易，需要花费<code class=\\\"language-text\\\">401165999996928 / 10 ** 18 == ~=0.0004</code>个ether，现在差不多1快rmb了。 我们可以看到，字符串确实存到blockchain上了：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> eth.getStorageAt<span class=\\\"token punctuation\\\">(</span>greeter.address<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token string\\\">\\\"0x000000000000000000000000a736f13951da77c39e035c4c1b1970478a758340\\\"</span></code></pre>\\n      </div>\\n<p>如果我们最后不需要这个合约了， 我们可以把他删除， 避免占用blockchain的空间：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> personal.unlockAccount<span class=\\\"token punctuation\\\">(</span>eth.accounts<span class=\\\"token punctuation\\\">[</span>0<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\nUnlock account 0xa736f13951da77c39e035c4c1b1970478a758340\\nPassphrase:\\n<span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token operator\\\">></span> greeter.kill.sendTransaction<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>from: eth.accounts<span class=\\\"token punctuation\\\">[</span>0<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">></span> eth.getCode<span class=\\\"token punctuation\\\">(</span>greeter.address<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token string\\\">\\\"0x60606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610066575b600080fd5b341561005c57600080fd5b6100646100f4565b005b341561007157600080fd5b610079610185565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b957808201518184015260208101905061009e565b50505050905090810190601f1680156100e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610183576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b61018d61022d565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102235780601f106101f857610100808354040283529160200191610223565b820191906000526020600020905b81548152906001019060200180831161020657829003601f168201915b5050505050905090565b6020604051908101604052806000815250905600a165627a7a723058206787dd51eae8103738c5112e2d5c1636972e888ace270061dd0cf0e3f802f4cc0029\\\"</span>\\n<span class=\\\"token operator\\\">></span> txpool.status\\n<span class=\\\"token punctuation\\\">{</span>\\n  pending: 1,\\n  queued: 0\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">></span> txpool.status\\n<span class=\\\"token punctuation\\\">{</span>\\n  pending: 0,\\n  queued: 0\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">></span> eth.getCode<span class=\\\"token punctuation\\\">(</span>greeter.address<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token string\\\">\\\"0x\\\"</span>\\n<span class=\\\"token operator\\\">></span> eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa0<span class=\\\"token punctuation\\\">)</span>\\n109990141400000000000</code></pre>\\n      </div>\\n<p>注意<code class=\\\"language-text\\\">kill</code>之后要mine才可以修改blockchain上的状态。也可以看出，kill也是需要花费gas的，当然，远比执行contract要低， 相当于网络进行了补贴， 否则估计就没人愿意删除合约了，这样会导致网络膨胀。 注意， 只有contract的owner才可以kill掉此contract， 其他人也能调用kill方法， 但是是没办法删掉contract的， 而且还扣了gas（貌似还比较高）。</p>\\n<p>ok，我们已经实现了一个Ethereum版本的<code class=\\\"language-text\\\">Hello World</code>， 后面我们就来考虑自己发一个币吧。</p>\\n<h1 id=\\\"参考资料\\\"><a href=\\\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考资料</h1>\\n<ul>\\n<li><a href=\\\"https://www.ethereum.org\\\">https://www.ethereum.org</a></li>\\n<li><a href=\\\"http://www.ethdocs.org\\\">http://www.ethdocs.org</a></li>\\n<li><a href=\\\"https://github.com/ethereum/go-ethereum/wiki/\\\">https://github.com/ethereum/go-ethereum/wiki/</a></li>\\n<li><a href=\\\"https://solidity.readthedocs.io\\\">https://solidity.readthedocs.io</a></li>\\n<li><a href=\\\"http://web3js.readthedocs.io/en/1.0/index.html\\\">http://web3js.readthedocs.io/en/1.0/index.html</a> </li>\\n</ul>\",\"timeToRead\":14,\"excerpt\":\"本文介绍以太坊开发的基础知识。 为啥不讲比特币呢 很少有基于比特币做开发的， 如果大家有兴趣可以看下面几个资料： Mastering Bitcoin 2nd Edition Bitcoin and Cryptocurrency Technologies   Coursera…\",\"fields\":{\"slug\":\"/blockchain-ethereum-0/\"},\"frontmatter\":{\"title\":\"区块链系列四：Hello Ethereum!\",\"date\":\"2018-04-03\",\"category\":\"Blockchain\",\"tags\":[\"Ethereum\",\"以太坊\"]}}},{\"node\":{\"html\":\"<p><a href=\\\"https://magicly.me/blockchain-crytography-hash/\\\">区块链系列二：区块链涉及到的密码学知识之Hash</a>中我们介绍了Hash散列函数的一些特性和应用，本章我们继续来介绍一些常用的密码学知识。</p>\\n<!-- more -->\\n<h1 id=\\\"历史上的密码\\\"><a href=\\\"#%E5%8E%86%E5%8F%B2%E4%B8%8A%E7%9A%84%E5%AF%86%E7%A0%81\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>历史上的密码</h1>\\n<h2 id=\\\"凯撒密码\\\"><a href=\\\"#%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>凯撒密码</h2>\\n<p>据说是以前凯撒大帝用过的密码， 方法很简单， 将字母表依次往后移动几个位置。具体移动的数量n就是密钥了。比如移动两个，则：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token constant\\\">A</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token constant\\\">C</span>\\n<span class=\\\"token constant\\\">B</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token constant\\\">D</span>\\n<span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token constant\\\">Y</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token constant\\\">A</span>\\n<span class=\\\"token constant\\\">Z</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token constant\\\">B</span></code></pre>\\n      </div>\\n<p>用这种方法加密<code class=\\\"language-text\\\">hello</code>， 则密文是<code class=\\\"language-text\\\">jgnnq</code>。 拿到密文后再倒着将每个字母往前移动n个位置就解密了。大家可以试着解密<code class=\\\"language-text\\\">dmqemejckp</code>, 密钥是2。</p>\\n<p>凯撒密码有个问题就是很容易破解， 因为总共只有26种可能（移动27个位置， 跟移动1个位置是一样的），很容易就暴力破解了。只需要把0-25都试一下， 看看“解密”出来的文字哪个是有具体含义的即可。比如大家可以破解一下”thnpj”。</p>\\n<h2 id=\\\"简单替换\\\"><a href=\\\"#%E7%AE%80%E5%8D%95%E6%9B%BF%E6%8D%A2\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>简单替换</h2>\\n<p>凯撒密码简单很容易破解， 原因是因为密钥空间（密钥的可选择范围）太小了， 因为当我们把A映射到B的时候， 其他字母的映射关系就全部决定好了。后来出现了一种变种， 可以任意指定字母之间的映射关系，如下图是其中一种：\\n<img src=\\\"/blogimgs/blockchain/simple-replace.png\\\" alt=\\\"简单替换密码替换表\\\"></p>\\n<p>我们可以知道这种加密方式的密码空间是<code class=\\\"language-text\\\">26! = 4.0329146112660565e+26</code>，这么巨大的密钥空间， 如果暴力破解的话是不实际的。 我们假设每秒可以遍历100亿个密钥， 则总共需要<code class=\\\"language-text\\\">26! / (10 ** 10 * 3600 * 24 * 365) == 12.7亿年</code>！！！</p>\\n<p>但是这种加密方式有一个问题， 就是同一个明文字符总是加密成同一个密文字符，比如把A替换成D，则所有的A都会替换成D。 于是出现了一种叫做频率分析的破解方法。 大概原理是：正常的语言中， 每个字符出现的频率是不一样的， 可以统计一下明文中的字符出现次数， 假设最高频的是A，再统计一下密文中最高频的字符，假设是D，则很有可能密文中的D是对应明文A。 一层层分析，就能实际破解这种加密方式了。</p>\\n<h2 id=\\\"enigma\\\"><a href=\\\"#enigma\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Enigma</h2>\\n<p>这是二战中德国使用的一种密码机， 当时号称没人能破解的， 刚开始的时候给了德国巨大战争优势。 后来我们的图灵大神， 终于还是把它给破解了， 对二战的胜利做出了巨大的贡献。 大家可以看<a href=\\\"https://movie.douban.com/subject/10463953/\\\">模仿游戏 The Imitation Game (2014)</a>这部电影， 里面就讲的这段历史。</p>\\n<p>PS，话说当时破解确实遇到了很大问题， 图灵也是一筹莫展， 后来好像是发现每次密文开头都是一样的（写的是元首万岁？记不太清了），然后找到方法把密钥空间大大缩小了， 然后才造出了破解机器， 为后来计算机的出现打下了坚实的基础。 这个故事告诉我们， 再完美的密码系统因为有了不完美的人的参与， 也就变得不完美了。</p>\\n<h1 id=\\\"对称加密\\\"><a href=\\\"#%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>对称加密</h1>\\n<p>对称加密就是加密密钥和解密密钥是一样的， 比如我们前面说的几种加密方式都是对称密钥。</p>\\n<p>因为所有的明文信息我们都能编码成二进制比特， 也就可以等价的转化成一个数字， 所以我们后面讲解的时候， 明文全部用一个数表示即可， 大家应该知道，这个数可以是对应一段文本， 也可以是一部电影。</p>\\n<p>最简单的对称加密就是在明文上加一个数。 比如明文是1， 我选择一个密钥37， 然后加起来发送给你， 你得到38， 然后用我们提前约定好的37去减一下， 就解密出来得到1了。 而对于那些窃听者， 因为他们不知道密钥是37， 所以拿到加密后的38， 也没办法知道明文是1。</p>\\n<p>对称加密主要有DES和AES。 目前DES已经不安全了，不建议使用。 1997年NIST（美国标准技术研究所）公开募集AES（Advanced Encryption Standard）算法， 全世界很多密码学家投递了很多算法， 最后经过各种严格的筛选， 最后于2000年10月2日， Rijndael算法获胜，被选为NIST的AES标准。NIST当时公开选拔AES的时候设定了条件：被选为AES的密码算法必须无条件地免费提供给全世界使用。正是这样， 我们现在才能免费使用AES。</p>\\n<p>说到这里很多人可能会说我自己也可以设计一个算法， 不要让别人知道就行了啊。 这种做法叫隐蔽式安全性(security by obscurity)，只是在一厢情愿地以为别人不能破解而已， 其实并没有经过真正的检验。 要知道像AES这样通过竞争来实现的标准， 都是发动了全世界的密码学家去设计、尝试破解，最后得到一个很多专家都觉得安全的算法。 自己实现“秘密算法”，就好比为了锁门， 不是去买一个品牌商家的锁， 而是自己系一根绳子把门拴起来一样。</p>\\n<h1 id=\\\"非对称加密\\\"><a href=\\\"#%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>非对称加密</h1>\\n<p>上面说的对称加密有一个很大的弊端， 那就是加密和解密必须是用同一个密钥。 那么问题来了， 怎么把密钥安全地交给接收方呢？ 显然， 用对称加密方法是没办法通过线上传递密钥的。 办法就是发送者和接受者线下碰头， 当面商量好密钥。甚至以前打仗时候， 都是将密钥锁在保险箱里， 用战斗机护送的。显然， 这个成本有点高。</p>\\n<p>后来密码学家们发明了非对称加密， 即加密密钥（也叫公钥， public key， 简写为pk）和解密密钥（也叫私钥， secret key， 简写为sk）不一样。 假设Alice要给Bob通信， 则通信过程变成了这样：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">Alice<span class=\\\"token punctuation\\\">:</span> Bob我要给你说话， 你把公钥pk发给我。\\nBob<span class=\\\"token punctuation\\\">:</span> 好的， 这是我的公钥pk。\\nAlice<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">这是我用公钥加密后的内容pk</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span>。\\nBob<span class=\\\"token punctuation\\\">:</span> 我用sk解密看看， 哦， <span class=\\\"token function\\\">sk</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">pk</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>解密出来是x啊。 <span class=\\\"token function\\\">这是我的回复sk</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span>。\\nAlice<span class=\\\"token punctuation\\\">:</span> 我用pk解密看看， 哦， <span class=\\\"token function\\\">pk</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">sk</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>解密出来是y啊。\\n<span class=\\\"token operator\\\">...</span><span class=\\\"token operator\\\">...</span></code></pre>\\n      </div>\\n<p>我们可以看到， 用公钥加密的内容pk(x)可以用私钥解密， 即<code class=\\\"language-text\\\">sk(pk(x)) === x</code>；而用私钥加密的内容sk(y)可以用公钥解密， 即<code class=\\\"language-text\\\">pk(sk(y)) === y</code>。</p>\\n<p>广泛使用的非对称加密方法有RSA，用到了一些数论方面的数学原理， 有兴趣的可以自己看看相关文章：</p>\\n<ul>\\n<li><a href=\\\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\\\">RSA算法原理（一）</a></li>\\n<li><a href=\\\"https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95\\\">RSA加密演算法</a></li>\\n</ul>\\n<p>一般说来非对称加密算法比对称加密算法慢很多，可能有几百倍， 因此我们一般将对称加密算法和非对称加密算法联合起来一起使用。即用非对称加密算法先协商出对称加密的密钥， 然后用对称加密算法去传递信息。 因为密钥（可能就几百字节）相比信息本身（可能几百兆甚至更大）要小很多， 所以这种混合加密方式综合了两者优点。</p>\\n<p>由于用sk加密的内容，能用pk解密， 因此非对称加密算法还可以用于数字签名。 所谓数字签名，类似于现实生活中的签名， 比如A答应了B一件事， 为了怕事后A返回， B可以要求A把答应的东西写到字上， 然后签个名， 这样A就不能抵赖了。 在线上的话， A答应了B一件事情x， 则可以要求A用他的私钥sk对x进行加密， 得到sk(x)然后和x一起发送出来。 因为公钥是可以公开的， 任何人都可以拿到， 因此大家都可以用公钥pk去验证A的签名， 即只需要<code class=\\\"language-text\\\">pk(sk(x)) === x</code>既可以认为x这件事情是A说的。 因为没有人知道A的私钥sk， 所以不可能有其他人能编造出x和sk(x)，使得刚好<code class=\\\"language-text\\\">pk(sk(x)) === x</code>的。 对应到比特币里， x这件事可能就是<code class=\\\"language-text\\\">“将pk地址（比特币地址是公钥pk取两次hash）里的钱转10块到pk1地址”</code>， 然后附带上sk(x)， 则网络上其他节点会验证一下<code class=\\\"language-text\\\">pk(sk(x)) === x</code>， 如果为真， 则说明x这条转账记录是这笔钱的主人说的， 否则就拒绝这笔交易。</p>\\n<h1 id=\\\"认证\\\"><a href=\\\"#%E8%AE%A4%E8%AF%81\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>认证</h1>\\n<p>非对称加密解决了对称加密的密码配送难题， 但是依然不能解决中间人攻击。所谓中间人攻击，是指第三方攻击者对Alice伪装成Bob， 对Bob伪装成Alice， 如下图：\\n<img src=\\\"/blogimgs/blockchain/middleman-attack.png\\\" alt=\\\"中间人攻击\\\"></p>\\n<p>似乎又遇到了公钥配送的问题。解决方法是找一个可信的中间机构T， Bob将自己的公钥pkb发送给T， T用自己的私钥skt对B的公钥pkb进行签名skt(pkb)， 这样Alice收到B的公钥pkb，以及认证机构T的签名skt(pkb)，只需要用认证机构T的公钥pkt验证一下<code class=\\\"language-text\\\">pkt(skt(pb)) === pkb</code>是否为真即可， 为真则说明“Bob”提供的公钥真的是Bob的公钥。这样的中间机构T我们一般叫做CA，即Certification Authority。这样我们就能安全地。。。。等等， 你刚刚好像说要用CA的公钥pkt去验证签名和Bob的公钥啊， 那怎么知道pkt真的是T的公钥呢？ 额， 这个， 我们可以再找一个中间机构T2, 去认证T嘛。   那T2的公钥又怎么办呢？。。。。T， T2, T3。。。这样会形成一个CA层级结构， 但是最后我们总会到一个最顶层的CA（叫做Root CA）， 那Root CA的公钥我们要怎么认证呢？ 说得好！ Root CA的证书是自签名的， 并且它的公钥和证书是提前存储到电脑里的， 也就是说电脑出厂的时候就给你装了Root CA的证书和公钥， 然后用Root CA的公钥可以认证T3的公钥， 用T3的公钥可以认证T2的公钥， 用T2的用过可以认证T的公钥， 最后用T的公钥可以认证Bob的公钥。 这一整套CA结构叫做公钥基础设施(Public-Key Infrastructure， 简写PKI)。 你可能还会继续问， 我们怎么相信电脑厂家不会偷偷地换一个假的Root CA进去呢？额， 这个我只能说，我们也没别的办法。 事实上， 联想就这么干过， 有兴趣的可以搜superfish，或者看<a href=\\\"http://tech.sina.com.cn/z/superfish/\\\">这里</a>。 </p>\\n<p>当然，我们也是可以自己导入证书到系统里面去的。 比如我们想抓包分析一个APP的接口， 如果APP跟服务端是用的https连接， 我们哪怕抓到包看到的也是乱码， 这时候可以把抓包工具（比如charles）的证书导入到系统里面，则这个抓包工具就可以发动“中间人攻击”，破解抓到的包了。</p>\\n<h1 id=\\\"参考资料\\\"><a href=\\\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考资料</h1>\\n<ul>\\n<li><a href=\\\"https://book.douban.com/subject/26822106/\\\">图解密码技术（第3版）</a></li>\\n</ul>\",\"timeToRead\":3,\"excerpt\":\"区块链系列二：区块链涉及到的密码学知识之Hash 中我们介绍了Hash散列函数的一些特性和应用，本章我们继续来介绍一些常用的密码学知识。 历史上的密码 凯撒密码 据说是以前凯撒大帝用过的密码， 方法很简单， 将字母表依次往后移动几个位置。具体移动的数量n…\",\"fields\":{\"slug\":\"/blockchain-crytography-desrsa/\"},\"frontmatter\":{\"title\":\"区块链系列三：区块链涉及到的密码学知识之加密、签名与认证\",\"date\":\"2018-03-31\",\"category\":\"Blockchain\",\"tags\":[\"BTC\",\"密码学\",\"crytography\"]}}},{\"node\":{\"html\":\"<p>在区块链开发中涉及到很多密码学知识， 不懂得相关原理，可能很难理解设计思路更不要说阅读源码了。 我们就花一点时间来了解下区块链开发设计到的密码学知识， 本文简单介绍Hash函数的一些性质， 要想更深入了解请阅读相关专业文献。</p>\\n<!-- more -->\\n<h1 id=\\\"什么是hash函数\\\"><a href=\\\"#%E4%BB%80%E4%B9%88%E6%98%AFhash%E5%87%BD%E6%95%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>什么是Hash函数</h1>\\n<p>这里说的Hash函数不是哈希表这种数据结构， 而是一种密码学概念，具有如下一些性质：</p>\\n<ul>\\n<li>输入是任意长度，输出为固定长度（比如256bits）</li>\\n<li>计算起来很高效</li>\\n<li>输入改动一点点（哪怕只是一个bit），输出结果千差万别</li>\\n<li>…</li>\\n</ul>\\n<p>常用的Hash函数有MD5， SHA1， SHA256等。 有很多在线工具可以计算Hash函数的值， 比如：<a href=\\\"http://tool.oschina.net/encrypt?type=2%EF%BC%8C\\\">http://tool.oschina.net/encrypt?type=2，</a> 我们来看一下<code class=\\\"language-text\\\">hello blockchain!</code>的几种Hash函数值：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">md5<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">4</span>b7cf9b1f0e3c92c3ca571a5ea4d3fda\\nsha1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">57</span>bf459d6c142f3427258089e386c43d106a72ab\\nsha256<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">108</span>be1bede687534d56a8229d4deabccfd9ee83358b15e3e95286915b8a4f648</code></pre>\\n      </div>\\n<p>在mac下有相应的命令行可以计算这些Hash函数值，md5和shasum。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  Desktop <span class=\\\"token function\\\">cat</span> helloblockchain.txt\\nhello blockchain<span class=\\\"token operator\\\">!</span>% // 这里的%不是文件内容，而是因为最后一行没有\\\\n导致命令行下显示的问题\\n➜  Desktop md5 helloblockchain.txt\\nMD5 <span class=\\\"token punctuation\\\">(</span>helloblockchain.txt<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> 4b7cf9b1f0e3c92c3ca571a5ea4d3fda\\n➜  Desktop shasum helloblockchain.txt\\n57bf459d6c142f3427258089e386c43d106a72ab  helloblockchain.txt\\n➜  Desktop shasum -a 256 helloblockchain.txt\\n108be1bede687534d56a8229d4deabccfd9ee83358b15e3e95286915b8a4f648  helloblockchain.txt</code></pre>\\n      </div>\\n<p>在linux下和windows命令可能略有不同， 大家自己查一下即可。 这里有个坑要注意，<a href=\\\"https://www.zhihu.com/question/22808787\\\">linux以及mac下用vim编辑文件， 会在每一行后自动给你加上<code class=\\\"language-text\\\">\\\\n</code></a>，即使只有一行！也就是说你输入的是<code class=\\\"language-text\\\">hello blockchain!</code>， 用vim看上去也是只有一行， 但是其实存储的时候在最后多存储了一个<code class=\\\"language-text\\\">\\\\n</code>， 而用vim你还看不出来。 后来用VSCode打开文件才发现多了一个换行， 我说怎么hash值完全不一样呢。 这也体现了hash函数的一大性质： 任意一点点改动， 最后hash值都差别很大！</p>\\n<p>作为密码学概念， 我们希望Hash函数具有如下三个特征，我们才认为此Hash函数是密码学安全的：</p>\\n<ol>\\n<li>Collision Free</li>\\n<li>Hiding</li>\\n<li>Puzzle Friendly</li>\\n</ol>\\n<h1 id=\\\"collision-free\\\"><a href=\\\"#collision-free\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Collision Free</h1>\\n<p>这个性质说的是没有人能够找到两个不同的输入， 它们的hash输出是相同的， 即不能找到<code class=\\\"language-text\\\">x != y</code>但是<code class=\\\"language-text\\\">H(x) == H(y)</code>。</p>\\n<p>注意， 我们这里说的是“没有人能够找到”，而不是说不存在！大家仔细想想就会知道， 冲突（Collision）肯定是存在的。 为啥呢？因为我们说了输出是固定长度的， 比如256bits，那么输出空间大小就只有<code class=\\\"language-text\\\">Math.pow(2, 256)</code>种可能。而输入可以是任意长度，那输入空间远比输出空间要大，根据小时候学过的<a href=\\\"https://zh.wikipedia.org/wiki/%E9%B4%BF%E5%B7%A2%E5%8E%9F%E7%90%86\\\">鸽巢原理</a>就知道至少有两个<code class=\\\"language-text\\\">x != y</code>使得<code class=\\\"language-text\\\">H(x) == H(y)</code>的。</p>\\n<blockquote>\\n<p>鸽巢原理：若有n个笼子和n+1只鸽子，所有的鸽子都被关在鸽笼里，那么至少有一个笼子有至少2只鸽子。</p>\\n</blockquote>\\n<p>对于输出是256bits的hash函数，不管Hash函数是什么，只要尝试<code class=\\\"language-text\\\">Math.pow(2, 130)</code>个输入， 就有<code class=\\\"language-text\\\">99.8%</code>的概率会找到冲突， 最差也就是找<code class=\\\"language-text\\\">Math.pow(2, 256) + 1</code>次就肯定能找到冲突，平均是<code class=\\\"language-text\\\">Math.pow(2, 128)</code>次。但是问题是，这个需要花太久太久的时间！多久呢？我在自己的Mac Pro上简单测试了一下， 大概每秒计算2000000次hash，则大概需要花<code class=\\\"language-text\\\">Math.pow(2, 128) / (3600 * 24 * 365 * 2000000) ~= 5 * Math.pow(10, 24)</code>年，远比宇宙诞生的时间久。引用普林斯顿的课程<a href=\\\"http://bitcoinbook.cs.princeton.edu/\\\">Bitcoin and Cryptocurrency Technologies</a>里的一段话：</p>\\n<blockquote>\\n<p>For another way of thinking about this, we can say that, if every computer ever made by humanity was computing since the beginning of the entire universe, up to now, the odds that they would have found a collision is still infinitesimally small. So small that it’s way less than the odds that the Earth will be destroyed by a giant meteor in the next two seconds.</p>\\n</blockquote>\\n<p>这段话的大概意思是说把全人类从古自今曾经造出来过的电脑都拿来从宇宙一开始就计算，那么到今天为止找到冲突的概率依然很小很小， 有多小呢？比接下来的两秒钟地球被一块大流星撞毁的概率还小， 而这件事。。。。。。。（2s过去）。。。。并没有发生。</p>\\n<p>不过这段话应该是在2015年说的， 这两年发生了很多事情， 其中一件事情就是比特币大涨， 导致专门用于挖矿的矿机（ASIC）出现， 计算hash的速度大幅度提升。<a href=\\\"https://magicly.me/blockchain-btc-mining/\\\">区块链系列一：现在挖比特币有多难</a>中我们提到，目前比特币矿机全网的算力大概是每秒<code class=\\\"language-text\\\">23555072455973170000</code>次hash计算，我们来看看这么大的算力平均花多久能找到冲突呢。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">128</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3600</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">24</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">365</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">23555072455973170000</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">~</span><span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4600</span>亿</code></pre>\\n      </div>\\n<p>宇宙年龄目前大概是130亿年， 也就是说如果这些矿机从宇宙诞生就开始计算hash， 则发现冲突的概率大概是<code class=\\\"language-text\\\">130 / 4600 ~= 3%</code>。注意我们还只是说的是挖比特币的矿机，并没有如作者说的<code class=\\\"language-text\\\">把全人类曾经造出来过的电脑都算上</code>, 换句话说仅仅只是挖比特币的矿机，就把一件概率曾经远小于接下来2s地球被流星击中而毁灭的事情的概率提高到了3%！！！想想就觉得可怕！！！</p>\\n<p>这两年hash算力有这么大的提升， 完全是由于比特币大涨， 人们为了在挖矿中占据优势， 开发了大量ASIC。我们之前说一个蚂蚁矿机S9的算力是13.5Thash/s， 而我的mac pro大概是2Mhash/s， 也就是一台S9在计算hash方面，相当于<code class=\\\"language-text\\\">13.5T / 2M ~= 6.7M</code>，670万台Mac Pro！！！</p>\\n<p>那么有没有更快的方法找到冲突呢？答案是，对于有些hash函数，有。 对于其他的hash函数， 我们不知道！注意， 是不知道，而不是没有！没有任何hash函数被“证明”是Collision Free的。只是有些hash函数人们花了大量时间去找， 但是还没有找到，所以暂时认为是collision free的，而有些曾经认为是collision free的hash函数被找到有效构造冲突的方法了，比如MD5，因此在安全性要求较高的场景就建议不再使用MD5了。比特币里使用的是sha256。</p>\\n<p>PS， 破解MD5的是时任山东大学教授的<a href=\\\"https://baike.baidu.com/item/%E7%8E%8B%E5%B0%8F%E4%BA%91/29050\\\">王小云教授</a>。 另外，Google真正找到了一个SHA1的碰撞的实例，因此也被认为是不安全的了。 可以参看： <a href=\\\"https://www.leiphone.com/news/201711/CD1xUXxl8ByzS1nr.html\\\">https://www.leiphone.com/news/201711/CD1xUXxl8ByzS1nr.html</a></p>\\n<h2 id=\\\"应用案例：消息摘要message-digests\\\"><a href=\\\"#%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%B6%88%E6%81%AF%E6%91%98%E8%A6%81message-digests\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>应用案例：消息摘要Message digests</h2>\\n<p>那么hash函数的这条性质有什么用呢？Hash函数的输出， 可以作为信息摘要。 </p>\\n<p>我们说“没有人能够”找到<code class=\\\"language-text\\\">x != y</code>使得<code class=\\\"language-text\\\">H(x) == H(y)</code>， 反过来也就是只要<code class=\\\"language-text\\\">H(x) == H(y)</code>，我们就可以认为<code class=\\\"language-text\\\">x == y</code>的。这样我们要比较两个文件是否一致， 不管这两个文件有多大， 我们只需要比较他们的hash输出即可，而hash输出只有256bits，比较非常快。 </p>\\n<p>有个典型的应用是网盘的“秒传”功能， 用过网盘的都知道， 在上传某些大文件（比如某部电影）的时候， 可能几秒就传完了。一部几个G的电影， 几秒就传到网盘服务器上去了， 你们家网速真的有这么快么？！事实是， 网盘先在本地计算电影的hash值， 然后把输出的256bits发给服务器， 如果服务器上之前已经有某个文件的hash值等于现在的256bits，则认为网盘服务器上已经有这个文件了， 就不需要传了， 只需要在服务器后台加条记录链接过去就可以了。 所以我们会发现越是热门的电影等越是容易秒传。 而如果你自己拍的视频被“秒传”了， 那你就得想想是怎么回事儿了。</p>\\n<p>文件摘要还有一个用处是验证下载的文件是否完整没有被篡改过。一般下载软件都建议大家去官网下载， 但是有时候官网下载速度比较慢（尤其是官网在国外的时候），这时候很多人会选择在其他论坛或者使用p2p软件（比如迅雷）下载， 但是这样其实是有安全问题的。 有可能你下载的软件已经被别人植入了病毒， 大家还记得之前的<a href=\\\"https://zh.wikipedia.org/zh-cn/XcodeGhost%E9%A3%8E%E6%B3%A2\\\">Xcode Ghost风波</a>么？那么我们就可以通过从第三方下载软件， 下载完成之后， 计算软件的hash值， 然后比较这个hash值是否等于官网上的hash值（一般官网都会提供软件的好几种hash值），如果相同，我们就可以放心地使用此软件。这样，既提高了软件下载速度，也保证了安全性。</p>\\n<h1 id=\\\"hiding\\\"><a href=\\\"#hiding\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hiding</h1>\\n<p>我们希望hash函数满足这样的性质：知道<code class=\\\"language-text\\\">H(x)</code>，不可能推算出<code class=\\\"language-text\\\">x</code>。</p>\\n<p>不过上面这样描述不太准确， 因为如果x的取值范围有限， 比如只是0-9， 则我们可以对0-9求H(x)， 然后直接反查就可以得出x了。准确的描述应该如下：</p>\\n<blockquote>\\n<p>如果我们从一个满足high min-entropy的概率分布中选出一个秘密的值r， 则如果知道H(r || x)的情况下不能推算出x， 则我们说H函数满足Hiding性质。</p>\\n</blockquote>\\n<p>high min-entropy大概意思是从一个很大的空间中随机选择一个值，每个值的概率基本是一样的。比如我们从“所有256bits长的字符串”这个空间中等概率的选择一个字符串，则选到具体某个字符串的概率是<code class=\\\"language-text\\\">1 / Math.pow(2, 256)</code>， 这是一个极小的数字。<code class=\\\"language-text\\\">||</code>表示字符串拼接， 比如<code class=\\\"language-text\\\">hello || blockchain! === hello blochain!</code>。</p>\\n<p>这里拼接一个从很大空间中选出来的secret值r的目的就是为了让<code class=\\\"language-text\\\">r || x</code>的取值范围变得很大， 目的跟密码加盐再做hash差不多。</p>\\n<h2 id=\\\"应用案例：承诺commitments\\\"><a href=\\\"#%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%89%BF%E8%AF%BAcommitments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>应用案例：承诺Commitments</h2>\\n<p>我们来做一个游戏， 我想一个0-9的数， 你来猜， 猜对算赢。如果我只是“想”一个数的话， 你永远赢不了，因为哪怕你猜对了，我也可以说我想的是另外一个数。如果我们是面对面的话， 可以这样， 我把数字写下来，放在信封里，把信封放在我们面前的桌子上， 你猜了数字之后， 我们打开信封，就能验证有没有猜对， 而我也不能抵赖或者偷偷修改之前写的数字。</p>\\n<p>如果在线上要怎么玩呢？因为我们可以找一个满足Collision Free和Hiding性质的函数H， 我想一个数字x， 然后把H(x)发出来给大家看到， 因为我们说H具有Collision Free性质， 所以我不可能事后说我写的数字其实是x1， 因为我找不到满足<code class=\\\"language-text\\\">x1 != x</code>并且<code class=\\\"language-text\\\">H(x1) == H(x)</code>的数字，所以我不能抵赖。但是你是可以把0-9都用H计算一遍， 然后跟H(x)对比，就能知道我想的x是多少了。</p>\\n<p>所以我还需要随机选择一个256bits的key， 然后把<code class=\\\"language-text\\\">H(key || x)</code>发出来，因为<code class=\\\"language-text\\\">key</code>的选择空间是<code class=\\\"language-text\\\">Math.pow(2, 256)</code>，你不可能去遍历所有可能的key来暴力计算所有的<code class=\\\"language-text\\\">H(key || x)</code>，因此就没办法知道<code class=\\\"language-text\\\">key || x</code>，也就没办法知道<code class=\\\"language-text\\\">x</code>了。同样，我还是不可能找到另一个不同的<code class=\\\"language-text\\\">key1</code>，使得<code class=\\\"language-text\\\">key1 != key</code>但是<code class=\\\"language-text\\\">H(key1 || x) == H(key || x)</code>的。这样就保证了我既不能抵赖，你也不能推算出<code class=\\\"language-text\\\">x</code>，对于你猜的数字y，只要事后我把<code class=\\\"language-text\\\">key</code>发出来，计算<code class=\\\"language-text\\\">H(key || x)</code>和<code class=\\\"language-text\\\">H(key || y)</code>，如果两者相等， 则认为<code class=\\\"language-text\\\">x == y</code>， 反之亦然。</p>\\n<p>除了玩猜数字游戏这个，还有哪些使用场景呢？博彩、在线扑克等使用这个特性， 就能一定程度保证庄家不会作弊。最近在构思用区块链技术解决在线poker的一些问题， 有兴趣私聊。</p>\\n<h1 id=\\\"puzzle-friendly\\\"><a href=\\\"#puzzle-friendly\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Puzzle Friendly</h1>\\n<p>对于n-bit的输出y，如果k是从一个high min-entropy的分布中选出来的，如果不可能在远小于<code class=\\\"language-text\\\">Math.pow(2, n)</code>的时间中找到x使得<code class=\\\"language-text\\\">H(k || x) == y</code>， 则我们说H具有Puzzle friendliness性质。</p>\\n<p>这个性质是说， 要想找到x， 使得<code class=\\\"language-text\\\">H(k || x) == y</code>， 没什么办法比随机乱猜更有效！</p>\\n<h2 id=\\\"应用案例：搜索谜题search-puzzle\\\"><a href=\\\"#%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%90%9C%E7%B4%A2%E8%B0%9C%E9%A2%98search-puzzle\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>应用案例：搜索谜题Search puzzle</h2>\\n<p>搜索谜题包括几个要素：</p>\\n<ul>\\n<li>hash函数H</li>\\n<li>puzzle-ID，需要是从high min-entropy分布中选出来的</li>\\n<li>目标范围Y</li>\\n</ul>\\n<p>这个问题的解x需要满足如下性质：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token constant\\\">H</span><span class=\\\"token punctuation\\\">(</span>id <span class=\\\"token operator\\\">||</span> x<span class=\\\"token punctuation\\\">)</span> ∈ <span class=\\\"token constant\\\">Y</span></code></pre>\\n      </div>\\n<p>假设hash函数H输出是n-bit，则输出空间大小为<code class=\\\"language-text\\\">Math.pow(2, n)</code>。Y的大小决定了问题的求解难度。如果Y的大小等于<code class=\\\"language-text\\\">Math.pow(2, n)</code>，则最容易，随便一个x都满足条件。如果Y的大小只有1， 则问题是最难的。Y范围越小，问题越难。</p>\\n<p>如果H是puzzle-friendly的，则没有什么方法比随机取x去尝试更有效。 事实上， 比特币的挖矿机制就利用了这个性质。</p>\\n<h1 id=\\\"总结\\\"><a href=\\\"#%E6%80%BB%E7%BB%93\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>总结</h1>\\n<p>本文我们讲了密码学领域的hash函数， 以及需要满足几个特征来保证其安全性。 最后要强调的是， 目前没有哪个函数被“数学证明”是满足这三个特征的， 只是有些函数人们在实际中花了大量精力去“破解”而没有成功，因此我们暂时认为其是“安全”的。所以，安全是一个相对以及不断发展变化的问题，就好比以前几十年都认为是安全的MD5， 后来也被发现是不安全的了。那么目前认为还是安全的sha256， 到哪有一天会被发现有问题呢？让我们拭目以待。</p>\\n<p>下一篇讲公钥加密机制。</p>\\n<h1 id=\\\"参考资料\\\"><a href=\\\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考资料</h1>\\n<ul>\\n<li><a href=\\\"http://bitcoinbook.cs.princeton.edu/\\\">http://bitcoinbook.cs.princeton.edu/</a></li>\\n</ul>\",\"timeToRead\":5,\"excerpt\":\"在区块链开发中涉及到很多密码学知识， 不懂得相关原理，可能很难理解设计思路更不要说阅读源码了。 我们就花一点时间来了解下区块链开发设计到的密码学知识， 本文简单介绍Hash函数的一些性质， 要想更深入了解请阅读相关专业文献。 什么是Hash函数 这里说的Hash…\",\"fields\":{\"slug\":\"/blockchain-crytography-hash/\"},\"frontmatter\":{\"title\":\"区块链系列二：区块链涉及到的密码学知识之Hash\",\"date\":\"2018-03-24\",\"category\":\"Blockchain\",\"tags\":[\"BTC\",\"密码学\",\"crytography\",\"hash\"]}}},{\"node\":{\"html\":\"<p>我们知道Node.js里充满着大量的异步， 后来出现了Promise以及async/await来解决”callback hell”的问题。我们就来看看promise以及async/await如何简化JS并发代码的编写， 最后再给出一份实现相同功能的Go代码。</p>\\n<!-- more -->\\n<h1 id=\\\"问题\\\"><a href=\\\"#%E9%97%AE%E9%A2%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>问题</h1>\\n<p>代码开发中经常会做的一件事就是去请求一个api， 并可能进一步根据api返回结果去获取访问新的接口。 这里我们构造一个问题：获取<a href=\\\"https://cnodejs.org/\\\">https://cnodejs.org/</a> 前10个主题的id、title、date、作者昵称以及第一个回复者的昵称。 cnodejs提供了api， <a href=\\\"https://cnodejs.org/api\\\">https://cnodejs.org/api</a> 这里的前两个接口就能满足我们的要求。 首先用<a href=\\\"https://cnodejs.org/api/v1/topics\\\">https://cnodejs.org/api/v1/topics</a> 接口获取到前10个topics， 然后取出每个topic的id去访问<code class=\\\"language-text\\\">get /topic/:id 主题详情</code>接口， 里面可以获取到回复数据。</p>\\n<h1 id=\\\"简单实现\\\"><a href=\\\"#%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>简单实现</h1>\\n<p>发起网络请求有很多方法， 我们这里采用<a href=\\\"https://github.com/axios/axios\\\">axios</a>库， 有几个好处， 其中包括同时支持Node.js和Browser。</p>\\n<p>我们直接用“最先进”的async/await来实现一个版本:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> axios <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"axios\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getFirst10TopicsIncludeFirstReplyAuthor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> response <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token string\\\">\\\"https://cnodejs.org/api/v1/topics?limit=10\\\"</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> json <span class=\\\"token operator\\\">=</span> response<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> first10 <span class=\\\"token operator\\\">=</span> json<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>topic <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n      id<span class=\\\"token punctuation\\\">:</span> topic<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span>\\n      title<span class=\\\"token punctuation\\\">:</span> topic<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">,</span>\\n      date<span class=\\\"token punctuation\\\">:</span> topic<span class=\\\"token punctuation\\\">.</span>create_at<span class=\\\"token punctuation\\\">,</span>\\n      author<span class=\\\"token punctuation\\\">:</span> topic<span class=\\\"token punctuation\\\">.</span>author<span class=\\\"token punctuation\\\">.</span>loginname\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> topic <span class=\\\"token keyword\\\">of</span> first10<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> response <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://cnodejs.org/api/v1/topic/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>topic<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> json <span class=\\\"token operator\\\">=</span> response<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> firstReply <span class=\\\"token operator\\\">=</span> json<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>replies<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    topic<span class=\\\"token punctuation\\\">.</span>firstReplyAuthor <span class=\\\"token operator\\\">=</span> firstReply <span class=\\\"token operator\\\">&amp;&amp;</span> firstReply<span class=\\\"token punctuation\\\">.</span>author<span class=\\\"token punctuation\\\">.</span>loginname<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> first10<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">getFirst10TopicsIncludeFirstReplyAuthor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h1 id=\\\"并发\\\"><a href=\\\"#%E5%B9%B6%E5%8F%91\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>并发</h1>\\n<p>上述代码简单直接， 用了async/await， 异步代码看上去基本上是同步的， 很直观易懂。 先发起一个请求， 获取10个topics的信息， 然后针对每个topic发起一个请求， 去获取第一条回复数据，最后把数据拼凑在一起返回。 由于后面的请求需要第一个请求返回的id， 因此必须等到第一个请求回来才可以发送后面的请求， 这块没有任何问题。 但是后面的10个请求完全是独立的， 因此可以并发请求，这样能大大缩短时间。比如每个请求需要花费1s， 则上述代码总共需要花费<code class=\\\"language-text\\\">1(第一个请求) + 10(后面10个请求) = 11s</code>， 而如果将第二步的请求完全并发则只需要<code class=\\\"language-text\\\">1(第一个请求) + 1(后面10个请求同时请求) = 2s</code>！！！</p>\\n<p>由于网络请求受网速影响很大不利于我们精确分析问题， 也避免大量的请求给Cnodejs服务造成影响， 我们在本地用<code class=\\\"language-text\\\">setTimout</code>模拟网络请求花费的时间。</p>\\n<p>上述代码在并发性上跟下面代码基本等价：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 模拟一次api网络请求花费1s</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">get10Topics</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> t1 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> total<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">const</span> t2 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`total cost: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">ms.`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">get10Topics</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>执行之后发现， 确实在11s左右：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  test-js git:<span class=\\\"token punctuation\\\">(</span>master<span class=\\\"token punctuation\\\">)</span> ✗ node p1.js\\ntotal cost: 11037ms.\\n<span class=\\\"token punctuation\\\">[</span> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 <span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\\\">Promise.all</a>可以同时发起多个Promise，等到所有Promise都完成了之后返回一个数组， 包含每个Promise的结果。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 模拟一次api网络请求花费1s</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">get10Topics2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> t1 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> promises <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> total<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    promises<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span>promises<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">const</span> t2 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`total cost: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">ms.`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">get10Topics2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>时间正如我们说的， 缩短成了2s！</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  test-js git:<span class=\\\"token punctuation\\\">(</span>master<span class=\\\"token punctuation\\\">)</span> ✗ node p2.js\\ntotal cost: 2005ms.\\n<span class=\\\"token punctuation\\\">[</span> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 <span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<h1 id=\\\"限流\\\"><a href=\\\"#%E9%99%90%E6%B5%81\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>限流</h1>\\n<p>上面第二种方法已经大大提高率效率， 而且请求数越多， 提高的效率越多。 前面的分析可以得出， 如果是获取前100个topics， 第一种串行的方法需要101s， 而第二种还是2s！！！</p>\\n<p>仔细想想你会发现哪里不对， 那就是第二种方法“太并发”了！10个请求可能还好， 如果同时并发100个请求， 那对服务器就会造成一定的影响， 如果是1000个，10000个， 那问题就更大了， 甚至到了一定程度， 会超过操作系统允许打开的连接数， 对客户端本身也会有很大的影响。</p>\\n<p>所以我们需要限制最大并发数，比如我们限制最大并发数为3， 则10个请求大概是3个3个一组， 总共会有4组（最后一组只有1个）， 总共时间是5s， 这也比11s提高了50%多。一种实现方式如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">get10Topics3</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> t1 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">MAX_CURRENCY</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> total<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token constant\\\">MAX_CURRENCY</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> promises <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token constant\\\">MAX_CURRENCY</span> <span class=\\\"token operator\\\">&amp;&amp;</span> j <span class=\\\"token operator\\\">&lt;=</span> total<span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      promises<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>j<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">const</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span>promises<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>r<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">const</span> t2 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`total cost: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">ms.`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">get10Topics3</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>看一下结果：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  test-js git:<span class=\\\"token punctuation\\\">(</span>master<span class=\\\"token punctuation\\\">)</span> ✗ node p3.js\\ntotal cost: 5012ms.\\n<span class=\\\"token punctuation\\\">[</span> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 <span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>还有什么问题么？</p>\\n<h1 id=\\\"one-more-step\\\"><a href=\\\"#one-more-step\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>One More Step</h1>\\n<p>上面的实现方法， 既利用了并发， 又对并发做了一定限制保证不至于把系统资源耗尽，似乎是完美的。 但是如果每个请求所需要的时间不一样呢？<code class=\\\"language-text\\\">get10Topics3</code>的实现方式是每三个一组， 等着三个都完成了， 再进行下一组请求。 那么如果三个任务中， 有一个花费的时间比较多， 另外两个任务完成了之后， 本来可以继续开始新的任务的， 现在必须等着第三个任务完成了才能开始新的任务。甚至如果三个任务需要的时间都不一样， 那么第一个需要等第二个和第三个， 第二个需要等第三个， 整个系统就被最慢的那个任务拖累了。 比如第一个任务需要1s， 第二个任务需要2s， 第三个任务需要3s， 则<code class=\\\"language-text\\\">get10Topics3</code>每组任务需要3s， 三组任务需要<code class=\\\"language-text\\\">3 * 3 = 9s</code>， 最后一组那个任务只需要1s， 总共需要<code class=\\\"language-text\\\">1 + 3 + 3 + 3 + 1 = 11s</code>， 当然这也比完全串行需要的时间<code class=\\\"language-text\\\">1 + 1 + 2 + 3 + 1 + 2 + 3 + 1 + 2 + 3 + 1 = 20s</code>要快不少。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 模拟一次api网络请求花费特定时间</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">get10Topics4</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> t1 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">MAX_CURRENCY</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> total<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token constant\\\">MAX_CURRENCY</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> promises <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token constant\\\">MAX_CURRENCY</span> <span class=\\\"token operator\\\">&amp;&amp;</span> j <span class=\\\"token operator\\\">&lt;=</span> total<span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> costtime <span class=\\\"token operator\\\">=</span> j <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">:</span> j <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 第一个任务1s， 第二个2是， 第三个3s...</span>\\n      promises<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>j<span class=\\\"token punctuation\\\">,</span> costtime <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">const</span> t3 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span>promises<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> t4 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`promise </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>i<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> cost: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>t4 <span class=\\\"token operator\\\">-</span> t3<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">ms`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>r<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">const</span> t2 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`total cost: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">ms.`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">get10Topics4</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>运行结果：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  test-js git:<span class=\\\"token punctuation\\\">(</span>master<span class=\\\"token punctuation\\\">)</span> ✗ node p4.js\\n10 1000\\n1 1000\\n2 2000\\n3 3000\\npromise 1 cost: 3002ms\\n4 1000\\n5 2000\\n6 3000\\npromise 4 cost: 2999ms\\n7 1000\\n8 2000\\n9 3000\\npromise 7 cost: 3002ms\\n10 1000\\npromise 10 cost: 1005ms\\ntotal cost: 11030ms.\\n<span class=\\\"token punctuation\\\">[</span> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 <span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>大家很容易想到， 把所需时间短的任务放一起并发执行， 这样就能减少互相等待的时间。比如把4个1s的放一起， 3个2s的放一起， 3个3s的放一起， 则总共需要时间为：<code class=\\\"language-text\\\">1 + 1 + 2 + 3 + 1 = 8s</code>， 又提高了一些。但是， 一方面我们在实际任务开始并完成之前， 并不知道具体哪个任务需要花多长时间， 另一方面不可能刚好总有花同样时间的任务能凑成一组， 甚至极端情况下， 每个任务所花时间都不一样。</p>\\n<p>仔细想想， 我们只需要这么做： 构建一个任务池， 一开始并发三个任务， 每个任务回来之后不用等其他两个任务， 直接看一下任务池还有任务么， 有的话就直接去做，直到所有任务都完成即可。</p>\\n<p>由于Node.js里面没有信号量来同步各个“线程”之间的工作， 这里用了递归并操作公共变量的方式实现， 如果读者有更好的方式可以给作者留言。注意， “并发地修改共享变量是万恶之源， 有data race的问题， 好在JS里面是单线程， 所以没有这个问题。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 模拟一次api网络请求花费特定时间</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> start <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">worker</span><span class=\\\"token punctuation\\\">(</span>tasks<span class=\\\"token punctuation\\\">,</span> result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> task <span class=\\\"token operator\\\">=</span> tasks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>task<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 任务结束</span>\\n    <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">const</span> costtime <span class=\\\"token operator\\\">=</span> task <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">:</span> task <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 第一个任务1s， 第二个2是， 第三个3s...</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>task<span class=\\\"token punctuation\\\">,</span> costtime <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>r<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> completes at time: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> start<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">worker</span><span class=\\\"token punctuation\\\">(</span>tasks<span class=\\\"token punctuation\\\">,</span> result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">get10Topics5</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> t1 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">MAX_CURRENCY</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> tasks <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> total<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    tasks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> promises <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">MAX_CURRENCY</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    promises<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">worker</span><span class=\\\"token punctuation\\\">(</span>tasks<span class=\\\"token punctuation\\\">,</span> result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span>promises<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> t2 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`total cost: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">ms.`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">get10Topics5</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>运行代码可以看到结果：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  test-js git:<span class=\\\"token punctuation\\\">(</span>master<span class=\\\"token punctuation\\\">)</span> ✗ node p5.js\\n10 1000\\n1 1000\\n2 2000\\n3 3000\\n1 completes at time: 2s, by worker0\\n4 1000\\n2 completes at time: 3s, by worker1\\n5 2000\\n4 completes at time: 3s, by worker0\\n6 3000\\n3 completes at time: 4s, by worker2\\n7 1000\\n5 completes at time: 5s, by worker1\\n8 2000\\n7 completes at time: 5s, by worker2\\n9 3000\\n6 completes at time: 6s, by worker0\\n10 1000\\n8 completes at time: 7s, by worker1\\n10 completes at time: 7s, by worker0\\n9 completes at time: 8s, by worker2\\ntotal cost: 8032ms.\\n<span class=\\\"token punctuation\\\">[</span> 1, 2, 4, 3, 5, 7, 6, 8, 10, 9 <span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>我们可以看到，一开始同时开启了<code class=\\\"language-text\\\">worker0, worker1, worker2</code>三个“线程”去做事， <code class=\\\"language-text\\\">worker0</code>在第2s（因为第1s是调用第一个api）完成了task1，它并没有等待， 而是继续开始做task4。然后又过了1s， worker1完成了task2然后去开始做task5， 而此刻worker0完成了task4并开始去做task6， 又过了1s， worker2才完成了task3然后去做task7…可以看到每个worker都在争先恐后地完成任务， 直到所有任务全部完成， 总共花了8s时间。 </p>\\n<h1 id=\\\"重新实现并发访问api\\\"><a href=\\\"#%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AEapi\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>重新实现并发访问API</h1>\\n<p>这里我将最早串行访问API接口的代码改成并发执行， 没有做限流， 读者可根绝前文分析修改成限流版本，就当留作小练习吧。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> axios <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"axios\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getFirst10TopicsIncludeFirstReplyAuthor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> axios\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"https://cnodejs.org/api/v1/topics?limit=10\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>response<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> json <span class=\\\"token operator\\\">=</span> response<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">const</span> first10 <span class=\\\"token operator\\\">=</span> json<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>topic <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n          id<span class=\\\"token punctuation\\\">:</span> topic<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span>\\n          title<span class=\\\"token punctuation\\\">:</span> topic<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">,</span>\\n          date<span class=\\\"token punctuation\\\">:</span> topic<span class=\\\"token punctuation\\\">.</span>create_at<span class=\\\"token punctuation\\\">,</span>\\n          author<span class=\\\"token punctuation\\\">:</span> topic<span class=\\\"token punctuation\\\">.</span>author<span class=\\\"token punctuation\\\">.</span>loginname\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n      <span class=\\\"token keyword\\\">const</span> promises <span class=\\\"token operator\\\">=</span> first10<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> axios\\n          <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://cnodejs.org/api/v1/topic/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>data<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>response <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">const</span> json <span class=\\\"token operator\\\">=</span> response<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">const</span> firstReply <span class=\\\"token operator\\\">=</span> json<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>replies<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n              id<span class=\\\"token punctuation\\\">:</span> json<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span>\\n              firstReplyAuthor<span class=\\\"token punctuation\\\">:</span> firstReply <span class=\\\"token operator\\\">&amp;&amp;</span> firstReply<span class=\\\"token punctuation\\\">.</span>author<span class=\\\"token punctuation\\\">.</span>loginname\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span>promises<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>rs <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> map <span class=\\\"token operator\\\">=</span> rs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>acc<span class=\\\"token punctuation\\\">,</span> e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n          acc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span> e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token keyword\\\">return</span> acc<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> topic <span class=\\\"token keyword\\\">of</span> first10<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          topic<span class=\\\"token punctuation\\\">.</span>firstReplyAuthor <span class=\\\"token operator\\\">=</span> map<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span>topic<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>firstReplyAuthor<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> first10<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">getFirst10TopicsIncludeFirstReplyAuthor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h1 id=\\\"go语言实现\\\"><a href=\\\"#go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Go语言实现</h1>\\n<p>其实Go跟Promise没啥关系， 只是最近刚好在用Go语言做东西， 因此拿来对比一下。Go里面很容易实现限流的功能，这里直接贴上代码，不做过多分析。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-go\\\"><code class=\\\"language-go\\\"><span class=\\\"token keyword\\\">package</span> main\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">(</span>\\n\\t<span class=\\\"token string\\\">\\\"fmt\\\"</span>\\n\\t<span class=\\\"token string\\\">\\\"time\\\"</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> start <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Unix</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">func</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>result <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">,</span> duration time<span class=\\\"token punctuation\\\">.</span>Duration<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token builtin\\\">int</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tfmt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> duration<span class=\\\"token punctuation\\\">)</span>\\n\\ttime<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Sleep</span><span class=\\\"token punctuation\\\">(</span>duration<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token keyword\\\">return</span> result\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">func</span> <span class=\\\"token function\\\">worker</span><span class=\\\"token punctuation\\\">(</span>id <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">,</span> jobs <span class=\\\"token operator\\\">&lt;-</span><span class=\\\"token keyword\\\">chan</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">,</span> result <span class=\\\"token keyword\\\">chan</span><span class=\\\"token operator\\\">&lt;-</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">for</span> job <span class=\\\"token operator\\\">:=</span> <span class=\\\"token keyword\\\">range</span> jobs <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tt <span class=\\\"token operator\\\">:=</span> job <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span> t <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tt <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\tr <span class=\\\"token operator\\\">:=</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>job<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>time<span class=\\\"token punctuation\\\">.</span>Duration<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">*</span>time<span class=\\\"token punctuation\\\">.</span>Second<span class=\\\"token punctuation\\\">)</span>\\n\\t\\tdiff <span class=\\\"token operator\\\">:=</span> time<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Unix</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> start\\n\\t\\tfmt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"%d completes at time: %ds, by worker%d\\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span> r<span class=\\\"token punctuation\\\">,</span> diff<span class=\\\"token punctuation\\\">,</span> id<span class=\\\"token punctuation\\\">)</span>\\n\\t\\tresult <span class=\\\"token operator\\\">&lt;-</span> r\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">func</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tt1 <span class=\\\"token operator\\\">:=</span> time<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Unix</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\tjobs <span class=\\\"token operator\\\">:=</span> <span class=\\\"token function\\\">make</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">chan</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span>\\n\\tresult <span class=\\\"token operator\\\">:=</span> <span class=\\\"token function\\\">make</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">chan</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span>\\n\\ttotal <span class=\\\"token operator\\\">:=</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">*</span>time<span class=\\\"token punctuation\\\">.</span>Second<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t<span class=\\\"token keyword\\\">const</span> MaxCurrency <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span>\\n\\t<span class=\\\"token keyword\\\">for</span> i <span class=\\\"token operator\\\">:=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> MaxCurrency<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">go</span> <span class=\\\"token function\\\">worker</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">,</span> jobs<span class=\\\"token punctuation\\\">,</span> result<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">for</span> i <span class=\\\"token operator\\\">:=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> total<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tjobs <span class=\\\"token operator\\\">&lt;-</span> i\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span>jobs<span class=\\\"token punctuation\\\">)</span>\\n\\n\\trs <span class=\\\"token operator\\\">:=</span> <span class=\\\"token function\\\">make</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token keyword\\\">for</span> i <span class=\\\"token operator\\\">:=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> total<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tr <span class=\\\"token operator\\\">:=</span> <span class=\\\"token operator\\\">&lt;-</span>result\\n\\t\\trs<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> r\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\tt2 <span class=\\\"token operator\\\">:=</span> time<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Unix</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\tfmt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"total cost: %ds.\\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\tfmt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Println</span><span class=\\\"token punctuation\\\">(</span>rs<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>执行输出如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  chap8 go run currency-rate-limit2.go\\n10 1s\\n1 1s\\n2 2s\\n3 3s\\n1 completes at time: 2s, by worker0\\n4 1s\\n4 completes at time: 3s, by worker0\\n2 completes at time: 3s, by worker2\\n5 2s\\n6 3s\\n3 completes at time: 4s, by worker1\\n7 1s\\n7 completes at time: 5s, by worker1\\n8 2s\\n5 completes at time: 5s, by worker0\\n9 3s\\n6 completes at time: 6s, by worker2\\n10 1s\\n8 completes at time: 7s, by worker1\\n10 completes at time: 7s, by worker2\\n9 completes at time: 8s, by worker0\\ntotal cost: 8s.\\n<span class=\\\"token punctuation\\\">[</span>1 4 2 3 7 5 6 8 10 9<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<h1 id=\\\"参考资料\\\"><a href=\\\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考资料</h1>\\n<ul>\\n<li><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\\\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li>\\n<li><a href=\\\"https://yar999.gitbooks.io/gopl-zh/content/ch8/ch8-06.html\\\">https://yar999.gitbooks.io/gopl-zh/content/ch8/ch8-06.html</a></li>\\n</ul>\",\"timeToRead\":9,\"excerpt\":\"我们知道Node.js里充满着大量的异步， 后来出现了Promise以及async/await来解决”callback hell”的问题。我们就来看看promise以及async/await如何简化JS并发代码的编写， 最后再给出一份实现相同功能的Go…\",\"fields\":{\"slug\":\"/concurrency-by-promise/\"},\"frontmatter\":{\"title\":\"用Promise实现并发 vs Go goroutine\",\"date\":\"2018-03-24\",\"category\":\"FE\",\"tags\":[\"promise\",\"concurrency\",\"并发\",\"go\",\"goroutine\"]}}}]}},\"pathContext\":{\"current\":1,\"skip\":0,\"total\":6}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---index-08116c0db91351a5adbe.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Magicly's Blog\"}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"html\":\"<p>这两天整理一下以前的收藏夹， 发现很多以前花时间学过的但是早就不用了的技术资料， 心生感慨，记录下来留作纪念吧。</p>\\n<p>很多已经打不开了， 而居然发现有些好几年前工作中写的代码还在线上， 惊喜。</p>\\n<p><strong>排序没有啥意义， 只是整理顺序， 有些分类也不是很合理。 另外有些技术已经过时， 有些没有过时但是现在我不用了， 有些还在使用。</strong></p>\\n<h1 id=\\\"前端\\\"><a href=\\\"#%E5%89%8D%E7%AB%AF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>前端</h1>\\n<ul>\\n<li>浏览器兼容性， IE6！！！</li>\\n<li>jQuery 以及各种插件</li>\\n<li>圆角实现</li>\\n<li>各种编码乱码问题</li>\\n<li>跨域</li>\\n<li>用 Web 做 ppt</li>\\n<li>各种浏览器（Firefox，Opera，Chrome， IE， Safari）以及插件</li>\\n<li>HTTP 各种 status</li>\\n<li>Cache</li>\\n<li>Emmet</li>\\n<li>Angular</li>\\n<li>React</li>\\n<li>浏览器插件开发</li>\\n<li>微信公众号开发</li>\\n<li>如何在手机上调试 H5</li>\\n</ul>\\n<h1 id=\\\"java\\\"><a href=\\\"#java\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Java</h1>\\n<ul>\\n<li>阻塞非阻塞，同步异步， NIO， AIO</li>\\n<li>Enum</li>\\n<li>Classloader</li>\\n<li>Netty</li>\\n<li>Mina</li>\\n<li>Excel</li>\\n<li>Spring</li>\\n<li>Hibernate</li>\\n<li>Structs</li>\\n<li>Servlet / JSP / JSTL</li>\\n<li>Tomcat / Jetty</li>\\n<li>Eclipse / Idea</li>\\n<li>Ant</li>\\n<li>Zookeeper</li>\\n<li>设计模式</li>\\n<li>Concurrency: JDK 库, fork/join, Disruptor, actor(Akka)</li>\\n<li>内存模型</li>\\n<li>Socket</li>\\n<li>单点登录</li>\\n<li>Session / Cookie</li>\\n<li>计算各种对象所占内存大小</li>\\n<li>安全地实现单例模式， Double-checked locking, Enum, Static class</li>\\n<li>Annotations</li>\\n</ul>\\n<h1 id=\\\"编程语言\\\"><a href=\\\"#%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>编程语言</h1>\\n<ul>\\n<li>Ruby</li>\\n<li>Scala</li>\\n<li>LISP / Clojure</li>\\n<li>F#</li>\\n<li>Haskell</li>\\n<li>JS / TS</li>\\n<li>CoffeeScript</li>\\n<li>Flow</li>\\n<li>AWK &#x26; Sed</li>\\n<li>SML</li>\\n<li>Lua</li>\\n<li>C</li>\\n<li>C++</li>\\n<li>Object-C</li>\\n<li>Swift</li>\\n<li>Go</li>\\n<li>Rust</li>\\n<li>Python</li>\\n<li>PHP</li>\\n<li>Matlab / Octave</li>\\n</ul>\\n<p>有很多只是简单了解了下， 没有深入使用。 比较熟悉的有 Java/Scala/JS/TS, 现在用 Typescript 较多。</p>\\n<h1 id=\\\"函数式编程\\\"><a href=\\\"#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>函数式编程</h1>\\n<h1 id=\\\"scala\\\"><a href=\\\"#scala\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Scala</h1>\\n<ul>\\n<li>sbt</li>\\n<li>scalaz</li>\\n<li>Akka</li>\\n<li>Spray</li>\\n<li>Play!</li>\\n<li>Lift</li>\\n<li>Scalatra</li>\\n<li>ScalaTest</li>\\n<li>Scala.js</li>\\n<li>Scala vim 开发环境配置</li>\\n<li>Scala Android: scaloid</li>\\n<li>Scala-ios</li>\\n<li>Scala Native</li>\\n</ul>\\n<h1 id=\\\"app\\\"><a href=\\\"#app\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>APP</h1>\\n<ul>\\n<li>Scala Android: scaloid</li>\\n<li>Scala-ios， 还有其他语言开发 ios 的</li>\\n<li>PhoneGap / Cordova</li>\\n<li>ionicframework</li>\\n<li>React Native</li>\\n</ul>\\n<h1 id=\\\"vim--emacs\\\"><a href=\\\"#vim--emacs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Vim &#x26; Emacs</h1>\\n<p>两个都用过，花了时间去配置成<strong>IDE</strong>，现在主要用 VSCode / Idea / XCode。。。。Vim 最大的影响就是不管用什么编辑器或 IDE，都要装 Vim 插件， 不然很不习惯。</p>\\n<h1 id=\\\"各种免费-fq-方式\\\"><a href=\\\"#%E5%90%84%E7%A7%8D%E5%85%8D%E8%B4%B9-fq-%E6%96%B9%E5%BC%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>各种免费 FQ 方式</h1>\\n<ul>\\n<li>ssh 隧道</li>\\n<li>IPv6 隧道</li>\\n<li>各种代理</li>\\n<li>VPN</li>\\n<li>Goagent</li>\\n<li>Tor</li>\\n</ul>\\n<p>现在主要用 lantern 和 ss， 踏踏实实花钱买， 省事儿。</p>\\n<h1 id=\\\"reactive--fpr\\\"><a href=\\\"#reactive--fpr\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Reactive &#x26; FPR</h1>\\n<ul>\\n<li>RxJava</li>\\n<li>RxJS</li>\\n</ul>\\n<h1 id=\\\"正则表达式\\\"><a href=\\\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>正则表达式</h1>\\n<h1 id=\\\"github-pages-搭建-blog\\\"><a href=\\\"#github-pages-%E6%90%AD%E5%BB%BA-blog\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>github pages 搭建 blog</h1>\\n<ul>\\n<li>Jekyll</li>\\n<li>Hexo</li>\\n<li>Gatsby（现在在用的）</li>\\n</ul>\\n<h1 id=\\\"linux\\\"><a href=\\\"#linux\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Linux</h1>\\n<ul>\\n<li>fedora</li>\\n<li>ubuntu</li>\\n<li>系统性能诊断</li>\\n<li>Shell</li>\\n</ul>\\n<p>最早的时候要刻四张光盘安装， 后来用 U 盘安装。</p>\\n<h1 id=\\\"爬虫--搜索引擎\\\"><a href=\\\"#%E7%88%AC%E8%99%AB--%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>爬虫 &#x26; 搜索引擎</h1>\\n<ul>\\n<li>Lucene</li>\\n<li>Solr</li>\\n<li>nutch</li>\\n<li>Scrapy</li>\\n</ul>\\n<h1 id=\\\"算法、大数据、mlai\\\"><a href=\\\"#%E7%AE%97%E6%B3%95%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%81mlai\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>算法、大数据、ML/AI</h1>\\n<ul>\\n<li>Mahout</li>\\n<li>OpenCV</li>\\n<li>SIFT</li>\\n<li>OCR / Tesseract</li>\\n<li>LeetCode</li>\\n<li>ACM</li>\\n<li>自然语言处理</li>\\n<li>word2vec</li>\\n<li>神经网络，CNN / RNN</li>\\n<li>推荐， 协同过滤， 矩阵分解</li>\\n<li>Bloom filter</li>\\n<li>MCTS</li>\\n<li>五子棋， 国际象棋</li>\\n</ul>\\n<h1 id=\\\"web-安全\\\"><a href=\\\"#web-%E5%AE%89%E5%85%A8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Web 安全</h1>\\n<ul>\\n<li>XSS</li>\\n<li>CSRF</li>\\n<li>浏览劫持</li>\\n<li>HTTPS</li>\\n<li>对称加密， 非对称加密， Hash， 随机数</li>\\n</ul>\\n<h1 id=\\\"db\\\"><a href=\\\"#db\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>DB</h1>\\n<ul>\\n<li>mysql， 各种索引优化，复合索引。。。</li>\\n<li>Postgrel</li>\\n<li>MongoDB</li>\\n<li>Memcached</li>\\n<li>Redis</li>\\n<li>ssdb</li>\\n</ul>\\n<h1 id=\\\"nodejs\\\"><a href=\\\"#nodejs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Node.js</h1>\\n<ul>\\n<li>Express</li>\\n<li>Koa</li>\\n<li>Egg</li>\\n<li>meteor</li>\\n</ul>\\n<h1 id=\\\"测试\\\"><a href=\\\"#%E6%B5%8B%E8%AF%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>测试</h1>\\n<ul>\\n<li>单元</li>\\n<li>自动化测试</li>\\n<li>截图测试</li>\\n<li>Property based Testing</li>\\n<li>压力测试</li>\\n</ul>\\n<h1 id=\\\"其他\\\"><a href=\\\"#%E5%85%B6%E4%BB%96\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>其他</h1>\\n<ul>\\n<li>DSL</li>\\n<li>Git</li>\\n<li>自由职业</li>\\n<li>敏捷开发</li>\\n<li>重构</li>\\n<li>Firebase / Clouda</li>\\n<li>GTD</li>\\n<li>魔术</li>\\n<li>羽毛球</li>\\n<li>旅游 / 摄影</li>\\n<li>飞叠杯</li>\\n<li>。。。。</li>\\n</ul>\\n<h1 id=\\\"比特币！！！\\\"><a href=\\\"#%E6%AF%94%E7%89%B9%E5%B8%81%EF%BC%81%EF%BC%81%EF%BC%81\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>比特币！！！</h1>\\n<p>最后， 发现自己 2011 年的时候看了一篇比特币的报道， <a href=\\\"http://www.bitecoin.com/online/2011/05/61.html\\\">“比特币是个骗局”，吗？</a>！！！</p>\\n<h1 id=\\\"总结\\\"><a href=\\\"#%E6%80%BB%E7%BB%93\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>总结</h1>\\n<p>由于东西太多了， 目前并没有整理完， 定期整理资料是一个好习惯， 删除东西真的很爽，因为删的都是自己已经了解不需要了的东西。</p>\\n<p>不要只做资料收藏着， 要转化为自己的知识。</p>\\n<p>另外也可以看出， 很多以前花了很多时间研究的东西， 其实早就被淘汰了， 所以很多时候我们不要太纠结技术， 而要关注解决问题本身！</p>\\n<p>因为， 终究， 所有技术都会死的， 我们也是。。。</p>\",\"timeToRead\":4,\"excerpt\":\"…\",\"fields\":{\"slug\":\"/tools-used/\"},\"frontmatter\":{\"title\":\"那些年使用过的技术\",\"date\":\"2018-05-18\",\"category\":\"Others\",\"tags\":[\"杂\"]}}},{\"node\":{\"html\":\"<p>最近要做个 Desktop 软件， 当然首选 Electron， 另外最近用 Typescript 感觉很爽， 所以技术选型为 Electron + React + Typescript， 为了省事想找个 starter 脚手架， 大概找了下面这些。</p>\\n<!-- more -->\\n<p>------------2018-05-13 更新----------</p>\\n<p>使用<a href=\\\"https://github.com/iRath96/electron-react-typescript-boilerplate\\\">electron-react-typescript-boilerplate</a>的时候发现一个问题： 在 class 里面不能使用<code class=\\\"language-text\\\">arrow function</code>！ 比如如下代码有问题：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// import { remote } from 'electron';</span>\\n<span class=\\\"token comment\\\">// import './App.css';</span>\\n\\n<span class=\\\"token comment\\\">// const electron = (window as any).require('electron');</span>\\n<span class=\\\"token comment\\\">// const fs = electron.remote.require('fs');</span>\\n<span class=\\\"token comment\\\">// const ipcRenderer = electron.ipcRenderer;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> ipcRenderer<span class=\\\"token punctuation\\\">,</span> remote <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'electron'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>ipcRenderer<span class=\\\"token punctuation\\\">,</span> remote<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// console.log(fs, ipcRenderer);</span>\\n\\n<span class=\\\"token comment\\\">// const logo = require('./logo.svg');</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span><span class=\\\"token operator\\\">&lt;</span>any<span class=\\\"token punctuation\\\">,</span> any<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// state = {} as any;</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">:</span> any<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">as</span> any<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'componentDidMount '</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function-variable function\\\">handleClick</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// handleClick() {</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'handleClick'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'magicly'</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"App\\\"</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>header className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"App-header\\\"</span><span class=\\\"token operator\\\">></span>\\n          <span class=\\\"token operator\\\">&lt;</span>h1 className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"App-title\\\"</span><span class=\\\"token operator\\\">></span>Welcome to React<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>header<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>p className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"App-intro\\\"</span><span class=\\\"token operator\\\">></span>\\n          To <span class=\\\"token keyword\\\">get</span> started<span class=\\\"token punctuation\\\">,</span> edit <span class=\\\"token operator\\\">&lt;</span>code<span class=\\\"token operator\\\">></span>src<span class=\\\"token operator\\\">/</span>App<span class=\\\"token punctuation\\\">.</span>tsx<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>code<span class=\\\"token operator\\\">></span> and save to reload<span class=\\\"token punctuation\\\">.</span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleClick<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>butotn<span class=\\\"token operator\\\">...</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> App<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>点击 button 的时候会报错:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">warning<span class=\\\"token punctuation\\\">.</span>js<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">33</span> Warning<span class=\\\"token punctuation\\\">:</span> Can't call setState on a component that is not yet mounted<span class=\\\"token punctuation\\\">.</span> This is a no<span class=\\\"token operator\\\">-</span>op<span class=\\\"token punctuation\\\">,</span> but it might indicate a bug <span class=\\\"token keyword\\\">in</span> your application<span class=\\\"token punctuation\\\">.</span> Instead<span class=\\\"token punctuation\\\">,</span> assign to <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`this.state`</span></span> directly or define a <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`state = {};`</span></span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">property</span> <span class=\\\"token keyword\\\">with</span> the desired state <span class=\\\"token keyword\\\">in</span> the App component<span class=\\\"token punctuation\\\">.</span></code></pre>\\n      </div>\\n<p>但其实这个是再正常不过的代码了啊， 在普通的<code class=\\\"language-text\\\">create-react-app</code>建的项目里面完全没有问题， 即使运行在<code class=\\\"language-text\\\">electron</code>中也是完全 ok 的。 所以决定最后还是选择<code class=\\\"language-text\\\">create-react-app</code>新建 Typescript 项目， 然后添加 electron 依赖好了。 当然这个脚手架也有好处，就是可以直接使用<code class=\\\"language-text\\\">import { ipcRenderer, remote } from &#39;electron&#39;;</code>。</p>\\n<p>其实后来仔细想了下， 为啥要用 electron 呢？ 相比直接网页多了什么？</p>\\n<ul>\\n<li>能获得更多的原生接口？</li>\\n</ul>\\n<p>现在 H5 的丰富接口已经完全够用， 包括 service worker 可以离线， web worker 多线程， websocket， notification 等。</p>\\n<ul>\\n<li>高性能？</li>\\n</ul>\\n<p>可以使用 WebAssembly， 并发可以用 web workers.</p>\\n<ul>\\n<li>接口请求跨域？</li>\\n</ul>\\n<p>可以通过添加 chrome 插件来支持。</p>\\n<ul>\\n<li>浏览器兼容性！</li>\\n</ul>\\n<p>对了， 这个似乎说到了重点， electron 把 node 和 chrome 打包进去了， 能保证运行环境一致， 不用再为兼容性问题头痛！</p>\\n<p>总之， 如果是自己使用的项目（或者可以跟客户协商的话），其实 chrome 网页基本完全够用了， so， 先就做网页吧。</p>\\n<hr>\\n<h1 id=\\\"httpsgithubcomelectronelectron-quick-start\\\"><a href=\\\"#httpsgithubcomelectronelectron-quick-start\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><a href=\\\"https://github.com/electron/electron-quick-start\\\">https://github.com/electron/electron-quick-start</a></h1>\\n<p>electron 自己出的， 其实就是个 Hello World， 用 JS 语言， 不满足要求。</p>\\n<h1 id=\\\"httpsgithubcomelectronelectron-quick-start-typescript\\\"><a href=\\\"#httpsgithubcomelectronelectron-quick-start-typescript\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><a href=\\\"https://github.com/electron/electron-quick-start-typescript\\\">https://github.com/electron/electron-quick-start-typescript</a></h1>\\n<p>上一个的 Typescript 版本， 只是 Hello World，不行。</p>\\n<h1 id=\\\"httpsgithubcomchentsulinelectron-react-boilerplate\\\"><a href=\\\"#httpsgithubcomchentsulinelectron-react-boilerplate\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><a href=\\\"https://github.com/chentsulin/electron-react-boilerplate\\\">https://github.com/chentsulin/electron-react-boilerplate</a></h1>\\n<p>这个算是 stars 数比较多的一个了， 综合了 React + Redux + React Router + Webpack + HMR， 算是满足我的要求了。 Static Type Checking 用的<a href=\\\"https://flow.org/\\\">Flow</a>， 之前也用过， 还不错， 不过感觉使用场景没有 Typescript 那么广呢， 后来决定用 TS， 所以这次也用 TS 吧。</p>\\n<h1 id=\\\"httpsgithubcomirath96electron-react-typescript-boilerplate\\\"><a href=\\\"#httpsgithubcomirath96electron-react-typescript-boilerplate\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><a href=\\\"https://github.com/iRath96/electron-react-typescript-boilerplate\\\">https://github.com/iRath96/electron-react-typescript-boilerplate</a></h1>\\n<blockquote>\\n<p>This is a slight modificiation of the great electron-react-boilerplate by chentsulin. Instead of Babel and flow this version uses TypeScript. Support for Sass has also been added.</p>\\n</blockquote>\\n<p>上一个的 Typescript 版本， 哎， 正好！</p>\\n<h1 id=\\\"create-react-app--electron\\\"><a href=\\\"#create-react-app--electron\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Create React App + Electron</h1>\\n<p>前面的感觉都是以 Electron 为主， 然后加上一些前端技术栈。 可以反过来想， 能不能直接用<a href=\\\"https://github.com/facebook/create-react-app\\\">CRA</a>新建项目， 然后加上 Electron 依赖呢？</p>\\n<p>还真有人这样做了， 就是这篇<a href=\\\"https://medium.freecodecamp.org/building-an-electron-application-with-create-react-app-97945861647c\\\">How to build an Electron app using create-react-app. No webpack configuration or “ejecting” necessary.</a>。</p>\\n<p>大概步骤如下：</p>\\n<ol>\\n<li>create-react-app 新建项目（现在可以添加<code class=\\\"language-text\\\">--scripts-version=react-scripts-ts</code>创建 Typescript 项目了）</li>\\n<li><code class=\\\"language-text\\\">npm i -D electron</code>，添加 electron 为依赖</li>\\n<li>将<a href=\\\"https://github.com/electron/electron-quick-start\\\">electron-quick-start</a>里的<code class=\\\"language-text\\\">main.js</code>（是 electron 的入口文件）copy 过来，可以改个名字比如<code class=\\\"language-text\\\">electron-starter.js</code></li>\\n<li>修改 3 中的<code class=\\\"language-text\\\">mainWindow.loadURL</code>参数为<code class=\\\"language-text\\\">localhost:3000</code></li>\\n<li>在<code class=\\\"language-text\\\">package.json</code>中添加如下内容：</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">  <span class=\\\"token string\\\">\\\"main\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"src/electron-starter.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">\\\"scripts\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"electron\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"electron .\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ol start=\\\"6\\\">\\n<li>执行<code class=\\\"language-text\\\">npm start</code>然后执行<code class=\\\"language-text\\\">npm run electron</code></li>\\n</ol>\\n<p>这样就可以享受所有 CRA 的好处了， 如果是已经有一个 react 项目的话， 这样迁移过来是最容易的了。</p>\\n<p>有两个小问题， 一是 4 中<code class=\\\"language-text\\\">mainWindow.loadURL</code>的参数， 我们指定为<code class=\\\"language-text\\\">localhost:3000</code>， 这个其实是 CRA 的开发环境的地址，如果最后正式发布的话， 应该配置<code class=\\\"language-text\\\">npm run build</code>之后的<code class=\\\"language-text\\\">index.html</code>， 可以通过环境变量控制。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token string\\\">\\\"electron-dev\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"ELECTRON_START_URL=http://localhost:3000 electron .\\\"</span></code></pre>\\n      </div>\\n<p>然后将<code class=\\\"language-text\\\">electron-starter.js</code>相应内容改为:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> startUrl <span class=\\\"token operator\\\">=</span>\\n  process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">ELECTRON_START_URL</span> <span class=\\\"token operator\\\">||</span>\\n  url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">format</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    pathname<span class=\\\"token punctuation\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"/../build/index.html\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    protocol<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"file:\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    slashes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nmainWindow<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">loadURL</span><span class=\\\"token punctuation\\\">(</span>startUrl<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>还有一个问题， CRA 默认打包出来的<code class=\\\"language-text\\\">index.html</code>里面引用资源是认为放在根目录下， 所以需要在<code class=\\\"language-text\\\">package.json</code>里面配置<code class=\\\"language-text\\\">home</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token string\\\">\\\"homepage\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"./\\\"</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>最后还有一个问题， 在我们通常写的 JS 代码里面直接 require <code class=\\\"language-text\\\">electron</code>是有问题的，可以通过如下方法解决（参看<a href=\\\"https://github.com/electron/electron/issues/7300\\\">讨论</a>）：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> electron <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"electron\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> electron<span class=\\\"token punctuation\\\">.</span>remote<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"fs\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> ipcRenderer <span class=\\\"token operator\\\">=</span> electron<span class=\\\"token punctuation\\\">.</span>ipcRenderer<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>感觉这种方式是从现有 React 项目迁移的最好方法了， 不过对 electron 的其他东西，比如打包之类的都没有涉及。</p>\\n<p>这里还有更多<a href=\\\"https://electronjs.org/community#boilerplates\\\">boilerplates</a>， 下面这几个还没有看过仅供参考：</p>\\n<ul>\\n<li><a href=\\\"https://github.com/emk/electron-test\\\">https://github.com/emk/electron-test</a> ， 这个还整合了 Rust， 也是我后面可能需要的， mark 一下。</li>\\n<li><a href=\\\"https://github.com/skellock/typescript-with-electron-react-kit\\\">https://github.com/skellock/typescript-with-electron-react-kit</a></li>\\n<li><a href=\\\"http://blog.scottlogic.com/2017/06/06/typescript-electron-webpack.html\\\">http://blog.scottlogic.com/2017/06/06/typescript-electron-webpack.html</a></li>\\n</ul>\\n<p>下面几个 repo 也可以看一下， 作为入门 electron 资料还是很不错的：</p>\\n<ul>\\n<li><a href=\\\"https://github.com/electron/simple-samples\\\">https://github.com/electron/simple-samples</a></li>\\n<li><a href=\\\"https://github.com/electron/electron-api-demos\\\">https://github.com/electron/electron-api-demos</a></li>\\n<li><a href=\\\"https://github.com/hokein/electron-sample-apps\\\">https://github.com/hokein/electron-sample-apps</a></li>\\n</ul>\\n<p>当然， 最完整权威的资料还是<a href=\\\"https://electronjs.org/docs\\\">官网文档</a>了！</p>\",\"timeToRead\":4,\"excerpt\":\"最近要做个 Desktop 软件， 当然首选 Electron， 另外最近用 Typescript 感觉很爽， 所以技术选型为 Electron + React + Typescript， 为了省事想找个 starter…\",\"fields\":{\"slug\":\"/electron-starter/\"},\"frontmatter\":{\"title\":\"Electron入门资料\",\"date\":\"2018-05-12\",\"category\":\"FE\",\"tags\":[\"electron\",\"typescript\",\"create react app\",\"react\"]}}},{\"node\":{\"html\":\"<p>Node.js 里面引用 json 文件很容易， 如果是 ES5 的话， 用<code class=\\\"language-text\\\">require</code>，如果是 ES6 的话用<code class=\\\"language-text\\\">import</code>。 比如 <code class=\\\"language-text\\\">test.json</code> 文件如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"hello\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"typescript\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>js 代码如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// ES5 testjson.js</span>\\n<span class=\\\"token keyword\\\">const</span> json <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"./test.json\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>json<span class=\\\"token punctuation\\\">.</span>hello<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ES6</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> json <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./test.json\\\"</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>json<span class=\\\"token punctuation\\\">.</span>hello<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>注意， Node9 以上才支持 ES6 的 import/export 机制， 且后缀名是<code class=\\\"language-text\\\">.mjs</code>。</p>\\n<p>直接把<code class=\\\"language-text\\\">testjson.js</code>改为<code class=\\\"language-text\\\">testjson.ts</code>会报错，说<code class=\\\"language-text\\\">[ts] Cannot find module &#39;./test.json&#39;.</code>。</p>\\n<h1 id=\\\"解决方案\\\"><a href=\\\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>解决方案</h1>\\n<p>Typescript2 支持<a href=\\\"https://www.typescriptlang.org/docs/handbook/modules.html\\\">Wildcard module declarations</a>，很好地解决了这个问题。 添加<code class=\\\"language-text\\\">typings.d.ts</code>文件， 在里面配置：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">declare module &#39;*.json&#39; {\\n  const value: any;\\n  export default value;\\n}</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> json <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./test.json\\\"</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>json<span class=\\\"token punctuation\\\">.</span>hello<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>还会报错说没有<code class=\\\"language-text\\\">hello</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">[</span>ts<span class=\\\"token punctuation\\\">]</span> Property <span class=\\\"token string\\\">'hello'</span> does not exist on type <span class=\\\"token string\\\">'typeof '</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">.</span>json<span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">.</span>\\nany</code></pre>\\n      </div>\\n<p>可以做一次 any 转换即可：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> json <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./test.json'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>json <span class=\\\"token keyword\\\">as</span> any<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>hello<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h1 id=\\\"参考资料\\\"><a href=\\\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考资料</h1>\\n<ul>\\n<li><a href=\\\"https://hackernoon.com/import-json-into-typescript-8d465beded79\\\">https://hackernoon.com/import-json-into-typescript-8d465beded79</a></li>\\n</ul>\",\"timeToRead\":1,\"excerpt\":\"Node.js 里面引用 json 文件很容易， 如果是 ES5 的话， 用 ，如果是 ES6 的话用 。 比如   文件如下： js 代码如下： 注意， Node9 以上才支持 ES6 的 import/export…\",\"fields\":{\"slug\":\"/typescript-import-json/\"},\"frontmatter\":{\"title\":\"Typescript如何import json文件\",\"date\":\"2018-04-26\",\"category\":\"FE\",\"tags\":[\"Typescript\",\"json\"]}}},{\"node\":{\"html\":\"<p>Solidity学习笔记。</p>\\n<!-- more -->\\n<h1 id=\\\"solidity\\\"><a href=\\\"#solidity\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Solidity</h1>\\n<p>It was influenced by C++, Python and JavaScript and is designed to target the Ethereum Virtual Machine (EVM).</p>\\n<p>statically typed, supports inheritance, libraries and complex user-defined types among other features.</p>\\n<p>create contracts for voting, crowdfunding, blind auctions, multi-signature wallets and more.</p>\\n<p>最快速简单的开发环境： <a href=\\\"https://remix.ethereum.org/\\\">Remix</a></p>\\n<h1 id=\\\"introduction-to-smart-contracts\\\"><a href=\\\"#introduction-to-smart-contracts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Introduction to Smart Contracts</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.0</span><span class=\\\"token punctuation\\\">;</span>\\n\\ncontract SimpleStorage <span class=\\\"token punctuation\\\">{</span>\\n    uint storedData<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>uint x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        storedData <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> constant <span class=\\\"token function\\\">returns</span> <span class=\\\"token punctuation\\\">(</span>uint<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> storedData<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>The first line simply tells that the source code is written for Solidity version 0.4.0 or anything newer that does not break functionality (up to, but not including, version 0.5.0). </p>\\n<p>A contract in the sense of Solidity is a collection of code (its functions) and data (its state) that resides at a specific address on the Ethereum blockchain. </p>\\n<p>uint (unsigned integer of 256 bits)</p>\\n<p>do not need the prefix this.</p>\\n<p>All identifiers (contract names, function names and variable names) are restricted to the ASCII character set.</p>\\n<h2 id=\\\"subcurrency-example\\\"><a href=\\\"#subcurrency-example\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Subcurrency Example</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.21</span><span class=\\\"token punctuation\\\">;</span>\\n\\ncontract Coin <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// The keyword \\\"public\\\" makes those variables</span>\\n    <span class=\\\"token comment\\\">// readable from outside.</span>\\n    address <span class=\\\"token keyword\\\">public</span> minter<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">mapping</span> <span class=\\\"token punctuation\\\">(</span>address <span class=\\\"token operator\\\">=></span> uint<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> balances<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// Events allow light clients to react on</span>\\n    <span class=\\\"token comment\\\">// changes efficiently.</span>\\n    event <span class=\\\"token function\\\">Sent</span><span class=\\\"token punctuation\\\">(</span>address <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> address to<span class=\\\"token punctuation\\\">,</span> uint amount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// This is the constructor whose code is</span>\\n    <span class=\\\"token comment\\\">// run only when the contract is created.</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Coin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        minter <span class=\\\"token operator\\\">=</span> msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mint</span><span class=\\\"token punctuation\\\">(</span>address receiver<span class=\\\"token punctuation\\\">,</span> uint amount<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>sender <span class=\\\"token operator\\\">!=</span> minter<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n        balances<span class=\\\"token punctuation\\\">[</span>receiver<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> amount<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span>address receiver<span class=\\\"token punctuation\\\">,</span> uint amount<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>balances<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;</span> amount<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n        balances<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-=</span> amount<span class=\\\"token punctuation\\\">;</span>\\n        balances<span class=\\\"token punctuation\\\">[</span>receiver<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> amount<span class=\\\"token punctuation\\\">;</span>\\n        emit <span class=\\\"token function\\\">Sent</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> receiver<span class=\\\"token punctuation\\\">,</span> amount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">address public minter;</code>, address type is a 160-bit value that does not allow any arithmetic operations.</p>\\n<p>加了public会自动生成一个getter函数，类似：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">minter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token function\\\">returns</span> <span class=\\\"token punctuation\\\">(</span>address<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> minter<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>但是不能手写这个函数， 否则编译报错。</p>\\n<p><code class=\\\"language-text\\\">mapping (address =&gt; uint) public balances;</code>, Mappings can be seen as hash tables which are virtually initialized such that every possible key exists and is mapped to a value whose byte-representation is all zeros.  任何没有放进map的key， value都是0值。 所以也没办法遍历mapping的， 如果需要记住key， 自己用array记。 由public生成的getter函数类似如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">balances</span><span class=\\\"token punctuation\\\">(</span>address _account<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> view <span class=\\\"token function\\\">returns</span> <span class=\\\"token punctuation\\\">(</span>uint<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> balances<span class=\\\"token punctuation\\\">[</span>_account<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">event Sent(address from, address to, uint amount);</code>, As soon as it is emitted, the listener(比如钱包啊， 自己代码加的监听器等) will also receive the arguments from, to and amount, which makes it easy to track transactions.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">Coin<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Sent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">,</span> result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Coin transfer: \\\"</span> <span class=\\\"token operator\\\">+</span> result<span class=\\\"token punctuation\\\">.</span>args<span class=\\\"token punctuation\\\">.</span>amount <span class=\\\"token operator\\\">+</span>\\n            <span class=\\\"token string\\\">\\\" coins were sent from \\\"</span> <span class=\\\"token operator\\\">+</span> result<span class=\\\"token punctuation\\\">.</span>args<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span> <span class=\\\"token operator\\\">+</span>\\n            <span class=\\\"token string\\\">\\\" to \\\"</span> <span class=\\\"token operator\\\">+</span> result<span class=\\\"token punctuation\\\">.</span>args<span class=\\\"token punctuation\\\">.</span>to <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\".\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Balances now:\\\\n\\\"</span> <span class=\\\"token operator\\\">+</span>\\n            <span class=\\\"token string\\\">\\\"Sender: \\\"</span> <span class=\\\"token operator\\\">+</span> Coin<span class=\\\"token punctuation\\\">.</span>balances<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>args<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span>\\n            <span class=\\\"token string\\\">\\\"Receiver: \\\"</span> <span class=\\\"token operator\\\">+</span> Coin<span class=\\\"token punctuation\\\">.</span>balances<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>args<span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">Coin</code> is the constructor which is run during creation of the contract and cannot be called afterwards.  <code class=\\\"language-text\\\">msg</code> (together with <code class=\\\"language-text\\\">tx</code> and <code class=\\\"language-text\\\">block</code>) is a magic global variable that contains some properties which allow access to the blockchain.</p>\\n<h2 id=\\\"blockchain-basics\\\"><a href=\\\"#blockchain-basics\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Blockchain Basics</h2>\\n<p>The reason is that most of the complications (mining, hashing, elliptic-curve cryptography, peer-to-peer networks, etc.) are just there to provide a certain set of features and promises. Once you accept these features as given, you do not have to worry about the underlying technology - or do you have to know how Amazon’s AWS works internally in order to use it?</p>\\n<h3 id=\\\"transactions\\\"><a href=\\\"#transactions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Transactions</h3>\\n<p>原子性、持久性、globally accepted。 a transaction is always cryptographically signed by the sender (creator).  防止抵赖</p>\\n<h3 id=\\\"blocks\\\"><a href=\\\"#blocks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Blocks</h3>\\n<p>“double-spend attack”</p>\\n<p>An order of the transactions will be selected for you, the transactions will be bundled into what is called a “block” and then they will be executed and distributed among all participating nodes. If two transactions contradict each other, the one that ends up being second will be rejected and not become part of the block.</p>\\n<p>Ethereum this is roughly every 17 seconds.</p>\\n<p> “order selection mechanism” (which is called “mining”)</p>\\n<h2 id=\\\"the-ethereum-virtual-machine\\\"><a href=\\\"#the-ethereum-virtual-machine\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>The Ethereum Virtual Machine</h2>\\n<p>not only sandboxed but actually completely isolated, which means that code running inside the EVM has no access to network, filesystem or other processes. Smart contracts even have limited access to other smart contracts.</p>\\n<h3 id=\\\"accounts\\\"><a href=\\\"#accounts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Accounts</h3>\\n<p><strong>External accounts</strong>: 由公钥私钥控制（一般是人）， 地址是public key决定</p>\\n<p><strong>contract accounts</strong>: 由里面的code控制， 地址是在contract被创建的时候由创建者的address以及发送过的transactions数量（叫nonce）决定的。</p>\\n<p>Every account has a persistent key-value store mapping 256-bit words to 256-bit words called storage.</p>\\n<p>Furthermore, every account has a balance in Ether (in “Wei” to be exact) which can be modified by sending transactions that include Ether.</p>\\n<h3 id=\\\"transactions-1\\\"><a href=\\\"#transactions-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Transactions</h3>\\n<p>这里的事务其实就是一个account发送给另一个account的msg， 可以带参数和ether。 如果目标账号包含code（contract account)， code被执行。</p>\\n<p>如果目标地址是0， 则认为是创建一个新contract， 新contract地址由发送者的地址和已经发送过的transactions数量（nonce）决定。 所带的参数当做EVM的bytecode执行， 返回值作为contract的code存储在blockchain上。</p>\\n<blockquote>\\n<p>This means that in order to create a contract, you do not send the actual code of the contract, but in fact code that returns that code when executed.</p>\\n</blockquote>\\n<h3 id=\\\"gas\\\"><a href=\\\"#gas\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Gas</h3>\\n<p>执行transaction的费用， 每条bytecode指令都有对应的gas。 你可以指定<strong>gas price</strong>， 然后最后会花费<strong>gas price * gas used</strong>， 没花完的原路退回， 如果不够， 会报<strong>out-of-gas exception</strong>， 所有操作回滚。</p>\\n<p>这个设计是为了奖励节点， 同时也能提高DOS攻击成本。</p>\\n<h3 id=\\\"storage-memory-and-the-stack\\\"><a href=\\\"#storage-memory-and-the-stack\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Storage, Memory and the Stack</h3>\\n<p>每个account都有一个Storage，是永久存储的一个key-value数据库， key和value都是256-bit words。 读和写操作都很贵（花费gas）， 一个contract也只能读写自己的storage。</p>\\n<p>memory是内存，每次方法调用都会开辟新的空间， 用的内存越多越贵（成平方增长的）。</p>\\n<p>EVM是stack机， 不是基于寄存器的。</p>\\n<h3 id=\\\"instruction-set\\\"><a href=\\\"#instruction-set\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Instruction Set</h3>\\n<p>为了安全， 指令集设计得比较小。</p>\\n<p> All instructions operate on the basic data type, 256-bit words. The usual arithmetic, bit, logical and comparison operations are present. Conditional and unconditional jumps are possible. Furthermore, contracts can access relevant properties of the current block like its number and timestamp.</p>\\n<h3 id=\\\"message-calls\\\"><a href=\\\"#message-calls\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Message Calls</h3>\\n<p>contract可以通过消息调用其他contract的代码， 也可以转账（ether）给非contract账户。</p>\\n<p>Message calls are similar to transactions, in that they have a source, a target, data payload, Ether, gas and return data.</p>\\n<p>Calls are limited to a depth of 1024, which means that for more complex operations, loops should be preferred over recursive calls.</p>\\n<h3 id=\\\"delegatecall--callcode-and-libraries\\\"><a href=\\\"#delegatecall--callcode-and-libraries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Delegatecall / Callcode and Libraries</h3>\\n<p><strong>delegatecall</strong>是一种特殊的message call， 目标地址的code是在调用方的context下执行的， 即msg.sender &#x26; msg.value都是调用方。 实现的效果就是可以在运行时动态加载别的地址的代码， 可以实现”library”的效果。</p>\\n<h3 id=\\\"logs\\\"><a href=\\\"#logs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Logs</h3>\\n<p><strong>logs</strong>特性用来实现<strong>events</strong>。 contract访问不了logs， 但logs可以在blockchain之外访问到。 一部分logs用bloom filter存储， 可以高效地检索， 所以“light clinets”可以用到logs。</p>\\n<h3 id=\\\"create\\\"><a href=\\\"#create\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Create</h3>\\n<p>Contracts can even create other contracts using a special opcode.</p>\\n<h3 id=\\\"self-destruct\\\"><a href=\\\"#self-destruct\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Self-destruct</h3>\\n<p>调用<strong>selfdestruct</strong>指令可以将contract从blockchain删除。 The remaining Ether stored at that address is sent to a designated target and then the storage and code is removed from the state.</p>\\n<p>Even if a contract’s code does not contain a call to selfdestruct, it can still perform that operation using delegatecall or callcode.</p>\\n<h1 id=\\\"installing-the-solidity-compiler\\\"><a href=\\\"#installing-the-solidity-compiler\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Installing the Solidity Compiler</h1>\\n<h2 id=\\\"remix\\\"><a href=\\\"#remix\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Remix</h2>\\n<p>最简单快捷的Solidity开发环境， 可以直接访问<a href=\\\"https://remix.ethereum.org\\\">Remix在线版</a>， 或者下载离线使用<a href=\\\"https://github.com/ethereum/remix-ide%E3%80%82\\\">https://github.com/ethereum/remix-ide。</a></p>\\n<p>另外还提供了npm安装（solcjs， 功能不全）， docker安装， 二进制包， 或者源码安装。</p>\\n<p>推荐使用自己操作系统的包管理工具直接安装二进制包， mac如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">brew update\\nbrew upgrade\\nbrew tap ethereum/ethereum\\nbrew <span class=\\\"token function\\\">install</span> solidity</code></pre>\\n      </div>\\n<h1 id=\\\"solidity-by-example\\\"><a href=\\\"#solidity-by-example\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Solidity by Example</h1>\\n<p>一个投票， 一个竞拍（包括盲拍）， 一个电商的例子。 </p>\\n<h1 id=\\\"solidity-in-depth\\\"><a href=\\\"#solidity-in-depth\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Solidity in Depth</h1>\\n<p>东西比较多， 专门写一篇吧。</p>\\n<h1 id=\\\"security-considerations\\\"><a href=\\\"#security-considerations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Security Considerations</h1>\\n<p>凡程序必有bug， 哪怕是自己的smart contract是bug-free， 可能compiler或者EVM本身也可能有bug的， 而blockchain往往涉及到很重要的资产， 所以安全问题尤为重要。</p>\\n<p>一些典型的问题。</p>\\n<h2 id=\\\"private-information-and-randomness\\\"><a href=\\\"#private-information-and-randomness\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Private Information and Randomness</h2>\\n<p>Using random numbers in smart contracts is quite tricky if you do not want miners to be able to cheat.</p>\\n<h2 id=\\\"re-entrancy\\\"><a href=\\\"#re-entrancy\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Re-Entrancy</h2>\\n<p>contract A调用contract B或者transfer的时候控制权会转移给B， 而B有可能反过来调用A。下面的代码就有问题：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 有bug， 勿用！！！</span>\\ncontract Fund <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">mapping</span><span class=\\\"token punctuation\\\">(</span>address <span class=\\\"token operator\\\">=></span> uint<span class=\\\"token punctuation\\\">)</span> shares<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withdraw</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span>shares<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            shares<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">msg.sender</code>可能是一个contract， 并且再次调用<code class=\\\"language-text\\\">withdraw</code>， 这样就会多次提现。 可以用<code class=\\\"language-text\\\">Checks-Effects-Interactions</code>模式来解决， 如下代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.11</span><span class=\\\"token punctuation\\\">;</span>\\n\\ncontract Fund <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">mapping</span><span class=\\\"token punctuation\\\">(</span>address <span class=\\\"token operator\\\">=></span> uint<span class=\\\"token punctuation\\\">)</span> shares<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withdraw</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> share <span class=\\\"token operator\\\">=</span> shares<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        shares<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n        msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>share<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>任何对另一个contract的调用都应该考虑re-entry问题。</p>\\n<h2 id=\\\"gas-limit-and-loops\\\"><a href=\\\"#gas-limit-and-loops\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Gas Limit and Loops</h2>\\n<p>慎用Loops，因为很可能烧光gas！！！</p>\\n<h2 id=\\\"sending-and-receiving-ether\\\"><a href=\\\"#sending-and-receiving-ether\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Sending and Receiving Ether</h2>\\n<p>有很多种转账方式， 也有很多原因可能失败。 对于给contract转账， 建议不要失败后直接退还， 而是给其提供withdraw机会。</p>\\n<h2 id=\\\"callstack-depth\\\"><a href=\\\"#callstack-depth\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Callstack Depth</h2>\\n<p>External function calls can fail any time because they exceed the maximum call stack of 1024.</p>\\n<h2 id=\\\"txorigin\\\"><a href=\\\"#txorigin\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>tx.origin</h2>\\n<p>不要用<code class=\\\"language-text\\\">tx.origin</code>来验证授权！ 假设你的contract如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.11</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 有bug， 勿用！！！</span>\\ncontract TxUserWallet <span class=\\\"token punctuation\\\">{</span>\\n    address owner<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">TxUserWallet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        owner <span class=\\\"token operator\\\">=</span> msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">transferTo</span><span class=\\\"token punctuation\\\">(</span>address dest<span class=\\\"token punctuation\\\">,</span> uint amount<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>tx<span class=\\\"token punctuation\\\">.</span>origin <span class=\\\"token operator\\\">==</span> owner<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        dest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>amount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>则下面的contract就会把你ether偷光：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.11</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">TxUserWallet</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">transferTo</span><span class=\\\"token punctuation\\\">(</span>address dest<span class=\\\"token punctuation\\\">,</span> uint amount<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\ncontract TxAttackWallet <span class=\\\"token punctuation\\\">{</span>\\n    address owner<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">TxAttackWallet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        owner <span class=\\\"token operator\\\">=</span> msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">TxUserWallet</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">transferTo</span><span class=\\\"token punctuation\\\">(</span>owner<span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">.</span>balance<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>感觉这块没太明白， 欢迎留言讨论。</p>\\n<h2 id=\\\"一些小细节\\\"><a href=\\\"#%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%BB%86%E8%8A%82\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>一些小细节</h2>\\n<ul>\\n<li><code class=\\\"language-text\\\">for (var i = 0; i &lt; arrayName.length; i++) { ... }</code>， 这段代码里i会被推断为<code class=\\\"language-text\\\">uint8</code>，所以如果<code class=\\\"language-text\\\">arrayName.length &gt; 255</code>， 循环就不会终止了！ 所以应该用<code class=\\\"language-text\\\">for (uint i = 0; i &lt; arrayName.length; i++) {...}</code>。</li>\\n<li><code class=\\\"language-text\\\">constant</code>关键字目前并没有被compiler和EVM保证， 所以声明为constanct的函数依然可能修改state</li>\\n<li>“dirty higher order bits”， 比如用<code class=\\\"language-text\\\">msg.data</code>调用<code class=\\\"language-text\\\">f(uint8 x)</code>的时候传<code class=\\\"language-text\\\">0xff000001</code>和<code class=\\\"language-text\\\">0x00000001</code>在函数里都会认为是1， 但是其实<code class=\\\"language-text\\\">msg.data</code>是不一样的，所以如果用到<code class=\\\"language-text\\\">keccak256(msg.data)</code>结果是不一样的。</li>\\n</ul>\\n<h2 id=\\\"建议\\\"><a href=\\\"#%E5%BB%BA%E8%AE%AE\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>建议</h2>\\n<h3 id=\\\"限制智能合约上存储的ether或者其他token数量\\\"><a href=\\\"#%E9%99%90%E5%88%B6%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E4%B8%8A%E5%AD%98%E5%82%A8%E7%9A%84ether%E6%88%96%E8%80%85%E5%85%B6%E4%BB%96token%E6%95%B0%E9%87%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>限制智能合约上存储的ether或者其他token数量</h3>\\n<p>这样万一程序有问题（包括contract、compiler、EVM等）， 损失也不会太大。</p>\\n<h3 id=\\\"功能单一、模块化！\\\"><a href=\\\"#%E5%8A%9F%E8%83%BD%E5%8D%95%E4%B8%80%E3%80%81%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%81\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>功能单一、模块化！</h3>\\n<p>良好的编码习惯吧！</p>\\n<h3 id=\\\"checks-effects-interactions模式\\\"><a href=\\\"#checks-effects-interactions%E6%A8%A1%E5%BC%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Checks-Effects-Interactions模式</h3>\\n<ol>\\n<li>先做检查， 包括谁是发送者， 钱够不够， 参数范围合法么。。。</li>\\n<li>修改当前contract的state variables</li>\\n<li>调用其他contract</li>\\n</ol>\\n<p>2和3交换会导致之前提到的<code class=\\\"language-text\\\">re-entrancy</code>问题。</p>\\n<h3 id=\\\"fail-safe-mode\\\"><a href=\\\"#fail-safe-mode\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Fail-Safe Mode</h3>\\n<p>新手最好预留一手“保护模式”。 可以定期检查一下有没有ether泄露啊， token总量是否banlance啊。。。如果出现问题， 可以切换到安全模式， 限制大部分功能， 或者只能由少数可信的人去调用contract， 或者just converts the contract into a simple “give me back my money” contract.</p>\\n<h3 id=\\\"formal-verification\\\"><a href=\\\"#formal-verification\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Formal Verification</h3>\\n<p>感觉有点像<a href=\\\"https://hypothesis.works/articles/what-is-property-based-testing/\\\">Property Based Testing?</a></p>\\n<h1 id=\\\"using-the-compiler\\\"><a href=\\\"#using-the-compiler\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Using the compiler</h1>\\n<p>编译器solc的一些命令行选项。</p>\\n<h1 id=\\\"contract-metadata\\\"><a href=\\\"#contract-metadata\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Contract Metadata</h1>\\n<p>用<code class=\\\"language-text\\\">solc --metadata</code>可以生成contract的metadata。 其中包括了源代码的的hash值以及Swarm位置 ， metadata的Swarm位置保存在contract bytecode最后， 因此通过bytecode就可以找到metadata，进而找到源代码， 来验证代码可信。</p>\\n<h1 id=\\\"application-binary-interface-specification\\\"><a href=\\\"#application-binary-interface-specification\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Application Binary Interface Specification</h1>\\n<p>contract的ABI规范， 一般做编译器的才会需要了解吧。</p>\\n<h1 id=\\\"joyfully-universal-language-for-inline-assembly\\\"><a href=\\\"#joyfully-universal-language-for-inline-assembly\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Joyfully Universal Language for (Inline) Assembly</h1>\\n<p>JULIA is an intermediate language that can compile to various different backends (EVM 1.0, EVM 1.5 and eWASM are planned). </p>\\n<p>也就是编译器的中间语言， 不同的后端可以编译到不同的EVM上。 应该只有做EVM开发的才会需要了解吧。</p>\\n<h1 id=\\\"style-guide\\\"><a href=\\\"#style-guide\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Style Guide</h1>\\n<p>主要参考了<a href=\\\"https://www.python.org/dev/peps/pep-0008/\\\">python的pep8 style guide</a>， 代码风格的目的是为了一致性！摘自 <a href=\\\"https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds\\\">https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds</a></p>\\n<blockquote>\\n<p>A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is most important. But most importantly: know when to be inconsistent – sometimes the style guide just doesn’t apply. When in doubt, use your best judgement. Look at other examples and decide what looks best. And don’t hesitate to ask!</p>\\n</blockquote>\\n<h1 id=\\\"常用模式\\\"><a href=\\\"#%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%BC%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>常用模式</h1>\\n<h2 id=\\\"withdrawal-from-contracts\\\"><a href=\\\"#withdrawal-from-contracts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Withdrawal from Contracts</h2>\\n<p>之前说过transfer可能失败， 因此如果要退钱给用户， 让他们自己withdraw， 否则有可能让整个contract“卡死”。</p>\\n<h2 id=\\\"restricting-access\\\"><a href=\\\"#restricting-access\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Restricting Access</h2>\\n<p>chain上的东西是公开透明任何人都可以看得， 因此没办法隐藏。 只能限制别的合约读取你的合约state，默认就是这样， 除非你显示地指定public。 结合<strong>function modifiers</strong>可以让代码可读性更高， 比如：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">modifier <span class=\\\"token function\\\">onlyBy</span><span class=\\\"token punctuation\\\">(</span>address _account<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>sender <span class=\\\"token operator\\\">==</span> _account<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// Do not forget the \\\"_;\\\"! It will</span>\\n        <span class=\\\"token comment\\\">// be replaced by the actual function</span>\\n        <span class=\\\"token comment\\\">// body when the modifier is used.</span>\\n        _<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"state-machine\\\"><a href=\\\"#state-machine\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>State Machine</h2>\\n<p>contract很多时候是一个State Machine， 就是说contract的状态会根据不同的条件变化（包括时间变化）。 有些函数可能只能在特定的状态下执行， 同样， 结合<strong>function modifiers</strong>可以让代码可读性更高， 比如：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">enum</span> Stages <span class=\\\"token punctuation\\\">{</span>\\n        AcceptingBlindedBids<span class=\\\"token punctuation\\\">,</span>\\n        RevealBids<span class=\\\"token punctuation\\\">,</span>\\n        AnotherStage<span class=\\\"token punctuation\\\">,</span>\\n        AreWeDoneYet<span class=\\\"token punctuation\\\">,</span>\\n        Finished\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// This is the current stage.</span>\\n    Stages <span class=\\\"token keyword\\\">public</span> stage <span class=\\\"token operator\\\">=</span> Stages<span class=\\\"token punctuation\\\">.</span>AcceptingBlindedBids<span class=\\\"token punctuation\\\">;</span>\\n\\n    uint <span class=\\\"token keyword\\\">public</span> creationTime <span class=\\\"token operator\\\">=</span> now<span class=\\\"token punctuation\\\">;</span>\\n\\n    modifier <span class=\\\"token function\\\">atStage</span><span class=\\\"token punctuation\\\">(</span>Stages _stage<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>stage <span class=\\\"token operator\\\">==</span> _stage<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        _<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">nextStage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> internal <span class=\\\"token punctuation\\\">{</span>\\n        stage <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Stages</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">uint</span><span class=\\\"token punctuation\\\">(</span>stage<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// Perform timed transitions. Be sure to mention</span>\\n    <span class=\\\"token comment\\\">// this modifier first, otherwise the guards</span>\\n    <span class=\\\"token comment\\\">// will not take the new stage into account.</span>\\n    modifier <span class=\\\"token function\\\">timedTransitions</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>stage <span class=\\\"token operator\\\">==</span> Stages<span class=\\\"token punctuation\\\">.</span>AcceptingBlindedBids <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                    now <span class=\\\"token operator\\\">>=</span> creationTime <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">10</span> days<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token function\\\">nextStage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>stage <span class=\\\"token operator\\\">==</span> Stages<span class=\\\"token punctuation\\\">.</span>RevealBids <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                now <span class=\\\"token operator\\\">>=</span> creationTime <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">12</span> days<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token function\\\">nextStage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// The other stages transition by transaction</span>\\n        _<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><strong>注意</strong>， Solidity v0.4.0之前有个问题： <strong>Modifier May be Skipped</strong>。 因为modifier只是简单的代码替换而不是函数调用， 如果那部分代码里面return了， 后面的代码可能不执行。v0.4.0之后没这个问题。</p>\\n<h1 id=\\\"list-of-known-bugs\\\"><a href=\\\"#list-of-known-bugs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>List of Known Bugs</h1>\\n<p>列出了一些Solidity compiler已知bugs。</p>\\n<p>在考虑一份contract的时候， 简单地说可以这样看： 如果不是用contract创建时候的最新发布版本编译器编译的， 就值得怀疑！ 有可能有bug， 有可能是contract作者故意想利用某个bug呢！！！</p>\\n<h1 id=\\\"faq\\\"><a href=\\\"#faq\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>FAQ</h1>\\n<p>一些常见的问题， 最初由<a href=\\\"https://github.com/fivedogit\\\">fivedogit</a>整理， 有些代码可以参考<a href=\\\"https://github.com/fivedogit/solidity-baby-steps\\\">solidity-baby-steps</a>。</p>\\n<h1 id=\\\"参考资料\\\"><a href=\\\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考资料</h1>\\n<ul>\\n<li><a href=\\\"https://solidity.readthedocs.io\\\">https://solidity.readthedocs.io</a></li>\\n</ul>\",\"timeToRead\":10,\"excerpt\":\"Solidity学习笔记。 Solidity It was influenced by C++, Python and JavaScript and is designed to target the Ethereum Virtual Machine (EVM…\",\"fields\":{\"slug\":\"/blockchain-ethereum-3/\"},\"frontmatter\":{\"title\":\"区块链系列七：Solidity学习笔记\",\"date\":\"2018-04-11\",\"category\":\"Blockchain\",\"tags\":[\"Ethereum\",\"以太坊\",\"Solidity\"]}}},{\"node\":{\"html\":\"<p><a href=\\\"/blockchain-ethereum-0\\\">区块链系列四：Hello Ethereum!</a>介绍了Ethereum的一些基础知识， 本文我们来用Ethereum发一个币玩玩。</p>\\n<!-- more -->\\n<h1 id=\\\"安装客户端和钱包\\\"><a href=\\\"#%E5%AE%89%E8%A3%85%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E9%92%B1%E5%8C%85\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>安装客户端和钱包</h1>\\n<p>按之前介绍安装客户端， 我们用Go语言版本的<a href=\\\"https://github.com/ethereum/go-ethereum/\\\">Geth</a>。</p>\\n<p>下载安装<a href=\\\"https://github.com/ethereum/mist/releases\\\">Mist或Ethereum Wallet</a>，Mist其实包含了钱包功能以及Remix IDE， 功能很强大的。</p>\\n<h1 id=\\\"启动测试网络\\\"><a href=\\\"#%E5%90%AF%E5%8A%A8%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>启动测试网络</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth --identity <span class=\\\"token string\\\">\\\"MyEther\\\"</span> --rpc --rpccorsdomain <span class=\\\"token string\\\">\\\"*\\\"</span> --datadir ~/.ethereum_private --nodiscover --networkid 1999 --ipcpath ~/Library/Ethereum/geth.ipc</code></pre>\\n      </div>\\n<p>注意， 如果我们用<code class=\\\"language-text\\\">--datadir</code>指定了自定义的存储位置， <code class=\\\"language-text\\\">geth.ipc</code>会存储在此目录下。 而Mist自带一个geth客户端， 默认会去连localhost的默认客户端， 如果连不到则会启动自己的geth， 尝试连接mainnet。 所以为了让Mist连接我们的private network， 需要用<code class=\\\"language-text\\\">--ipcpath</code>将<code class=\\\"language-text\\\">geth.ipc</code>指定到默认位置。这样Mist就会连接到我们的客户端启动的private network了。</p>\\n<h1 id=\\\"最小可行token：-mvtminimum-viable-token\\\"><a href=\\\"#%E6%9C%80%E5%B0%8F%E5%8F%AF%E8%A1%8Ctoken%EF%BC%9A-mvtminimum-viable-token\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>最小可行Token： MVT(Minimum Viable Token)</h1>\\n<p>Show me the code!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.20</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 指定编译器版本</span>\\n\\ncontract MyToken <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 记录每个address的账户余额</span>\\n    <span class=\\\"token function\\\">mapping</span> <span class=\\\"token punctuation\\\">(</span>address <span class=\\\"token operator\\\">=></span> uint256<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> balanceOf<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// 构造函数， 指定contract创建者的初始余额</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">MyToken</span><span class=\\\"token punctuation\\\">(</span>\\n        uint256 initialSupply\\n        <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> initialSupply<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// 转账</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>address _to<span class=\\\"token punctuation\\\">,</span> uint256 _value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">>=</span> _value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>           <span class=\\\"token comment\\\">// 账户余额是否足够</span>\\n        <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> _value <span class=\\\"token operator\\\">>=</span> balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 是否会溢出</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"理解contract\\\"><a href=\\\"#%E7%90%86%E8%A7%A3contract\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>理解contract</h1>\\n<p>现在我们来从零开始逐渐构建一份完整的contract，并添加一些高级功能。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.20</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 指定编译器版本</span>\\n\\n    contract Chips <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">mapping</span> <span class=\\\"token punctuation\\\">(</span>address <span class=\\\"token operator\\\">=></span> uint256<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> balanceOf<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">pragma</code>指定编译器版本。 contract类似于class， Chips是contract的名称（也就是我们token的名称）。balanceOf是Chips的一个字段， 类型为<code class=\\\"language-text\\\">mapping (address =&gt; uint256)</code>。 mapping是一种数据类型， 类似于Hashmap， 这里拿来存每个地址都多少token。 public表示所有人都可以访问。 </p>\\n<p>我们可以如下图操作， 打开Mist，将代码copy到Mist中的编辑器中即可：\\n<img src=\\\"/blogimgs/blockchain/deploy-contract.png\\\" alt=\\\"部署contract\\\">\\n<img src=\\\"/blogimgs/blockchain/copy-solidity.png\\\" alt=\\\"复制solidity代码\\\"></p>\\n<p>PS， 从上图中我们可以看出Mist其实里面包含的是一个网页， 直接在浏览器里访问网页url也可以：<a href=\\\"https://wallet.ethereum.org/\\\">https://wallet.ethereum.org/</a> 。</p>\\n<p>是可以部署了， 但是没啥用， 因为balanceOf里每个地址都是0。 我们来给自己分配的token：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Chips</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">21000000</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Chips是构造函数， 名称需要与contract名称一致， 只会在contract被部署的时候执行一次。<code class=\\\"language-text\\\">msg.sender</code>是部署合约的人。 分配多少你可以随便写， 21000000是致敬BTC， 当然也可以用参数传递进去：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Chips</span><span class=\\\"token punctuation\\\">(</span>uint256 initialSupply<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> initialSupply<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>现在所有的token都在自己手里， 没啥价值， 我们要分点给其他人啊， 于是需要转账功能：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>address _to<span class=\\\"token punctuation\\\">,</span> uint256 _value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>代码简单直接， 就是从发送者(msg.sender)转给to。 但是这里显然有问题， 万一发送者余额不足呢， 这种情况我们应该终止交易。 要提前终止代码执行有两种方法： return和throw。 return花费更少的gas， 但是之前修改的状态会被保留； 而throw会回滚所有的修改， 但是会花费掉所有gas。所以我们加一下判断：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">transfer</span><span class=\\\"token punctuation\\\">(</span>address _to<span class=\\\"token punctuation\\\">,</span> uint256 _value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 检查账户token够不够， 以及是否会溢出</span>\\n        <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">>=</span> _value <span class=\\\"token operator\\\">&amp;&amp;</span> balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> _value <span class=\\\"token operator\\\">>=</span> balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>_to<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+=</span> _value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"contract信息\\\"><a href=\\\"#contract%E4%BF%A1%E6%81%AF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>contract信息</h2>\\n<p>现在我们来添加一些关于contract的信息， 在contract中添加几个字段：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">string <span class=\\\"token keyword\\\">public</span> name<span class=\\\"token punctuation\\\">;</span>\\nstring <span class=\\\"token keyword\\\">public</span> symbol<span class=\\\"token punctuation\\\">;</span>\\nuint8 <span class=\\\"token keyword\\\">public</span> decimals<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>然后修改构造函数：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Chips</span><span class=\\\"token punctuation\\\">(</span>uint256 initialSupply<span class=\\\"token punctuation\\\">,</span> string tokenName<span class=\\\"token punctuation\\\">,</span> string tokenSymbol<span class=\\\"token punctuation\\\">,</span> uint8 decimalUnits<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        balanceOf<span class=\\\"token punctuation\\\">[</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> initialSupply<span class=\\\"token punctuation\\\">;</span>              <span class=\\\"token comment\\\">// 初始token数量</span>\\n        name <span class=\\\"token operator\\\">=</span> tokenName<span class=\\\"token punctuation\\\">;</span>                                   <span class=\\\"token comment\\\">// token显示名称</span>\\n        symbol <span class=\\\"token operator\\\">=</span> tokenSymbol<span class=\\\"token punctuation\\\">;</span>                               <span class=\\\"token comment\\\">// token显示符号</span>\\n        decimals <span class=\\\"token operator\\\">=</span> decimalUnits<span class=\\\"token punctuation\\\">;</span>                            <span class=\\\"token comment\\\">// 小数位数</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这里需要注意的是decimals，它的含义是1个token可以拆分成多少个最小基本单位。 比如1ether = 10 ** 18 wei， 所以Ethereum里decimals是18； 而如果是美刀， 则1美刀=100美分， 所以decimals是2。 这个地方没理解好后面会有坑，我们稍后介绍。</p>\\n<h2 id=\\\"events\\\"><a href=\\\"#events\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Events</h2>\\n<p>我们想监听contract的某些状态， 比如当contract发生修改时，我们想获得通知。只需要写一个空函数（首字母大写）即可：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    event <span class=\\\"token function\\\">Transfer</span><span class=\\\"token punctuation\\\">(</span>address indexed <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> address indexed to<span class=\\\"token punctuation\\\">,</span> uint256 value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>然后我们可以在<code class=\\\"language-text\\\">transfer</code>函数中调用：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">        emit <span class=\\\"token function\\\">Transfer</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> _to<span class=\\\"token punctuation\\\">,</span> _value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>这样钱包会收到通知。</p>\\n<h2 id=\\\"deploy\\\"><a href=\\\"#deploy\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Deploy</h2>\\n<p>我们来用Mist把前面代码部署到Ethereum网络吧！</p>\\n<p>选“合约” -》 “部署新合约”， 然后把solidity代码复制到编辑器里， 在“选择欲部署的合约”里选择Chips， 然后填上初始参数，如下图：\\n<img src=\\\"/blogimgs/blockchain/deploy-contract2.png\\\" alt=\\\"部署contract\\\"></p>\\n<p>注意，这里我们初始给了10000， 但是decimal units为2， 其实表示的是100“块”token， 最小单位是0.01“块”token。</p>\\n<p>滚动到最下面， 设置一个合适的gas， 然后点击“部署”， 在弹出框中输入密码，点确定。 然后在<code class=\\\"language-text\\\">geth console</code>里开启挖矿， <code class=\\\"language-text\\\">miner.start(1)</code>， 过一会就会在主界面看到确认信息。\\n<img src=\\\"/blogimgs/blockchain/confirmations.png\\\" alt=\\\"确认\\\"></p>\\n<p>点击<code class=\\\"language-text\\\">[Main account](Etherbase)</code>进入账号页面， 会看到自己拥有全部的<code class=\\\"language-text\\\">FirstChips</code>： 100, 00$$。\\n<img src=\\\"/blogimgs/blockchain/mainaccount.png\\\" alt=\\\"main account\\\"></p>\\n<p>点击<code class=\\\"language-text\\\">FirstChips（管理页面）</code>进入合约页面， 可以查看合约的信息。\\n<img src=\\\"/blogimgs/blockchain/firstchips.png\\\" alt=\\\"FirstChips\\\"></p>\\n<p>现在我们可以转点token给朋友了。 点击发送， 配置好地址和数量， 选好token类型， 拖到最下面点击发送即可。\\n<img src=\\\"/blogimgs/blockchain/send-ok.png\\\" alt=\\\"send-ok\\\">\\n注意这里有个小坑， 数量这里输入10， 是指的token（相当于“块”）， 而我们之前设置decimal units是2， 所以是1000“分”。第一次的时候没注意， 在构造函数填的只是100（相当于只有1块），结果这边转10块的时候， 总是报错。\\n<img src=\\\"/blogimgs/blockchain/transfer-error.png\\\" alt=\\\"transfer-error\\\"></p>\\n<p>输入密码， 继续挖一会矿， 会发现main account里面只有90, 00$$了， 然后在另一个账号里多了10,00$$。 如果另一个账号是在其他客户端上（比如转给其他朋友）， 则他们是看不到新的token的。 需要在FirstChips的合约页面， 点击复制地址， 将地址发给朋友， 然后他们在合约页面，点查看代币， 然后把地址复制进去即可。\\n<img src=\\\"/blogimgs/blockchain/watch-token0.png\\\" alt=\\\"watch-token0\\\">\\n<img src=\\\"/blogimgs/blockchain/watch-token.png\\\" alt=\\\"watch-token\\\"></p>\\n<p>当然，你也可以调用contract的transfer函数来转账，注意这里的单位是“分”！\\n<img src=\\\"/blogimgs/blockchain/transfer2.png\\\" alt=\\\"transfer2\\\"></p>\\n<p>就这样我们很快就发了一个币， 当然只是运行在私有网络上， 要想部署到main net， 需要花费ethereum， 目前还没必要。</p>\\n<p>目前只有转账功能， 接下来我们打算设计一些复杂功能， 比如自动跟ether交易啊， POW机制啊， 账户冻结啊， 通过oraclize访问外部资源等， 敬请期待！</p>\\n<h1 id=\\\"参考资料\\\"><a href=\\\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考资料</h1>\\n<ul>\\n<li><a href=\\\"https://www.ethereum.org/token\\\">https://www.ethereum.org/token</a></li>\\n<li><a href=\\\"http://www.ethdocs.org\\\">http://www.ethdocs.org</a></li>\\n<li><a href=\\\"https://github.com/ethereum/go-ethereum/wiki/\\\">https://github.com/ethereum/go-ethereum/wiki/</a></li>\\n<li><a href=\\\"https://solidity.readthedocs.io\\\">https://solidity.readthedocs.io</a></li>\\n<li><a href=\\\"http://web3js.readthedocs.io/en/1.0/index.html\\\">http://web3js.readthedocs.io/en/1.0/index.html</a> </li>\\n</ul>\",\"timeToRead\":4,\"excerpt\":\"区块链系列四：Hello Ethereum! 介绍了Ethereum的一些基础知识， 本文我们来用Ethereum发一个币玩玩。 安装客户端和钱包 按之前介绍安装客户端， 我们用Go语言版本的 Geth 。 下载安装 Mist或Ethereum Wallet ，Mist…\",\"fields\":{\"slug\":\"/blockchain-ethereum-2/\"},\"frontmatter\":{\"title\":\"区块链系列六：设计自己的cryptocurrency\",\"date\":\"2018-04-07\",\"category\":\"Blockchain\",\"tags\":[\"Ethereum\",\"以太坊\"]}}},{\"node\":{\"html\":\"<p>Ethereum的一些笔记。</p>\\n<!-- more -->\\n<h1 id=\\\"账号管理\\\"><a href=\\\"#%E8%B4%A6%E5%8F%B7%E7%AE%A1%E7%90%86\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>账号管理</h1>\\n<p>externally owned accounts (EOAs) and contract accounts</p>\\n<h1 id=\\\"contracts-and-transactions\\\"><a href=\\\"#contracts-and-transactions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Contracts and Transactions</h1>\\n<p>This execution needs to be completely deterministic, its only context is the position of the block on the blockchain and all data available. </p>\\n<h2 id=\\\"gas\\\"><a href=\\\"#gas\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Gas</h2>\\n<p>Clearly Ethereum is not about optimising efficiency of computation. Its parallel processing is redundantly parallel.</p>\\n<p>The fact that contract executions are redundantly replicated across nodes, naturally makes them expensive, which generally creates an incentive not to use the blockchain for computation that can be done offchain.</p>\\n<h2 id=\\\"estimating-transaction-costs\\\"><a href=\\\"#estimating-transaction-costs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Estimating transaction costs</h2>\\n<p><code class=\\\"language-text\\\">Total cost = gasUsed * gasPrice</code></p>\\n<p>Contracts generally serve four purposes:</p>\\n<ul>\\n<li>Maintain a data store</li>\\n<li>“forwarding contract”</li>\\n<li>Manage an ongoing contract or relationship between multiple users.</li>\\n<li>serving as a software library.</li>\\n</ul>\\n<h1 id=\\\"dapps\\\"><a href=\\\"#dapps\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Dapps</h1>\\n<p>Remember that because of the redundant nature of computation on the Ethereum network, the gas costs of execution will always be higher than private execution offchain. This incentivizes dapp developers to restrict the amount of code they execute and amount of data they store on the blockchain.</p>\\n<ul>\\n<li>Dapp directories</li>\\n<li>Dapp browsers</li>\\n<li>IDE / frameworks</li>\\n<li>console</li>\\n<li>Whisper</li>\\n<li>Swarm</li>\\n<li>RANDAO</li>\\n<li>…</li>\\n<li>EVM</li>\\n</ul>\\n<h1 id=\\\"开发工具\\\"><a href=\\\"#%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>开发工具</h1>\\n<ul>\\n<li><a href=\\\"https://solidity.readthedocs.io/\\\">Solidity</a></li>\\n<li><a href=\\\"https://github.com/ethereum/web3.js/\\\">Web3.js</a></li>\\n<li><a href=\\\"https://github.com/trufflesuite/truffle\\\">Truffle</a></li>\\n<li><a href=\\\"https://github.com/OpenZeppelin/zeppelin-solidity\\\">OpenZeppelin</a></li>\\n<li><a href=\\\"https://remix.readthedocs.io/en/latest/\\\">Remix IDE</a></li>\\n<li><a href=\\\"https://github.com/juanfranblanco/vscode-solidity\\\">VSCode solidity</a></li>\\n<li><a href=\\\"http://www.oraclize.it/\\\">Oraclize</a></li>\\n<li><a href=\\\"https://tlsnotary.org/pagesigner.html\\\">PageSigner</a></li>\\n</ul>\\n<h1 id=\\\"其他\\\"><a href=\\\"#%E5%85%B6%E4%BB%96\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>其他</h1>\\n<ul>\\n<li><a href=\\\"https://ipfs.io/\\\">IPFS</a></li>\\n<li><a href=\\\"https://github.com/paritytech/parity\\\">Parity</a></li>\\n<li><a href=\\\"https://github.com/jpmorganchase/quorum\\\">Quorum</a></li>\\n</ul>\",\"timeToRead\":2,\"excerpt\":\"Ethereum的一些笔记。 账号管理 externally owned accounts (EOAs) and contract accounts Contracts and Transactions This execution needs to be completely…\",\"fields\":{\"slug\":\"/blockchain-ethereum-1/\"},\"frontmatter\":{\"title\":\"区块链系列五：Ethereum学习笔记\",\"date\":\"2018-04-06\",\"category\":\"Blockchain\",\"tags\":[\"BTC\",\"密码学\",\"crytography\"]}}},{\"node\":{\"html\":\"<p>本文介绍以太坊开发的基础知识。</p>\\n<!-- more -->\\n<h1 id=\\\"为啥不讲比特币呢\\\"><a href=\\\"#%E4%B8%BA%E5%95%A5%E4%B8%8D%E8%AE%B2%E6%AF%94%E7%89%B9%E5%B8%81%E5%91%A2\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>为啥不讲比特币呢</h1>\\n<p>很少有基于比特币做开发的， 如果大家有兴趣可以看下面几个资料：</p>\\n<ul>\\n<li><a href=\\\"https://github.com/bitcoinbook/bitcoinbook\\\">Mastering Bitcoin 2nd Edition</a></li>\\n<li><a href=\\\"http://bitcoinbook.cs.princeton.edu/\\\">Bitcoin and Cryptocurrency Technologies</a> <a href=\\\"https://www.coursera.org/learn/cryptocurrency/home/welcome\\\">Coursera上课程</a> <a href=\\\"https://piazza.com/princeton/spring2015/btctech/home\\\">课程资料</a></li>\\n<li><a href=\\\"https://bitcoin.org/en/\\\">Bitcoin官网</a></li>\\n</ul>\\n<p>只需要看上面三个资料来源即可， 不用看太多资料。</p>\\n<h1 id=\\\"ethereum基础概念介绍\\\"><a href=\\\"#ethereum%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Ethereum基础概念介绍</h1>\\n<h2 id=\\\"p2p网络\\\"><a href=\\\"#p2p%E7%BD%91%E7%BB%9C\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>P2P网络</h2>\\n<p>区块链底层是一个P2P网络，全球有很多电脑节点连在这个网络上， 没有中心节点， 每个节点互相通信， 各自保留一份完整的账本。</p>\\n<h2 id=\\\"客户端\\\"><a href=\\\"#%E5%AE%A2%E6%88%B7%E7%AB%AF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>客户端</h2>\\n<p>就是P2P网络中的一个节点， 包含有一些功能以支持整个P2P网络的运行。 比如转账， 记录账本， 挖矿等， 还有一个完整的虚拟机EVM， 可以在上面执行智能合约。</p>\\n<p>官方支持三种语言的客户端， 分别是：</p>\\n<ul>\\n<li>Go语言版本的<a href=\\\"https://github.com/ethereum/go-ethereum/\\\">Geth</a></li>\\n<li>C++语言版本<a href=\\\"https://github.com/ethereum/cpp-ethereum\\\">Eth</a></li>\\n<li>python语言版本的<a href=\\\"https://github.com/ethereum/pyethapp\\\">pyethapp</a></li>\\n</ul>\\n<p>另外社区还开发了各种语言版本的客户端， 可以看<a href=\\\"http://www.ethdocs.org/en/latest/ethereum-clients/index.html\\\">Ethereum Clients</a>。</p>\\n<h2 id=\\\"rpc\\\"><a href=\\\"#rpc\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>RPC</h2>\\n<p>客户端通过<a href=\\\"https://github.com/ethereum/wiki/wiki/JSON-RPC\\\">JSON RPC</a>暴露了一些API给用户使用， 比如生成账户、查看自己账户余额、部署智能合约等。 用户可以用curl或者postman工具调用RPC来实现功能， 但是一般还是通过一些SDK去做RPC调用，用的较多的有<a href=\\\"https://github.com/ethereum/web3.js/\\\">web3.js</a>，其他语言版本的可以参考<a href=\\\"http://www.ethdocs.org/en/latest/connecting-to-clients/index.html\\\">Connecting to Ethereum Clients</a>。</p>\\n<p>RPC、客户端、以太坊网络三者的关系如下：用户通过RPC调用客户端功能， 客户端通过EVM执行智能合约以及跟整个以太坊P2P网络连接。</p>\\n<h2 id=\\\"账户\\\"><a href=\\\"#%E8%B4%A6%E6%88%B7\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>账户</h2>\\n<p>Ethereum有两种类型的账户， 一种叫External owned account，可以简单理解为人控制的账户， 里面有“币”ether， 需要提供secret key，即可转账等。  一定要保护好自己的密钥， 不要让别人知道了（相当于把银行卡密码告诉了别人）否则钱就没了（被别人取走了）； 也不要自己给搞丢了， 因为没有“找回密码”的功能， 记得经常备份， 也可以拿纸记下来存放在保险柜里， 但是小心别被火烧了哈(谁都不能用这笔钱了)。。。   本质上而言账号就是一个公钥-私钥对， 可以通过之前提到的各种客户端生成任意数量的EOA， 具体可以看<a href=\\\"http://www.ethdocs.org/en/latest/account-management.html\\\">Account Management</a>。</p>\\n<p>另一种叫Contract account， 其实是存储在blockchain上的一些代码和数据， 可以类比为面向对象语言里面的一个对象， 可以被EOA调用修改其中的状态。 代码执行需要花费一定数量的Gas。</p>\\n<h2 id=\\\"gas\\\"><a href=\\\"#gas\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Gas</h2>\\n<p>为了避免以太坊网络被滥用或者攻击， 在EVM中执行的代码(contract)需要执行一定的费用，这就是gas了。 gas对应现实生活中的燃油费， 是驱动整个加密经济体系运转的动力。 gas涉及到三个概念：</p>\\n<ul>\\n<li>gasUsed， 每一条EVM指令都对应一定数量的gas， gasUsed表示整个contract执行完需要的gas总和</li>\\n<li>gasPrice， 调用contract的用户愿意支付的单价</li>\\n</ul>\\n<p>执行一个contract的总花费 = gasUsed * gasPrice。</p>\\n<p>想想自己一不小心写出个死循环把自己几个亿的ether给用光了是什么感觉！ 所以我们一般会设置<strong>gasLimit</strong>，即最大花费。 如果花费超过了gasLimit则contract执行过的操作会回滚，然后停止执行。 如果花费没有达到gasLimit， 则剩下的会原路退回。 客户端可以帮你估计一个contract大概的花费， 便于合理设置gasLimit。 问大家个问题， 如果花费超过了gasLimit会回滚contract操作， 那么还会扣掉gas么？为什么？</p>\\n<p>更多资料可以看<a href=\\\"http://ethdocs.org/en/latest/contracts-and-transactions/account-types-gas-and-transactions.html\\\">Account Types, Gas, and Transactions</a>。</p>\\n<h2 id=\\\"智能合约\\\"><a href=\\\"#%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>智能合约</h2>\\n<p>前面多次提到contract， 到底是啥呢？ 说白了，就是一段代码以及相关的一个状态， 智能表示能自动执行。 比如你跟小明打赌， 说明天下不下雨，如果下雨你输10块给他。 结果第二天真的下雨了， 然后你赖账了。。。。为了避免赖账， 我们可以建一份智能合约， 里面一开始存储的状态是“你有10块钱， 小明有10块钱”，以及一段代码“如果明天下雨， 你的10块钱归小明， 反之亦然”。 然后第二天下雨了， 合约就自动执行，然后状态变成了“你有0块钱， 小明有20块钱”。</p>\\n<h2 id=\\\"evm\\\"><a href=\\\"#evm\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>EVM</h2>\\n<p>以太坊的虚拟机， 执行智能合约， 类似于JVM。 EVM是一个隔离的沙盒， 里面不能访问网络、文件系统等。EVM支持的功能是图灵完备的。 注意图灵完备不代表能做任何事情， 比如不能访问网络等。</p>\\n<h2 id=\\\"solidity\\\"><a href=\\\"#solidity\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Solidity</h2>\\n<p>EVM上执行的智能合约是底层的二进制， 但是我们开发要用高级语言呢。 <a href=\\\"https://solidity.readthedocs.io\\\">Solidity</a>就是开发智能合约的一门高级语言， 类似于javascript， 通过solidity的编译器编译成二进制。</p>\\n<h1 id=\\\"hello-ethereum\\\"><a href=\\\"#hello-ethereum\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hello Ethereum!</h1>\\n<h2 id=\\\"安装客户端\\\"><a href=\\\"#%E5%AE%89%E8%A3%85%E5%AE%A2%E6%88%B7%E7%AB%AF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>安装客户端</h2>\\n<p>这里我们选择安装<a href=\\\"https://geth.ethereum.org/\\\">geth</a>， 最简单的方式是<a href=\\\"https://geth.ethereum.org/downloads/\\\">下载压缩包</a>， 直接解压即可。 安装其他客户端可以参考<a href=\\\"https://www.ethereum.org/cli\\\">GETH &#x26; ETH</a>。 为了在任何路径都能执行geth， 可以将其加入系统PATH中。</p>\\n<p>安装好之后执行如下命令启动geth：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">geth</code></pre>\\n      </div>\\n<p>geth提供了一个console，整合了web3.js，我们可以在里面直接写javascript代码进行操作， 比如生成账户、转账等， 通过如下命令进入console:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">geth console</code></pre>\\n      </div>\\n<p>另外也可以单独执行<code class=\\\"language-text\\\">geth</code>把客户端启动起来， 然后在新的终端里面执行<code class=\\\"language-text\\\">geth attach</code>打开一个新的console。进入之后执行:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">eth.accounts</code></pre>\\n      </div>\\n<p>会发现返回的是空数组<code class=\\\"language-text\\\">[]</code>， 我们用下面命令生成一个新账号：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> personal.newAccount<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nPassphrase:\\nRepeat passphrase:\\n<span class=\\\"token string\\\">\\\"0xecbc12eaef5fa1300cb9aad0a17bd2e40bde2a61\\\"</span></code></pre>\\n      </div>\\n<h2 id=\\\"运行测试网络testnetwork\\\"><a href=\\\"#%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9Ctestnetwork\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>运行测试网络TestNetwork</h2>\\n<p>直接用<code class=\\\"language-text\\\">geth</code>启动客户端， geth进去的是主网络（main network），也就是说任何操作都会真实进入以太坊P2P网络，比如转账、部署智能合约等。当然，我们账户里面没钱， 所以也没法转账和部署智能合约。 为了便于测试，我们可以建立一个私有测试网络。</p>\\n<p>区块链第一块叫创世块(Genesis block)，建立私有测试链需要提供genesis block的配置，简单如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"nonce\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"0x0000000000000042\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"timestamp\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"0x0\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"parentHash\\\"</span><span class=\\\"token operator\\\">:</span>\\n    <span class=\\\"token string\\\">\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"extraData\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"0x\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"gasLimit\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"0x8000000\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"difficulty\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"0x400\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"config\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"mixhash\\\"</span><span class=\\\"token operator\\\">:</span>\\n    <span class=\\\"token string\\\">\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"coinbase\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"0x3333333333333333333333333333333333333333\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"alloc\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>保存为<code class=\\\"language-text\\\">myGenesis.json</code>，然后执行下面命令：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth --identity <span class=\\\"token string\\\">\\\"MyEther\\\"</span> --rpc --datadir ~/.ethereum_private --nodiscover --networkid 1999 init ./myGenesis.json\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:33:36<span class=\\\"token punctuation\\\">]</span> Maximum peer count                       ETH<span class=\\\"token operator\\\">=</span>25 LES<span class=\\\"token operator\\\">=</span>0 total<span class=\\\"token operator\\\">=</span>25\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:33:36<span class=\\\"token punctuation\\\">]</span> Allocated cache and <span class=\\\"token function\\\">file</span> handles         database<span class=\\\"token operator\\\">=</span>/Users/magicly/.ethereum_private/geth/chaindata cache<span class=\\\"token operator\\\">=</span>16 handles<span class=\\\"token operator\\\">=</span>16\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:33:36<span class=\\\"token punctuation\\\">]</span> Writing custom genesis block\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:33:36<span class=\\\"token punctuation\\\">]</span> Persisted trie from memory database      nodes<span class=\\\"token operator\\\">=</span>0 size<span class=\\\"token operator\\\">=</span>0.00B time<span class=\\\"token operator\\\">=</span>10.416µs gcnodes<span class=\\\"token operator\\\">=</span>0 gcsize<span class=\\\"token operator\\\">=</span>0.00B gctime<span class=\\\"token operator\\\">=</span>0s livenodes<span class=\\\"token operator\\\">=</span>1 livesize<span class=\\\"token operator\\\">=</span>0.00B\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:33:36<span class=\\\"token punctuation\\\">]</span> Successfully wrote genesis state         database<span class=\\\"token operator\\\">=</span>chaindata                                       hash<span class=\\\"token operator\\\">=</span>6231b0…a0300b\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:33:36<span class=\\\"token punctuation\\\">]</span> Allocated cache and <span class=\\\"token function\\\">file</span> handles         database<span class=\\\"token operator\\\">=</span>/Users/magicly/.ethereum_private/geth/lightchaindata cache<span class=\\\"token operator\\\">=</span>16 handles<span class=\\\"token operator\\\">=</span>16\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:33:36<span class=\\\"token punctuation\\\">]</span> Writing custom genesis block\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:33:36<span class=\\\"token punctuation\\\">]</span> Persisted trie from memory database      nodes<span class=\\\"token operator\\\">=</span>0 size<span class=\\\"token operator\\\">=</span>0.00B time<span class=\\\"token operator\\\">=</span>3.22µs   gcnodes<span class=\\\"token operator\\\">=</span>0 gcsize<span class=\\\"token operator\\\">=</span>0.00B gctime<span class=\\\"token operator\\\">=</span>0s livenodes<span class=\\\"token operator\\\">=</span>1 livesize<span class=\\\"token operator\\\">=</span>0.00B\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:33:36<span class=\\\"token punctuation\\\">]</span> Successfully wrote genesis state         database<span class=\\\"token operator\\\">=</span>lightchaindata                                       hash<span class=\\\"token operator\\\">=</span>6231b0…a0300b</code></pre>\\n      </div>\\n<p>其中<code class=\\\"language-text\\\">--identity</code>是网络名称。 <code class=\\\"language-text\\\">--rpc</code>表示开启RPC功能。 <code class=\\\"language-text\\\">--datadir</code>是这个私有网络的数据存储目录，避免覆盖主网数据。 <code class=\\\"language-text\\\">--nodiscover</code>表示不要被其他节点发现。 <code class=\\\"language-text\\\">--networid</code>是网络id， 随便设置一个数即可， 默认为1（即主网）。</p>\\n<blockquote>\\n<p> —networkid value                     Network identifier (integer, 1=Frontier, 2=Morden (disused), 3=Ropsten, 4=Rinkeby) (default: 1)</p>\\n</blockquote>\\n<p>更多命令行选项可以执行<code class=\\\"language-text\\\">geth --help</code>查看， 或者访问<a href=\\\"https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options\\\">go ethereum Command Line Options</a>。</p>\\n<p>然后执行下面命令，启动geth：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">geth --identity <span class=\\\"token string\\\">\\\"MyEther\\\"</span> --rpc --datadir ~/.ethereum_private --nodiscover --networkid 1999</code></pre>\\n      </div>\\n<p>连接客户端：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth attach\\nFatal: Unable to attach to remote geth: dial unix /Users/magicly/Library/Ethereum/geth.ipc: connect: no such <span class=\\\"token function\\\">file</span> or directory\\n➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth attach ipc:/Users/magicly/.ethereum_private/geth.ipc\\nWelcome to the Geth JavaScript console<span class=\\\"token operator\\\">!</span>\\n\\ninstance: Geth/MyEther/v1.8.2-stable-b8b9f7f4/darwin-amd64/go1.9.4\\n modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0\\n\\n<span class=\\\"token operator\\\">></span> eth.accounts\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token operator\\\">></span> personal.newAccount<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nPassphrase:\\nRepeat passphrase:\\n<span class=\\\"token string\\\">\\\"0xa736f13951da77c39e035c4c1b1970478a758340\\\"</span></code></pre>\\n      </div>\\n<p>注意， 这里直接用<code class=\\\"language-text\\\">geth attach</code>连不上客户端， 因为不是用的默认配置。并且如果是用http方式attach的， 虽然连上了， 但是创建新账号的时候会报错：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth attach http://localhost:8545\\nWelcome to the Geth JavaScript console<span class=\\\"token operator\\\">!</span>\\n\\ninstance: Geth/MyEther/v1.8.2-stable-b8b9f7f4/darwin-amd64/go1.9.4\\ncoinbase: 0xa736f13951da77c39e035c4c1b1970478a758340\\nat block: 0 <span class=\\\"token punctuation\\\">(</span>Thu, 01 Jan 1970 08:00:00 CST<span class=\\\"token punctuation\\\">)</span>\\n modules: eth:1.0 net:1.0 rpc:1.0 web3:1.0\\n\\n<span class=\\\"token operator\\\">></span> personal.newAccount<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nPassphrase:\\nRepeat passphrase:\\nError: The method personal_newAccount does not exist/is not available\\n<span class=\\\"token operator\\\">></span></code></pre>\\n      </div>\\n<p>只有通过IPC连接上的客户端， 才认为足够安全， 才允许创建账号。 当然也可指直接用<code class=\\\"language-text\\\">geth</code>创建账号：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth --datadir ~/.ethereum_private account new\\nINFO <span class=\\\"token punctuation\\\">[</span>04-03<span class=\\\"token operator\\\">|</span>15:55:47<span class=\\\"token punctuation\\\">]</span> Maximum peer count                       ETH<span class=\\\"token operator\\\">=</span>25 LES<span class=\\\"token operator\\\">=</span>0 total<span class=\\\"token operator\\\">=</span>25\\nYour new account is locked with a password. Please give a password. Do not forget this password.\\nPassphrase:\\nRepeat passphrase:\\nAddress: <span class=\\\"token punctuation\\\">{</span>53707514492dda75eccb8ff621759af7f0f3c0f0<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>注意，必须加上<code class=\\\"language-text\\\">--datadir</code>，否则创建的账号在默认目录， 不能访问。然后在<code class=\\\"language-text\\\">console</code>里看， 确实有两个账号了：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> eth.accounts\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"0xa736f13951da77c39e035c4c1b1970478a758340\\\"</span>, <span class=\\\"token string\\\">\\\"0x53707514492dda75eccb8ff621759af7f0f3c0f0\\\"</span><span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>刚创建的账号， 肯定都没钱嘛：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> pa <span class=\\\"token operator\\\">=</span> eth.accounts<span class=\\\"token punctuation\\\">[</span>0<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token string\\\">\\\"0xa736f13951da77c39e035c4c1b1970478a758340\\\"</span>\\n<span class=\\\"token operator\\\">></span> eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa<span class=\\\"token punctuation\\\">)</span>\\n0</code></pre>\\n      </div>\\n<p>我们可以通过挖矿给自己搞点ether，因为我们在<code class=\\\"language-text\\\">myGenesis.json</code>里面配置的<code class=\\\"language-text\\\">&quot;difficulty&quot;: &quot;0x400&quot;,</code>， 所以很容易就挖到了。<a href=\\\"http://www.unminer.com/eth\\\">http://www.unminer.com/eth</a> 显示主网真实挖矿难度目前是1600T左右，是我们的<code class=\\\"language-text\\\">1600, 000, 000, 000</code>倍！所以知道为什么要搭建测试环境了吧。用下面命令开始挖矿：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> miner.setEtherbase<span class=\\\"token punctuation\\\">(</span>pa<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token operator\\\">></span> miner.start<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nnull\\n<span class=\\\"token operator\\\">></span> miner.stop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token operator\\\">></span> eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa<span class=\\\"token punctuation\\\">)</span>\\n55000000000000000000\\n<span class=\\\"token operator\\\">></span> web3.fromWei<span class=\\\"token punctuation\\\">(</span>eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa<span class=\\\"token punctuation\\\">)</span>, <span class=\\\"token string\\\">'ether'</span><span class=\\\"token punctuation\\\">)</span>\\n55</code></pre>\\n      </div>\\n<p>start之后几秒钟， CPU飚到800%， 风扇狂转， 赶紧关掉， 然后发现， 已经挖到55个以太坊了， 按照目前市值400刀一个， 我们挖到了价值22000刀的以太坊， 可惜都是测试环境的， 哈哈哈。</p>\\n<h2 id=\\\"编写智能合约solidity\\\"><a href=\\\"#%E7%BC%96%E5%86%99%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6solidity\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>编写智能合约Solidity</h2>\\n<p>solidity是编写以太坊智能合约的高级语言， 首先需要安装编译器， 参考<a href=\\\"http://solidity.readthedocs.io/en/develop/installing-solidity.html\\\">Installing the Solidity Compiler</a>。当然， 最简单的当然是直接用online版本<a href=\\\"https://remix.ethereum.org\\\">Remix</a>。</p>\\n<p>复制下列代码到remix编辑器中：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">pragma solidity <span class=\\\"token operator\\\">^</span><span class=\\\"token number\\\">0.4</span><span class=\\\"token number\\\">.0</span><span class=\\\"token punctuation\\\">;</span>\\ncontract mortal <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">/* Define variable owner of the type address */</span>\\n    address owner<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/* This function is executed at initialization and sets the owner of the contract */</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mortal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span> owner <span class=\\\"token operator\\\">=</span> msg<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">/* Function to recover the funds on the contract */</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">kill</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>sender <span class=\\\"token operator\\\">==</span> owner<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token function\\\">selfdestruct</span><span class=\\\"token punctuation\\\">(</span>owner<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\ncontract greeter is mortal <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">/* Define variable greeting of the type string */</span>\\n    string greeting<span class=\\\"token punctuation\\\">;</span>\\n    \\n    <span class=\\\"token comment\\\">/* This runs when the contract is executed */</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">greeter</span><span class=\\\"token punctuation\\\">(</span>string _greeting<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token punctuation\\\">{</span>\\n        greeting <span class=\\\"token operator\\\">=</span> _greeting<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">/* Main function */</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">greet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">public</span> constant <span class=\\\"token function\\\">returns</span> <span class=\\\"token punctuation\\\">(</span>string<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> greeting<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>然后执行编译， 之后可以查看编译结果， 如下图：\\n<img src=\\\"/blogimgs/blockchain/remix-greeter.png\\\" alt=\\\"Remix\\\"></p>\\n<h2 id=\\\"部署智能合约web3js\\\"><a href=\\\"#%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6web3js\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>部署智能合约Web3.js</h2>\\n<p>将前面图中代码<code class=\\\"language-text\\\">web3deploy</code>部分代码复制下来， 给变量<code class=\\\"language-text\\\">__greeting</code>一个值， 直接复制到geth的console中， 或者保存到文件比如<code class=\\\"language-text\\\">web3.js</code>，然后在console中执行<code class=\\\"language-text\\\">loadScript(&#39;./web3.js&#39;)</code>即可。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// web3.js</span>\\n<span class=\\\"token keyword\\\">var</span> _greeting <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Hello Ethereum!'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> greeterContract <span class=\\\"token operator\\\">=</span> web3<span class=\\\"token punctuation\\\">.</span>eth<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">contract</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"constant\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"inputs\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"kill\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"outputs\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"payable\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"stateMutability\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"nonpayable\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"function\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"constant\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"inputs\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"greet\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"outputs\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"string\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"payable\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"stateMutability\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"view\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"function\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"inputs\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"_greeting\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"string\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"payable\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"stateMutability\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"nonpayable\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"constructor\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> greeter <span class=\\\"token operator\\\">=</span> greeterContract<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">new</span><span class=\\\"token punctuation\\\">(</span>\\n   _greeting<span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token punctuation\\\">{</span>\\n     <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">:</span> web3<span class=\\\"token punctuation\\\">.</span>eth<span class=\\\"token punctuation\\\">.</span>accounts<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> \\n     data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'0x6060604052341561000f57600080fd5b6040516103a93803806103a983398101604052808051820191905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060019080519060200190610081929190610088565b505061012d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100c957805160ff19168380011785556100f7565b828001600101855582156100f7579182015b828111156100f65782518255916020019190600101906100db565b5b5090506101049190610108565b5090565b61012a91905b8082111561012657600081600090555060010161010e565b5090565b90565b61026d8061013c6000396000f30060606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610066575b600080fd5b341561005c57600080fd5b6100646100f4565b005b341561007157600080fd5b610079610185565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b957808201518184015260208101905061009e565b50505050905090810190601f1680156100e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610183576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b61018d61022d565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102235780601f106101f857610100808354040283529160200191610223565b820191906000526020600020905b81548152906001019060200180831161020657829003601f168201915b5050505050905090565b6020604051908101604052806000815250905600a165627a7a723058206787dd51eae8103738c5112e2d5c1636972e888ace270061dd0cf0e3f802f4cc0029'</span><span class=\\\"token punctuation\\\">,</span> \\n     gas<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'4700000'</span>\\n   <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">,</span> contract<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">,</span> contract<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> contract<span class=\\\"token punctuation\\\">.</span>address <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'undefined'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n         console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Contract mined! address: '</span> <span class=\\\"token operator\\\">+</span> contract<span class=\\\"token punctuation\\\">.</span>address <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">' transactionHash: '</span> <span class=\\\"token operator\\\">+</span> contract<span class=\\\"token punctuation\\\">.</span>transactionHash<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>其中data就是<code class=\\\"language-text\\\">greeter</code>编译之后的二进制。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> loadScript<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./web3.js'</span><span class=\\\"token punctuation\\\">)</span>\\nError: authentication needed: password or unlock undefined\\n<span class=\\\"token boolean\\\">true</span></code></pre>\\n      </div>\\n<p>额， 我们需要先解锁我们的主账户</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> personal.unlockAccount<span class=\\\"token punctuation\\\">(</span>web3.eth.accounts<span class=\\\"token punctuation\\\">[</span>0<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\nUnlock account 0xa736f13951da77c39e035c4c1b1970478a758340\\nPassphrase:\\n<span class=\\\"token boolean\\\">true</span></code></pre>\\n      </div>\\n<p>然后再加载加载脚本即可:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> loadScript<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./web3.js'</span><span class=\\\"token punctuation\\\">)</span>\\nnull <span class=\\\"token punctuation\\\">[</span>object Object<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token boolean\\\">true</span></code></pre>\\n      </div>\\n<p>这时候合约并没有入链的:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> greeter.address\\nundefined</code></pre>\\n      </div>\\n<p>想想也对， 这会儿没有miner干活呢， 那我们来自己挖一下吧：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> miner.start<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nnull\\n<span class=\\\"token operator\\\">></span> null <span class=\\\"token punctuation\\\">[</span>object Object<span class=\\\"token punctuation\\\">]</span>\\nContract mined<span class=\\\"token operator\\\">!</span> address: 0xf0406e7bcb75326a9b9fa47a05d3ce2126d95148 transactionHash: 0x01e70a7b0927cf70e9f0a2fcb904e6fff57009ae3d18350941fc4dc254283caf\\n<span class=\\\"token operator\\\">></span> miner.stop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token operator\\\">></span> web3.fromWei<span class=\\\"token punctuation\\\">(</span>eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa<span class=\\\"token punctuation\\\">)</span>, <span class=\\\"token string\\\">'ether'</span><span class=\\\"token punctuation\\\">)</span>\\n85\\n<span class=\\\"token operator\\\">></span> greeter.address\\n<span class=\\\"token string\\\">\\\"0xf0406e7bcb75326a9b9fa47a05d3ce2126d95148\\\"</span></code></pre>\\n      </div>\\n<p>可以看到， contract已经计入blockchain了， 另外，我们又挖到了30个eth哈哈哈。我们可以通过contract的address找到代码，当然，是二进制：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> eth.getCode<span class=\\\"token punctuation\\\">(</span>greeter.address<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token string\\\">\\\"0x60606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610066575b600080fd5b341561005c57600080fd5b6100646100f4565b005b341561007157600080fd5b610079610185565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b957808201518184015260208101905061009e565b50505050905090810190601f1680156100e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610183576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b61018d61022d565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102235780601f106101f857610100808354040283529160200191610223565b820191906000526020600020905b81548152906001019060200180831161020657829003601f168201915b5050505050905090565b6020604051908101604052806000815250905600a165627a7a723058206787dd51eae8103738c5112e2d5c1636972e888ace270061dd0cf0e3f802f4cc0029\\\"</span></code></pre>\\n      </div>\\n<p>然后我们就可以执行合约了：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> greeter.greet<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token string\\\">\\\"Hello Ethereum!\\\"</span></code></pre>\\n      </div>\\n<p>别人也能访问我们deploy的智能合约， 只要他们知道代码的地址以及接口类型(ABI (Application Binary Interface)))。 ABI是干嘛的呢， 基本就是告诉你前面的二进制代码要怎么调用， 因为估计没人能看了那串二进制就知道它是干嘛的吧。我们新开一个console：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  geth-darwin-amd64-1.8.2-b8b9f7f4 ./geth attach http://localhost:8545\\nWelcome to the Geth JavaScript console<span class=\\\"token operator\\\">!</span>\\n\\ninstance: Geth/MyEther/v1.8.2-stable-b8b9f7f4/darwin-amd64/go1.9.4\\ncoinbase: 0xa736f13951da77c39e035c4c1b1970478a758340\\nat block: 17 <span class=\\\"token punctuation\\\">(</span>Tue, 03 Apr 2018 16:30:06 CST<span class=\\\"token punctuation\\\">)</span>\\n modules: eth:1.0 net:1.0 rpc:1.0 web3:1.0\\n\\n<span class=\\\"token operator\\\">></span> var greeter2 <span class=\\\"token operator\\\">=</span> eth.contract<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"constant\\\"</span>:true,<span class=\\\"token string\\\">\\\"inputs\\\"</span>:<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>,<span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"greet\\\"</span>,<span class=\\\"token string\\\">\\\"outputs\\\"</span>:<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"\\\"</span>,<span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"string\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span>,<span class=\\\"token string\\\">\\\"payable\\\"</span>:false,<span class=\\\"token string\\\">\\\"stateMutability\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"view\\\"</span>,<span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"function\\\"</span><span class=\\\"token punctuation\\\">}</span>,<span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"inputs\\\"</span>:<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"_greeting\\\"</span>,<span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"string\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span>,<span class=\\\"token string\\\">\\\"payable\\\"</span>:false,<span class=\\\"token string\\\">\\\"stateMutability\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"nonpayable\\\"</span>,<span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token keyword\\\">:</span><span class=\\\"token string\\\">\\\"constructor\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>.at<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'0xf0406e7bcb75326a9b9fa47a05d3ce2126d95148'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nundefined\\n<span class=\\\"token operator\\\">></span> greeter2.address\\n<span class=\\\"token string\\\">\\\"0xf0406e7bcb75326a9b9fa47a05d3ce2126d95148\\\"</span>\\n<span class=\\\"token operator\\\">></span> greeter2.greet<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token string\\\">\\\"Hello Ethereum!\\\"</span>\\n<span class=\\\"token operator\\\">></span></code></pre>\\n      </div>\\n<p>像上面这样获取到contract的代码然后直接调用<code class=\\\"language-text\\\">greeter2.greet()</code>，其实是在本地的EVM上调用， 不会修改blockchain上的状态的（因此也不用花费ether）。如果需要修改blockchain上的状态，需要通过<code class=\\\"language-text\\\">sendTransaction</code>调用。 我们先在一个没有ehter的账户上调用一下试试：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> pa <span class=\\\"token operator\\\">=</span> eth.accounts<span class=\\\"token punctuation\\\">[</span>1<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token string\\\">\\\"0x53707514492dda75eccb8ff621759af7f0f3c0f0\\\"</span>\\n<span class=\\\"token operator\\\">></span> greeter2.greet.sendTransaction<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>from: pa<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\nError: insufficient funds <span class=\\\"token keyword\\\">for</span> gas * price + value\\n    at web3.js:3143:20\\n    at web3.js:6347:15\\n    at web3.js:5081:36\\n    at web3.js:4137:16\\n    at <span class=\\\"token operator\\\">&lt;</span>anonymous<span class=\\\"token operator\\\">></span>:1:1\\n\\n<span class=\\\"token operator\\\">></span> eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa<span class=\\\"token punctuation\\\">)</span>\\n0</code></pre>\\n      </div>\\n<p>看来，没钱真的不行啊。那我们在之前有ether的账户（之前有85ether，不过由于每次都交易都需要挖矿入链， 又多产生了一些，最后另外新开了一个账号来mine，才让pa0这个账号没有新增ether）上试一下呢：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> personal.unlockAccount<span class=\\\"token punctuation\\\">(</span>pa0<span class=\\\"token punctuation\\\">)</span>\\nUnlock account 0xa736f13951da77c39e035c4c1b1970478a758340\\nPassphrase:\\n<span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token operator\\\">></span> eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa0<span class=\\\"token punctuation\\\">)</span>\\n109991138204000000000\\n<span class=\\\"token operator\\\">></span> greeter.greet.sendTransaction<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>from: pa0<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token string\\\">\\\"0x5e4090be8ad2fcf6eeae05174f0e9eac3134a1857928d278f8ef4dd13ef2fded\\\"</span>\\n<span class=\\\"token operator\\\">></span> eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa0<span class=\\\"token punctuation\\\">)</span>\\n109991138204000000000\\n<span class=\\\"token operator\\\">></span> txpool.status\\n<span class=\\\"token punctuation\\\">{</span>\\n  pending: 1,\\n  queued: 0\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">></span> txpool.status\\n<span class=\\\"token punctuation\\\">{</span>\\n  pending: 0,\\n  queued: 0\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">></span> eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa0<span class=\\\"token punctuation\\\">)</span>\\n109990737038000000000\\n<span class=\\\"token operator\\\">></span> greeter.greet.sendTransaction<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>from: pa0<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token string\\\">\\\"0xec58cbf73512fd5aad75b9e60ebbe5a90f3bf36ceec63f704a7bbdf2a23ca4a1\\\"</span>\\n<span class=\\\"token operator\\\">></span> txpool.status\\n<span class=\\\"token punctuation\\\">{</span>\\n  pending: 1,\\n  queued: 0\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">></span> eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa0<span class=\\\"token punctuation\\\">)</span>\\n109990335872000000000\\n<span class=\\\"token operator\\\">></span></code></pre>\\n      </div>\\n<p>可以看出来，每次都需要消费<code class=\\\"language-text\\\">109991138204000000000 - 109990737038000000000 == 109990737038000000000 - 109990335872000000000 == 401165999996928</code>个wei，wei是以太坊的最小单位，<code class=\\\"language-text\\\">1 ether == 10 ** 18 wei</code>， 所以执行一次<code class=\\\"language-text\\\">greet</code>交易，需要花费<code class=\\\"language-text\\\">401165999996928 / 10 ** 18 == ~=0.0004</code>个ether，现在差不多1快rmb了。 我们可以看到，字符串确实存到blockchain上了：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> eth.getStorageAt<span class=\\\"token punctuation\\\">(</span>greeter.address<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token string\\\">\\\"0x000000000000000000000000a736f13951da77c39e035c4c1b1970478a758340\\\"</span></code></pre>\\n      </div>\\n<p>如果我们最后不需要这个合约了， 我们可以把他删除， 避免占用blockchain的空间：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token operator\\\">></span> personal.unlockAccount<span class=\\\"token punctuation\\\">(</span>eth.accounts<span class=\\\"token punctuation\\\">[</span>0<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\nUnlock account 0xa736f13951da77c39e035c4c1b1970478a758340\\nPassphrase:\\n<span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token operator\\\">></span> greeter.kill.sendTransaction<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>from: eth.accounts<span class=\\\"token punctuation\\\">[</span>0<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">></span> eth.getCode<span class=\\\"token punctuation\\\">(</span>greeter.address<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token string\\\">\\\"0x60606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610066575b600080fd5b341561005c57600080fd5b6100646100f4565b005b341561007157600080fd5b610079610185565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b957808201518184015260208101905061009e565b50505050905090810190601f1680156100e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610183576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b61018d61022d565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102235780601f106101f857610100808354040283529160200191610223565b820191906000526020600020905b81548152906001019060200180831161020657829003601f168201915b5050505050905090565b6020604051908101604052806000815250905600a165627a7a723058206787dd51eae8103738c5112e2d5c1636972e888ace270061dd0cf0e3f802f4cc0029\\\"</span>\\n<span class=\\\"token operator\\\">></span> txpool.status\\n<span class=\\\"token punctuation\\\">{</span>\\n  pending: 1,\\n  queued: 0\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">></span> txpool.status\\n<span class=\\\"token punctuation\\\">{</span>\\n  pending: 0,\\n  queued: 0\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">></span> eth.getCode<span class=\\\"token punctuation\\\">(</span>greeter.address<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token string\\\">\\\"0x\\\"</span>\\n<span class=\\\"token operator\\\">></span> eth.getBalance<span class=\\\"token punctuation\\\">(</span>pa0<span class=\\\"token punctuation\\\">)</span>\\n109990141400000000000</code></pre>\\n      </div>\\n<p>注意<code class=\\\"language-text\\\">kill</code>之后要mine才可以修改blockchain上的状态。也可以看出，kill也是需要花费gas的，当然，远比执行contract要低， 相当于网络进行了补贴， 否则估计就没人愿意删除合约了，这样会导致网络膨胀。 注意， 只有contract的owner才可以kill掉此contract， 其他人也能调用kill方法， 但是是没办法删掉contract的， 而且还扣了gas（貌似还比较高）。</p>\\n<p>ok，我们已经实现了一个Ethereum版本的<code class=\\\"language-text\\\">Hello World</code>， 后面我们就来考虑自己发一个币吧。</p>\\n<h1 id=\\\"参考资料\\\"><a href=\\\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考资料</h1>\\n<ul>\\n<li><a href=\\\"https://www.ethereum.org\\\">https://www.ethereum.org</a></li>\\n<li><a href=\\\"http://www.ethdocs.org\\\">http://www.ethdocs.org</a></li>\\n<li><a href=\\\"https://github.com/ethereum/go-ethereum/wiki/\\\">https://github.com/ethereum/go-ethereum/wiki/</a></li>\\n<li><a href=\\\"https://solidity.readthedocs.io\\\">https://solidity.readthedocs.io</a></li>\\n<li><a href=\\\"http://web3js.readthedocs.io/en/1.0/index.html\\\">http://web3js.readthedocs.io/en/1.0/index.html</a> </li>\\n</ul>\",\"timeToRead\":14,\"excerpt\":\"本文介绍以太坊开发的基础知识。 为啥不讲比特币呢 很少有基于比特币做开发的， 如果大家有兴趣可以看下面几个资料： Mastering Bitcoin 2nd Edition Bitcoin and Cryptocurrency Technologies   Coursera…\",\"fields\":{\"slug\":\"/blockchain-ethereum-0/\"},\"frontmatter\":{\"title\":\"区块链系列四：Hello Ethereum!\",\"date\":\"2018-04-03\",\"category\":\"Blockchain\",\"tags\":[\"Ethereum\",\"以太坊\"]}}},{\"node\":{\"html\":\"<p><a href=\\\"https://magicly.me/blockchain-crytography-hash/\\\">区块链系列二：区块链涉及到的密码学知识之Hash</a>中我们介绍了Hash散列函数的一些特性和应用，本章我们继续来介绍一些常用的密码学知识。</p>\\n<!-- more -->\\n<h1 id=\\\"历史上的密码\\\"><a href=\\\"#%E5%8E%86%E5%8F%B2%E4%B8%8A%E7%9A%84%E5%AF%86%E7%A0%81\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>历史上的密码</h1>\\n<h2 id=\\\"凯撒密码\\\"><a href=\\\"#%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>凯撒密码</h2>\\n<p>据说是以前凯撒大帝用过的密码， 方法很简单， 将字母表依次往后移动几个位置。具体移动的数量n就是密钥了。比如移动两个，则：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token constant\\\">A</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token constant\\\">C</span>\\n<span class=\\\"token constant\\\">B</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token constant\\\">D</span>\\n<span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token constant\\\">Y</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token constant\\\">A</span>\\n<span class=\\\"token constant\\\">Z</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token constant\\\">B</span></code></pre>\\n      </div>\\n<p>用这种方法加密<code class=\\\"language-text\\\">hello</code>， 则密文是<code class=\\\"language-text\\\">jgnnq</code>。 拿到密文后再倒着将每个字母往前移动n个位置就解密了。大家可以试着解密<code class=\\\"language-text\\\">dmqemejckp</code>, 密钥是2。</p>\\n<p>凯撒密码有个问题就是很容易破解， 因为总共只有26种可能（移动27个位置， 跟移动1个位置是一样的），很容易就暴力破解了。只需要把0-25都试一下， 看看“解密”出来的文字哪个是有具体含义的即可。比如大家可以破解一下”thnpj”。</p>\\n<h2 id=\\\"简单替换\\\"><a href=\\\"#%E7%AE%80%E5%8D%95%E6%9B%BF%E6%8D%A2\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>简单替换</h2>\\n<p>凯撒密码简单很容易破解， 原因是因为密钥空间（密钥的可选择范围）太小了， 因为当我们把A映射到B的时候， 其他字母的映射关系就全部决定好了。后来出现了一种变种， 可以任意指定字母之间的映射关系，如下图是其中一种：\\n<img src=\\\"/blogimgs/blockchain/simple-replace.png\\\" alt=\\\"简单替换密码替换表\\\"></p>\\n<p>我们可以知道这种加密方式的密码空间是<code class=\\\"language-text\\\">26! = 4.0329146112660565e+26</code>，这么巨大的密钥空间， 如果暴力破解的话是不实际的。 我们假设每秒可以遍历100亿个密钥， 则总共需要<code class=\\\"language-text\\\">26! / (10 ** 10 * 3600 * 24 * 365) == 12.7亿年</code>！！！</p>\\n<p>但是这种加密方式有一个问题， 就是同一个明文字符总是加密成同一个密文字符，比如把A替换成D，则所有的A都会替换成D。 于是出现了一种叫做频率分析的破解方法。 大概原理是：正常的语言中， 每个字符出现的频率是不一样的， 可以统计一下明文中的字符出现次数， 假设最高频的是A，再统计一下密文中最高频的字符，假设是D，则很有可能密文中的D是对应明文A。 一层层分析，就能实际破解这种加密方式了。</p>\\n<h2 id=\\\"enigma\\\"><a href=\\\"#enigma\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Enigma</h2>\\n<p>这是二战中德国使用的一种密码机， 当时号称没人能破解的， 刚开始的时候给了德国巨大战争优势。 后来我们的图灵大神， 终于还是把它给破解了， 对二战的胜利做出了巨大的贡献。 大家可以看<a href=\\\"https://movie.douban.com/subject/10463953/\\\">模仿游戏 The Imitation Game (2014)</a>这部电影， 里面就讲的这段历史。</p>\\n<p>PS，话说当时破解确实遇到了很大问题， 图灵也是一筹莫展， 后来好像是发现每次密文开头都是一样的（写的是元首万岁？记不太清了），然后找到方法把密钥空间大大缩小了， 然后才造出了破解机器， 为后来计算机的出现打下了坚实的基础。 这个故事告诉我们， 再完美的密码系统因为有了不完美的人的参与， 也就变得不完美了。</p>\\n<h1 id=\\\"对称加密\\\"><a href=\\\"#%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>对称加密</h1>\\n<p>对称加密就是加密密钥和解密密钥是一样的， 比如我们前面说的几种加密方式都是对称密钥。</p>\\n<p>因为所有的明文信息我们都能编码成二进制比特， 也就可以等价的转化成一个数字， 所以我们后面讲解的时候， 明文全部用一个数表示即可， 大家应该知道，这个数可以是对应一段文本， 也可以是一部电影。</p>\\n<p>最简单的对称加密就是在明文上加一个数。 比如明文是1， 我选择一个密钥37， 然后加起来发送给你， 你得到38， 然后用我们提前约定好的37去减一下， 就解密出来得到1了。 而对于那些窃听者， 因为他们不知道密钥是37， 所以拿到加密后的38， 也没办法知道明文是1。</p>\\n<p>对称加密主要有DES和AES。 目前DES已经不安全了，不建议使用。 1997年NIST（美国标准技术研究所）公开募集AES（Advanced Encryption Standard）算法， 全世界很多密码学家投递了很多算法， 最后经过各种严格的筛选， 最后于2000年10月2日， Rijndael算法获胜，被选为NIST的AES标准。NIST当时公开选拔AES的时候设定了条件：被选为AES的密码算法必须无条件地免费提供给全世界使用。正是这样， 我们现在才能免费使用AES。</p>\\n<p>说到这里很多人可能会说我自己也可以设计一个算法， 不要让别人知道就行了啊。 这种做法叫隐蔽式安全性(security by obscurity)，只是在一厢情愿地以为别人不能破解而已， 其实并没有经过真正的检验。 要知道像AES这样通过竞争来实现的标准， 都是发动了全世界的密码学家去设计、尝试破解，最后得到一个很多专家都觉得安全的算法。 自己实现“秘密算法”，就好比为了锁门， 不是去买一个品牌商家的锁， 而是自己系一根绳子把门拴起来一样。</p>\\n<h1 id=\\\"非对称加密\\\"><a href=\\\"#%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>非对称加密</h1>\\n<p>上面说的对称加密有一个很大的弊端， 那就是加密和解密必须是用同一个密钥。 那么问题来了， 怎么把密钥安全地交给接收方呢？ 显然， 用对称加密方法是没办法通过线上传递密钥的。 办法就是发送者和接受者线下碰头， 当面商量好密钥。甚至以前打仗时候， 都是将密钥锁在保险箱里， 用战斗机护送的。显然， 这个成本有点高。</p>\\n<p>后来密码学家们发明了非对称加密， 即加密密钥（也叫公钥， public key， 简写为pk）和解密密钥（也叫私钥， secret key， 简写为sk）不一样。 假设Alice要给Bob通信， 则通信过程变成了这样：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">Alice<span class=\\\"token punctuation\\\">:</span> Bob我要给你说话， 你把公钥pk发给我。\\nBob<span class=\\\"token punctuation\\\">:</span> 好的， 这是我的公钥pk。\\nAlice<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">这是我用公钥加密后的内容pk</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span>。\\nBob<span class=\\\"token punctuation\\\">:</span> 我用sk解密看看， 哦， <span class=\\\"token function\\\">sk</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">pk</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>解密出来是x啊。 <span class=\\\"token function\\\">这是我的回复sk</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span>。\\nAlice<span class=\\\"token punctuation\\\">:</span> 我用pk解密看看， 哦， <span class=\\\"token function\\\">pk</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">sk</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>解密出来是y啊。\\n<span class=\\\"token operator\\\">...</span><span class=\\\"token operator\\\">...</span></code></pre>\\n      </div>\\n<p>我们可以看到， 用公钥加密的内容pk(x)可以用私钥解密， 即<code class=\\\"language-text\\\">sk(pk(x)) === x</code>；而用私钥加密的内容sk(y)可以用公钥解密， 即<code class=\\\"language-text\\\">pk(sk(y)) === y</code>。</p>\\n<p>广泛使用的非对称加密方法有RSA，用到了一些数论方面的数学原理， 有兴趣的可以自己看看相关文章：</p>\\n<ul>\\n<li><a href=\\\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\\\">RSA算法原理（一）</a></li>\\n<li><a href=\\\"https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95\\\">RSA加密演算法</a></li>\\n</ul>\\n<p>一般说来非对称加密算法比对称加密算法慢很多，可能有几百倍， 因此我们一般将对称加密算法和非对称加密算法联合起来一起使用。即用非对称加密算法先协商出对称加密的密钥， 然后用对称加密算法去传递信息。 因为密钥（可能就几百字节）相比信息本身（可能几百兆甚至更大）要小很多， 所以这种混合加密方式综合了两者优点。</p>\\n<p>由于用sk加密的内容，能用pk解密， 因此非对称加密算法还可以用于数字签名。 所谓数字签名，类似于现实生活中的签名， 比如A答应了B一件事， 为了怕事后A返回， B可以要求A把答应的东西写到字上， 然后签个名， 这样A就不能抵赖了。 在线上的话， A答应了B一件事情x， 则可以要求A用他的私钥sk对x进行加密， 得到sk(x)然后和x一起发送出来。 因为公钥是可以公开的， 任何人都可以拿到， 因此大家都可以用公钥pk去验证A的签名， 即只需要<code class=\\\"language-text\\\">pk(sk(x)) === x</code>既可以认为x这件事情是A说的。 因为没有人知道A的私钥sk， 所以不可能有其他人能编造出x和sk(x)，使得刚好<code class=\\\"language-text\\\">pk(sk(x)) === x</code>的。 对应到比特币里， x这件事可能就是<code class=\\\"language-text\\\">“将pk地址（比特币地址是公钥pk取两次hash）里的钱转10块到pk1地址”</code>， 然后附带上sk(x)， 则网络上其他节点会验证一下<code class=\\\"language-text\\\">pk(sk(x)) === x</code>， 如果为真， 则说明x这条转账记录是这笔钱的主人说的， 否则就拒绝这笔交易。</p>\\n<h1 id=\\\"认证\\\"><a href=\\\"#%E8%AE%A4%E8%AF%81\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>认证</h1>\\n<p>非对称加密解决了对称加密的密码配送难题， 但是依然不能解决中间人攻击。所谓中间人攻击，是指第三方攻击者对Alice伪装成Bob， 对Bob伪装成Alice， 如下图：\\n<img src=\\\"/blogimgs/blockchain/middleman-attack.png\\\" alt=\\\"中间人攻击\\\"></p>\\n<p>似乎又遇到了公钥配送的问题。解决方法是找一个可信的中间机构T， Bob将自己的公钥pkb发送给T， T用自己的私钥skt对B的公钥pkb进行签名skt(pkb)， 这样Alice收到B的公钥pkb，以及认证机构T的签名skt(pkb)，只需要用认证机构T的公钥pkt验证一下<code class=\\\"language-text\\\">pkt(skt(pb)) === pkb</code>是否为真即可， 为真则说明“Bob”提供的公钥真的是Bob的公钥。这样的中间机构T我们一般叫做CA，即Certification Authority。这样我们就能安全地。。。。等等， 你刚刚好像说要用CA的公钥pkt去验证签名和Bob的公钥啊， 那怎么知道pkt真的是T的公钥呢？ 额， 这个， 我们可以再找一个中间机构T2, 去认证T嘛。   那T2的公钥又怎么办呢？。。。。T， T2, T3。。。这样会形成一个CA层级结构， 但是最后我们总会到一个最顶层的CA（叫做Root CA）， 那Root CA的公钥我们要怎么认证呢？ 说得好！ Root CA的证书是自签名的， 并且它的公钥和证书是提前存储到电脑里的， 也就是说电脑出厂的时候就给你装了Root CA的证书和公钥， 然后用Root CA的公钥可以认证T3的公钥， 用T3的公钥可以认证T2的公钥， 用T2的用过可以认证T的公钥， 最后用T的公钥可以认证Bob的公钥。 这一整套CA结构叫做公钥基础设施(Public-Key Infrastructure， 简写PKI)。 你可能还会继续问， 我们怎么相信电脑厂家不会偷偷地换一个假的Root CA进去呢？额， 这个我只能说，我们也没别的办法。 事实上， 联想就这么干过， 有兴趣的可以搜superfish，或者看<a href=\\\"http://tech.sina.com.cn/z/superfish/\\\">这里</a>。 </p>\\n<p>当然，我们也是可以自己导入证书到系统里面去的。 比如我们想抓包分析一个APP的接口， 如果APP跟服务端是用的https连接， 我们哪怕抓到包看到的也是乱码， 这时候可以把抓包工具（比如charles）的证书导入到系统里面，则这个抓包工具就可以发动“中间人攻击”，破解抓到的包了。</p>\\n<h1 id=\\\"参考资料\\\"><a href=\\\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考资料</h1>\\n<ul>\\n<li><a href=\\\"https://book.douban.com/subject/26822106/\\\">图解密码技术（第3版）</a></li>\\n</ul>\",\"timeToRead\":3,\"excerpt\":\"区块链系列二：区块链涉及到的密码学知识之Hash 中我们介绍了Hash散列函数的一些特性和应用，本章我们继续来介绍一些常用的密码学知识。 历史上的密码 凯撒密码 据说是以前凯撒大帝用过的密码， 方法很简单， 将字母表依次往后移动几个位置。具体移动的数量n…\",\"fields\":{\"slug\":\"/blockchain-crytography-desrsa/\"},\"frontmatter\":{\"title\":\"区块链系列三：区块链涉及到的密码学知识之加密、签名与认证\",\"date\":\"2018-03-31\",\"category\":\"Blockchain\",\"tags\":[\"BTC\",\"密码学\",\"crytography\"]}}},{\"node\":{\"html\":\"<p>在区块链开发中涉及到很多密码学知识， 不懂得相关原理，可能很难理解设计思路更不要说阅读源码了。 我们就花一点时间来了解下区块链开发设计到的密码学知识， 本文简单介绍Hash函数的一些性质， 要想更深入了解请阅读相关专业文献。</p>\\n<!-- more -->\\n<h1 id=\\\"什么是hash函数\\\"><a href=\\\"#%E4%BB%80%E4%B9%88%E6%98%AFhash%E5%87%BD%E6%95%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>什么是Hash函数</h1>\\n<p>这里说的Hash函数不是哈希表这种数据结构， 而是一种密码学概念，具有如下一些性质：</p>\\n<ul>\\n<li>输入是任意长度，输出为固定长度（比如256bits）</li>\\n<li>计算起来很高效</li>\\n<li>输入改动一点点（哪怕只是一个bit），输出结果千差万别</li>\\n<li>…</li>\\n</ul>\\n<p>常用的Hash函数有MD5， SHA1， SHA256等。 有很多在线工具可以计算Hash函数的值， 比如：<a href=\\\"http://tool.oschina.net/encrypt?type=2%EF%BC%8C\\\">http://tool.oschina.net/encrypt?type=2，</a> 我们来看一下<code class=\\\"language-text\\\">hello blockchain!</code>的几种Hash函数值：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">md5<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">4</span>b7cf9b1f0e3c92c3ca571a5ea4d3fda\\nsha1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">57</span>bf459d6c142f3427258089e386c43d106a72ab\\nsha256<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">108</span>be1bede687534d56a8229d4deabccfd9ee83358b15e3e95286915b8a4f648</code></pre>\\n      </div>\\n<p>在mac下有相应的命令行可以计算这些Hash函数值，md5和shasum。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  Desktop <span class=\\\"token function\\\">cat</span> helloblockchain.txt\\nhello blockchain<span class=\\\"token operator\\\">!</span>% // 这里的%不是文件内容，而是因为最后一行没有\\\\n导致命令行下显示的问题\\n➜  Desktop md5 helloblockchain.txt\\nMD5 <span class=\\\"token punctuation\\\">(</span>helloblockchain.txt<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> 4b7cf9b1f0e3c92c3ca571a5ea4d3fda\\n➜  Desktop shasum helloblockchain.txt\\n57bf459d6c142f3427258089e386c43d106a72ab  helloblockchain.txt\\n➜  Desktop shasum -a 256 helloblockchain.txt\\n108be1bede687534d56a8229d4deabccfd9ee83358b15e3e95286915b8a4f648  helloblockchain.txt</code></pre>\\n      </div>\\n<p>在linux下和windows命令可能略有不同， 大家自己查一下即可。 这里有个坑要注意，<a href=\\\"https://www.zhihu.com/question/22808787\\\">linux以及mac下用vim编辑文件， 会在每一行后自动给你加上<code class=\\\"language-text\\\">\\\\n</code></a>，即使只有一行！也就是说你输入的是<code class=\\\"language-text\\\">hello blockchain!</code>， 用vim看上去也是只有一行， 但是其实存储的时候在最后多存储了一个<code class=\\\"language-text\\\">\\\\n</code>， 而用vim你还看不出来。 后来用VSCode打开文件才发现多了一个换行， 我说怎么hash值完全不一样呢。 这也体现了hash函数的一大性质： 任意一点点改动， 最后hash值都差别很大！</p>\\n<p>作为密码学概念， 我们希望Hash函数具有如下三个特征，我们才认为此Hash函数是密码学安全的：</p>\\n<ol>\\n<li>Collision Free</li>\\n<li>Hiding</li>\\n<li>Puzzle Friendly</li>\\n</ol>\\n<h1 id=\\\"collision-free\\\"><a href=\\\"#collision-free\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Collision Free</h1>\\n<p>这个性质说的是没有人能够找到两个不同的输入， 它们的hash输出是相同的， 即不能找到<code class=\\\"language-text\\\">x != y</code>但是<code class=\\\"language-text\\\">H(x) == H(y)</code>。</p>\\n<p>注意， 我们这里说的是“没有人能够找到”，而不是说不存在！大家仔细想想就会知道， 冲突（Collision）肯定是存在的。 为啥呢？因为我们说了输出是固定长度的， 比如256bits，那么输出空间大小就只有<code class=\\\"language-text\\\">Math.pow(2, 256)</code>种可能。而输入可以是任意长度，那输入空间远比输出空间要大，根据小时候学过的<a href=\\\"https://zh.wikipedia.org/wiki/%E9%B4%BF%E5%B7%A2%E5%8E%9F%E7%90%86\\\">鸽巢原理</a>就知道至少有两个<code class=\\\"language-text\\\">x != y</code>使得<code class=\\\"language-text\\\">H(x) == H(y)</code>的。</p>\\n<blockquote>\\n<p>鸽巢原理：若有n个笼子和n+1只鸽子，所有的鸽子都被关在鸽笼里，那么至少有一个笼子有至少2只鸽子。</p>\\n</blockquote>\\n<p>对于输出是256bits的hash函数，不管Hash函数是什么，只要尝试<code class=\\\"language-text\\\">Math.pow(2, 130)</code>个输入， 就有<code class=\\\"language-text\\\">99.8%</code>的概率会找到冲突， 最差也就是找<code class=\\\"language-text\\\">Math.pow(2, 256) + 1</code>次就肯定能找到冲突，平均是<code class=\\\"language-text\\\">Math.pow(2, 128)</code>次。但是问题是，这个需要花太久太久的时间！多久呢？我在自己的Mac Pro上简单测试了一下， 大概每秒计算2000000次hash，则大概需要花<code class=\\\"language-text\\\">Math.pow(2, 128) / (3600 * 24 * 365 * 2000000) ~= 5 * Math.pow(10, 24)</code>年，远比宇宙诞生的时间久。引用普林斯顿的课程<a href=\\\"http://bitcoinbook.cs.princeton.edu/\\\">Bitcoin and Cryptocurrency Technologies</a>里的一段话：</p>\\n<blockquote>\\n<p>For another way of thinking about this, we can say that, if every computer ever made by humanity was computing since the beginning of the entire universe, up to now, the odds that they would have found a collision is still infinitesimally small. So small that it’s way less than the odds that the Earth will be destroyed by a giant meteor in the next two seconds.</p>\\n</blockquote>\\n<p>这段话的大概意思是说把全人类从古自今曾经造出来过的电脑都拿来从宇宙一开始就计算，那么到今天为止找到冲突的概率依然很小很小， 有多小呢？比接下来的两秒钟地球被一块大流星撞毁的概率还小， 而这件事。。。。。。。（2s过去）。。。。并没有发生。</p>\\n<p>不过这段话应该是在2015年说的， 这两年发生了很多事情， 其中一件事情就是比特币大涨， 导致专门用于挖矿的矿机（ASIC）出现， 计算hash的速度大幅度提升。<a href=\\\"https://magicly.me/blockchain-btc-mining/\\\">区块链系列一：现在挖比特币有多难</a>中我们提到，目前比特币矿机全网的算力大概是每秒<code class=\\\"language-text\\\">23555072455973170000</code>次hash计算，我们来看看这么大的算力平均花多久能找到冲突呢。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">128</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3600</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">24</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">365</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">23555072455973170000</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">~</span><span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4600</span>亿</code></pre>\\n      </div>\\n<p>宇宙年龄目前大概是130亿年， 也就是说如果这些矿机从宇宙诞生就开始计算hash， 则发现冲突的概率大概是<code class=\\\"language-text\\\">130 / 4600 ~= 3%</code>。注意我们还只是说的是挖比特币的矿机，并没有如作者说的<code class=\\\"language-text\\\">把全人类曾经造出来过的电脑都算上</code>, 换句话说仅仅只是挖比特币的矿机，就把一件概率曾经远小于接下来2s地球被流星击中而毁灭的事情的概率提高到了3%！！！想想就觉得可怕！！！</p>\\n<p>这两年hash算力有这么大的提升， 完全是由于比特币大涨， 人们为了在挖矿中占据优势， 开发了大量ASIC。我们之前说一个蚂蚁矿机S9的算力是13.5Thash/s， 而我的mac pro大概是2Mhash/s， 也就是一台S9在计算hash方面，相当于<code class=\\\"language-text\\\">13.5T / 2M ~= 6.7M</code>，670万台Mac Pro！！！</p>\\n<p>那么有没有更快的方法找到冲突呢？答案是，对于有些hash函数，有。 对于其他的hash函数， 我们不知道！注意， 是不知道，而不是没有！没有任何hash函数被“证明”是Collision Free的。只是有些hash函数人们花了大量时间去找， 但是还没有找到，所以暂时认为是collision free的，而有些曾经认为是collision free的hash函数被找到有效构造冲突的方法了，比如MD5，因此在安全性要求较高的场景就建议不再使用MD5了。比特币里使用的是sha256。</p>\\n<p>PS， 破解MD5的是时任山东大学教授的<a href=\\\"https://baike.baidu.com/item/%E7%8E%8B%E5%B0%8F%E4%BA%91/29050\\\">王小云教授</a>。 另外，Google真正找到了一个SHA1的碰撞的实例，因此也被认为是不安全的了。 可以参看： <a href=\\\"https://www.leiphone.com/news/201711/CD1xUXxl8ByzS1nr.html\\\">https://www.leiphone.com/news/201711/CD1xUXxl8ByzS1nr.html</a></p>\\n<h2 id=\\\"应用案例：消息摘要message-digests\\\"><a href=\\\"#%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%B6%88%E6%81%AF%E6%91%98%E8%A6%81message-digests\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>应用案例：消息摘要Message digests</h2>\\n<p>那么hash函数的这条性质有什么用呢？Hash函数的输出， 可以作为信息摘要。 </p>\\n<p>我们说“没有人能够”找到<code class=\\\"language-text\\\">x != y</code>使得<code class=\\\"language-text\\\">H(x) == H(y)</code>， 反过来也就是只要<code class=\\\"language-text\\\">H(x) == H(y)</code>，我们就可以认为<code class=\\\"language-text\\\">x == y</code>的。这样我们要比较两个文件是否一致， 不管这两个文件有多大， 我们只需要比较他们的hash输出即可，而hash输出只有256bits，比较非常快。 </p>\\n<p>有个典型的应用是网盘的“秒传”功能， 用过网盘的都知道， 在上传某些大文件（比如某部电影）的时候， 可能几秒就传完了。一部几个G的电影， 几秒就传到网盘服务器上去了， 你们家网速真的有这么快么？！事实是， 网盘先在本地计算电影的hash值， 然后把输出的256bits发给服务器， 如果服务器上之前已经有某个文件的hash值等于现在的256bits，则认为网盘服务器上已经有这个文件了， 就不需要传了， 只需要在服务器后台加条记录链接过去就可以了。 所以我们会发现越是热门的电影等越是容易秒传。 而如果你自己拍的视频被“秒传”了， 那你就得想想是怎么回事儿了。</p>\\n<p>文件摘要还有一个用处是验证下载的文件是否完整没有被篡改过。一般下载软件都建议大家去官网下载， 但是有时候官网下载速度比较慢（尤其是官网在国外的时候），这时候很多人会选择在其他论坛或者使用p2p软件（比如迅雷）下载， 但是这样其实是有安全问题的。 有可能你下载的软件已经被别人植入了病毒， 大家还记得之前的<a href=\\\"https://zh.wikipedia.org/zh-cn/XcodeGhost%E9%A3%8E%E6%B3%A2\\\">Xcode Ghost风波</a>么？那么我们就可以通过从第三方下载软件， 下载完成之后， 计算软件的hash值， 然后比较这个hash值是否等于官网上的hash值（一般官网都会提供软件的好几种hash值），如果相同，我们就可以放心地使用此软件。这样，既提高了软件下载速度，也保证了安全性。</p>\\n<h1 id=\\\"hiding\\\"><a href=\\\"#hiding\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hiding</h1>\\n<p>我们希望hash函数满足这样的性质：知道<code class=\\\"language-text\\\">H(x)</code>，不可能推算出<code class=\\\"language-text\\\">x</code>。</p>\\n<p>不过上面这样描述不太准确， 因为如果x的取值范围有限， 比如只是0-9， 则我们可以对0-9求H(x)， 然后直接反查就可以得出x了。准确的描述应该如下：</p>\\n<blockquote>\\n<p>如果我们从一个满足high min-entropy的概率分布中选出一个秘密的值r， 则如果知道H(r || x)的情况下不能推算出x， 则我们说H函数满足Hiding性质。</p>\\n</blockquote>\\n<p>high min-entropy大概意思是从一个很大的空间中随机选择一个值，每个值的概率基本是一样的。比如我们从“所有256bits长的字符串”这个空间中等概率的选择一个字符串，则选到具体某个字符串的概率是<code class=\\\"language-text\\\">1 / Math.pow(2, 256)</code>， 这是一个极小的数字。<code class=\\\"language-text\\\">||</code>表示字符串拼接， 比如<code class=\\\"language-text\\\">hello || blockchain! === hello blochain!</code>。</p>\\n<p>这里拼接一个从很大空间中选出来的secret值r的目的就是为了让<code class=\\\"language-text\\\">r || x</code>的取值范围变得很大， 目的跟密码加盐再做hash差不多。</p>\\n<h2 id=\\\"应用案例：承诺commitments\\\"><a href=\\\"#%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%89%BF%E8%AF%BAcommitments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>应用案例：承诺Commitments</h2>\\n<p>我们来做一个游戏， 我想一个0-9的数， 你来猜， 猜对算赢。如果我只是“想”一个数的话， 你永远赢不了，因为哪怕你猜对了，我也可以说我想的是另外一个数。如果我们是面对面的话， 可以这样， 我把数字写下来，放在信封里，把信封放在我们面前的桌子上， 你猜了数字之后， 我们打开信封，就能验证有没有猜对， 而我也不能抵赖或者偷偷修改之前写的数字。</p>\\n<p>如果在线上要怎么玩呢？因为我们可以找一个满足Collision Free和Hiding性质的函数H， 我想一个数字x， 然后把H(x)发出来给大家看到， 因为我们说H具有Collision Free性质， 所以我不可能事后说我写的数字其实是x1， 因为我找不到满足<code class=\\\"language-text\\\">x1 != x</code>并且<code class=\\\"language-text\\\">H(x1) == H(x)</code>的数字，所以我不能抵赖。但是你是可以把0-9都用H计算一遍， 然后跟H(x)对比，就能知道我想的x是多少了。</p>\\n<p>所以我还需要随机选择一个256bits的key， 然后把<code class=\\\"language-text\\\">H(key || x)</code>发出来，因为<code class=\\\"language-text\\\">key</code>的选择空间是<code class=\\\"language-text\\\">Math.pow(2, 256)</code>，你不可能去遍历所有可能的key来暴力计算所有的<code class=\\\"language-text\\\">H(key || x)</code>，因此就没办法知道<code class=\\\"language-text\\\">key || x</code>，也就没办法知道<code class=\\\"language-text\\\">x</code>了。同样，我还是不可能找到另一个不同的<code class=\\\"language-text\\\">key1</code>，使得<code class=\\\"language-text\\\">key1 != key</code>但是<code class=\\\"language-text\\\">H(key1 || x) == H(key || x)</code>的。这样就保证了我既不能抵赖，你也不能推算出<code class=\\\"language-text\\\">x</code>，对于你猜的数字y，只要事后我把<code class=\\\"language-text\\\">key</code>发出来，计算<code class=\\\"language-text\\\">H(key || x)</code>和<code class=\\\"language-text\\\">H(key || y)</code>，如果两者相等， 则认为<code class=\\\"language-text\\\">x == y</code>， 反之亦然。</p>\\n<p>除了玩猜数字游戏这个，还有哪些使用场景呢？博彩、在线扑克等使用这个特性， 就能一定程度保证庄家不会作弊。最近在构思用区块链技术解决在线poker的一些问题， 有兴趣私聊。</p>\\n<h1 id=\\\"puzzle-friendly\\\"><a href=\\\"#puzzle-friendly\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Puzzle Friendly</h1>\\n<p>对于n-bit的输出y，如果k是从一个high min-entropy的分布中选出来的，如果不可能在远小于<code class=\\\"language-text\\\">Math.pow(2, n)</code>的时间中找到x使得<code class=\\\"language-text\\\">H(k || x) == y</code>， 则我们说H具有Puzzle friendliness性质。</p>\\n<p>这个性质是说， 要想找到x， 使得<code class=\\\"language-text\\\">H(k || x) == y</code>， 没什么办法比随机乱猜更有效！</p>\\n<h2 id=\\\"应用案例：搜索谜题search-puzzle\\\"><a href=\\\"#%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%90%9C%E7%B4%A2%E8%B0%9C%E9%A2%98search-puzzle\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>应用案例：搜索谜题Search puzzle</h2>\\n<p>搜索谜题包括几个要素：</p>\\n<ul>\\n<li>hash函数H</li>\\n<li>puzzle-ID，需要是从high min-entropy分布中选出来的</li>\\n<li>目标范围Y</li>\\n</ul>\\n<p>这个问题的解x需要满足如下性质：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token constant\\\">H</span><span class=\\\"token punctuation\\\">(</span>id <span class=\\\"token operator\\\">||</span> x<span class=\\\"token punctuation\\\">)</span> ∈ <span class=\\\"token constant\\\">Y</span></code></pre>\\n      </div>\\n<p>假设hash函数H输出是n-bit，则输出空间大小为<code class=\\\"language-text\\\">Math.pow(2, n)</code>。Y的大小决定了问题的求解难度。如果Y的大小等于<code class=\\\"language-text\\\">Math.pow(2, n)</code>，则最容易，随便一个x都满足条件。如果Y的大小只有1， 则问题是最难的。Y范围越小，问题越难。</p>\\n<p>如果H是puzzle-friendly的，则没有什么方法比随机取x去尝试更有效。 事实上， 比特币的挖矿机制就利用了这个性质。</p>\\n<h1 id=\\\"总结\\\"><a href=\\\"#%E6%80%BB%E7%BB%93\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>总结</h1>\\n<p>本文我们讲了密码学领域的hash函数， 以及需要满足几个特征来保证其安全性。 最后要强调的是， 目前没有哪个函数被“数学证明”是满足这三个特征的， 只是有些函数人们在实际中花了大量精力去“破解”而没有成功，因此我们暂时认为其是“安全”的。所以，安全是一个相对以及不断发展变化的问题，就好比以前几十年都认为是安全的MD5， 后来也被发现是不安全的了。那么目前认为还是安全的sha256， 到哪有一天会被发现有问题呢？让我们拭目以待。</p>\\n<p>下一篇讲公钥加密机制。</p>\\n<h1 id=\\\"参考资料\\\"><a href=\\\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考资料</h1>\\n<ul>\\n<li><a href=\\\"http://bitcoinbook.cs.princeton.edu/\\\">http://bitcoinbook.cs.princeton.edu/</a></li>\\n</ul>\",\"timeToRead\":5,\"excerpt\":\"在区块链开发中涉及到很多密码学知识， 不懂得相关原理，可能很难理解设计思路更不要说阅读源码了。 我们就花一点时间来了解下区块链开发设计到的密码学知识， 本文简单介绍Hash函数的一些性质， 要想更深入了解请阅读相关专业文献。 什么是Hash函数 这里说的Hash…\",\"fields\":{\"slug\":\"/blockchain-crytography-hash/\"},\"frontmatter\":{\"title\":\"区块链系列二：区块链涉及到的密码学知识之Hash\",\"date\":\"2018-03-24\",\"category\":\"Blockchain\",\"tags\":[\"BTC\",\"密码学\",\"crytography\",\"hash\"]}}},{\"node\":{\"html\":\"<p>我们知道Node.js里充满着大量的异步， 后来出现了Promise以及async/await来解决”callback hell”的问题。我们就来看看promise以及async/await如何简化JS并发代码的编写， 最后再给出一份实现相同功能的Go代码。</p>\\n<!-- more -->\\n<h1 id=\\\"问题\\\"><a href=\\\"#%E9%97%AE%E9%A2%98\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>问题</h1>\\n<p>代码开发中经常会做的一件事就是去请求一个api， 并可能进一步根据api返回结果去获取访问新的接口。 这里我们构造一个问题：获取<a href=\\\"https://cnodejs.org/\\\">https://cnodejs.org/</a> 前10个主题的id、title、date、作者昵称以及第一个回复者的昵称。 cnodejs提供了api， <a href=\\\"https://cnodejs.org/api\\\">https://cnodejs.org/api</a> 这里的前两个接口就能满足我们的要求。 首先用<a href=\\\"https://cnodejs.org/api/v1/topics\\\">https://cnodejs.org/api/v1/topics</a> 接口获取到前10个topics， 然后取出每个topic的id去访问<code class=\\\"language-text\\\">get /topic/:id 主题详情</code>接口， 里面可以获取到回复数据。</p>\\n<h1 id=\\\"简单实现\\\"><a href=\\\"#%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>简单实现</h1>\\n<p>发起网络请求有很多方法， 我们这里采用<a href=\\\"https://github.com/axios/axios\\\">axios</a>库， 有几个好处， 其中包括同时支持Node.js和Browser。</p>\\n<p>我们直接用“最先进”的async/await来实现一个版本:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> axios <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"axios\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getFirst10TopicsIncludeFirstReplyAuthor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> response <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token string\\\">\\\"https://cnodejs.org/api/v1/topics?limit=10\\\"</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> json <span class=\\\"token operator\\\">=</span> response<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> first10 <span class=\\\"token operator\\\">=</span> json<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>topic <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n      id<span class=\\\"token punctuation\\\">:</span> topic<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span>\\n      title<span class=\\\"token punctuation\\\">:</span> topic<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">,</span>\\n      date<span class=\\\"token punctuation\\\">:</span> topic<span class=\\\"token punctuation\\\">.</span>create_at<span class=\\\"token punctuation\\\">,</span>\\n      author<span class=\\\"token punctuation\\\">:</span> topic<span class=\\\"token punctuation\\\">.</span>author<span class=\\\"token punctuation\\\">.</span>loginname\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> topic <span class=\\\"token keyword\\\">of</span> first10<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> response <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://cnodejs.org/api/v1/topic/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>topic<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> json <span class=\\\"token operator\\\">=</span> response<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> firstReply <span class=\\\"token operator\\\">=</span> json<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>replies<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    topic<span class=\\\"token punctuation\\\">.</span>firstReplyAuthor <span class=\\\"token operator\\\">=</span> firstReply <span class=\\\"token operator\\\">&amp;&amp;</span> firstReply<span class=\\\"token punctuation\\\">.</span>author<span class=\\\"token punctuation\\\">.</span>loginname<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> first10<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">getFirst10TopicsIncludeFirstReplyAuthor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h1 id=\\\"并发\\\"><a href=\\\"#%E5%B9%B6%E5%8F%91\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>并发</h1>\\n<p>上述代码简单直接， 用了async/await， 异步代码看上去基本上是同步的， 很直观易懂。 先发起一个请求， 获取10个topics的信息， 然后针对每个topic发起一个请求， 去获取第一条回复数据，最后把数据拼凑在一起返回。 由于后面的请求需要第一个请求返回的id， 因此必须等到第一个请求回来才可以发送后面的请求， 这块没有任何问题。 但是后面的10个请求完全是独立的， 因此可以并发请求，这样能大大缩短时间。比如每个请求需要花费1s， 则上述代码总共需要花费<code class=\\\"language-text\\\">1(第一个请求) + 10(后面10个请求) = 11s</code>， 而如果将第二步的请求完全并发则只需要<code class=\\\"language-text\\\">1(第一个请求) + 1(后面10个请求同时请求) = 2s</code>！！！</p>\\n<p>由于网络请求受网速影响很大不利于我们精确分析问题， 也避免大量的请求给Cnodejs服务造成影响， 我们在本地用<code class=\\\"language-text\\\">setTimout</code>模拟网络请求花费的时间。</p>\\n<p>上述代码在并发性上跟下面代码基本等价：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 模拟一次api网络请求花费1s</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">get10Topics</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> t1 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> total<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">const</span> t2 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`total cost: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">ms.`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">get10Topics</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>执行之后发现， 确实在11s左右：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  test-js git:<span class=\\\"token punctuation\\\">(</span>master<span class=\\\"token punctuation\\\">)</span> ✗ node p1.js\\ntotal cost: 11037ms.\\n<span class=\\\"token punctuation\\\">[</span> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 <span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\\\">Promise.all</a>可以同时发起多个Promise，等到所有Promise都完成了之后返回一个数组， 包含每个Promise的结果。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 模拟一次api网络请求花费1s</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">get10Topics2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> t1 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> promises <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> total<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    promises<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span>promises<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">const</span> t2 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`total cost: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">ms.`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">get10Topics2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>时间正如我们说的， 缩短成了2s！</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  test-js git:<span class=\\\"token punctuation\\\">(</span>master<span class=\\\"token punctuation\\\">)</span> ✗ node p2.js\\ntotal cost: 2005ms.\\n<span class=\\\"token punctuation\\\">[</span> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 <span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<h1 id=\\\"限流\\\"><a href=\\\"#%E9%99%90%E6%B5%81\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>限流</h1>\\n<p>上面第二种方法已经大大提高率效率， 而且请求数越多， 提高的效率越多。 前面的分析可以得出， 如果是获取前100个topics， 第一种串行的方法需要101s， 而第二种还是2s！！！</p>\\n<p>仔细想想你会发现哪里不对， 那就是第二种方法“太并发”了！10个请求可能还好， 如果同时并发100个请求， 那对服务器就会造成一定的影响， 如果是1000个，10000个， 那问题就更大了， 甚至到了一定程度， 会超过操作系统允许打开的连接数， 对客户端本身也会有很大的影响。</p>\\n<p>所以我们需要限制最大并发数，比如我们限制最大并发数为3， 则10个请求大概是3个3个一组， 总共会有4组（最后一组只有1个）， 总共时间是5s， 这也比11s提高了50%多。一种实现方式如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">get10Topics3</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> t1 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">MAX_CURRENCY</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> total<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token constant\\\">MAX_CURRENCY</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> promises <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token constant\\\">MAX_CURRENCY</span> <span class=\\\"token operator\\\">&amp;&amp;</span> j <span class=\\\"token operator\\\">&lt;=</span> total<span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      promises<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>j<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">const</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span>promises<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>r<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">const</span> t2 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`total cost: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">ms.`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">get10Topics3</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>看一下结果：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  test-js git:<span class=\\\"token punctuation\\\">(</span>master<span class=\\\"token punctuation\\\">)</span> ✗ node p3.js\\ntotal cost: 5012ms.\\n<span class=\\\"token punctuation\\\">[</span> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 <span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>还有什么问题么？</p>\\n<h1 id=\\\"one-more-step\\\"><a href=\\\"#one-more-step\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>One More Step</h1>\\n<p>上面的实现方法， 既利用了并发， 又对并发做了一定限制保证不至于把系统资源耗尽，似乎是完美的。 但是如果每个请求所需要的时间不一样呢？<code class=\\\"language-text\\\">get10Topics3</code>的实现方式是每三个一组， 等着三个都完成了， 再进行下一组请求。 那么如果三个任务中， 有一个花费的时间比较多， 另外两个任务完成了之后， 本来可以继续开始新的任务的， 现在必须等着第三个任务完成了才能开始新的任务。甚至如果三个任务需要的时间都不一样， 那么第一个需要等第二个和第三个， 第二个需要等第三个， 整个系统就被最慢的那个任务拖累了。 比如第一个任务需要1s， 第二个任务需要2s， 第三个任务需要3s， 则<code class=\\\"language-text\\\">get10Topics3</code>每组任务需要3s， 三组任务需要<code class=\\\"language-text\\\">3 * 3 = 9s</code>， 最后一组那个任务只需要1s， 总共需要<code class=\\\"language-text\\\">1 + 3 + 3 + 3 + 1 = 11s</code>， 当然这也比完全串行需要的时间<code class=\\\"language-text\\\">1 + 1 + 2 + 3 + 1 + 2 + 3 + 1 + 2 + 3 + 1 = 20s</code>要快不少。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 模拟一次api网络请求花费特定时间</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">get10Topics4</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> t1 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">MAX_CURRENCY</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> total<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token constant\\\">MAX_CURRENCY</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> promises <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token constant\\\">MAX_CURRENCY</span> <span class=\\\"token operator\\\">&amp;&amp;</span> j <span class=\\\"token operator\\\">&lt;=</span> total<span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> costtime <span class=\\\"token operator\\\">=</span> j <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">:</span> j <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 第一个任务1s， 第二个2是， 第三个3s...</span>\\n      promises<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>j<span class=\\\"token punctuation\\\">,</span> costtime <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">const</span> t3 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span>promises<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> t4 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`promise </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>i<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> cost: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>t4 <span class=\\\"token operator\\\">-</span> t3<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">ms`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>r<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">const</span> t2 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`total cost: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">ms.`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">get10Topics4</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>运行结果：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  test-js git:<span class=\\\"token punctuation\\\">(</span>master<span class=\\\"token punctuation\\\">)</span> ✗ node p4.js\\n10 1000\\n1 1000\\n2 2000\\n3 3000\\npromise 1 cost: 3002ms\\n4 1000\\n5 2000\\n6 3000\\npromise 4 cost: 2999ms\\n7 1000\\n8 2000\\n9 3000\\npromise 7 cost: 3002ms\\n10 1000\\npromise 10 cost: 1005ms\\ntotal cost: 11030ms.\\n<span class=\\\"token punctuation\\\">[</span> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 <span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>大家很容易想到， 把所需时间短的任务放一起并发执行， 这样就能减少互相等待的时间。比如把4个1s的放一起， 3个2s的放一起， 3个3s的放一起， 则总共需要时间为：<code class=\\\"language-text\\\">1 + 1 + 2 + 3 + 1 = 8s</code>， 又提高了一些。但是， 一方面我们在实际任务开始并完成之前， 并不知道具体哪个任务需要花多长时间， 另一方面不可能刚好总有花同样时间的任务能凑成一组， 甚至极端情况下， 每个任务所花时间都不一样。</p>\\n<p>仔细想想， 我们只需要这么做： 构建一个任务池， 一开始并发三个任务， 每个任务回来之后不用等其他两个任务， 直接看一下任务池还有任务么， 有的话就直接去做，直到所有任务都完成即可。</p>\\n<p>由于Node.js里面没有信号量来同步各个“线程”之间的工作， 这里用了递归并操作公共变量的方式实现， 如果读者有更好的方式可以给作者留言。注意， “并发地修改共享变量是万恶之源， 有data race的问题， 好在JS里面是单线程， 所以没有这个问题。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 模拟一次api网络请求花费特定时间</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> start <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">worker</span><span class=\\\"token punctuation\\\">(</span>tasks<span class=\\\"token punctuation\\\">,</span> result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> task <span class=\\\"token operator\\\">=</span> tasks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>task<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 任务结束</span>\\n    <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">const</span> costtime <span class=\\\"token operator\\\">=</span> task <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">:</span> task <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 第一个任务1s， 第二个2是， 第三个3s...</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>task<span class=\\\"token punctuation\\\">,</span> costtime <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>r<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> completes at time: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> start<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">worker</span><span class=\\\"token punctuation\\\">(</span>tasks<span class=\\\"token punctuation\\\">,</span> result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">get10Topics5</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> t1 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">MAX_CURRENCY</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> tasks <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> total<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    tasks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> promises <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">MAX_CURRENCY</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    promises<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">worker</span><span class=\\\"token punctuation\\\">(</span>tasks<span class=\\\"token punctuation\\\">,</span> result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span>promises<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> t2 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`total cost: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">ms.`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">get10Topics5</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>运行代码可以看到结果：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  test-js git:<span class=\\\"token punctuation\\\">(</span>master<span class=\\\"token punctuation\\\">)</span> ✗ node p5.js\\n10 1000\\n1 1000\\n2 2000\\n3 3000\\n1 completes at time: 2s, by worker0\\n4 1000\\n2 completes at time: 3s, by worker1\\n5 2000\\n4 completes at time: 3s, by worker0\\n6 3000\\n3 completes at time: 4s, by worker2\\n7 1000\\n5 completes at time: 5s, by worker1\\n8 2000\\n7 completes at time: 5s, by worker2\\n9 3000\\n6 completes at time: 6s, by worker0\\n10 1000\\n8 completes at time: 7s, by worker1\\n10 completes at time: 7s, by worker0\\n9 completes at time: 8s, by worker2\\ntotal cost: 8032ms.\\n<span class=\\\"token punctuation\\\">[</span> 1, 2, 4, 3, 5, 7, 6, 8, 10, 9 <span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>我们可以看到，一开始同时开启了<code class=\\\"language-text\\\">worker0, worker1, worker2</code>三个“线程”去做事， <code class=\\\"language-text\\\">worker0</code>在第2s（因为第1s是调用第一个api）完成了task1，它并没有等待， 而是继续开始做task4。然后又过了1s， worker1完成了task2然后去开始做task5， 而此刻worker0完成了task4并开始去做task6， 又过了1s， worker2才完成了task3然后去做task7…可以看到每个worker都在争先恐后地完成任务， 直到所有任务全部完成， 总共花了8s时间。 </p>\\n<h1 id=\\\"重新实现并发访问api\\\"><a href=\\\"#%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AEapi\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>重新实现并发访问API</h1>\\n<p>这里我将最早串行访问API接口的代码改成并发执行， 没有做限流， 读者可根绝前文分析修改成限流版本，就当留作小练习吧。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> axios <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"axios\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getFirst10TopicsIncludeFirstReplyAuthor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> axios\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"https://cnodejs.org/api/v1/topics?limit=10\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>response<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> json <span class=\\\"token operator\\\">=</span> response<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">const</span> first10 <span class=\\\"token operator\\\">=</span> json<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>topic <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n          id<span class=\\\"token punctuation\\\">:</span> topic<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span>\\n          title<span class=\\\"token punctuation\\\">:</span> topic<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">,</span>\\n          date<span class=\\\"token punctuation\\\">:</span> topic<span class=\\\"token punctuation\\\">.</span>create_at<span class=\\\"token punctuation\\\">,</span>\\n          author<span class=\\\"token punctuation\\\">:</span> topic<span class=\\\"token punctuation\\\">.</span>author<span class=\\\"token punctuation\\\">.</span>loginname\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n      <span class=\\\"token keyword\\\">const</span> promises <span class=\\\"token operator\\\">=</span> first10<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> axios\\n          <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://cnodejs.org/api/v1/topic/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>data<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>response <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">const</span> json <span class=\\\"token operator\\\">=</span> response<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">const</span> firstReply <span class=\\\"token operator\\\">=</span> json<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>replies<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n              id<span class=\\\"token punctuation\\\">:</span> json<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span>\\n              firstReplyAuthor<span class=\\\"token punctuation\\\">:</span> firstReply <span class=\\\"token operator\\\">&amp;&amp;</span> firstReply<span class=\\\"token punctuation\\\">.</span>author<span class=\\\"token punctuation\\\">.</span>loginname\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span>promises<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>rs <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> map <span class=\\\"token operator\\\">=</span> rs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>acc<span class=\\\"token punctuation\\\">,</span> e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n          acc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span> e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token keyword\\\">return</span> acc<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> topic <span class=\\\"token keyword\\\">of</span> first10<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          topic<span class=\\\"token punctuation\\\">.</span>firstReplyAuthor <span class=\\\"token operator\\\">=</span> map<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span>topic<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>firstReplyAuthor<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> first10<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">getFirst10TopicsIncludeFirstReplyAuthor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h1 id=\\\"go语言实现\\\"><a href=\\\"#go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Go语言实现</h1>\\n<p>其实Go跟Promise没啥关系， 只是最近刚好在用Go语言做东西， 因此拿来对比一下。Go里面很容易实现限流的功能，这里直接贴上代码，不做过多分析。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-go\\\"><code class=\\\"language-go\\\"><span class=\\\"token keyword\\\">package</span> main\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">(</span>\\n\\t<span class=\\\"token string\\\">\\\"fmt\\\"</span>\\n\\t<span class=\\\"token string\\\">\\\"time\\\"</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> start <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Unix</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">func</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>result <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">,</span> duration time<span class=\\\"token punctuation\\\">.</span>Duration<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token builtin\\\">int</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tfmt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Println</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> duration<span class=\\\"token punctuation\\\">)</span>\\n\\ttime<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Sleep</span><span class=\\\"token punctuation\\\">(</span>duration<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token keyword\\\">return</span> result\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">func</span> <span class=\\\"token function\\\">worker</span><span class=\\\"token punctuation\\\">(</span>id <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">,</span> jobs <span class=\\\"token operator\\\">&lt;-</span><span class=\\\"token keyword\\\">chan</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">,</span> result <span class=\\\"token keyword\\\">chan</span><span class=\\\"token operator\\\">&lt;-</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">for</span> job <span class=\\\"token operator\\\">:=</span> <span class=\\\"token keyword\\\">range</span> jobs <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tt <span class=\\\"token operator\\\">:=</span> job <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span> t <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tt <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\tr <span class=\\\"token operator\\\">:=</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span>job<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>time<span class=\\\"token punctuation\\\">.</span>Duration<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">*</span>time<span class=\\\"token punctuation\\\">.</span>Second<span class=\\\"token punctuation\\\">)</span>\\n\\t\\tdiff <span class=\\\"token operator\\\">:=</span> time<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Unix</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> start\\n\\t\\tfmt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"%d completes at time: %ds, by worker%d\\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span> r<span class=\\\"token punctuation\\\">,</span> diff<span class=\\\"token punctuation\\\">,</span> id<span class=\\\"token punctuation\\\">)</span>\\n\\t\\tresult <span class=\\\"token operator\\\">&lt;-</span> r\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">func</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tt1 <span class=\\\"token operator\\\">:=</span> time<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Unix</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\tjobs <span class=\\\"token operator\\\">:=</span> <span class=\\\"token function\\\">make</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">chan</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span>\\n\\tresult <span class=\\\"token operator\\\">:=</span> <span class=\\\"token function\\\">make</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">chan</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span>\\n\\ttotal <span class=\\\"token operator\\\">:=</span> <span class=\\\"token function\\\">mockAPI</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">*</span>time<span class=\\\"token punctuation\\\">.</span>Second<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t<span class=\\\"token keyword\\\">const</span> MaxCurrency <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span>\\n\\t<span class=\\\"token keyword\\\">for</span> i <span class=\\\"token operator\\\">:=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> MaxCurrency<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">go</span> <span class=\\\"token function\\\">worker</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">,</span> jobs<span class=\\\"token punctuation\\\">,</span> result<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">for</span> i <span class=\\\"token operator\\\">:=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> total<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tjobs <span class=\\\"token operator\\\">&lt;-</span> i\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span>jobs<span class=\\\"token punctuation\\\">)</span>\\n\\n\\trs <span class=\\\"token operator\\\">:=</span> <span class=\\\"token function\\\">make</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token keyword\\\">for</span> i <span class=\\\"token operator\\\">:=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> total<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tr <span class=\\\"token operator\\\">:=</span> <span class=\\\"token operator\\\">&lt;-</span>result\\n\\t\\trs<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> r\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\tt2 <span class=\\\"token operator\\\">:=</span> time<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Unix</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\tfmt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"total cost: %ds.\\\\n\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\tfmt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Println</span><span class=\\\"token punctuation\\\">(</span>rs<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>执行输出如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  chap8 go run currency-rate-limit2.go\\n10 1s\\n1 1s\\n2 2s\\n3 3s\\n1 completes at time: 2s, by worker0\\n4 1s\\n4 completes at time: 3s, by worker0\\n2 completes at time: 3s, by worker2\\n5 2s\\n6 3s\\n3 completes at time: 4s, by worker1\\n7 1s\\n7 completes at time: 5s, by worker1\\n8 2s\\n5 completes at time: 5s, by worker0\\n9 3s\\n6 completes at time: 6s, by worker2\\n10 1s\\n8 completes at time: 7s, by worker1\\n10 completes at time: 7s, by worker2\\n9 completes at time: 8s, by worker0\\ntotal cost: 8s.\\n<span class=\\\"token punctuation\\\">[</span>1 4 2 3 7 5 6 8 10 9<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<h1 id=\\\"参考资料\\\"><a href=\\\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考资料</h1>\\n<ul>\\n<li><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\\\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li>\\n<li><a href=\\\"https://yar999.gitbooks.io/gopl-zh/content/ch8/ch8-06.html\\\">https://yar999.gitbooks.io/gopl-zh/content/ch8/ch8-06.html</a></li>\\n</ul>\",\"timeToRead\":9,\"excerpt\":\"我们知道Node.js里充满着大量的异步， 后来出现了Promise以及async/await来解决”callback hell”的问题。我们就来看看promise以及async/await如何简化JS并发代码的编写， 最后再给出一份实现相同功能的Go…\",\"fields\":{\"slug\":\"/concurrency-by-promise/\"},\"frontmatter\":{\"title\":\"用Promise实现并发 vs Go goroutine\",\"date\":\"2018-03-24\",\"category\":\"FE\",\"tags\":[\"promise\",\"concurrency\",\"并发\",\"go\",\"goroutine\"]}}}]}},\"pathContext\":{\"current\":1,\"skip\":0,\"total\":6}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/index.json\n// module id = 616\n// module chunks = 142629428675168"],"sourceRoot":""}
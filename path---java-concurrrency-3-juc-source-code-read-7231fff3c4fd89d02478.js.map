{"version":3,"sources":["webpack:///path---java-concurrrency-3-juc-source-code-read-7231fff3c4fd89d02478.js","webpack:///./.cache/json/java-concurrrency-3-juc-source-code-read.json"],"names":["webpackJsonp","617","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","timeToRead","frontmatter","date","category","tags","math","pathContext","prev","url","slug","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,iBAAAC,OAAA,YAA6CC,gBAAmBC,GAAA,mJAAAC,KAAA;AAAszwFC,WAAA,EAAAC,aAAg4EN,MAAA,qCAAAO,KAAA,aAAAC,SAAA,OAAAC,MAAA,mCAAAC,KAAA,QAA4IC,aAAgBC,MAAQC,IAAA,6BAAAb,MAAA,iBAA2Dc,KAAA,6CAAAC,MAA6DF,IAAA,gCAAAb,MAAA","file":"path---java-concurrrency-3-juc-source-code-read-7231fff3c4fd89d02478.js","sourcesContent":["webpackJsonp([144112433575639],{\n\n/***/ 617:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Magicly's Blog\",\"author\":\"Magicly\"}},\"markdownRemark\":{\"id\":\"/Users/spring/Developer/Gatsby/springjphoenix.github.io/src/pages/java-concurrrency-3-juc-source-code-read.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>java5之后的java.util.concurrent包是世界级并发大师Doug Lea的作品，里面主要实现了</p>\\n<ol>\\n<li>atomic包里Integer/Long对应的原子类，主要基于CAS；</li>\\n<li>一些同步子，包括Lock，CountDownLatch，Semaphore，FutureTask等，这些都是基于AbstractQueuedSynchronizer类；</li>\\n<li>关于线程执行的Executors类等；</li>\\n<li>一些并发的集合类，比如ConcurrentHashMap，ConcurrentLinkedQueue，CopyOnWriteArrayList等。</li>\\n</ol>\\n<p>今天我们主要介绍AbstractQueuedSynchronizer这个可以说是最核心的类，没有之一。整个concurrent包里，基本都直接或间接地用到了这个类。Doug Lea的这篇<a href=\\\"http://gee.cs.oswego.edu/dl/papers/aqs.pdf\\\">论文</a>里面讲AQS的实现。</p>\\n<!-- more -->\\n<h1 id=\\\"aqs\\\"><a href=\\\"#aqs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>AQS</h1>\\n<p>首先，我们来想象一下，一间屋里有一个大家都想要得到的会让你很爽的东西（something which makes you so happy, e.g. W.C）。当有人进去把门关起来在独占享用的时候，其他人就只能在外面排队等待，既然在等待，你就不能老是去敲门说哎，好了没有啊。老是这样的话里面的人就很不爽了，而且你可以利用这点等待时间干点别的，比如看看小说视频背背单词或者就干脆椅子上睡觉，当前面独占的人爽完之后，就会出来说，啊，好爽，到你们了。然后大家可能按照排队顺序获取或者大家疯抢这个状态，有可能一个人自己进去独占，有可能几个人说，哎没关系，我们可以一起来。然后他们进去爽，爽完之后再出来通知下一个。</p>\\n<p>我们来把上面这段话翻译成AQS里面的术语。有一个状态state，会有多个Thread尝试获取，当一个Thread独占（EXCLUSIVE，比如Lock）之后，其他后面到来的Thread就会被放到一个Queue的队尾（tail），然后睡眠（park），一直等到前面的Thread唤醒（unpark）它，当然这里有可能被假唤醒（就好比你定了闹钟8点起床，结果7点就自然醒或者被外面车吵醒），所以这个Thread会判断一下是不是到自己了，没有的话就继续park（在一个死循环里）；当拥有state的Thread释放（release）之后，它会唤醒Queue中的下一个Thread（unparkSuccessor）。然后下一个Thread获取（acquire）到state，完成自己的任务，然后继续unparkSuccessor。前面主要说的是EXCLUSIVE模式，AQS还支持共享（SHARED）模式，区别在于尝试获取（tryAcquireShared）的时候即使之前已经有Thread获取了state，但是可能仍然能获取（比如ReadLock）。同样释放（doReleaseShared）的时候除了通知Queue里面第一个（head），还会继续通知后续的节点（Node），只要它们是SHARED。</p>\\n<p>AQS就是实现了：</p>\\n<ol>\\n<li>自动管理这个同步状态state（int类型），更新的时候需要用CAS保证原子性</li>\\n<li>阻塞和唤醒线程park/unpark</li>\\n<li>队列管理，一个双向链表实现queue</li>\\n</ol>\\n<p>AQS是一个abstract class，可以通过继承AQS，定义state的含义，以及tryAcquire，tryRelease，以及对应的share模式下tryAcquireShared，tryReleaseShared这几个方法，定义出自己想要的同步子（Synchronizers）。一般而言，是定义一个内部类Sync extends AQS，实现前面说的几个方法，然后再包一层，暴露出相应的方法。这样做的好处是你可以在包装器类里面取更直观的名字，如ReentrantLock里的lock，unlock和CountDownLatch里的countDown，await，而不是太通用的acquire和release等。而且AQS里面一些方法是为了监控和调试使用，直接暴露出来也不好。</p>\\n<p>下面我们来看J.U.C里面两个常用的Synchronizers。</p>\\n<h1 id=\\\"reentrantlock\\\"><a href=\\\"#reentrantlock\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ReentrantLock</h1>\\n<h2 id=\\\"使用\\\"><a href=\\\"#%E4%BD%BF%E7%94%A8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>使用</h2>\\n<p>ReentrantLock的语义跟synchronized关键字基本一样，而且我之前看<a href=\\\"http://book.douban.com/subject/6522893/\\\">《深入理解Java虚拟机》</a>里面的评测说JDK6之后，两者的效率基本一致了（JDK5之前ReentrantLock要比synchronized快很多）。Javadoc里面说基本用法如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">X</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ReentrantLock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">m</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// block until condition holds</span>\\n    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// ... method body</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n      lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"源码\\\"><a href=\\\"#%E6%BA%90%E7%A0%81\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>源码</h2>\\n<p>ReentrantLock用state表示是否被锁，0表示没有线程获取到锁，>=1表示某个线程获取了N次锁（因为是重入的，只要保证lock和unlock成对出现就没有问题）。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token comment\\\">/** Synchronizer providing all implementation mechanics */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> Sync sync<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Sync</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">AbstractQueuedSynchronizer</span> <span class=\\\"token punctuation\\\">{</span></code></pre>\\n      </div>\\n<p>定义了一个内部类，基本任务都代理给sync完成。而Sync又是一个abstract class，这里主要是因为实现了两种抢占锁的机制，公平锁和非公平锁。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">FairSync</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Sync</span>\\n\\t\\n\\t<span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">NonfairSync</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Sync</span></code></pre>\\n      </div>\\n<p>所谓公平不公平简单来说就是本文开头说的，当资源释放的时候，大家是按照排队顺序先到先得，还是有人插队大家疯抢。</p>\\n<p>提供了两个构造函数：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">ReentrantLock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">NonfairSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//默认非公平锁，AQS论文说非公平锁效率高些，理由其实很简单，公平锁通知队列第一个节点，要把它唤醒，而唤醒是需要时间的，在锁释放到第一个节点被唤醒这段时间其实锁是可以用但是没有被用的（available but not used）；而非公平锁，释放了之后立马就可以被别人用，所以提高了效率，但是有可能导致饥饿锁，这个就要具体看业务需求了。</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">ReentrantLock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">boolean</span> fair<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync <span class=\\\"token operator\\\">=</span> fair <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">FairSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">NonfairSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//指定公平与否</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>加锁的实现</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>简单代理给了sync，在FairSync里为</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token function\\\">acquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>acquire的实现在AQS里面：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">acquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">tryAcquire</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n            <span class=\\\"token function\\\">acquireQueued</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">addWaiter</span><span class=\\\"token punctuation\\\">(</span>Node<span class=\\\"token punctuation\\\">.</span>EXCLUSIVE<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token function\\\">selfInterrupt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>tryAcquire是要在子类里自己实现的，在FairSync如下;</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t\\t <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryAcquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> acquires<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">final</span> Thread current <span class=\\\"token operator\\\">=</span> Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">int</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//0表示锁没有被线程用，1表示已经有线程占用</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">hasQueuedPredecessors</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token comment\\\">//判断自己是否是第一个节点，实现公平</span>\\n                    <span class=\\\"token function\\\">compareAndSetState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> acquires<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//CAS更新状态</span>\\n                    <span class=\\\"token function\\\">setExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span>current<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//设置当前线程拥有状态</span>\\n                    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>current <span class=\\\"token operator\\\">==</span> <span class=\\\"token function\\\">getExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//1表示已经有线程占用，再判断一下是否被当前线程占用，来实现重入（Reentrant）特性</span>\\n                <span class=\\\"token keyword\\\">int</span> nextc <span class=\\\"token operator\\\">=</span> c <span class=\\\"token operator\\\">+</span> acquires<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nextc <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Maximum lock count exceeded\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>nextc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//更新状态</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>如果获取失败，addWaiter(Node.EXCLUSIVE)将当前线程加入队尾</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">private</span> Node <span class=\\\"token function\\\">addWaiter</span><span class=\\\"token punctuation\\\">(</span>Node mode<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        Node node <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Node</span><span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> mode<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//用当前线程构造Node，独占模式</span>\\n        <span class=\\\"token comment\\\">// Try the fast path of enq; backup to full enq on failure</span>\\n        Node pred <span class=\\\"token operator\\\">=</span> tail<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>pred <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            node<span class=\\\"token punctuation\\\">.</span>prev <span class=\\\"token operator\\\">=</span> pred<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetTail</span><span class=\\\"token punctuation\\\">(</span>pred<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//快速判断，CAS更新tail节点</span>\\n                pred<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> node<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token function\\\">enq</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//如果失败，进入enq方法</span>\\n        <span class=\\\"token keyword\\\">return</span> node<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n\\t <span class=\\\"token keyword\\\">private</span> Node <span class=\\\"token function\\\">enq</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">final</span> Node node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            Node t <span class=\\\"token operator\\\">=</span> tail<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>t <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// Must initialize</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetHead</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Node</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">//如果还没有head，CAS初始化一个head</span>\\n                    tail <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//这段代码跟addWaiter里一样，CAS更新tail节点</span>\\n                node<span class=\\\"token punctuation\\\">.</span>prev <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetTail</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    t<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">return</span> t<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>现在我们已经将获取不到锁的线程加入队尾了，现在要将它挂起acquireQueued(addWaiter(Node.EXCLUSIVE), arg))：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">acquireQueued</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">final</span> Node node<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">boolean</span> failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">boolean</span> interrupted <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//在一个死循环中，避免假唤醒</span>\\n                <span class=\\\"token keyword\\\">final</span> Node p <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">predecessor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//获取当前节点的前一个节点，如果是head说明自己是第一个可以获取资源的线程，实现公平</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>p <span class=\\\"token operator\\\">==</span> head <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token function\\\">tryAcquire</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//是第一个可以获取资源的线程并且尝试获取成功</span>\\n                    <span class=\\\"token function\\\">setHead</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    p<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// help GC</span>\\n                    failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">return</span> interrupted<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">shouldParkAfterFailedAcquire</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                    <span class=\\\"token function\\\">parkAndCheckInterrupt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">//没有获取到资源，睡眠park去</span>\\n                    interrupted <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>failed<span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">cancelAcquire</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">parkAndCheckInterrupt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        LockSupport<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">park</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">interrupted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>上面完成了获取锁的过程，简单来说就是尝试获取，失败就加入队尾，挂起，等待被唤醒。</p>\\n<p>下面来看看释放锁</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">release</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//代理给sync，调用AQS的release</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">//下面代码在AQS中</span>\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">release</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">tryRelease</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//尝试释放资源，需要在子类里实现</span>\\n            Node h <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>h <span class=\\\"token operator\\\">!=</span> null <span class=\\\"token operator\\\">&amp;&amp;</span> h<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">!=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">unparkSuccessor</span><span class=\\\"token punctuation\\\">(</span>h<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//通知下一个节点</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">unparkSuccessor</span><span class=\\\"token punctuation\\\">(</span>Node node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">/*\\n         * If status is negative (i.e., possibly needing signal) try\\n         * to clear in anticipation of signalling.  It is OK if this\\n         * fails or if status is changed by waiting thread.\\n         */</span>\\n        <span class=\\\"token keyword\\\">int</span> ws <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>waitStatus<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>ws <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token function\\\">compareAndSetWaitStatus</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> ws<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token comment\\\">/*\\n         * Thread to unpark is held in successor, which is normally\\n         * just the next node.  But if cancelled or apparently null,\\n         * traverse backwards from tail to find the actual\\n         * non-cancelled successor.\\n         */</span>\\n         <span class=\\\"token comment\\\">// 主要在这里找到下一个需要通知的节点，如果node.next就是需要通知的节点，则直接通知；否则，可能node.next == null（原因是双向链表设置b.pre = a和a.next = b的时候不能保证原子性，只能保证b.pre = a成功，这时候另一条线程可能看到a.next == null）或者s.waitStatus > 0（原因是线程等不及被取消了static final int CANCELLED = 1;），这个时候就要从队尾tail开始找，找到离队头head最近的一个需要通知的节点Node。</span>\\n        Node s <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s <span class=\\\"token operator\\\">==</span> null <span class=\\\"token operator\\\">||</span> s<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            s <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>Node t <span class=\\\"token operator\\\">=</span> tail<span class=\\\"token punctuation\\\">;</span> t <span class=\\\"token operator\\\">!=</span> null <span class=\\\"token operator\\\">&amp;&amp;</span> t <span class=\\\"token operator\\\">!=</span> node<span class=\\\"token punctuation\\\">;</span> t <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">.</span>prev<span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                    s <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span>\\n            LockSupport<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unpark</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">.</span>thread<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//唤醒线程</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>看看需要在子类里实现的tryRelease：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t\\t<span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryRelease</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> releases<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">int</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> releases<span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//释放锁，state减去相应的值</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token function\\\">getExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IllegalMonitorStateException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//避免A线程锁了之后，B线程故意捣乱释放锁</span>\\n            <span class=\\\"token keyword\\\">boolean</span> free <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//当前线程已经完全释放了锁</span>\\n                free <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token function\\\">setExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span>null<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//释放锁的拥有者</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//设置状态，这个方面没有同步，没有CAS，有同学问过岂不是有线程并发问题？其实到这里，只有一个线程会调用这个方法，所以不会有并发错误，仔细想想，是吧？是吧？</span>\\n            <span class=\\\"token keyword\\\">return</span> free<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>到这里，基本都已经完成，对了，还没有说非公平锁NonfairSync是怎么抢占锁的。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t\\t<span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">//先抢一把（插队），万一成功了就不排队，不公平性就体现在这里！</span>\\n                <span class=\\\"token function\\\">setExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">else</span>\\n                <span class=\\\"token function\\\">acquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>跟FairSync.lock()对比，可以看出，只是在acquire(1)之前，先抢一把，抢不到才乖乖的去排队。</p>\\n<p>我们再看看NonfairSync.tryAcquire()怎么实现的</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t\\t<span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryAcquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> acquires<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">nonfairTryAcquire</span><span class=\\\"token punctuation\\\">(</span>acquires<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//调用父类方法nonfairTryAcquire</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">nonfairTryAcquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> acquires<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">final</span> Thread current <span class=\\\"token operator\\\">=</span> Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">int</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> acquires<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//跟FairSync.tryAcquire只有这里一行有差异，即少了!hasQueuedPredecessors()，也就是说不判断前面有没有人，任何时候只要它醒来，都会去抢，所以不公平！============刚又看了一遍，发现其实final boolean acquireQueued(final Node node, int arg)方法里已经有node.predecessor() == head的判断，感觉这个不公平的tryAcquire貌似没有意义，各位看官怎么看呢，请留言哈，谢谢~</span>\\n                    <span class=\\\"token function\\\">setExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span>current<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>current <span class=\\\"token operator\\\">==</span> <span class=\\\"token function\\\">getExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">int</span> nextc <span class=\\\"token operator\\\">=</span> c <span class=\\\"token operator\\\">+</span> acquires<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nextc <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// overflow</span>\\n                    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Maximum lock count exceeded\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>nextc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"countdownlatch\\\"><a href=\\\"#countdownlatch\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>CountDownLatch</h1>\\n<p>我们之前说了，AQS支持独占EXCLUSIVE和共享SHARED两种模式，而刚刚的ReentrantLock的就是独占模式，我们来看看一个使用共享模式的类。</p>\\n<h2 id=\\\"使用-1\\\"><a href=\\\"#%E4%BD%BF%E7%94%A8-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>使用</h2>\\n<p>CountDownLatch就好比一道门，它可以用来等所有资源都到齐了，才开门，让这些线程同时通过。比如如下是CountDownLatch一个通用用法：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">package</span> concurrentStudy<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> java<span class=\\\"token punctuation\\\">.</span>util<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span>CountDownLatch<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Created by magicalli on 2014/12/13.\\n */</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">IndexPlusPlusTest01</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> NThreads <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// 线程数</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> M <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">100000</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//循环次数，太小的话（比如10）可能看不出来效果</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">volatile</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">int</span> n <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//加volatile的目的是为了证明volatile没有“原子性”！</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">final</span> CountDownLatch startGate <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">CountDownLatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> CountDownLatch endGate <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">CountDownLatch</span><span class=\\\"token punctuation\\\">(</span>NThreads<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> NThreads<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Thread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Runnable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token annotation punctuation\\\">@Override</span>\\n                <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n                        startGate<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//所有线程start之后等待“门“打开，保证同时真正开始运行</span>\\n                    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">InterruptedException</span> e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        e<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">printStackTrace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n\\n                    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> M<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        n <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n\\n                    endGate<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">countDown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        startGate<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">countDown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//打开“门”，让所有线程同时run起来</span>\\n        <span class=\\\"token keyword\\\">long</span> t1 <span class=\\\"token operator\\\">=</span> System<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentTimeMillis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        endGate<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//等所有线程都结束之后才打印n，否则总是会打出错误的n；我见过这里用Thread.sleep()，但是问题在于，你怎么知道该等多久才能保证所有线程结束以及刚好结束呢？！</span>\\n        <span class=\\\"token keyword\\\">long</span> t2 <span class=\\\"token operator\\\">=</span> System<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentTimeMillis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"cost time: \\\"</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"n: \\\"</span> <span class=\\\"token operator\\\">+</span> n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>对了，上面代码是拿来验证volatile不具备原子性的，是错误的代码哦。如果想并发安全，大家可以想想可以用哪些方式实现。</p>\\n<h2 id=\\\"源码-1\\\"><a href=\\\"#%E6%BA%90%E7%A0%81-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>源码</h2>\\n<p>CountDownLatch同样也是定义了一个继承自AQS的内部类Sync：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Sync</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">AbstractQueuedSynchronizer</span></code></pre>\\n      </div>\\n<p>构造函数如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">CountDownLatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> count<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"count &lt; 0\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sync <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Sync</span><span class=\\\"token punctuation\\\">(</span>count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>count表示有多少个任务还在运行，每个Thread完成了任务或者准备好开始之前，就会调用countDown方法将count-1，当count==0时候，await就不再阻塞，所有在上面阻塞的Thread都可以顺利通过。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">acquireSharedInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>直接调用AQS的acquireSharedInterruptibly方法，从方法名可以看出，支持中断响应</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">acquireSharedInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">interrupted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InterruptedException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//响应中断</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token function\\\">doAcquireSharedInterruptibly</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>tryAcquireShared在子类中实现：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">        <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> acquires<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//如果state为0，说明所有Thread完成任务，可以不阻塞了</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>如果没有获取到，将Thread加入队尾，挂起。下面这个方法跟独占模式下acquireQueued(addWaiter(Node.EXCLUSIVE), arg))这个方法代码是基本一致的。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">doAcquireSharedInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">final</span> Node node <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">addWaiter</span><span class=\\\"token punctuation\\\">(</span>Node<span class=\\\"token punctuation\\\">.</span>SHARED<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//共享模式</span>\\n        <span class=\\\"token keyword\\\">boolean</span> failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">final</span> Node p <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">predecessor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>p <span class=\\\"token operator\\\">==</span> head<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">int</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token function\\\">setHeadAndPropagate</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> r<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//跟EXCLUSIVE的一大区别</span>\\n                        p<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// help GC</span>\\n                        failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">shouldParkAfterFailedAcquire</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                    <span class=\\\"token function\\\">parkAndCheckInterrupt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InterruptedException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//响应中断，这里直接抛异常</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>failed<span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">cancelAcquire</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">setHeadAndPropagate</span><span class=\\\"token punctuation\\\">(</span>Node node<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> propagate<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        Node h <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Record old head for check below</span>\\n        <span class=\\\"token function\\\">setHead</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">/*\\n         * Try to signal next queued node if:\\n         *   Propagation was indicated by caller,\\n         *     or was recorded (as h.waitStatus either before\\n         *     or after setHead) by a previous operation\\n         *     (note: this uses sign-check of waitStatus because\\n         *      PROPAGATE status may transition to SIGNAL.)\\n         * and\\n         *   The next node is waiting in shared mode,\\n         *     or we don't know, because it appears null\\n         *\\n         * The conservatism in both of these checks may cause\\n         * unnecessary wake-ups, but only when there are multiple\\n         * racing acquires/releases, so most need signals now or soon\\n         * anyway.\\n         */</span>\\n         <span class=\\\"token comment\\\">// 如果当前节点是愿意共享，并且下一个节点也是愿意共享的，那么就进入doReleaseShared，唤醒下一个节点，下面会详解</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>propagate <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> h <span class=\\\"token operator\\\">==</span> null <span class=\\\"token operator\\\">||</span> h<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span>\\n            <span class=\\\"token punctuation\\\">(</span>h <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> null <span class=\\\"token operator\\\">||</span> h<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            Node s <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s <span class=\\\"token operator\\\">==</span> null <span class=\\\"token operator\\\">||</span> s<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">doReleaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>前面完成了等待CountDownLatch的count变成0的过程，下面看看countDown</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">countDown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">releaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//调用AQS的</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token comment\\\">// AQS中</span>\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">releaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">tryReleaseShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//尝试释放，需要在子类中实现</span>\\n            <span class=\\\"token function\\\">doReleaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//真正释放</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t\\t<span class=\\\"token comment\\\">// Sync子类中实现</span>\\n\\t    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryReleaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> releases<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// Decrement count; signal when transition to zero</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">int</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">int</span> nextc <span class=\\\"token operator\\\">=</span> c<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetState</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">,</span> nextc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">// 在死循环中CAS将count-1</span>\\n                    <span class=\\\"token keyword\\\">return</span> nextc <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        \\n    <span class=\\\"token comment\\\">// AQS中</span>\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">doReleaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">/*\\n         * Ensure that a release propagates, even if there are other\\n         * in-progress acquires/releases.  This proceeds in the usual\\n         * way of trying to unparkSuccessor of head if it needs\\n         * signal. But if it does not, status is set to PROPAGATE to\\n         * ensure that upon release, propagation continues.\\n         * Additionally, we must loop in case a new node is added\\n         * while we are doing this. Also, unlike other uses of\\n         * unparkSuccessor, we need to know if CAS to reset status\\n         * fails, if so rechecking.\\n         */</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            Node h <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>h <span class=\\\"token operator\\\">!=</span> null <span class=\\\"token operator\\\">&amp;&amp;</span> h <span class=\\\"token operator\\\">!=</span> tail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">int</span> ws <span class=\\\"token operator\\\">=</span> h<span class=\\\"token punctuation\\\">.</span>waitStatus<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>ws <span class=\\\"token operator\\\">==</span> Node<span class=\\\"token punctuation\\\">.</span>SIGNAL<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSetWaitStatus</span><span class=\\\"token punctuation\\\">(</span>h<span class=\\\"token punctuation\\\">,</span> Node<span class=\\\"token punctuation\\\">.</span>SIGNAL<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                        <span class=\\\"token keyword\\\">continue</span><span class=\\\"token punctuation\\\">;</span>            <span class=\\\"token comment\\\">// loop to recheck cases</span>\\n                    <span class=\\\"token function\\\">unparkSuccessor</span><span class=\\\"token punctuation\\\">(</span>h<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//遍历queue，通知所有SHARED的节点，因为是共享模式，这些Node都应该被唤醒，直到遇到某个EXCLUSIVE的Node</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>ws <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                         <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSetWaitStatus</span><span class=\\\"token punctuation\\\">(</span>h<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> Node<span class=\\\"token punctuation\\\">.</span>PROPAGATE<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">continue</span><span class=\\\"token punctuation\\\">;</span>                <span class=\\\"token comment\\\">// loop on failed CAS</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>h <span class=\\\"token operator\\\">==</span> head<span class=\\\"token punctuation\\\">)</span>                   <span class=\\\"token comment\\\">// loop if head changed</span>\\n                <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>unparkSuccessor跟之前独占模式里面的是同一个函数，即调用unpark唤醒Thread。</p>\\n<p>我们知道为了避免获取不到锁长时间等待，一般阻塞的方法都会支持带超时时间的方法，比如CountDownLatch里就有</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> timeout<span class=\\\"token punctuation\\\">,</span> TimeUnit unit<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">tryAcquireSharedNanos</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> unit<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toNanos</span><span class=\\\"token punctuation\\\">(</span>timeout<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>调用AQS里面的tryAcquireSharedNanos方法</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryAcquireSharedNanos</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">long</span> nanosTimeout<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">interrupted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InterruptedException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span>\\n            <span class=\\\"token function\\\">doAcquireSharedNanos</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">,</span> nanosTimeout<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">doAcquireSharedNanos</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">long</span> nanosTimeout<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nanosTimeout <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span>L<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">long</span> deadline <span class=\\\"token operator\\\">=</span> System<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">nanoTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> nanosTimeout<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> Node node <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">addWaiter</span><span class=\\\"token punctuation\\\">(</span>Node<span class=\\\"token punctuation\\\">.</span>SHARED<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">boolean</span> failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">final</span> Node p <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">predecessor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>p <span class=\\\"token operator\\\">==</span> head<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">int</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token function\\\">setHeadAndPropagate</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> r<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                        p<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// help GC</span>\\n                        failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                nanosTimeout <span class=\\\"token operator\\\">=</span> deadline <span class=\\\"token operator\\\">-</span> System<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">nanoTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nanosTimeout <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span>L<span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//如果已经没时间了，直接return false</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">shouldParkAfterFailedAcquire</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                    nanosTimeout <span class=\\\"token operator\\\">></span> spinForTimeoutThreshold<span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">//大于某个阈值，才park，否则进入自旋</span>\\n                    LockSupport<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parkNanos</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> nanosTimeout<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//调用带超时的park方法</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">interrupted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InterruptedException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>failed<span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">cancelAcquire</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>可以看到，跟不带超时的doAcquireSharedInterruptibly方法相比，区别主要在于每次for循环期间，检查时间是否过期和调用带超时的park。nanosTimeout > spinForTimeoutThreshold这个判断主要是因为park/unpark本身也需要花时间，为了更准确地完成超时的机制，在超时时间马上就要到了的时候，就进入自旋，不再park了，这应该是Doug Lea测试了park/unpark时间比1000纳秒要长吧。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token comment\\\">/**\\n     * The number of nanoseconds for which it is faster to spin\\n     * rather than to use timed park. A rough estimate suffices\\n     * to improve responsiveness with very short timeouts.\\n     */</span>\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">long</span> spinForTimeoutThreshold <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1000</span>L<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h1 id=\\\"总结\\\"><a href=\\\"#%E6%80%BB%E7%BB%93\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>总结</h1>\\n<p>J.U.C里AQS是一个相当核心的类，可以说没有它就没有J.U.C包。推荐大家看看<a href=\\\"http://gee.cs.oswego.edu/dl/papers/aqs.pdf\\\">AQS</a>这篇论文（网上有一些翻译，推荐大家还是看原文吧）。主要是用一个state表示状态，子类可以根据需要来定义state的含义，以及获取释放资源时具体如何操作state，当然需要通过CAS实现原子更改。当获取不到state的时候，线程加入队列，挂起。释放之后，唤醒队列中的线程。AQS支持两种模式，独占EXCLUSIVE和共享SHARED。J.U.C里本身也有很多直接继承AQS实现的类，包括Lock，CountDownLatch，Semaphore，FutureTask等，如果这些还不能满足你的使用，那么可以直接继承AQS来实现需要。</p>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ol>\\n<li><a href=\\\"http://gee.cs.oswego.edu/dl/papers/aqs.pdf\\\">http://gee.cs.oswego.edu/dl/papers/aqs.pdf</a></li>\\n<li><a href=\\\"http://ifeve.com/introduce-abstractqueuedsynchronizer/\\\">http://ifeve.com/introduce-abstractqueuedsynchronizer/</a></li>\\n<li><a href=\\\"http://ifeve.com/jdk1-8-abstractqueuedsynchronizer/\\\">http://ifeve.com/jdk1-8-abstractqueuedsynchronizer/</a></li>\\n<li><a href=\\\"http://ifeve.com/jdk1-8-abstractqueuedsynchronizer-part2/\\\">http://ifeve.com/jdk1-8-abstractqueuedsynchronizer-part2/</a></li>\\n<li><a href=\\\"http://book.douban.com/subject/6522893/\\\">http://book.douban.com/subject/6522893/</a></li>\\n<li><a href=\\\"http://my.oschina.net/magicly007/blog/364102\\\">http://my.oschina.net/magicly007/blog/364102</a></li>\\n</ol>\\n<blockquote>\\n<p>Written with <a href=\\\"https://stackedit.io/\\\">StackEdit</a>.</p>\\n</blockquote>\",\"timeToRead\":9,\"frontmatter\":{\"title\":\"Java Concurrency（三）——J.U.C AQS源码解读\",\"date\":\"2015-01-13\",\"category\":\"Java\",\"tags\":[\"Java\",\"concurrency\",\"jdk\",\"源码阅读\"],\"math\":null}}},\"pathContext\":{\"prev\":{\"url\":\"/how-big-is-a-java-object/\",\"title\":\"一个Java对象到底有多大\"},\"slug\":\"/java-concurrrency-3-juc-source-code-read/\",\"next\":{\"url\":\"/juc-source-code-read-atomic/\",\"title\":\"J.U.C源码解读之atomic\"}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---java-concurrrency-3-juc-source-code-read-7231fff3c4fd89d02478.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Magicly's Blog\",\"author\":\"Magicly\"}},\"markdownRemark\":{\"id\":\"/Users/spring/Developer/Gatsby/springjphoenix.github.io/src/pages/java-concurrrency-3-juc-source-code-read.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>java5之后的java.util.concurrent包是世界级并发大师Doug Lea的作品，里面主要实现了</p>\\n<ol>\\n<li>atomic包里Integer/Long对应的原子类，主要基于CAS；</li>\\n<li>一些同步子，包括Lock，CountDownLatch，Semaphore，FutureTask等，这些都是基于AbstractQueuedSynchronizer类；</li>\\n<li>关于线程执行的Executors类等；</li>\\n<li>一些并发的集合类，比如ConcurrentHashMap，ConcurrentLinkedQueue，CopyOnWriteArrayList等。</li>\\n</ol>\\n<p>今天我们主要介绍AbstractQueuedSynchronizer这个可以说是最核心的类，没有之一。整个concurrent包里，基本都直接或间接地用到了这个类。Doug Lea的这篇<a href=\\\"http://gee.cs.oswego.edu/dl/papers/aqs.pdf\\\">论文</a>里面讲AQS的实现。</p>\\n<!-- more -->\\n<h1 id=\\\"aqs\\\"><a href=\\\"#aqs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>AQS</h1>\\n<p>首先，我们来想象一下，一间屋里有一个大家都想要得到的会让你很爽的东西（something which makes you so happy, e.g. W.C）。当有人进去把门关起来在独占享用的时候，其他人就只能在外面排队等待，既然在等待，你就不能老是去敲门说哎，好了没有啊。老是这样的话里面的人就很不爽了，而且你可以利用这点等待时间干点别的，比如看看小说视频背背单词或者就干脆椅子上睡觉，当前面独占的人爽完之后，就会出来说，啊，好爽，到你们了。然后大家可能按照排队顺序获取或者大家疯抢这个状态，有可能一个人自己进去独占，有可能几个人说，哎没关系，我们可以一起来。然后他们进去爽，爽完之后再出来通知下一个。</p>\\n<p>我们来把上面这段话翻译成AQS里面的术语。有一个状态state，会有多个Thread尝试获取，当一个Thread独占（EXCLUSIVE，比如Lock）之后，其他后面到来的Thread就会被放到一个Queue的队尾（tail），然后睡眠（park），一直等到前面的Thread唤醒（unpark）它，当然这里有可能被假唤醒（就好比你定了闹钟8点起床，结果7点就自然醒或者被外面车吵醒），所以这个Thread会判断一下是不是到自己了，没有的话就继续park（在一个死循环里）；当拥有state的Thread释放（release）之后，它会唤醒Queue中的下一个Thread（unparkSuccessor）。然后下一个Thread获取（acquire）到state，完成自己的任务，然后继续unparkSuccessor。前面主要说的是EXCLUSIVE模式，AQS还支持共享（SHARED）模式，区别在于尝试获取（tryAcquireShared）的时候即使之前已经有Thread获取了state，但是可能仍然能获取（比如ReadLock）。同样释放（doReleaseShared）的时候除了通知Queue里面第一个（head），还会继续通知后续的节点（Node），只要它们是SHARED。</p>\\n<p>AQS就是实现了：</p>\\n<ol>\\n<li>自动管理这个同步状态state（int类型），更新的时候需要用CAS保证原子性</li>\\n<li>阻塞和唤醒线程park/unpark</li>\\n<li>队列管理，一个双向链表实现queue</li>\\n</ol>\\n<p>AQS是一个abstract class，可以通过继承AQS，定义state的含义，以及tryAcquire，tryRelease，以及对应的share模式下tryAcquireShared，tryReleaseShared这几个方法，定义出自己想要的同步子（Synchronizers）。一般而言，是定义一个内部类Sync extends AQS，实现前面说的几个方法，然后再包一层，暴露出相应的方法。这样做的好处是你可以在包装器类里面取更直观的名字，如ReentrantLock里的lock，unlock和CountDownLatch里的countDown，await，而不是太通用的acquire和release等。而且AQS里面一些方法是为了监控和调试使用，直接暴露出来也不好。</p>\\n<p>下面我们来看J.U.C里面两个常用的Synchronizers。</p>\\n<h1 id=\\\"reentrantlock\\\"><a href=\\\"#reentrantlock\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ReentrantLock</h1>\\n<h2 id=\\\"使用\\\"><a href=\\\"#%E4%BD%BF%E7%94%A8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>使用</h2>\\n<p>ReentrantLock的语义跟synchronized关键字基本一样，而且我之前看<a href=\\\"http://book.douban.com/subject/6522893/\\\">《深入理解Java虚拟机》</a>里面的评测说JDK6之后，两者的效率基本一致了（JDK5之前ReentrantLock要比synchronized快很多）。Javadoc里面说基本用法如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">X</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ReentrantLock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">m</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// block until condition holds</span>\\n    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// ... method body</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n      lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"源码\\\"><a href=\\\"#%E6%BA%90%E7%A0%81\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>源码</h2>\\n<p>ReentrantLock用state表示是否被锁，0表示没有线程获取到锁，>=1表示某个线程获取了N次锁（因为是重入的，只要保证lock和unlock成对出现就没有问题）。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token comment\\\">/** Synchronizer providing all implementation mechanics */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> Sync sync<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Sync</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">AbstractQueuedSynchronizer</span> <span class=\\\"token punctuation\\\">{</span></code></pre>\\n      </div>\\n<p>定义了一个内部类，基本任务都代理给sync完成。而Sync又是一个abstract class，这里主要是因为实现了两种抢占锁的机制，公平锁和非公平锁。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">FairSync</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Sync</span>\\n\\t\\n\\t<span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">NonfairSync</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Sync</span></code></pre>\\n      </div>\\n<p>所谓公平不公平简单来说就是本文开头说的，当资源释放的时候，大家是按照排队顺序先到先得，还是有人插队大家疯抢。</p>\\n<p>提供了两个构造函数：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">ReentrantLock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">NonfairSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//默认非公平锁，AQS论文说非公平锁效率高些，理由其实很简单，公平锁通知队列第一个节点，要把它唤醒，而唤醒是需要时间的，在锁释放到第一个节点被唤醒这段时间其实锁是可以用但是没有被用的（available but not used）；而非公平锁，释放了之后立马就可以被别人用，所以提高了效率，但是有可能导致饥饿锁，这个就要具体看业务需求了。</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">ReentrantLock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">boolean</span> fair<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync <span class=\\\"token operator\\\">=</span> fair <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">FairSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">NonfairSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//指定公平与否</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>加锁的实现</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>简单代理给了sync，在FairSync里为</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token function\\\">acquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>acquire的实现在AQS里面：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">acquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">tryAcquire</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n            <span class=\\\"token function\\\">acquireQueued</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">addWaiter</span><span class=\\\"token punctuation\\\">(</span>Node<span class=\\\"token punctuation\\\">.</span>EXCLUSIVE<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token function\\\">selfInterrupt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>tryAcquire是要在子类里自己实现的，在FairSync如下;</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t\\t <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryAcquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> acquires<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">final</span> Thread current <span class=\\\"token operator\\\">=</span> Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">int</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//0表示锁没有被线程用，1表示已经有线程占用</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">hasQueuedPredecessors</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token comment\\\">//判断自己是否是第一个节点，实现公平</span>\\n                    <span class=\\\"token function\\\">compareAndSetState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> acquires<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//CAS更新状态</span>\\n                    <span class=\\\"token function\\\">setExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span>current<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//设置当前线程拥有状态</span>\\n                    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>current <span class=\\\"token operator\\\">==</span> <span class=\\\"token function\\\">getExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//1表示已经有线程占用，再判断一下是否被当前线程占用，来实现重入（Reentrant）特性</span>\\n                <span class=\\\"token keyword\\\">int</span> nextc <span class=\\\"token operator\\\">=</span> c <span class=\\\"token operator\\\">+</span> acquires<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nextc <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Maximum lock count exceeded\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>nextc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//更新状态</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>如果获取失败，addWaiter(Node.EXCLUSIVE)将当前线程加入队尾</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">private</span> Node <span class=\\\"token function\\\">addWaiter</span><span class=\\\"token punctuation\\\">(</span>Node mode<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        Node node <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Node</span><span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> mode<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//用当前线程构造Node，独占模式</span>\\n        <span class=\\\"token comment\\\">// Try the fast path of enq; backup to full enq on failure</span>\\n        Node pred <span class=\\\"token operator\\\">=</span> tail<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>pred <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            node<span class=\\\"token punctuation\\\">.</span>prev <span class=\\\"token operator\\\">=</span> pred<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetTail</span><span class=\\\"token punctuation\\\">(</span>pred<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//快速判断，CAS更新tail节点</span>\\n                pred<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> node<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token function\\\">enq</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//如果失败，进入enq方法</span>\\n        <span class=\\\"token keyword\\\">return</span> node<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n\\t <span class=\\\"token keyword\\\">private</span> Node <span class=\\\"token function\\\">enq</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">final</span> Node node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            Node t <span class=\\\"token operator\\\">=</span> tail<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>t <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// Must initialize</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetHead</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Node</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">//如果还没有head，CAS初始化一个head</span>\\n                    tail <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//这段代码跟addWaiter里一样，CAS更新tail节点</span>\\n                node<span class=\\\"token punctuation\\\">.</span>prev <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetTail</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    t<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">return</span> t<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>现在我们已经将获取不到锁的线程加入队尾了，现在要将它挂起acquireQueued(addWaiter(Node.EXCLUSIVE), arg))：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">acquireQueued</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">final</span> Node node<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">boolean</span> failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">boolean</span> interrupted <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//在一个死循环中，避免假唤醒</span>\\n                <span class=\\\"token keyword\\\">final</span> Node p <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">predecessor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//获取当前节点的前一个节点，如果是head说明自己是第一个可以获取资源的线程，实现公平</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>p <span class=\\\"token operator\\\">==</span> head <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token function\\\">tryAcquire</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//是第一个可以获取资源的线程并且尝试获取成功</span>\\n                    <span class=\\\"token function\\\">setHead</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    p<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// help GC</span>\\n                    failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">return</span> interrupted<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">shouldParkAfterFailedAcquire</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                    <span class=\\\"token function\\\">parkAndCheckInterrupt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">//没有获取到资源，睡眠park去</span>\\n                    interrupted <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>failed<span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">cancelAcquire</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">parkAndCheckInterrupt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        LockSupport<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">park</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">interrupted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>上面完成了获取锁的过程，简单来说就是尝试获取，失败就加入队尾，挂起，等待被唤醒。</p>\\n<p>下面来看看释放锁</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">release</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//代理给sync，调用AQS的release</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">//下面代码在AQS中</span>\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">release</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">tryRelease</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//尝试释放资源，需要在子类里实现</span>\\n            Node h <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>h <span class=\\\"token operator\\\">!=</span> null <span class=\\\"token operator\\\">&amp;&amp;</span> h<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">!=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">unparkSuccessor</span><span class=\\\"token punctuation\\\">(</span>h<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//通知下一个节点</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">unparkSuccessor</span><span class=\\\"token punctuation\\\">(</span>Node node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">/*\\n         * If status is negative (i.e., possibly needing signal) try\\n         * to clear in anticipation of signalling.  It is OK if this\\n         * fails or if status is changed by waiting thread.\\n         */</span>\\n        <span class=\\\"token keyword\\\">int</span> ws <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>waitStatus<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>ws <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token function\\\">compareAndSetWaitStatus</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> ws<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token comment\\\">/*\\n         * Thread to unpark is held in successor, which is normally\\n         * just the next node.  But if cancelled or apparently null,\\n         * traverse backwards from tail to find the actual\\n         * non-cancelled successor.\\n         */</span>\\n         <span class=\\\"token comment\\\">// 主要在这里找到下一个需要通知的节点，如果node.next就是需要通知的节点，则直接通知；否则，可能node.next == null（原因是双向链表设置b.pre = a和a.next = b的时候不能保证原子性，只能保证b.pre = a成功，这时候另一条线程可能看到a.next == null）或者s.waitStatus > 0（原因是线程等不及被取消了static final int CANCELLED = 1;），这个时候就要从队尾tail开始找，找到离队头head最近的一个需要通知的节点Node。</span>\\n        Node s <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s <span class=\\\"token operator\\\">==</span> null <span class=\\\"token operator\\\">||</span> s<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            s <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>Node t <span class=\\\"token operator\\\">=</span> tail<span class=\\\"token punctuation\\\">;</span> t <span class=\\\"token operator\\\">!=</span> null <span class=\\\"token operator\\\">&amp;&amp;</span> t <span class=\\\"token operator\\\">!=</span> node<span class=\\\"token punctuation\\\">;</span> t <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">.</span>prev<span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                    s <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span>\\n            LockSupport<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unpark</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">.</span>thread<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//唤醒线程</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>看看需要在子类里实现的tryRelease：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t\\t<span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryRelease</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> releases<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">int</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> releases<span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//释放锁，state减去相应的值</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token function\\\">getExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IllegalMonitorStateException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//避免A线程锁了之后，B线程故意捣乱释放锁</span>\\n            <span class=\\\"token keyword\\\">boolean</span> free <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//当前线程已经完全释放了锁</span>\\n                free <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token function\\\">setExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span>null<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//释放锁的拥有者</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//设置状态，这个方面没有同步，没有CAS，有同学问过岂不是有线程并发问题？其实到这里，只有一个线程会调用这个方法，所以不会有并发错误，仔细想想，是吧？是吧？</span>\\n            <span class=\\\"token keyword\\\">return</span> free<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>到这里，基本都已经完成，对了，还没有说非公平锁NonfairSync是怎么抢占锁的。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t\\t<span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">//先抢一把（插队），万一成功了就不排队，不公平性就体现在这里！</span>\\n                <span class=\\\"token function\\\">setExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">else</span>\\n                <span class=\\\"token function\\\">acquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>跟FairSync.lock()对比，可以看出，只是在acquire(1)之前，先抢一把，抢不到才乖乖的去排队。</p>\\n<p>我们再看看NonfairSync.tryAcquire()怎么实现的</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t\\t<span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryAcquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> acquires<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">nonfairTryAcquire</span><span class=\\\"token punctuation\\\">(</span>acquires<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//调用父类方法nonfairTryAcquire</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">nonfairTryAcquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> acquires<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">final</span> Thread current <span class=\\\"token operator\\\">=</span> Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">int</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> acquires<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//跟FairSync.tryAcquire只有这里一行有差异，即少了!hasQueuedPredecessors()，也就是说不判断前面有没有人，任何时候只要它醒来，都会去抢，所以不公平！============刚又看了一遍，发现其实final boolean acquireQueued(final Node node, int arg)方法里已经有node.predecessor() == head的判断，感觉这个不公平的tryAcquire貌似没有意义，各位看官怎么看呢，请留言哈，谢谢~</span>\\n                    <span class=\\\"token function\\\">setExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span>current<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>current <span class=\\\"token operator\\\">==</span> <span class=\\\"token function\\\">getExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">int</span> nextc <span class=\\\"token operator\\\">=</span> c <span class=\\\"token operator\\\">+</span> acquires<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nextc <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// overflow</span>\\n                    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Maximum lock count exceeded\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>nextc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"countdownlatch\\\"><a href=\\\"#countdownlatch\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>CountDownLatch</h1>\\n<p>我们之前说了，AQS支持独占EXCLUSIVE和共享SHARED两种模式，而刚刚的ReentrantLock的就是独占模式，我们来看看一个使用共享模式的类。</p>\\n<h2 id=\\\"使用-1\\\"><a href=\\\"#%E4%BD%BF%E7%94%A8-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>使用</h2>\\n<p>CountDownLatch就好比一道门，它可以用来等所有资源都到齐了，才开门，让这些线程同时通过。比如如下是CountDownLatch一个通用用法：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">package</span> concurrentStudy<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> java<span class=\\\"token punctuation\\\">.</span>util<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span>CountDownLatch<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Created by magicalli on 2014/12/13.\\n */</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">IndexPlusPlusTest01</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> NThreads <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// 线程数</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> M <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">100000</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//循环次数，太小的话（比如10）可能看不出来效果</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">volatile</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">int</span> n <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//加volatile的目的是为了证明volatile没有“原子性”！</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">final</span> CountDownLatch startGate <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">CountDownLatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> CountDownLatch endGate <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">CountDownLatch</span><span class=\\\"token punctuation\\\">(</span>NThreads<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> NThreads<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Thread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Runnable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token annotation punctuation\\\">@Override</span>\\n                <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n                        startGate<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//所有线程start之后等待“门“打开，保证同时真正开始运行</span>\\n                    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">InterruptedException</span> e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        e<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">printStackTrace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n\\n                    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> M<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        n <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n\\n                    endGate<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">countDown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        startGate<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">countDown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//打开“门”，让所有线程同时run起来</span>\\n        <span class=\\\"token keyword\\\">long</span> t1 <span class=\\\"token operator\\\">=</span> System<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentTimeMillis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        endGate<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//等所有线程都结束之后才打印n，否则总是会打出错误的n；我见过这里用Thread.sleep()，但是问题在于，你怎么知道该等多久才能保证所有线程结束以及刚好结束呢？！</span>\\n        <span class=\\\"token keyword\\\">long</span> t2 <span class=\\\"token operator\\\">=</span> System<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentTimeMillis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"cost time: \\\"</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"n: \\\"</span> <span class=\\\"token operator\\\">+</span> n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>对了，上面代码是拿来验证volatile不具备原子性的，是错误的代码哦。如果想并发安全，大家可以想想可以用哪些方式实现。</p>\\n<h2 id=\\\"源码-1\\\"><a href=\\\"#%E6%BA%90%E7%A0%81-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>源码</h2>\\n<p>CountDownLatch同样也是定义了一个继承自AQS的内部类Sync：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Sync</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">AbstractQueuedSynchronizer</span></code></pre>\\n      </div>\\n<p>构造函数如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">CountDownLatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> count<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"count &lt; 0\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sync <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Sync</span><span class=\\\"token punctuation\\\">(</span>count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>count表示有多少个任务还在运行，每个Thread完成了任务或者准备好开始之前，就会调用countDown方法将count-1，当count==0时候，await就不再阻塞，所有在上面阻塞的Thread都可以顺利通过。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">acquireSharedInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>直接调用AQS的acquireSharedInterruptibly方法，从方法名可以看出，支持中断响应</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">acquireSharedInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">interrupted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InterruptedException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//响应中断</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token function\\\">doAcquireSharedInterruptibly</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>tryAcquireShared在子类中实现：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">        <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> acquires<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//如果state为0，说明所有Thread完成任务，可以不阻塞了</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>如果没有获取到，将Thread加入队尾，挂起。下面这个方法跟独占模式下acquireQueued(addWaiter(Node.EXCLUSIVE), arg))这个方法代码是基本一致的。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">doAcquireSharedInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">final</span> Node node <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">addWaiter</span><span class=\\\"token punctuation\\\">(</span>Node<span class=\\\"token punctuation\\\">.</span>SHARED<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//共享模式</span>\\n        <span class=\\\"token keyword\\\">boolean</span> failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">final</span> Node p <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">predecessor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>p <span class=\\\"token operator\\\">==</span> head<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">int</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token function\\\">setHeadAndPropagate</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> r<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//跟EXCLUSIVE的一大区别</span>\\n                        p<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// help GC</span>\\n                        failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">shouldParkAfterFailedAcquire</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                    <span class=\\\"token function\\\">parkAndCheckInterrupt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InterruptedException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//响应中断，这里直接抛异常</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>failed<span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">cancelAcquire</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">setHeadAndPropagate</span><span class=\\\"token punctuation\\\">(</span>Node node<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> propagate<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        Node h <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Record old head for check below</span>\\n        <span class=\\\"token function\\\">setHead</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">/*\\n         * Try to signal next queued node if:\\n         *   Propagation was indicated by caller,\\n         *     or was recorded (as h.waitStatus either before\\n         *     or after setHead) by a previous operation\\n         *     (note: this uses sign-check of waitStatus because\\n         *      PROPAGATE status may transition to SIGNAL.)\\n         * and\\n         *   The next node is waiting in shared mode,\\n         *     or we don't know, because it appears null\\n         *\\n         * The conservatism in both of these checks may cause\\n         * unnecessary wake-ups, but only when there are multiple\\n         * racing acquires/releases, so most need signals now or soon\\n         * anyway.\\n         */</span>\\n         <span class=\\\"token comment\\\">// 如果当前节点是愿意共享，并且下一个节点也是愿意共享的，那么就进入doReleaseShared，唤醒下一个节点，下面会详解</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>propagate <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> h <span class=\\\"token operator\\\">==</span> null <span class=\\\"token operator\\\">||</span> h<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span>\\n            <span class=\\\"token punctuation\\\">(</span>h <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> null <span class=\\\"token operator\\\">||</span> h<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            Node s <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s <span class=\\\"token operator\\\">==</span> null <span class=\\\"token operator\\\">||</span> s<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">doReleaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>前面完成了等待CountDownLatch的count变成0的过程，下面看看countDown</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">countDown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">releaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//调用AQS的</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token comment\\\">// AQS中</span>\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">releaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">tryReleaseShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//尝试释放，需要在子类中实现</span>\\n            <span class=\\\"token function\\\">doReleaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//真正释放</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t\\t<span class=\\\"token comment\\\">// Sync子类中实现</span>\\n\\t    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryReleaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> releases<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// Decrement count; signal when transition to zero</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">int</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">int</span> nextc <span class=\\\"token operator\\\">=</span> c<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetState</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">,</span> nextc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">// 在死循环中CAS将count-1</span>\\n                    <span class=\\\"token keyword\\\">return</span> nextc <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        \\n    <span class=\\\"token comment\\\">// AQS中</span>\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">doReleaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">/*\\n         * Ensure that a release propagates, even if there are other\\n         * in-progress acquires/releases.  This proceeds in the usual\\n         * way of trying to unparkSuccessor of head if it needs\\n         * signal. But if it does not, status is set to PROPAGATE to\\n         * ensure that upon release, propagation continues.\\n         * Additionally, we must loop in case a new node is added\\n         * while we are doing this. Also, unlike other uses of\\n         * unparkSuccessor, we need to know if CAS to reset status\\n         * fails, if so rechecking.\\n         */</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            Node h <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>h <span class=\\\"token operator\\\">!=</span> null <span class=\\\"token operator\\\">&amp;&amp;</span> h <span class=\\\"token operator\\\">!=</span> tail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">int</span> ws <span class=\\\"token operator\\\">=</span> h<span class=\\\"token punctuation\\\">.</span>waitStatus<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>ws <span class=\\\"token operator\\\">==</span> Node<span class=\\\"token punctuation\\\">.</span>SIGNAL<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSetWaitStatus</span><span class=\\\"token punctuation\\\">(</span>h<span class=\\\"token punctuation\\\">,</span> Node<span class=\\\"token punctuation\\\">.</span>SIGNAL<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                        <span class=\\\"token keyword\\\">continue</span><span class=\\\"token punctuation\\\">;</span>            <span class=\\\"token comment\\\">// loop to recheck cases</span>\\n                    <span class=\\\"token function\\\">unparkSuccessor</span><span class=\\\"token punctuation\\\">(</span>h<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//遍历queue，通知所有SHARED的节点，因为是共享模式，这些Node都应该被唤醒，直到遇到某个EXCLUSIVE的Node</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>ws <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                         <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSetWaitStatus</span><span class=\\\"token punctuation\\\">(</span>h<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> Node<span class=\\\"token punctuation\\\">.</span>PROPAGATE<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">continue</span><span class=\\\"token punctuation\\\">;</span>                <span class=\\\"token comment\\\">// loop on failed CAS</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>h <span class=\\\"token operator\\\">==</span> head<span class=\\\"token punctuation\\\">)</span>                   <span class=\\\"token comment\\\">// loop if head changed</span>\\n                <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>unparkSuccessor跟之前独占模式里面的是同一个函数，即调用unpark唤醒Thread。</p>\\n<p>我们知道为了避免获取不到锁长时间等待，一般阻塞的方法都会支持带超时时间的方法，比如CountDownLatch里就有</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> timeout<span class=\\\"token punctuation\\\">,</span> TimeUnit unit<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">tryAcquireSharedNanos</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> unit<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toNanos</span><span class=\\\"token punctuation\\\">(</span>timeout<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>调用AQS里面的tryAcquireSharedNanos方法</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryAcquireSharedNanos</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">long</span> nanosTimeout<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">interrupted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InterruptedException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span>\\n            <span class=\\\"token function\\\">doAcquireSharedNanos</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">,</span> nanosTimeout<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">doAcquireSharedNanos</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">long</span> nanosTimeout<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nanosTimeout <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span>L<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">long</span> deadline <span class=\\\"token operator\\\">=</span> System<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">nanoTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> nanosTimeout<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> Node node <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">addWaiter</span><span class=\\\"token punctuation\\\">(</span>Node<span class=\\\"token punctuation\\\">.</span>SHARED<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">boolean</span> failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">final</span> Node p <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">predecessor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>p <span class=\\\"token operator\\\">==</span> head<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">int</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token function\\\">setHeadAndPropagate</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> r<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                        p<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// help GC</span>\\n                        failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                nanosTimeout <span class=\\\"token operator\\\">=</span> deadline <span class=\\\"token operator\\\">-</span> System<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">nanoTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nanosTimeout <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span>L<span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//如果已经没时间了，直接return false</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">shouldParkAfterFailedAcquire</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                    nanosTimeout <span class=\\\"token operator\\\">></span> spinForTimeoutThreshold<span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">//大于某个阈值，才park，否则进入自旋</span>\\n                    LockSupport<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parkNanos</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> nanosTimeout<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//调用带超时的park方法</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">interrupted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InterruptedException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>failed<span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">cancelAcquire</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>可以看到，跟不带超时的doAcquireSharedInterruptibly方法相比，区别主要在于每次for循环期间，检查时间是否过期和调用带超时的park。nanosTimeout > spinForTimeoutThreshold这个判断主要是因为park/unpark本身也需要花时间，为了更准确地完成超时的机制，在超时时间马上就要到了的时候，就进入自旋，不再park了，这应该是Doug Lea测试了park/unpark时间比1000纳秒要长吧。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token comment\\\">/**\\n     * The number of nanoseconds for which it is faster to spin\\n     * rather than to use timed park. A rough estimate suffices\\n     * to improve responsiveness with very short timeouts.\\n     */</span>\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">long</span> spinForTimeoutThreshold <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1000</span>L<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h1 id=\\\"总结\\\"><a href=\\\"#%E6%80%BB%E7%BB%93\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>总结</h1>\\n<p>J.U.C里AQS是一个相当核心的类，可以说没有它就没有J.U.C包。推荐大家看看<a href=\\\"http://gee.cs.oswego.edu/dl/papers/aqs.pdf\\\">AQS</a>这篇论文（网上有一些翻译，推荐大家还是看原文吧）。主要是用一个state表示状态，子类可以根据需要来定义state的含义，以及获取释放资源时具体如何操作state，当然需要通过CAS实现原子更改。当获取不到state的时候，线程加入队列，挂起。释放之后，唤醒队列中的线程。AQS支持两种模式，独占EXCLUSIVE和共享SHARED。J.U.C里本身也有很多直接继承AQS实现的类，包括Lock，CountDownLatch，Semaphore，FutureTask等，如果这些还不能满足你的使用，那么可以直接继承AQS来实现需要。</p>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ol>\\n<li><a href=\\\"http://gee.cs.oswego.edu/dl/papers/aqs.pdf\\\">http://gee.cs.oswego.edu/dl/papers/aqs.pdf</a></li>\\n<li><a href=\\\"http://ifeve.com/introduce-abstractqueuedsynchronizer/\\\">http://ifeve.com/introduce-abstractqueuedsynchronizer/</a></li>\\n<li><a href=\\\"http://ifeve.com/jdk1-8-abstractqueuedsynchronizer/\\\">http://ifeve.com/jdk1-8-abstractqueuedsynchronizer/</a></li>\\n<li><a href=\\\"http://ifeve.com/jdk1-8-abstractqueuedsynchronizer-part2/\\\">http://ifeve.com/jdk1-8-abstractqueuedsynchronizer-part2/</a></li>\\n<li><a href=\\\"http://book.douban.com/subject/6522893/\\\">http://book.douban.com/subject/6522893/</a></li>\\n<li><a href=\\\"http://my.oschina.net/magicly007/blog/364102\\\">http://my.oschina.net/magicly007/blog/364102</a></li>\\n</ol>\\n<blockquote>\\n<p>Written with <a href=\\\"https://stackedit.io/\\\">StackEdit</a>.</p>\\n</blockquote>\",\"timeToRead\":9,\"frontmatter\":{\"title\":\"Java Concurrency（三）——J.U.C AQS源码解读\",\"date\":\"2015-01-13\",\"category\":\"Java\",\"tags\":[\"Java\",\"concurrency\",\"jdk\",\"源码阅读\"],\"math\":null}}},\"pathContext\":{\"prev\":{\"url\":\"/how-big-is-a-java-object/\",\"title\":\"一个Java对象到底有多大\"},\"slug\":\"/java-concurrrency-3-juc-source-code-read/\",\"next\":{\"url\":\"/juc-source-code-read-atomic/\",\"title\":\"J.U.C源码解读之atomic\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/java-concurrrency-3-juc-source-code-read.json\n// module id = 617\n// module chunks = 144112433575639"],"sourceRoot":""}
{"version":3,"sources":["webpack:///path---page-3-a4a7bfc763bdf1effcc6.js","webpack:///./.cache/json/page-3.json"],"names":["webpackJsonp","632","module","exports","data","site","siteMetadata","title","allMarkdownRemark","edges","node","html","timeToRead","excerpt","fields","slug","frontmatter","date","category","tags","pathContext","current","skip","total"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,mBAA0BC,mBAAsBC,QAAUC,MAAQC,KAAA,g0NAAmjMC,WAAA,EAAAC,QAAA,+IAAAC,QAA0oCC,KAAA,gBAAsBC,aAAgBT,MAAA,aAAAU,KAAA,aAAAC,SAAA,KAAAC,MAAA,uCAAwGT,MAAQC,KAAA,y+pBAAoyqBC,WAAA,GAAAC,QAAA,4HAAAC,QAAwXC,KAAA,mBAAyBC,aAAgBT,MAAA,iBAAAU,KAAA,aAAAC,SAAA,KAAAC,MAAA,gDAAqHT,MAAQC,KAAA;AAAuvvBC,WAAA,EAAAC,QAAA,4IAAAC,QAAoqHC,KAAA,iBAAuBC,aAAgBT,MAAA,oBAAAU,KAAA,aAAAC,SAAA,KAAAC,MAAA,0BAAkGT,MAAQC,KAAA,81uBAAo7oBC,WAAA,EAAAC,QAAA,qHAAAC,QAAu+HC,KAAA,sCAA4CC,aAAgBT,MAAA,yCAAAU,KAAA,aAAAC,SAAA,KAAAC,MAAA,mCAAgIT,MAAQC,KAAA;AAA412DC,WAAA,GAAAC,QAAA,6IAAAC,QAA83IC,KAAA,iCAAuCC,aAAgBT,MAAA,iCAAAU,KAAA,aAAAC,SAAA,KAAAC,MAAA,4BAAiHT,MAAQC,KAAA,k/fAAywdC,WAAA,EAAAC,QAAA,uGAAAC,QAAw/DC,KAAA,sBAA4BC,aAAgBT,MAAA,uBAAAU,KAAA,aAAAC,SAAA,KAAAC,MAAA,gBAA2FT,MAAQC,KAAA,iiFAAAC,WAAA,EAAAC,QAAA,8IAAAC,QAAyvFC,KAAA,uBAA6BC,aAAgBT,MAAA,eAAAU,KAAA,aAAAC,SAAA,KAAAC,MAAA,iCAAoGT,MAAQC,KAAA,28HAA6iFC,WAAA,EAAAC,QAAA,sIAAAC,QAAgqDC,KAAA,aAAmBC,aAAgBT,MAAA,YAAAU,KAAA,aAAAC,SAAA,KAAAC,MAAA,wBAAwFT,MAAQC,KAAA,syBAAAC,WAAA,EAAAC,QAAA,qIAAAC,QAA2+BC,KAAA,qBAA2BC,aAAgBT,MAAA,mBAAAU,KAAA,aAAAC,SAAA,KAAAC,MAAA,iCAAwGT,MAAQC,KAAA;AAA2z/BC,WAAA,EAAAC,QAAA,6IAAAC,QAAuxMC,KAAA,mBAAyBC,aAAgBT,MAAA,qBAAAU,KAAA,aAAAC,SAAA,KAAAC,MAAA,mCAA2GC,aAAgBC,QAAA,EAAAC,KAAA,GAAAC,MAAA","file":"path---page-3-a4a7bfc763bdf1effcc6.js","sourcesContent":["webpackJsonp([217820771614769],{\n\n/***/ 632:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Magicly's Blog\"}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"html\":\"<p>最近做个app要接入一下微信sdk，按理说很简单的， 但是碰到很多坑， 记录一下。</p>\\n<!-- more -->\\n<p>APP是用RN做的， 自然想找一个封装好的RN微信，于是找到了<a href=\\\"https://github.com/yorkie/react-native-wechat\\\">https://github.com/yorkie/react-native-wechat</a> ，这个还算是star多得， 有1000多个， 相比另外一个<a href=\\\"https://github.com/reactnativecn/react-native-wx\\\">https://github.com/reactnativecn/react-native-wx</a> 貌似要活跃一些，用户也较多， 那就选react-native-wechat吧， 结果也已经7个多月没有更新过了，里面用的android的sdk都是两年多前的， 作者貌似都不知道现在用gradle了。自然也就不支持微信小程序分享。 后来看到有人提交了PR: <a href=\\\"https://github.com/yorkie/react-native-wechat/pull/324\\\">https://github.com/yorkie/react-native-wechat/pull/324</a> ，更新了sdk，支持小程序， 不过作者貌似没有merge。 索性干脆直接依赖这个fork吧：<a href=\\\"https://github.com/LittoCats/react-native-wechat\\\">https://github.com/LittoCats/react-native-wechat</a> .</p>\\n<p>然后就是按照说明配置好依赖和appId等。 结果，死活分享不出去。后来能分享出去了， 但是卡死在调用哪里， 都已经用try/catch包起来了， 但是两条路都没有走。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> Wechat<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shareToTimeline</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'text'</span><span class=\\\"token punctuation\\\">,</span>\\n        description<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'hello, wechat'</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'share text message to time line successful:'</span><span class=\\\"token punctuation\\\">,</span> result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">e</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">.</span>stack<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>既不成功，也不失败。。。。。</p>\\n<p>然后去看JS源码，看Java源码。最后发现是Java里面的回调就没有执行：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token comment\\\">// 第三方应用发送到微信的请求处理后的响应结果，会回调到该方法</span>\\n\\t<span class=\\\"token annotation punctuation\\\">@Override</span>\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">onResp</span><span class=\\\"token punctuation\\\">(</span>BaseResp resp<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>那应该就是包名或签名没有配置好了。 仔细检查没有问题啊， 也用微信提供的签名工具提取了签名。后来下载了微信的demo，一步一步调试和查资料尝试，过程花了两天， 懒得细说了，最后发现下面这些坑s：</p>\\n<h2 id=\\\"微信平台审核过之后包名和签名可以修改么？\\\"><a href=\\\"#%E5%BE%AE%E4%BF%A1%E5%B9%B3%E5%8F%B0%E5%AE%A1%E6%A0%B8%E8%BF%87%E4%B9%8B%E5%90%8E%E5%8C%85%E5%90%8D%E5%92%8C%E7%AD%BE%E5%90%8D%E5%8F%AF%E4%BB%A5%E4%BF%AE%E6%94%B9%E4%B9%88%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>微信平台审核过之后包名和签名可以修改么？</h2>\\n<p>可以。但是微信有缓存！！！要么卸载微信重装， 要么清楚微信数据， 记住是要从系统设置里面清除， 而不是从微信app里面清除！</p>\\n<ul>\\n<li><a href=\\\"http://ask.dcloud.net.cn/question/18354\\\">http://ask.dcloud.net.cn/question/18354</a></li>\\n<li><a href=\\\"http://blog.csdn.net/ZFY11/article/details/78216278\\\">http://blog.csdn.net/ZFY11/article/details/78216278</a></li>\\n</ul>\\n<h2 id=\\\"微信后台配置的包名必须是manifest里面的package！！！\\\"><a href=\\\"#%E5%BE%AE%E4%BF%A1%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE%E7%9A%84%E5%8C%85%E5%90%8D%E5%BF%85%E9%A1%BB%E6%98%AFmanifest%E9%87%8C%E9%9D%A2%E7%9A%84package%EF%BC%81%EF%BC%81%EF%BC%81\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>微信后台配置的包名必须是manifest里面的package！！！</h2>\\n<p>这个是最坑的。 因为RN默认生成的package和目录结构是<code class=\\\"language-text\\\">com.xxx</code>，而我要取另外的包名，于是在<code class=\\\"language-text\\\">app/build.gradle</code>文件里面改了<code class=\\\"language-text\\\">applicationId</code>，以为可以了，结果不行！！！微信要的其实根本就不是APP的包名， 而是类的目录结构（也算是Java的包名吧。。。）！！！！\\n至于manifest里的package和applicationId有什么区别，请看：</p>\\n<ul>\\n<li><a href=\\\"http://blog.csdn.net/qq1072313099/article/details/52872800\\\">http://blog.csdn.net/qq1072313099/article/details/52872800</a></li>\\n<li><a href=\\\"http://blog.csdn.net/u011889786/article/details/54296462\\\">http://blog.csdn.net/u011889786/article/details/54296462</a></li>\\n</ul>\\n<p>跟同事分析， 微信sdk的工具机制应该是： 微信sdk里面注册了scheme，分享或登录后微信通过scheme通知微信sdk， 然后微信sdk根据“包名”找到我们的代码<code class=\\\"language-text\\\">{package}.wxapi/WXEntryActivity.java</code>，然后执行里面的<code class=\\\"language-text\\\">onResp()</code>回调函数。所以其实微信要的不是app的包名， 而是需要找到代码的位置！！！</p>\\n<h2 id=\\\"微信分享sdk不支持分享多张图片\\\"><a href=\\\"#%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%ABsdk%E4%B8%8D%E6%94%AF%E6%8C%81%E5%88%86%E4%BA%AB%E5%A4%9A%E5%BC%A0%E5%9B%BE%E7%89%87\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>微信分享sdk不支持分享多张图片</h2>\\n<p>这个用系统的分享接口反而支持！\\n<a href=\\\"https://github.com/yorkie/react-native-wechat/issues/270\\\">https://github.com/yorkie/react-native-wechat/issues/270</a></p>\",\"timeToRead\":2,\"excerpt\":\"最近做个app要接入一下微信sdk，按理说很简单的， 但是碰到很多坑， 记录一下。 APP是用RN做的， 自然想找一个封装好的RN微信，于是找到了 https://github.com/yorkie/react-native-wechat  ，这个还算是star多得， 有100…\",\"fields\":{\"slug\":\"/wechat-sdk/\"},\"frontmatter\":{\"title\":\"接入微信SDK的坑s\",\"date\":\"2018-02-06\",\"category\":\"FE\",\"tags\":[\"微信\",\"Wechat\",\"React Native\",\"RN\"]}}},{\"node\":{\"html\":\"<p>最近做了一个小项目， 在微信里面根据用户选择的模板、用户微信头像、昵称、用户选择上传的照片合成一个图片，用户可以保存到手机上，然后发朋友圈。</p>\\n<p>说复杂其实不复杂， 总结一下其中踩过的坑。</p>\\n<!-- more -->\\n<h1 id=\\\"用canvas合成照片\\\"><a href=\\\"#%E7%94%A8canvas%E5%90%88%E6%88%90%E7%85%A7%E7%89%87\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>用Canvas合成照片</h1>\\n<p>最开始是打算自己写Canvas，绘制照片、文字等， 最后调用canvas的<code class=\\\"language-text\\\">toDataURI()</code>方法合成照片的。但是canvas上又不方便响应用户点击等操作，还得用dom写一遍， 感觉就有点重复了。 后来想起以前用过的<a href=\\\"https://github.com/niklasvh/html2canvas\\\">html2canvas库</a>，果断用之，很方便。顺便还搜到几个其他的库，不过暂时没用过，先mark一下：</p>\\n<ul>\\n<li><a href=\\\"https://github.com/tsayen/dom-to-image\\\">https://github.com/tsayen/dom-to-image</a></li>\\n</ul>\\n<p>这里有几篇blog介绍使用的，可以看看，当然官网文档永远是最权威的，适当的时候还需要看下源码。</p>\\n<ul>\\n<li><a href=\\\"https://segmentfault.com/a/1190000011478657\\\">https://segmentfault.com/a/1190000011478657</a></li>\\n<li><a href=\\\"https://www.jianshu.com/p/a99312eacf4f\\\">https://www.jianshu.com/p/a99312eacf4f</a></li>\\n<li><a href=\\\"https://www.h5jun.com/post/convert-code-to-image-via-html2canvas.html\\\">https://www.h5jun.com/post/convert-code-to-image-via-html2canvas.html</a></li>\\n</ul>\\n<h1 id=\\\"retina屏幕下canvas模糊\\\"><a href=\\\"#retina%E5%B1%8F%E5%B9%95%E4%B8%8Bcanvas%E6%A8%A1%E7%B3%8A\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Retina屏幕下canvas模糊</h1>\\n<p>马上问题来了， retina屏幕下（mac pro、iphone6+）保存出来的图片是模糊的。这个主要是canvas宽高的单位跟css单位不一致，retina屏幕下用了4倍像素渲染造成的。需要了解CSS像素、物理像素、逻辑像素、PPI、devicePixelRatio等概念，可以参考下面几篇。</p>\\n<ul>\\n<li><a href=\\\"https://segmentfault.com/q/1010000002391424\\\">https://segmentfault.com/q/1010000002391424</a></li>\\n<li><a href=\\\"https://segmentfault.com/a/1190000003730246\\\">https://segmentfault.com/a/1190000003730246</a></li>\\n<li><a href=\\\"https://www.html5rocks.com/en/tutorials/canvas/hidpi/\\\">https://www.html5rocks.com/en/tutorials/canvas/hidpi/</a></li>\\n<li><a href=\\\"https://github.com/jondavidjohn/hidpi-canvas-polyfill\\\">https://github.com/jondavidjohn/hidpi-canvas-polyfill</a></li>\\n<li><a href=\\\"https://github.com/jawil/blog/issues/21\\\">https://github.com/jawil/blog/issues/21</a></li>\\n<li><a href=\\\"https://div.io/topic/1092\\\">https://div.io/topic/1092</a></li>\\n<li><a href=\\\"http://www.dengzhr.com/frontend/html/1050\\\">http://www.dengzhr.com/frontend/html/1050</a></li>\\n<li><a href=\\\"https://benweizhu.github.io/blog/2017/03/25/css-retina-image/\\\">https://benweizhu.github.io/blog/2017/03/25/css-retina-image/</a></li>\\n<li><a href=\\\"https://www.zhihu.com/question/21653056\\\">https://www.zhihu.com/question/21653056</a></li>\\n<li><a href=\\\"https://github.com/strues/retinajs\\\">https://github.com/strues/retinajs</a></li>\\n<li><a href=\\\"https://mutian.wang/tech/1386\\\">https://mutian.wang/tech/1386</a></li>\\n<li><a href=\\\"https://www.webdesignerdepot.com/2015/08/the-state-of-responsive-images/\\\">https://www.webdesignerdepot.com/2015/08/the-state-of-responsive-images/</a></li>\\n<li><a href=\\\"https://coderwall.com/p/vmkk6a/how-to-make-the-canvas-not-look-like-crap-on-retina\\\">https://coderwall.com/p/vmkk6a/how-to-make-the-canvas-not-look-like-crap-on-retina</a></li>\\n<li>*</li>\\n</ul>\\n<h2 id=\\\"弧形文字\\\"><a href=\\\"#%E5%BC%A7%E5%BD%A2%E6%96%87%E5%AD%97\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>弧形文字</h2>\\n<p>设计稿有一个模板里面文字是弧形的，用svg实现了：</p>\\n<ul>\\n<li><a href=\\\"https://www.w3cplus.com/css3/css-secrets/circular-text.html\\\">https://www.w3cplus.com/css3/css-secrets/circular-text.html</a></li>\\n</ul>\\n<p>结果发现html2canvas没法保存svg。google之后发现html2canvas支持svg有问题：</p>\\n<ul>\\n<li><a href=\\\"https://github.com/niklasvh/html2canvas/issues/95\\\">https://github.com/niklasvh/html2canvas/issues/95</a></li>\\n<li><a href=\\\"https://github.com/niklasvh/html2canvas/issues/197\\\">https://github.com/niklasvh/html2canvas/issues/197</a></li>\\n<li><a href=\\\"https://github.com/niklasvh/html2canvas/issues/267\\\">https://github.com/niklasvh/html2canvas/issues/267</a></li>\\n</ul>\\n<p>我用inline svg也是没法绘制出来的， 开启了<code class=\\\"language-text\\\">foreignObject</code>选项，结果svg文字是可以保存了， 但是很多我不想要的内容也出来了。\\n<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/foreignObject\\\">foreignObject</a>这个不是很了解，以后再看吧。</p>\\n<p>搜了一下，发现一些把svg转成canvas的库， 大概看了一下觉得没必要引入，还不如直接自己canvas画好了。这些库mark一下：</p>\\n<ul>\\n<li><a href=\\\"https://github.com/canvg/canvg\\\">https://github.com/canvg/canvg</a></li>\\n<li><a href=\\\"https://github.com/kangax/fabric.js/\\\">https://github.com/kangax/fabric.js/</a></li>\\n<li><a href=\\\"http://flashcanvas.net/\\\">http://flashcanvas.net/</a></li>\\n</ul>\\n<p>没有解决，后来还是考虑自己用canvas画算了，参考下文：</p>\\n<ul>\\n<li><a href=\\\"https://segmentfault.com/a/1190000006258726\\\">https://segmentfault.com/a/1190000006258726</a></li>\\n</ul>\\n<h2 id=\\\"canvas裁剪圆\\\"><a href=\\\"#canvas%E8%A3%81%E5%89%AA%E5%9C%86\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>canvas裁剪圆</h2>\\n<ul>\\n<li><a href=\\\"https://www.kancloud.cn/dennis/canvas/340120\\\">https://www.kancloud.cn/dennis/canvas/340120</a></li>\\n</ul>\\n<h2 id=\\\"canvas透明背景\\\"><a href=\\\"#canvas%E9%80%8F%E6%98%8E%E8%83%8C%E6%99%AF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>canvas透明背景</h2>\\n<ul>\\n<li><a href=\\\"http://www.dengzhr.com/frontend/html/1096\\\">http://www.dengzhr.com/frontend/html/1096</a></li>\\n</ul>\\n<h2 id=\\\"iphone上竖屏拍摄图片旋转bug\\\"><a href=\\\"#iphone%E4%B8%8A%E7%AB%96%E5%B1%8F%E6%8B%8D%E6%91%84%E5%9B%BE%E7%89%87%E6%97%8B%E8%BD%ACbug\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>iPhone上竖屏拍摄图片旋转bug</h2>\\n<p>iphone和部分三星手机上竖屏拍摄图片会旋转， 需要用<a href=\\\"\\\"></a>读取Orientation，来自己纠正。</p>\\n<ul>\\n<li><a href=\\\"https://www.jianshu.com/p/8afd55beca5a\\\">https://www.jianshu.com/p/8afd55beca5a</a></li>\\n<li><a href=\\\"https://www.bbsmax.com/A/VGzlMnYNJb/\\\">https://www.bbsmax.com/A/VGzlMnYNJb/</a></li>\\n<li><a href=\\\"https://github.com/exif-js/exif-js/\\\">https://github.com/exif-js/exif-js/</a></li>\\n<li><a href=\\\"https://segmentfault.com/a/1190000009990033\\\">https://segmentfault.com/a/1190000009990033</a></li>\\n<li><a href=\\\"https://aotu.io/notes/2017/05/25/canvas-img-rotate-and-flip/index.html\\\">https://aotu.io/notes/2017/05/25/canvas-img-rotate-and-flip/index.html</a></li>\\n</ul>\\n<h2 id=\\\"轮播图\\\"><a href=\\\"#%E8%BD%AE%E6%92%AD%E5%9B%BE\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>轮播图</h2>\\n<p>轮播图太通用不过了，网上也有很多代码或者插件（很多jQuery的插件）实现。推荐两个：</p>\\n<ul>\\n<li><a href=\\\"https://github.com/kenwheeler/slick/\\\">https://github.com/kenwheeler/slick/</a></li>\\n<li><a href=\\\"https://github.com/nolimits4web/swiper/\\\">https://github.com/nolimits4web/swiper/</a>\\n两个功能几乎一样，不过slick需要jquery。\\n当然，两个都有react的移植：</li>\\n<li><a href=\\\"https://github.com/akiran/react-slick\\\">https://github.com/akiran/react-slick</a></li>\\n<li><a href=\\\"https://github.com/kidjp85/react-id-swiper\\\">https://github.com/kidjp85/react-id-swiper</a>\\n我最后用了react-id-swiper，可以根据自己需要选择。</li>\\n</ul>\\n<h2 id=\\\"图片裁剪\\\"><a href=\\\"#%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>图片裁剪</h2>\\n<p>html5里面有<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader\\\">FileReader</a>特性， 可以在前端读取修改文件内容，再结合canvas，很容易就实现前端裁剪图片了。</p>\\n<ul>\\n<li><a href=\\\"https://segmentfault.com/a/1190000000754560\\\">https://segmentfault.com/a/1190000000754560</a>\\n结果看到有人说微信android版本，不支持长按保存base64方式的图片（canvas.toDataURI）的， 吓我一大跳，结果现在好像已经修复此bug了：</li>\\n<li><a href=\\\"https://mzkmzk.gitbooks.io/web_accumulate/wei_xin_base64_tu_pian_bao_cun_shi_bai.html\\\">https://mzkmzk.gitbooks.io/web<em>accumulate/wei</em>xin<em>base64</em>tu<em>pian</em>bao<em>cun</em>shi_bai.html</a></li>\\n<li><a href=\\\"https://segmentfault.com/q/1010000007709767\\\">https://segmentfault.com/q/1010000007709767</a></li>\\n<li><a href=\\\"http://www.cnblogs.com/Travel/p/4624929.html\\\">http://www.cnblogs.com/Travel/p/4624929.html</a></li>\\n<li><a href=\\\"https://www.codecasts.com/blog/post/crop-image-local-using-html5-canvas\\\">https://www.codecasts.com/blog/post/crop-image-local-using-html5-canvas</a></li>\\n<li><a href=\\\"https://dailc.github.io/2017/11/16/imageclip_rotate_compress.html\\\">https://dailc.github.io/2017/11/16/imageclip<em>rotate</em>compress.html</a></li>\\n<li><a href=\\\"http://www.cnblogs.com/Travel/p/4624929.html\\\">http://www.cnblogs.com/Travel/p/4624929.html</a></li>\\n<li><a href=\\\"https://www.codecasts.com/blog/post/crop-image-local-using-html5-canvas\\\">https://www.codecasts.com/blog/post/crop-image-local-using-html5-canvas</a></li>\\n<li><a href=\\\"https://github.com/DominicTobias/react-image-crop\\\">https://github.com/DominicTobias/react-image-crop</a></li>\\n<li><a href=\\\"http://hpoenixf.com/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Ereact%E7%9A%84%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA%E7%BB%84%E4%BB%B6.html\\\">http://hpoenixf.com/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Ereact%E7%9A%84%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA%E7%BB%84%E4%BB%B6.html</a></li>\\n<li><a href=\\\"https://github.com/nitin42/react-imgpro\\\">https://github.com/nitin42/react-imgpro</a></li>\\n<li><a href=\\\"https://github.com/AlloyTeam/AlloyImage\\\">https://github.com/AlloyTeam/AlloyImage</a></li>\\n<li><a href=\\\"https://github.com/AlloyTeam/AlloyFinger\\\">https://github.com/AlloyTeam/AlloyFinger</a></li>\\n<li><a href=\\\"https://github.com/AlloyTeam/AlloyCrop\\\">https://github.com/AlloyTeam/AlloyCrop</a></li>\\n<li><a href=\\\"https://github.com/AlloyTeam/AlloyTouch/wiki\\\">https://github.com/AlloyTeam/AlloyTouch/wiki</a></li>\\n</ul>\\n<h2 id=\\\"读取图片每个像素点的rgb\\\"><a href=\\\"#%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87%E6%AF%8F%E4%B8%AA%E5%83%8F%E7%B4%A0%E7%82%B9%E7%9A%84rgb\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>读取图片每个像素点的RGB</h2>\\n<ul>\\n<li><a href=\\\"https://zhidao.baidu.com/question/752983355955636524.html\\\">https://zhidao.baidu.com/question/752983355955636524.html</a></li>\\n<li><a href=\\\"http://js8.in/2013/01/02/html5-canvas-%E5%9B%BE%E7%89%87%E5%83%8F%E7%B4%A0/\\\">http://js8.in/2013/01/02/html5-canvas-%E5%9B%BE%E7%89%87%E5%83%8F%E7%B4%A0/</a></li>\\n<li><a href=\\\"https://segmentfault.com/a/1190000004084956\\\">https://segmentfault.com/a/1190000004084956</a></li>\\n<li><a href=\\\"http://yijiebuyi.com/blog/58bcb7af4a0e3846d02d10def9fdeecc.html\\\">http://yijiebuyi.com/blog/58bcb7af4a0e3846d02d10def9fdeecc.html</a></li>\\n<li><a href=\\\"http://www.cnblogs.com/zichi/p/html5-file-api.html\\\">http://www.cnblogs.com/zichi/p/html5-file-api.html</a></li>\\n<li><a href=\\\"https://www.xiabingbao.com/html5/2015/05/20/html5-filereader-natural.html\\\">https://www.xiabingbao.com/html5/2015/05/20/html5-filereader-natural.html</a></li>\\n</ul>\\n<h2 id=\\\"滑动到屏幕底部\\\"><a href=\\\"#%E6%BB%91%E5%8A%A8%E5%88%B0%E5%B1%8F%E5%B9%95%E5%BA%95%E9%83%A8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>滑动到屏幕底部</h2>\\n<p>需要了解viewport、clientHeight、offsetHeight、scrollHeight、scrollTop等概念。</p>\\n<ul>\\n<li><a href=\\\"http://www.cnblogs.com/w-wanglei/p/5863240.html\\\">http://www.cnblogs.com/w-wanglei/p/5863240.html</a></li>\\n<li><a href=\\\"http://imweb.io/topic/57c5409e808fd2fb204eef52\\\">http://imweb.io/topic/57c5409e808fd2fb204eef52</a></li>\\n<li><a href=\\\"https://www.jianshu.com/p/d267456ebc0d\\\">https://www.jianshu.com/p/d267456ebc0d</a></li>\\n<li><a href=\\\"https://exp-team.github.io/blog/2017/02/25/js/infinite-scroll/\\\">https://exp-team.github.io/blog/2017/02/25/js/infinite-scroll/</a></li>\\n<li><a href=\\\"https://stackoverflow.com/questions/22675126/what-is-offsetheight-clientheight-scrollheight\\\">https://stackoverflow.com/questions/22675126/what-is-offsetheight-clientheight-scrollheight</a></li>\\n<li><a href=\\\"https://cauu.github.io/2017/04/React-infinite-scroll-list/\\\">https://cauu.github.io/2017/04/React-infinite-scroll-list/</a></li>\\n<li><a href=\\\"https://www.jianshu.com/p/97f5cbc66577\\\">https://www.jianshu.com/p/97f5cbc66577</a></li>\\n</ul>\\n<h2 id=\\\"reactrouter-v4在非组件页面使用history\\\"><a href=\\\"#reactrouter-v4%E5%9C%A8%E9%9D%9E%E7%BB%84%E4%BB%B6%E9%A1%B5%E9%9D%A2%E4%BD%BF%E7%94%A8history\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ReactRouter v4在非组件页面使用history</h2>\\n<ul>\\n<li><a href=\\\"https://github.com/brickspert/blog/issues/3\\\">https://github.com/brickspert/blog/issues/3</a></li>\\n</ul>\\n<h2 id=\\\"react高阶组件\\\"><a href=\\\"#react%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>React高阶组件</h2>\\n<p>最后用React高阶组件把各个模板重构了一下。\\n<a href=\\\"https://reactjs.org/docs/higher-order-components.html\\\">https://reactjs.org/docs/higher-order-components.html</a></p>\\n<blockquote>\\n<p>Concretely, a higher-order component is a function that takes a component and returns a new component.</p>\\n</blockquote>\\n<p>注意，高阶组件是一个<code class=\\\"language-text\\\">function</code>，而不是component， 所以你只能<code class=\\\"language-text\\\">hoc(config)(ComponentA)</code>这样调用， 而不能<code class=\\\"language-text\\\">&lt;Hoc config={config} component={ComponentA} /&gt;</code>这样调用， 因为调用过一次之后，返回的已经是React.Elements了。具体可以看<a href=\\\"https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html\\\">https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html</a></p>\\n<ul>\\n<li><a href=\\\"https://reactjs.org/docs/higher-order-components.html\\\">https://reactjs.org/docs/higher-order-components.html</a></li>\\n<li><a href=\\\"https://segmentfault.com/a/1190000004598113\\\">https://segmentfault.com/a/1190000004598113</a></li>\\n<li><a href=\\\"https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e\\\">https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e</a></li>\\n<li><a href=\\\"https://github.com/acdlite/recompose\\\">https://github.com/acdlite/recompose</a></li>\\n</ul>\\n<p>高阶组件概念来自于函数式编程里面的高阶函数，如果不熟悉函数式编程， 可以看看下面的资料：</p>\\n<ul>\\n<li><a href=\\\"https://github.com/MostlyAdequate/mostly-adequate-guide\\\">https://github.com/MostlyAdequate/mostly-adequate-guide</a></li>\\n<li><a href=\\\"https://github.com/llh911001/mostly-adequate-guide-chinese\\\">https://github.com/llh911001/mostly-adequate-guide-chinese</a></li>\\n<li><a href=\\\"http://eloquentjavascript.net/05_higher_order.html\\\">http://eloquentjavascript.net/05<em>higher</em>order.html</a></li>\\n<li><a href=\\\"https://github.com/stoeffel/awesome-fp-js\\\">https://github.com/stoeffel/awesome-fp-js</a></li>\\n<li><a href=\\\"https://github.com/lodash/lodash/wiki/FP-Guide\\\">https://github.com/lodash/lodash/wiki/FP-Guide</a></li>\\n<li><a href=\\\"http://ramdajs.com/\\\">http://ramdajs.com/</a></li>\\n<li><a href=\\\"https://github.com/ramda/ramda-fantasy\\\">https://github.com/ramda/ramda-fantasy</a></li>\\n<li><a href=\\\"https://medium.freecodecamp.org/functional-programming-in-js-with-practical-examples-part-1-87c2b0dbc276\\\">https://medium.freecodecamp.org/functional-programming-in-js-with-practical-examples-part-1-87c2b0dbc276</a></li>\\n</ul>\\n<h2 id=\\\"react-16\\\"><a href=\\\"#react-16\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>React 16</h2>\\n<p>在开发的过程中发现如下代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>居然<code class=\\\"language-text\\\">render()</code>在<code class=\\\"language-text\\\">this.a += 1</code>之前执行？！！！跟setState函数是异步调用的说法不一致啊， 不知道是不是React16Fiber带来的特性， 抽空得好好研究下React16了。</p>\",\"timeToRead\":10,\"excerpt\":\"最近做了一个小项目， 在微信里面根据用户选择的模板、用户微信头像、昵称、用户选择上传的照片合成一个图片，用户可以保存到手机上，然后发朋友圈。 说复杂其实不复杂， 总结一下其中踩过的坑。 用Canvas合成照片 最开始是打算自己写Canvas…\",\"fields\":{\"slug\":\"/canvas-webapp/\"},\"frontmatter\":{\"title\":\"照片合成webapp项目总结\",\"date\":\"2018-01-29\",\"category\":\"FE\",\"tags\":[\"React\",\"canvas\",\"svg\",\"html2canvas\",\"HOC\"]}}},{\"node\":{\"html\":\"<p>人工智能是最近两年绝对的热点，而这次人工智能的复兴，有一个很重要的原因就是计算能力的提升，主要依赖于GPU。去年Nvidia的股价飙升了几倍，市面上好点的GPU一般都买不到，因为全被做深度学习以及挖比特币的人买光了😂。</p>\\n<p>GPU，全称Graphics Processing Unit，即图像处理器，早期主要用于显示图像使用。因为图像处理主要偏简单的矩阵运算，逻辑判断等很少，因此GPU的设计跟CPU架构不一样，也因此做到一个GPU上可以有很多计算单元，可以进行大量并行计算。网上找到一个视频，应该是Nvidia某年的产品发布会，形象地演示了CPU跟GPU的区别。<a href=\\\"http://v.youku.com/v_show/id_XNDcyNTc1MjQ4==.html\\\">http://v.youku.com/v<em>show/id</em>XNDcyNTc1MjQ4==.html</a> 。知乎上也有对CPU和GPU的对比<a href=\\\"https://www.zhihu.com/question/19903344\\\">https://www.zhihu.com/question/19903344</a></p>\\n<p>后来人们逐渐发现，GPU的这种特性还可以用于神经网络的训练，因为神经网络训练中也是大量的矩阵运算，然后原来的训练速度提高了几十倍，原来需要一周训练的模型，现在几个小时就可以出结果，于是神经网络飞速发展。。。</p>\\n<!-- more -->\\n<p>GPU虽快，但是写起来很难写，要用自己特殊的语言<a href=\\\"https://zh.wikipedia.org/wiki/GLSL\\\">GLSL - OpenGL Shading Language</a>编写，一般都是是将其它语言编译过来或者有很多库封装好了直接使用。经过搜索发现了<a href=\\\"https://github.com/gpujs/gpu.js/tree/develop\\\">gpu.js</a>这个库。</p>\\n<blockquote>\\n<p>gpu.js is a JavaScript library for GPGPU (General purpose computing on GPUs) in the browser. gpu.js will automatically compile specially written JavaScript functions into shader language and run them on the GPU using the WebGL API. In case WebGL is not available, the functions will still run in regular JavaScript.</p>\\n</blockquote>\\n<p>也就是说<a href=\\\"https://github.com/gpujs/gpu.js/tree/develop\\\">gpu.js</a>这个库会把你写的js编译成<code class=\\\"language-text\\\">GLSL</code>然后在GPU上执行，以达到加速的效果。并且，如果电脑不支持GPU，它还会当成普通的js执行。可以先到<a href=\\\"http://gpu.rocks/\\\">gpu.js官网</a>上体验一下，能达到5-10倍的提速。根据不同的电脑gpu配置，提速可能更多，这篇文章里面  <a href=\\\"https://hackernoon.com/introducing-gpu-js-gpu-accelerated-javascript-ba11a6069327\\\">https://hackernoon.com/introducing-gpu-js-gpu-accelerated-javascript-ba11a6069327</a> 提到的Chrome提高了23倍，Firefox提高了125倍！\\n<img src=\\\"/blogimgs/gpurocks-disabled.png\\\" alt=\\\"gpu.rocks Disabled(default)\\\">\\n<img src=\\\"/blogimgs/gpurocks-enabled.png\\\" alt=\\\"gpu.rocks Enabled (This is where the REAL POWER IS!)\\\"></p>\\n<h1 id=\\\"支持的语法\\\"><a href=\\\"#%E6%94%AF%E6%8C%81%E7%9A%84%E8%AF%AD%E6%B3%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>支持的语法</h1>\\n<p>一开始说了，GPU的设计跟CPU差别很大，只适合做简单的计算，不适合太多复杂的逻辑。所以gpu.js也只支持js的一个很小的子集：</p>\\n<ul>\\n<li>1D, 2D, 3D array of numbers or just numbers as kernel input</li>\\n<li>1D, 2D, 3D array of numbers as kernel output</li>\\n<li>Number variables</li>\\n<li>Custom and custom native functions</li>\\n<li>Arithmetic operations (+, +=, -, *, /, %)</li>\\n<li>Javascript Math functions (Math.floor() and etc.)</li>\\n<li>Loops</li>\\n<li>if and else statements</li>\\n<li>const and let</li>\\n<li>No variables captured by a closure</li>\\n</ul>\\n<h1 id=\\\"show-me-code\\\"><a href=\\\"#show-me-code\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Show Me Code</h1>\\n<p><a href=\\\"https://github.com/abhisheksoni27/gpu.js-demo\\\">https://github.com/abhisheksoni27/gpu.js-demo</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> c <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'c'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> gpu <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">GPU</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    mode<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'gpu'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Generate Matrices</span>\\n<span class=\\\"token keyword\\\">const</span> matrices <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">generateMatrices</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">A</span> <span class=\\\"token operator\\\">=</span> matrices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">B</span> <span class=\\\"token operator\\\">=</span> matrices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> gpuMatMult <span class=\\\"token operator\\\">=</span> gpu<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createKernel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> sum <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">512</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sum <span class=\\\"token operator\\\">+=</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>thread<span class=\\\"token punctuation\\\">.</span>y<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>thread<span class=\\\"token punctuation\\\">.</span>x<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> sum<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setDimensions</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// .setOutputToTexture(true);</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">cpuMatMult</span><span class=\\\"token punctuation\\\">(</span>m<span class=\\\"token punctuation\\\">,</span> n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> m<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        result<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">var</span> sum <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> k <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> k <span class=\\\"token operator\\\">&lt;</span> m<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> k<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                sum <span class=\\\"token operator\\\">+=</span> m<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">*</span> n<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            result<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> sum<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sumMatrix</span><span class=\\\"token punctuation\\\">(</span>m<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> m<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> m<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            total <span class=\\\"token operator\\\">+=</span> m<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> total<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">//CPU</span>\\n<span class=\\\"token keyword\\\">const</span> startCPU <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>performance<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> cpuResult <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">cpuMatMult</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> endCPU <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>performance<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> cpuTime <span class=\\\"token operator\\\">=</span> endCPU <span class=\\\"token operator\\\">-</span> startCPU<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`CPU: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>cpuTime<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">ms, total: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token function\\\">sumMatrix</span><span class=\\\"token punctuation\\\">(</span>cpuResult<span class=\\\"token punctuation\\\">)</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// //GPU</span>\\n<span class=\\\"token keyword\\\">const</span> startGPU <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>performance<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">gpuMatMult</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'gpuResult: '</span><span class=\\\"token punctuation\\\">,</span> result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> endGPU <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>performance<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> gpuTime <span class=\\\"token operator\\\">=</span> endGPU <span class=\\\"token operator\\\">-</span> startGPU<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`GPU: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>gpuTime<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">ms, total: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token function\\\">sumMatrix</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//Diff</span>\\n<span class=\\\"token keyword\\\">const</span> diff <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>cpuTime <span class=\\\"token operator\\\">-</span> gpuTime<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token punctuation\\\">(</span>gpuTime<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`%c </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>diff<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'color: red;'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`times faster!`</span></span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">generateMatrices</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> matSize <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">512</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> <span class=\\\"token constant\\\">A</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> <span class=\\\"token constant\\\">B</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> matSize<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> matSize<span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">*</span> matSize <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>j <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">*</span> matSize <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>j <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token constant\\\">B</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"deeplearnjs\\\"><a href=\\\"#deeplearnjs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>deeplearn.js</h1>\\n<p>另外还有一个库是最近Google刚开源的<a href=\\\"https://github.com/PAIR-code/deeplearnjs\\\">deeplearn.js</a>， 如果要做深度学习的话是很好的工具。后面我们会找时间单独介绍。</p>\\n<h1 id=\\\"总结\\\"><a href=\\\"#%E6%80%BB%E7%BB%93\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>总结</h1>\\n<p>由于架构设计不一样，GPU很适合做简单的并发计算，应用于图像处理、深度学习等领域能大大加快速度，也直接引爆了这一次人工智能的发展。当然直接用gpu去开发程序很难编写，一般都是由特殊编译器将代码编译成可以在gpu上执行的代码。本文提高的<a href=\\\"\\\">gpu.js</a>就是在前端将js的一个子集编译成能在webgl上执行的一个编译器。</p>\\n<p>当然我们的业务逻辑比较复杂，发现很难把代码改写成能在GPU上加速执行的，最后我们采用的是之前讲过的WebWorkers+WebAssembly的方式，提速也能达到数十倍，代码还简单很多，易于维护。当然不是说复杂的问题不能转化到GPU上执行，这篇文章 <a href=\\\"https://amoffat.github.io/held-karp-gpu-demo/\\\">https://amoffat.github.io/held-karp-gpu-demo/</a> 就讲怎么用GPU加速去解决<a href=\\\"https://en.wikipedia.org/wiki/Travelling_salesman_problem\\\">TSP问题</a>，方法很巧妙，有兴趣的可以看看。</p>\\n<p>==============</p>\\n<p>话说我们后来根据对问题的深入分析，将问题的复杂度简化了，瞬间提速100倍😝，所以说做优化工程之前，一定要先确保算法已经没有什么优化的空间了。算法对速度的提升是远大于编程语言等的，当然算法的提速是可以跟工程优化叠加的，将两者结合起来我们的项目相比最之前的算法有将近3000倍的提速😍，完全解决了问题🤗。</p>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ul>\\n<li><a href=\\\"https://github.com/gpujs\\\">https://github.com/gpujs</a></li>\\n<li><a href=\\\"http://gpujs.github.io/usr-docs/files/gpu-js.html\\\">http://gpujs.github.io/usr-docs/files/gpu-js.html</a></li>\\n<li><a href=\\\"https://hackernoon.com/introducing-gpu-js-gpu-accelerated-javascript-ba11a6069327\\\">https://hackernoon.com/introducing-gpu-js-gpu-accelerated-javascript-ba11a6069327</a></li>\\n<li><a href=\\\"http://gpu.rocks/playground/\\\">http://gpu.rocks/playground/</a></li>\\n<li><a href=\\\"https://github.com/PAIR-code/deeplearnjs\\\">https://github.com/PAIR-code/deeplearnjs</a></li>\\n<li><a href=\\\"https://deeplearnjs.org/\\\">https://deeplearnjs.org/</a></li>\\n<li><a href=\\\"https://amoffat.github.io/held-karp-gpu-demo/\\\">https://amoffat.github.io/held-karp-gpu-demo/</a></li>\\n<li><a href=\\\"https://github.com/turbo/js\\\">https://github.com/turbo/js</a></li>\\n<li><a href=\\\"https://github.com/stormcolor/webclgl\\\">https://github.com/stormcolor/webclgl</a></li>\\n</ul>\",\"timeToRead\":4,\"excerpt\":\"人工智能是最近两年绝对的热点，而这次人工智能的复兴，有一个很重要的原因就是计算能力的提升，主要依赖于GPU。去年Nvidia的股价飙升了几倍，市面上好点的GPU一般都买不到，因为全被做深度学习以及挖比特币的人买光了😂。 GPU，全称Graphics Processing…\",\"fields\":{\"slug\":\"/fe-hpc/gpujs\"},\"frontmatter\":{\"title\":\"前端高性能计算之四：GPU加速计算\",\"date\":\"2017-10-16\",\"category\":\"FE\",\"tags\":[\"gpu\",\"wegbl\",\"cuda\"]}}},{\"node\":{\"html\":\"<p><a href=\\\"/fe-hpc/asmjs-and-webassembly\\\">前一篇</a>我们探索了用<a href=\\\"https://kripken.github.io/emscripten-site/index.html\\\">Emscripten</a>编译<code class=\\\"language-text\\\">C</code>代码到<code class=\\\"language-text\\\">asm.js</code>和<code class=\\\"language-text\\\">WebAssembly</code>，使前端代码执行速度大大提升，但是实际项目中由于<code class=\\\"language-text\\\">C</code>语言缺乏很多高级特性，不利于开发大型项目（说<code class=\\\"language-text\\\">C</code>可以开发操作系统kernel这种大型项目的同学不好意思，我没那么nb），而<code class=\\\"language-text\\\">C++</code>我又觉得太复杂，也没有用过<code class=\\\"language-text\\\">C++</code>做过大型项目，所以我最后选择了<a href=\\\"https://www.rust-lang.org/\\\">Rust</a>。</p>\\n<p>一开始也纠结过要用<code class=\\\"language-text\\\">Go</code>还是<code class=\\\"language-text\\\">Rust</code>或者<code class=\\\"language-text\\\">Swift</code>的，后来发现<code class=\\\"language-text\\\">Go</code>目前还不<a href=\\\"https://github.com/golang/go/issues/18892\\\">支持编译到<code class=\\\"language-text\\\">WebAssembly</code></a>，Swift按理说应该可以支持的，因为都是用LLVM做的编译器，不过没有找到好的资料，好像说要自己编译LLVM去支持<a href=\\\"https://stackoverflow.com/questions/46572144/compile-swift-to-webassembly\\\">https://stackoverflow.com/questions/46572144/compile-swift-to-webassembly</a> 。另外对Rust的一些特性很是喜欢，听说<code class=\\\"language-text\\\">Rust很复杂，比较像Scala和Haskell</code>，而偏偏我对Scala还算熟悉，也学过一下Haskell，所以决定尝试一下Rust。</p>\\n<p><a href=\\\"https://github.com/ChristianMurphy/compile-to-web\\\">https://github.com/ChristianMurphy/compile-to-web</a> 这里可以查看目前能编译到WebAssembly的语言。</p>\\n<p>PS, 话说asm.js和Rust都是Mozilla搞的呢。</p>\\n<!-- more -->\\n<h1 id=\\\"安装rust的管理工具rustup\\\"><a href=\\\"#%E5%AE%89%E8%A3%85rust%E7%9A%84%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7rustup\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>安装Rust的管理工具rustup</h1>\\n<p><a href=\\\"rustup\\\">rustup</a>用于安装管理Rust的相关工具，包括编译器rustc、包管理工具cargo等，支持安装不同版本比如stable, beta, nightly等以及在不同版本之间切换，类似于<a href=\\\"https://github.com/creationix/nvm\\\">nvm</a>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">curl</span> https://sh.rustup.rs -sSf <span class=\\\"token operator\\\">|</span> sh</code></pre>\\n      </div>\\n<h1 id=\\\"安装emscripten-rust编译器\\\"><a href=\\\"#%E5%AE%89%E8%A3%85emscripten-rust%E7%BC%96%E8%AF%91%E5%99%A8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>安装Emscripten Rust编译器</h1>\\n<p>用rustup安装最新体验版(Nightly Version)：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">rustup toolchain add nightly\\nrustup target add wasm32-unknown-emscripten --toolchain nightly</code></pre>\\n      </div>\\n<h1 id=\\\"安装cmake\\\"><a href=\\\"#%E5%AE%89%E8%A3%85cmake\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>安装cmake</h1>\\n<p>根据平台自行选择：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">brew <span class=\\\"token function\\\">install</span> cmake                  <span class=\\\"token comment\\\"># MacOS, brew</span>\\n<span class=\\\"token function\\\">sudo</span> port <span class=\\\"token function\\\">install</span> cmake             <span class=\\\"token comment\\\"># MacOS, MacPorts</span>\\n<span class=\\\"token function\\\">sudo</span> <span class=\\\"token function\\\">apt-get</span> <span class=\\\"token function\\\">install</span> cmake          <span class=\\\"token comment\\\"># Debian Linux</span></code></pre>\\n      </div>\\n<h1 id=\\\"安装-emscripten\\\"><a href=\\\"#%E5%AE%89%E8%A3%85-emscripten\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>安装 Emscripten</h1>\\n<p>参考<a href=\\\"/fe-hpc/asmjs-and-webassembly\\\">前一篇</a>，或者直接执行下面命令：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">wget</span> https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz\\n<span class=\\\"token function\\\">tar</span> -xvf emsdk-portable.tar.gz\\n<span class=\\\"token function\\\">cd</span> emsdk-portable\\n./emsdk update\\n./emsdk <span class=\\\"token function\\\">install</span> sdk-incoming-64bit</code></pre>\\n      </div>\\n<p>这一步花的时间比较久，据说要2个多小时，我是执行完命令就出去跟朋友吃饭了，所以具体时间不知道。</p>\\n<p>添加下列路径到<code class=\\\"language-text\\\">PATH</code>中：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">~/emsdk-portable\\n~/emsdk-portable/clang/fastcomp/build_incoming_64/bin\\n~/emsdk-portable/emscripten/incoming</code></pre>\\n      </div>\\n<p>终端执行<code class=\\\"language-text\\\">emcc -v</code>检查是否安装成功。</p>\\n<h1 id=\\\"用webpack运行rust\\\"><a href=\\\"#%E7%94%A8webpack%E8%BF%90%E8%A1%8Crust\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>用Webpack运行Rust</h1>\\n<p>新建一个Rust/Javascript混合项目：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">cargo new webasm --bin --vcs none\\n<span class=\\\"token function\\\">cd</span> webasm\\n<span class=\\\"token function\\\">npm</span> init\\nrustup override <span class=\\\"token keyword\\\">set</span> nightly</code></pre>\\n      </div>\\n<p>安装<a href=\\\"https://webpack.js.org\\\">Webpack</a>, <a href=\\\"https://github.com/webpack/webpack-dev-server\\\">webpack-dev-server</a>, <a href=\\\"https://www.npmjs.com/package/rust-wasm-loader\\\">rust-wasm-loader</a>, </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">npm</span> i -D webpack webpack-dev-server rust-wasm-loader</code></pre>\\n      </div>\\n<p>增加<code class=\\\"language-text\\\">package.json</code>脚本：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webasm\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"version\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"1.0.0\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"description\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"main\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"index.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"test\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"echo \\\\\\\"Error: no test specified\\\\\\\" &amp;&amp; exit 1\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"compile\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack --progress\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"serve\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"http-server\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --content-base ./build\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"author\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"magicly\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"license\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"ISC\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"devDependencies\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"http-server\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"^0.10.0\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"rust-wasm-loader\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"^0.1.2\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"webpack\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"^3.6.0\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"webpack-dev-server\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"^2.8.2\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>在<code class=\\\"language-text\\\">build</code>目录下新建文件<code class=\\\"language-text\\\">index.html</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token doctype\\\">&lt;!DOCTYPE html></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>title</span><span class=\\\"token punctuation\\\">></span></span>Hello WebAssembly<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>title</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>container<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/bundle.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>配置<code class=\\\"language-text\\\">webpack.config.js</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">module<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  entry<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'./src/index.js'</span><span class=\\\"token punctuation\\\">,</span>\\n  output<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    filename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'bundle.js'</span><span class=\\\"token punctuation\\\">,</span>\\n    path<span class=\\\"token punctuation\\\">:</span> __dirname <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'/build'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  module<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    rules<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.rs$/</span><span class=\\\"token punctuation\\\">,</span>\\n        use<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n          loader<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'rust-wasm-loader'</span><span class=\\\"token punctuation\\\">,</span>\\n          options<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// The path to the webpack output relative to the project root</span>\\n            path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">,</span>\\n            release<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token comment\\\">// 没有的话性能巨差，差不多只有1/10</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// The .wasm 'glue' code generated by Emscripten requires these node builtins,</span>\\n  <span class=\\\"token comment\\\">// but won't actually use them in a web environment. We tell Webpack to not resolve those</span>\\n  <span class=\\\"token comment\\\">// require statements since we know we won't need them.</span>\\n  externals<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'path'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>新建<code class=\\\"language-text\\\">src/main.rs</code>文件，添加我们要从js中调用的函数：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-rust\\\"><code class=\\\"language-rust\\\"><span class=\\\"token keyword\\\">fn</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">println!</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Hello, world!\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// Functions that you wish to access from Javascript</span>\\n<span class=\\\"token comment\\\">// must be marked as no_mangle</span>\\n<span class=\\\"token attribute attr-name\\\">#[no_mangle]</span>\\n<span class=\\\"token keyword\\\">pub</span> <span class=\\\"token keyword\\\">fn</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">:</span> i32<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">:</span> i32<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">-></span> i32 <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>新建<code class=\\\"language-text\\\">src/index.js</code>，写代码加载WebAssembly模块：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> wasm <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./main.rs'</span><span class=\\\"token punctuation\\\">)</span>\\n\\nwasm<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">initialize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> noExitRuntime<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>module <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// Create a Javascript wrapper around our Rust function</span>\\n  <span class=\\\"token keyword\\\">const</span> add <span class=\\\"token operator\\\">=</span> module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cwrap</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'add'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n  \\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Calling rust functions from javascript!'</span><span class=\\\"token punctuation\\\">)</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>然后执行<code class=\\\"language-text\\\">npm start</code>，访问<a href=\\\"http://localhost:8080/\\\">http://localhost:8080/</a>就可以看到调用rust代码的效果了。并且还支持热更新哦，直接修改rust代码，保存，页面就能看到最新效果。\\n<img src=\\\"/blogimgs/rust-webassembly-console.png\\\" alt=\\\"Rust WebAssembly console\\\"></p>\\n<p>测试了一下前一篇里的代码，直接运行rust优化过的代码只需要300多ms，这个基本跟C代码一样，但是用wasm运行，居然要2.7s左右，不知道是哪里没有配置好，还是说现在Rust编译成wasm没有优化好。Rust支持WebAssembly应该还不是特别成熟，可以关注<a href=\\\"https://github.com/rust-lang/rust/issues/38804\\\">https://github.com/rust-lang/rust/issues/38804</a> 跟进。</p>\\n<p>另外Rust有一个包<a href=\\\"https://crates.io/crates/webplatform%EF%BC%8C\\\">https://crates.io/crates/webplatform，</a> 可以用来操作DOM，不过我目前用不到（感觉没啥用）。</p>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ul>\\n<li><a href=\\\"https://medium.com/@ianjsikes/get-started-with-rust-webassembly-and-webpack-58d28e219635\\\">https://medium.com/@ianjsikes/get-started-with-rust-webassembly-and-webpack-58d28e219635</a></li>\\n<li><a href=\\\"http://zcfy.cc/article/get-started-with-rust-webassembly-and-webpack-ian-j-sikes-medium-3345.html\\\">http://zcfy.cc/article/get-started-with-rust-webassembly-and-webpack-ian-j-sikes-medium-3345.html</a></li>\\n<li><a href=\\\"https://users.rust-lang.org/t/compiling-to-the-web-with-rust-and-emscripten/7627\\\">Compiling to the web with Rust and emscripten</a></li>\\n<li><a href=\\\"https://www.slideshare.net/RReverser/rust-javascript\\\">Rust ⇋ JavaScript</a></li>\\n<li><a href=\\\"http://www.hellorust.com/emscripten/\\\">http://www.hellorust.com/emscripten/</a></li>\\n<li><a href=\\\"http://asquera.de/blog/2017-04-10/the-path-to-rust-on-the-web/\\\">http://asquera.de/blog/2017-04-10/the-path-to-rust-on-the-web/</a></li>\\n<li><a href=\\\"https://github.com/mrdziuban/rust-emscripten-loader\\\">https://github.com/mrdziuban/rust-emscripten-loader</a></li>\\n<li><a href=\\\"https://github.com/ballercat/wasm-loader\\\">https://github.com/ballercat/wasm-loader</a></li>\\n<li><a href=\\\"https://hackernoon.com/compiling-rust-to-webassembly-guide-411066a69fde\\\">https://hackernoon.com/compiling-rust-to-webassembly-guide-411066a69fde</a></li>\\n<li><a href=\\\"https://github.com/mbasso/awesome-wasm\\\">https://github.com/mbasso/awesome-wasm</a></li>\\n<li><a href=\\\"https://github.com/rust-lang/rust/issues/38805\\\">https://github.com/rust-lang/rust/issues/38805</a></li>\\n<li><a href=\\\"https://davidmcneil.github.io/the-rusty-web/#benchmarks\\\">https://davidmcneil.github.io/the-rusty-web/#benchmarks</a></li>\\n<li><a href=\\\"http://asmjs.org/\\\">http://asmjs.org/</a></li>\\n<li><a href=\\\"http://webassembly.org/\\\">http://webassembly.org/</a></li>\\n<li><a href=\\\"https://kripken.github.io/emscripten-site/index.html\\\">https://kripken.github.io/emscripten-site/index.html</a></li>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/WebAssembly\\\">https://developer.mozilla.org/en-US/docs/WebAssembly</a></li>\\n<li><a href=\\\"http://www.codepool.biz/emscripten-compile-cc-javascript.html\\\">http://www.codepool.biz/emscripten-compile-cc-javascript.html</a></li>\\n<li><a href=\\\"http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html\\\">http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html</a></li>\\n<li><a href=\\\"https://zhuanlan.zhihu.com/p/25865972\\\">https://zhuanlan.zhihu.com/p/25865972</a></li>\\n<li><a href=\\\"https://zhuanlan.zhihu.com/p/24632251\\\">https://zhuanlan.zhihu.com/p/24632251</a></li>\\n</ul>\",\"timeToRead\":6,\"excerpt\":\"前一篇 我们探索了用 Emscripten 编译 代码到 和 ，使前端代码执行速度大大提升，但是实际项目中由于 语言缺乏很多高级特性，不利于开发大型项目（说 可以开发操作系统kernel这种大型项目的同学不好意思，我没那么nb…\",\"fields\":{\"slug\":\"/fe-hpc/rust-asmjs-and-webassembly\"},\"frontmatter\":{\"title\":\"前端高性能计算之三：Rust -> asm.js & webassembly\",\"date\":\"2017-10-09\",\"category\":\"FE\",\"tags\":[\"Rust\",\"asm.js\",\"webassembly\"]}}},{\"node\":{\"html\":\"<p><a href=\\\"/fe-hpc/webworkers\\\">前一篇</a>我们说了要解决高性能计算的两个方法，一个是并发用WebWorkers，另一个就是用更底层的静态语言。</p>\\n<p>2012年，Mozilla的工程师<a href=\\\"https://twitter.com/kripken\\\">Alon Zakai</a>在研究<a href=\\\"http://llvm.org/\\\">LLVM</a>编译器时突发奇想：能不能把C/C++编译成Javascript，并且尽量达到Native代码的速度呢？于是他开发了<a href=\\\"https://kripken.github.io/emscripten-site/index.html\\\">Emscripten</a>编译器，用于将C/C++代码编译成Javascript的一个子集<a href=\\\"http://asmjs.org/\\\">asm.js</a>，性能差不多是原生代码的50%。大家可以看看<a href=\\\"http://kripken.github.io/mloc_emscripten_talk/\\\">这个PPT</a>。</p>\\n<p>之后Google开发了<a href=\\\"\\\">Portable Native Client</a>，也是一种能让浏览器运行C/C++代码的技术。\\n后来估计大家都觉得各搞各的不行啊，居然Google, Microsoft, Mozilla, Apple等几家大公司一起合作开发了一个面向Web的通用二进制和文本格式的项目，那就是<a href=\\\"http://webassembly.org/\\\">WebAssembly</a>，官网上的介绍是：</p>\\n<blockquote>\\n<p>WebAssembly or wasm is a new portable, size- and load-time-efficient format suitable for compilation to the web.</p>\\n</blockquote>\\n<blockquote>\\n<p>WebAssembly is currently being designed as an open standard by a W3C Community Group that includes representatives from all major browsers.</p>\\n</blockquote>\\n<p>所以，<a href=\\\"http://webassembly.org/\\\">WebAssembly</a>应该是一个前景很好的项目。我们可以看一下<a href=\\\"https://caniuse.com/#search=webassembly\\\">目前浏览器的支持情况</a>：\\n<img src=\\\"/blogimgs/caniuse-webassembly.png\\\" alt=\\\"can i use webassembly\\\"></p>\\n<!-- more -->\\n<h1 id=\\\"安装emscripten\\\"><a href=\\\"#%E5%AE%89%E8%A3%85emscripten\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>安装Emscripten</h1>\\n<p>访问<a href=\\\"https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html\\\">https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html</a></p>\\n<p>1. 下载对应平台版本的SDK</p>\\n<p>2. 通过emsdk获取最新版工具</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># Fetch the latest registry of available tools.</span>\\n./emsdk update\\n\\n<span class=\\\"token comment\\\"># Download and install the latest SDK tools.</span>\\n./emsdk <span class=\\\"token function\\\">install</span> latest\\n\\n<span class=\\\"token comment\\\"># Make the \\\"latest\\\" SDK \\\"active\\\" for the current user. (writes ~/.emscripten file)</span>\\n./emsdk activate latest\\n\\n<span class=\\\"token comment\\\"># Activate PATH and other environment variables in the current terminal</span>\\n<span class=\\\"token function\\\">source</span> ./emsdk_env.sh</code></pre>\\n      </div>\\n<p>3. 将下列添加到环境变量PATH中</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">~/emsdk-portable\\n~/emsdk-portable/clang/fastcomp/build_incoming_64/bin\\n~/emsdk-portable/emscripten/incoming</code></pre>\\n      </div>\\n<p>4. 其他</p>\\n<p>我在执行的时候碰到报错说<code class=\\\"language-text\\\">LLVM</code>版本不对，后来参考<a href=\\\"https://kripken.github.io/emscripten-site/docs/building_from_source/configuring_emscripten_settings.html\\\">文档</a>配置了<code class=\\\"language-text\\\">LLVM_ROOT</code>变量就好了，如果你没有遇到问题，可以忽略。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">LLVM_ROOT <span class=\\\"token operator\\\">=</span> os.path.expanduser<span class=\\\"token punctuation\\\">(</span>os.getenv<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'LLVM'</span>, <span class=\\\"token string\\\">'/home/ubuntu/a-path/emscripten-fastcomp/build/bin'</span><span class=\\\"token punctuation\\\">))</span></code></pre>\\n      </div>\\n<p>5. 验证是否安装好</p>\\n<p>执行<code class=\\\"language-text\\\">emcc -v</code>，如果安装好会出现如下信息：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc <span class=\\\"token punctuation\\\">(</span>Emscripten gcc/clang-like replacement + linker emulating GNU ld<span class=\\\"token punctuation\\\">)</span> 1.37.21\\nclang version 4.0.0 <span class=\\\"token punctuation\\\">(</span>https://github.com/kripken/emscripten-fastcomp-clang.git 974b55fd84ca447c4297fc3b00cefb6394571d18<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">(</span>https://github.com/kripken/emscripten-fastcomp.git 9e4ee9a67c3b67239bd1438e31263e2e86653db5<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">(</span>emscripten 1.37.21 <span class=\\\"token keyword\\\">:</span> 1.37.21<span class=\\\"token punctuation\\\">)</span>\\nTarget: x86_64-apple-darwin15.5.0\\nThread model: posix\\nInstalledDir: /Users/magicly/emsdk-portable/clang/fastcomp/build_incoming_64/bin\\nINFO:root:<span class=\\\"token punctuation\\\">(</span>Emscripten: Running sanity checks<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<h1 id=\\\"hello-webassembly\\\"><a href=\\\"#hello-webassembly\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hello, WebAssembly!</h1>\\n<p>创建一个文件<code class=\\\"language-text\\\">hello.c</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code class=\\\"language-c\\\"><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Hello, WebAssembly!\\\\n\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>编译<code class=\\\"language-text\\\">C/C++</code>代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc hello.c</code></pre>\\n      </div>\\n<p>上述命令会生成一个<code class=\\\"language-text\\\">a.out.js</code>文件，我们可以直接用<code class=\\\"language-text\\\">Node.js</code>执行：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">node a.out.js</code></pre>\\n      </div>\\n<p>输出</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">Hello, WebAssembly<span class=\\\"token operator\\\">!</span></code></pre>\\n      </div>\\n<p>为了让代码运行在网页里面，执行下面命令会生成<code class=\\\"language-text\\\">hello.html</code>和<code class=\\\"language-text\\\">hello.js</code>两个文件，其中<code class=\\\"language-text\\\">hello.js</code>和<code class=\\\"language-text\\\">a.out.js</code>内容是完全一样的。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc hello.c -o hello.html</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  webasm-study md5 a.out.js\\nMD5 <span class=\\\"token punctuation\\\">(</span>a.out.js<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> d7397f44f817526a4d0f94bc85e46429\\n➜  webasm-study md5 hello.js\\nMD5 <span class=\\\"token punctuation\\\">(</span>hello.js<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> d7397f44f817526a4d0f94bc85e46429</code></pre>\\n      </div>\\n<p>然后在浏览器打开hello.html，可以看到页面\\n<img src=\\\"/blogimgs/hello1.png\\\" alt=\\\"hello1.html\\\"></p>\\n<p>前面生成的代码都是<code class=\\\"language-text\\\">asm.js</code>，毕竟<a href=\\\"https://kripken.github.io/emscripten-site/index.html\\\">Emscripten</a>是人家作者<a href=\\\"https://twitter.com/kripken\\\">Alon Zakai</a>最早用来生成<code class=\\\"language-text\\\">asm.js</code>的，默认输出<code class=\\\"language-text\\\">asm.js</code>也就不足为奇了。当然，可以通过option生成<code class=\\\"language-text\\\">wasm</code>，会生成三个文件：<code class=\\\"language-text\\\">hello-wasm.html</code>, <code class=\\\"language-text\\\">hello-wasm.js</code>, <code class=\\\"language-text\\\">hello-wasm.wasm</code>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc hello.c -s WASM<span class=\\\"token operator\\\">=</span>1 -o hello-wasm.html</code></pre>\\n      </div>\\n<p>然后浏览器打开<code class=\\\"language-text\\\">hello-wasm.html</code>，发现报错<code class=\\\"language-text\\\">TypeError: Failed to fetch</code>。原因是<code class=\\\"language-text\\\">wasm</code>文件是通过<code class=\\\"language-text\\\">XHR</code>异步加载的，用<code class=\\\"language-text\\\">file:////</code>访问会报错，所以我们需要启一个服务器。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> -g serve\\nserve <span class=\\\"token keyword\\\">.</span></code></pre>\\n      </div>\\n<p>然后访问<code class=\\\"language-text\\\">http://localhost:5000/hello-wasm.html</code>，就可以看到正常结果了。</p>\\n<h1 id=\\\"调用cc函数\\\"><a href=\\\"#%E8%B0%83%E7%94%A8cc%E5%87%BD%E6%95%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>调用C/C++函数</h1>\\n<p>前面的<code class=\\\"language-text\\\">Hello, WebAssembly!</code>都是<code class=\\\"language-text\\\">main</code>函数直接打出来的，而我们使用<code class=\\\"language-text\\\">WebAssembly</code>的目的是为了高性能计算，做法多半是用C/C++实现某个函数进行耗时的计算，然后编译成<code class=\\\"language-text\\\">wasm</code>，暴露给js去调用。</p>\\n<p>在文件<code class=\\\"language-text\\\">add.c</code>中写如下代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code class=\\\"language-c\\\"><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"a + b: %d\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>有两种方法可以把<code class=\\\"language-text\\\">add</code>方法暴露出来给js调用。</p>\\n<h2 id=\\\"通过命令行参数暴露api\\\"><a href=\\\"#%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E6%9A%B4%E9%9C%B2api\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>通过命令行参数暴露API</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc -s EXPORTED_FUNCTIONS<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"['_add']\\\"</span> add.c -o add.js</code></pre>\\n      </div>\\n<p>注意方法名<code class=\\\"language-text\\\">add</code>前必须加<code class=\\\"language-text\\\">_</code>。\\n然后我们可以在<code class=\\\"language-text\\\">Node.js</code>里面这样使用：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// file node-add.js</span>\\n<span class=\\\"token keyword\\\">const</span> add_module <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./add.js'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>add_module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ccall</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'add'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>执行<code class=\\\"language-text\\\">node node-add.js</code>会输出<code class=\\\"language-text\\\">5</code>。\\n如果需要在web页面使用的话，执行：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc -s EXPORTED_FUNCTIONS<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"['_add']\\\"</span> add.c -o add.html</code></pre>\\n      </div>\\n<p>然后在生成的<code class=\\\"language-text\\\">add.html</code>中加入如下代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\">  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onclick</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>nativeAdd()<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>click<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>text/javascript<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\">\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">nativeAdd</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> Module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ccall</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'add'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>然后点击button，就可以看到执行结果了。</p>\\n<p><code class=\\\"language-text\\\">Module.ccall</code>会直接调用<code class=\\\"language-text\\\">C/C++</code>代码的方法，更通用的场景是我们获取到一个包装过的函数，可以在js里面反复调用，这需要用<code class=\\\"language-text\\\">Module.cwrap</code>，具体细节可以参看<a href=\\\"https://kripken.github.io/emscripten-site/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html#interacting-with-code-ccall-cwrap\\\">文档</a>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> cAdd <span class=\\\"token operator\\\">=</span> add_module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cwrap</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'add'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">cAdd</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">cAdd</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"定义函数的时候添加code-classlanguage-textemscripten_keepalivecode\\\"><a href=\\\"#%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E7%9A%84%E6%97%B6%E5%80%99%E6%B7%BB%E5%8A%A0code-classlanguage-textemscripten_keepalivecode\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>定义函数的时候添加<code class=\\\"language-text\\\">EMSCRIPTEN_KEEPALIVE</code></h2>\\n<p>添加文件<code class=\\\"language-text\\\">add2.c</code>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code class=\\\"language-c\\\"><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n<span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;emscripten.h></span></span>\\n\\n<span class=\\\"token keyword\\\">int</span> EMSCRIPTEN_KEEPALIVE <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"a + b: %d\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>执行命令：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc add2.c -o add2.html</code></pre>\\n      </div>\\n<p>同样在<code class=\\\"language-text\\\">add2.html</code>中添加代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\">  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onclick</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>nativeAdd()<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>click<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>text/javascript<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\">\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">nativeAdd</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> Module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ccall</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'add'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>但是，当你点击button的时候，报错：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">Assertion failed: the runtime was exited <span class=\\\"token punctuation\\\">(</span>use NO_EXIT_RUNTIME to keep it alive after main<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> exits<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>可以通过在<code class=\\\"language-text\\\">main()</code>中添加<code class=\\\"language-text\\\">emscripten_exit_with_live_runtime()</code>解决：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code class=\\\"language-c\\\"><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n<span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;emscripten.h></span></span>\\n\\n<span class=\\\"token keyword\\\">int</span> EMSCRIPTEN_KEEPALIVE <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"a + b: %d\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">emscripten_exit_with_live_runtime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>或者也可以直接在命令行中添加<code class=\\\"language-text\\\">-s NO_EXIT_RUNTIME=1</code>来解决，</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc add2.c -o add2.js -s NO_EXIT_RUNTIME<span class=\\\"token operator\\\">=</span>1</code></pre>\\n      </div>\\n<p>不过会报一个警告：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">exit<span class=\\\"token punctuation\\\">(</span>0<span class=\\\"token punctuation\\\">)</span> implicitly called by end of main<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>, but noExitRuntime, so not exiting the runtime <span class=\\\"token punctuation\\\">(</span>you can use emscripten_force_exit, <span class=\\\"token keyword\\\">if</span> you want to force a <span class=\\\"token boolean\\\">true</span> shutdown<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>所以建议采用第一种方法。</p>\\n<p>上述生成的代码都是<code class=\\\"language-text\\\">asm.js</code>，只需要在编译参数中添加<code class=\\\"language-text\\\">-s WASM=1</code>中就可以生成<code class=\\\"language-text\\\">wasm</code>，然后使用方法都一样。</p>\\n<h1 id=\\\"用asmjs和webassembly执行耗时计算\\\"><a href=\\\"#%E7%94%A8asmjs%E5%92%8Cwebassembly%E6%89%A7%E8%A1%8C%E8%80%97%E6%97%B6%E8%AE%A1%E7%AE%97\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>用asm.js和WebAssembly执行耗时计算</h1>\\n<p>前面准备工作都做完了， 现在我们来试一下用<code class=\\\"language-text\\\">C</code>代码来优化<a href=\\\"./webworkers\\\">前一篇</a>中提过的问题。代码很简单：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code class=\\\"language-c\\\"><span class=\\\"token comment\\\">// file sum.c</span>\\n<span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n<span class=\\\"token comment\\\">// #include &lt;emscripten.h></span>\\n\\n<span class=\\\"token keyword\\\">long</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> start<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">long</span> end<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">long</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    total <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    total <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> total<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"sum(0, 1000000000): %ld\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000000000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// emscripten_exit_with_live_runtime();</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>注意用<code class=\\\"language-text\\\">gcc</code>编译的时候需要把跟<code class=\\\"language-text\\\">emscriten</code>相关的两行代码注释掉，否则编译不过。\\n我们先直接用<code class=\\\"language-text\\\">gcc</code>编译成<code class=\\\"language-text\\\">native code</code>看看代码运行多块呢？</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  webasm-study gcc sum.c\\n➜  webasm-study <span class=\\\"token function\\\">time</span> ./a.out\\nsum<span class=\\\"token punctuation\\\">(</span>0, 1000000000<span class=\\\"token punctuation\\\">)</span>: 0./a.out  5.70s user 0.02s system 99% cpu 5.746 total\\n➜  webasm-study gcc -O1 sum.c\\n➜  webasm-study <span class=\\\"token function\\\">time</span> ./a.out\\nsum<span class=\\\"token punctuation\\\">(</span>0, 1000000000<span class=\\\"token punctuation\\\">)</span>: 0./a.out  0.00s user 0.00s system 64% cpu 0.003 total\\n➜  webasm-study gcc -O2 sum.c\\n➜  webasm-study <span class=\\\"token function\\\">time</span> ./a.out\\nsum<span class=\\\"token punctuation\\\">(</span>0, 1000000000<span class=\\\"token punctuation\\\">)</span>: 0./a.out  0.00s user 0.00s system 64% cpu 0.003 total</code></pre>\\n      </div>\\n<p>可以看到有没有优化差别还是很大的，优化过的代码执行时间是<strong>3ms!</strong>。really？仔细想想，我for循环了10亿次啊，每次for执行大概是两次加法，两次赋值，一次比较，而我总共做了两次for循环，也就是说至少是100亿次操作，而我的mac pro是<code class=\\\"language-text\\\">2.5 GHz Intel Core i7</code>，所以1s应该也就执行25亿次CPU指令操作吧，怎么可能逆天到这种程度，肯定是哪里错了。想起之前看到的<a href=\\\"http://ling0322.info/2014/01/20/rust-vs-go-in-code-optimization.html\\\">一篇rust测试性能的文章</a>，说rust直接在编译的时候算出了答案， 然后把结果直接写到了编译出来的代码里， 不知道gcc是不是也做了类似的事情。在知乎上<a href=\\\"https://www.zhihu.com/question/27090458\\\">GCC中-O1 -O2 -O3 优化的原理是什么？</a>这篇文章里， 还真有loop-invariant code motion（LICM）针对for的优化，所以我把代码增加了一些if判断，希望能“糊弄”得了gcc的优化。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code class=\\\"language-c\\\"><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n<span class=\\\"token comment\\\">// #include &lt;emscripten.h></span>\\n\\n<span class=\\\"token comment\\\">// long EMSCRIPTEN_KEEPALIVE sum(long start, long end) {</span>\\n<span class=\\\"token keyword\\\">long</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> start<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">long</span> end<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">long</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> total<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"sum(0, 1000000000): %ld\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100000000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// emscripten_exit_with_live_runtime();</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>执行结果大概要正常一些了。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  webasm-study gcc -O2 sum.c\\n➜  webasm-study <span class=\\\"token function\\\">time</span> ./a.out\\nsum<span class=\\\"token punctuation\\\">(</span>0, 1000000000<span class=\\\"token punctuation\\\">)</span>: 0./a.out  0.32s user 0.00s system 99% cpu 0.324 total</code></pre>\\n      </div>\\n<p>ok，我们来编译成<code class=\\\"language-text\\\">asm.js</code>了。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code class=\\\"language-c\\\"><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n<span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;emscripten.h></span></span>\\n\\n<span class=\\\"token keyword\\\">long</span> EMSCRIPTEN_KEEPALIVE <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> start<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">long</span> end<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token comment\\\">// long sum(long start, long end) {</span>\\n  <span class=\\\"token keyword\\\">long</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> total<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"sum(0, 1000000000): %ld\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100000000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">emscripten_exit_with_live_runtime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>执行</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc sum.c -o sum.html</code></pre>\\n      </div>\\n<p>然后在<code class=\\\"language-text\\\">sum.html</code>中添加代码</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\">  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onclick</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>nativeSum()<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>NativeSum<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onclick</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>jsSumCalc()<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>JSSum<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>text/javascript<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\">\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">nativeSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      t1 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> Module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ccall</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sum'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100000000</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      t2 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`result: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>result<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">, cost time: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>text/javascript<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\">\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">jsSum</span><span class=\\\"token punctuation\\\">(</span>start<span class=\\\"token punctuation\\\">,</span> end<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">let</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          total <span class=\\\"token operator\\\">+=</span> i<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          total <span class=\\\"token operator\\\">+=</span> i <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          total <span class=\\\"token operator\\\">-=</span> i<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          total <span class=\\\"token operator\\\">-=</span> i <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n\\n      <span class=\\\"token keyword\\\">return</span> total<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">jsSumCalc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">N</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">100000000</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// 总次数1亿</span>\\n      t1 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">jsSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">N</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      t2 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`result: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>result<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">, cost time: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>另外，我们修改成编译成WebAssembly看看效果呢？</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc sum.c -o sum.js -s WASM<span class=\\\"token operator\\\">=</span>1</code></pre>\\n      </div>\\n<table>\\n<thead>\\n<tr>\\n<th>Browser</th>\\n<th>webassembly</th>\\n<th>asm.js</th>\\n<th>js</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Chrome61</td>\\n<td>1300ms</td>\\n<td>600ms</td>\\n<td>3300ms</td>\\n</tr>\\n<tr>\\n<td>Firefox55</td>\\n<td>600ms</td>\\n<td>800ms</td>\\n<td>700ms</td>\\n</tr>\\n<tr>\\n<td>Safari9.1</td>\\n<td>不支持</td>\\n<td>2800ms</td>\\n<td>因不支持ES6我懒得改写没测试</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>感觉Firefox有点不合理啊， 默认的JS太强了吧。然后觉得webassembly也没有特别强啊，突然发现<code class=\\\"language-text\\\">emcc</code>编译的时候没有指定优化选项<code class=\\\"language-text\\\">-O2</code>。再来一次：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc -O2 sum.c -o sum.js <span class=\\\"token comment\\\"># for asm.js</span>\\nemcc -O2 sum.c -o sum.js -s WASM<span class=\\\"token operator\\\">=</span>1 <span class=\\\"token comment\\\"># for webassembly</span></code></pre>\\n      </div>\\n<table>\\n<thead>\\n<tr>\\n<th>Browser</th>\\n<th>webassembly -O2</th>\\n<th>asm.js -O2</th>\\n<th>js</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Chrome61</td>\\n<td>1300ms</td>\\n<td>600ms</td>\\n<td>3300ms</td>\\n</tr>\\n<tr>\\n<td>Firefox55</td>\\n<td>650ms</td>\\n<td>630ms</td>\\n<td>700ms</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>居然没什么变化， 大失所望。号称<code class=\\\"language-text\\\">asm.js</code>可以达到native的50%速度么，这个倒是好像达到了。但是今年<a href=\\\"https://www.youtube.com/watch?v=6v4E6oksar0\\\">Compiling for the Web with WebAssembly (Google I/O ‘17)</a>里说WebAssembly是<code class=\\\"language-text\\\">1.2x slower than native code</code>，感觉不对呢。<a href=\\\"http://asmjs.org/\\\">asm.js</a>还有一个好处是，它就是js，所以即使浏览器不支持，也能当成不同的js执行，只是没有加速效果。当然<a href=\\\"http://webassembly.org/\\\">WebAssembly</a>受到各大厂商一致推崇，作为一个新的标准，肯定前景会更好，期待会有更好的表现。</p>\\n<h1 id=\\\"rust\\\"><a href=\\\"#rust\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Rust</h1>\\n<p>本来还想写Rust编译成WebAssembly的，不过感觉本文已经太长了， 后期再写如果结合Rust做WebAssembly吧。</p>\\n<p>着急的可以先看看这两篇</p>\\n<ul>\\n<li><a href=\\\"https://users.rust-lang.org/t/compiling-to-the-web-with-rust-and-emscripten/7627\\\">Compiling to the web with Rust and emscripten</a></li>\\n<li><a href=\\\"https://www.slideshare.net/RReverser/rust-javascript\\\">Rust ⇋ JavaScript</a></li>\\n</ul>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ul>\\n<li><a href=\\\"http://asmjs.org/\\\">http://asmjs.org/</a></li>\\n<li><a href=\\\"http://webassembly.org/\\\">http://webassembly.org/</a></li>\\n<li><a href=\\\"https://kripken.github.io/emscripten-site/index.html\\\">https://kripken.github.io/emscripten-site/index.html</a></li>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/WebAssembly\\\">https://developer.mozilla.org/en-US/docs/WebAssembly</a></li>\\n<li><a href=\\\"http://www.codepool.biz/emscripten-compile-cc-javascript.html\\\">http://www.codepool.biz/emscripten-compile-cc-javascript.html</a></li>\\n<li><a href=\\\"http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html\\\">http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html</a></li>\\n<li><a href=\\\"https://zhuanlan.zhihu.com/p/25865972\\\">https://zhuanlan.zhihu.com/p/25865972</a></li>\\n</ul>\",\"timeToRead\":11,\"excerpt\":\"前一篇 我们说了要解决高性能计算的两个方法，一个是并发用WebWorkers，另一个就是用更底层的静态语言。 2012年，Mozilla的工程师 Alon Zakai 在研究 LLVM 编译器时突发奇想：能不能把C/C++编译成Javascript，并且尽量达到Native…\",\"fields\":{\"slug\":\"/fe-hpc/asmjs-and-webassembly\"},\"frontmatter\":{\"title\":\"前端高性能计算之二：asm.js & webassembly\",\"date\":\"2017-09-25\",\"category\":\"FE\",\"tags\":[\"asm.js\",\"webassembly\"]}}},{\"node\":{\"html\":\"<p>最近做一个项目，里面涉及到在前端做大量计算，直接用js跑了一下，大概需要15s的时间， \\u001b也就是用户的浏览器会卡死15s，这个完全接受不了。</p>\\n<p>虽说有V8这样牛逼的引擎，但大家知道js并不适合做CPU密集型的计算，一是因为单线程，二是因为动态语言。我们就从这两个突破口入手，首先搞定“单线程”的限制，尝试用WebWorkers来加速计算。</p>\\n<!-- more -->\\n<h1 id=\\\"什么是webworkers\\\"><a href=\\\"#%E4%BB%80%E4%B9%88%E6%98%AFwebworkers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>什么是WebWorkers</h1>\\n<p>简单说，<a href=\\\"http://www.whatwg.org/specs/web-workers/current-work/\\\">WebWorkers</a>是一个HTML5的新API，web开发者可以通过此API在后台运行一个脚本而不阻塞UI，可以用来做需要大量计算的事情，充分利用CPU多核。</p>\\n<p>大家可以看看这篇文章介绍<a href=\\\"https://www.html5rocks.com/en/tutorials/workers/basics/%EF%BC%8C\\\">https://www.html5rocks.com/en/tutorials/workers/basics/，</a> 或者<a href=\\\"https://www.html5rocks.com/zh/tutorials/workers/basics/\\\">对应的中文版</a>。</p>\\n<blockquote>\\n<p>The Web Workers specification defines an API for spawning background scripts in your web application. Web Workers allow you to do things like fire up long-running scripts to handle computationally intensive tasks, but without blocking the UI or other scripts to handle user interactions. </p>\\n</blockquote>\\n<p>可以打开<a href=\\\"https://nerget.com/rayjs-mt/rayjs.html\\\">这个链接</a>自己体验一下WebWorkers的加速效果。</p>\\n<p>现在浏览器基本都<a href=\\\"https://caniuse.com/#search=webworkers\\\">支持WebWorkers了</a>。\\n<img src=\\\"/blogimgs/caniuse-webworkers.png\\\" alt=\\\"can i use webworkers\\\"></p>\\n<h1 id=\\\"paralleljs\\\"><a href=\\\"#paralleljs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Parallel.js</h1>\\n<p>直接使用<a href=\\\"http://www.whatwg.org/specs/web-workers/current-work/\\\">WebWorkers</a>接口还是太繁琐，好在有人已经对此作了封装：<a href=\\\"https://parallel.js.org/\\\">Parallel.js</a>。</p>\\n<p>注意<a href=\\\"https://parallel.js.org/\\\">Parallel.js</a>可以通过node安装：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> paralleljs</code></pre>\\n      </div>\\n<p>不过这个是在node.js下用的，用的node的cluster模块。如果要在浏览器里使用的话， 需要直接应用js:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>parallel.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>然后可以得到一个全局变量，<code class=\\\"language-text\\\">Parallel</code>。<code class=\\\"language-text\\\">Parallel</code>提供了<code class=\\\"language-text\\\">map</code>和<code class=\\\"language-text\\\">reduce</code>两个函数式编程的接口，可以非常方便的进行并发操作。</p>\\n<p>我们先来定义一下我们的问题，由于业务比较复杂，我这里把问题简化成求1-1,0000,0000的和，然后在依次减去1-1,0000,0000，答案显而易见： 0！ 这样做是因为数字太大的话会有数据精度的问题，两种方法的结果会有一些差异，会让人觉得并行的方法不可靠。此问题在我的mac pro chrome61下直接简单地跑js运行的话大概是1.5s（我们实际业务问题需要15s，这里为了避免用户测试的时候把浏览器搞死，我们简化了问题）。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">N</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">100000000</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// 总次数1亿</span>\\n\\n<span class=\\\"token comment\\\">// 更新自2017-10-24 16：47：00</span>\\n<span class=\\\"token comment\\\">// 代码没有任何含义，纯粹是为了模拟一个耗时计算，直接用</span>\\n<span class=\\\"token comment\\\">//   for (let i = start; i &lt;= end; i += 1) total += i;</span>\\n<span class=\\\"token comment\\\">// 有几个问题，一是代码太简单没有任何稍微复杂一点的操作，后面用C代码优化的时候会优化得很夸张，没法对比。</span>\\n<span class=\\\"token comment\\\">// 二是数据溢出问题， 我懒得处理这个问题，下面代码简单地先加起来，然后再减掉，答案显而易见为0，便于测试。</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span>start<span class=\\\"token punctuation\\\">,</span> end<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">+=</span> i<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">+=</span> i <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">-=</span> i<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">-=</span> i <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> total<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">paraSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">N</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">N1</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">N</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//我们分成10分，没分分别交给一个web worker，parallel.js会根据电脑的CPU核数建立适量的workers</span>\\n  <span class=\\\"token keyword\\\">let</span> p <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Parallel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>sum<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> p<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">10000000</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> n <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">10000000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">// 在parallel.js里面没法直接应用外部变量N1</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> acc <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">const</span> e <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span> acc <span class=\\\"token operator\\\">+</span> e<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token constant\\\">N</span><span class=\\\"token punctuation\\\">,</span> sum<span class=\\\"token punctuation\\\">,</span> paraSum <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>代码比较简单，我这里说几个刚用的时候遇到的坑。</p>\\n<ul>\\n<li><strong>require所有需要的函数</strong></li>\\n</ul>\\n<p>比如在上诉代码中用到了<code class=\\\"language-text\\\">sum</code>，你需要提前<code class=\\\"language-text\\\">require(sum)</code>，如果sum中由用到了另一个函数<code class=\\\"language-text\\\">f</code>，你还需要<code class=\\\"language-text\\\">require(f)</code>，同样如果<code class=\\\"language-text\\\">f</code>中用到了<code class=\\\"language-text\\\">g</code>，则还需要<code class=\\\"language-text\\\">require(g)</code>，直到你require了所有用到的定义的函数。。。。</p>\\n<ul>\\n<li><strong>没法<code class=\\\"language-text\\\">require</code>变量</strong></li>\\n</ul>\\n<p>我们上诉代码我本来定义了<code class=\\\"language-text\\\">N1</code>，但是没法用</p>\\n<ul>\\n<li><strong><code class=\\\"language-text\\\">ES6</code>编译成<code class=\\\"language-text\\\">ES5</code>之后的问题以及Chrome没报错</strong></li>\\n</ul>\\n<p>实际项目中一开始我们用到了<code class=\\\"language-text\\\">ES6</code>的特性：<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\\\">数组解构</a>。本来这是很简单的特性，现在大部分浏览器都已经支持了，不过我当时配置的babel会编译成<code class=\\\"language-text\\\">ES5</code>，所以会生成代码<code class=\\\"language-text\\\">_slicedToArray</code>，大家可以<a href=\\\"http://babeljs.io/repl/#?babili=false&#x26;browsers=&#x26;build=&#x26;builtIns=false&#x26;code_lz=GYVwdgxgLglg9mABMAFAbQIYBpECMC6AlIgN4BQiiATgKZQhVIaIDUeA3GQL5lkDmiALzJ0AJhwBmImQgIAznAA2NAHSK4fFH0JA&#x26;debug=false&#x26;circleciRepo=&#x26;evaluate=true&#x26;lineWrap=false&#x26;presets=es2015%2Creact%2Cstage-2&#x26;prettier=false&#x26;targets=&#x26;version=6.26.0\\\">在线上Babel测试</a>，然后Chrome下面始终不work，也没有任何报错信息，查了很久，后来在Firefox下打开，有报错信息：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\">ReferenceError: _slicedToArray is not defined</code></pre>\\n      </div>\\n<p>看来Chrome也不是万能的啊。。。</p>\\n<p>大家可以在<a href=\\\"./parallel-test\\\">此Demo页面</a>测试， 提速大概在4倍左右，当然还是得看自己电脑CPU的核数。\\n另外我后来在同样的电脑上Firefox55.0.3（64位）测试，上诉代码居然只要190ms！！！在Safari9.1.1下也是190ms左右。。。</p>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ul>\\n<li><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\\\">https://developer.mozilla.org/zh-CN/docs/Web/API/Web<em>Workers</em>API/Using<em>web</em>workers</a></li>\\n<li><a href=\\\"https://www.html5rocks.com/en/tutorials/workers/basics/\\\">https://www.html5rocks.com/en/tutorials/workers/basics/</a></li>\\n<li><a href=\\\"https://parallel.js.org/\\\">https://parallel.js.org/</a></li>\\n<li><a href=\\\"https://johnresig.com/blog/web-workers/\\\">https://johnresig.com/blog/web-workers/</a></li>\\n<li><a href=\\\"http://javascript.ruanyifeng.com/htmlapi/webworker.html\\\">http://javascript.ruanyifeng.com/htmlapi/webworker.html</a></li>\\n<li><a href=\\\"http://blog.teamtreehouse.com/using-web-workers-to-speed-up-your-javascript-applications\\\">http://blog.teamtreehouse.com/using-web-workers-to-speed-up-your-javascript-applications</a></li>\\n</ul>\",\"timeToRead\":3,\"excerpt\":\"最近做一个项目，里面涉及到在前端做大量计算，直接用js跑了一下，大概需要15s的时间， \\u001b也就是用户的浏览器会卡死15s，这个完全接受不了。 虽说有V8这样牛逼的引擎，但大家知道js并不适合做CPU…\",\"fields\":{\"slug\":\"/fe-hpc/webworkers\"},\"frontmatter\":{\"title\":\"前端高性能计算之一：WebWorkers\",\"date\":\"2017-09-22\",\"category\":\"FE\",\"tags\":[\"js\",\"hpc\"]}}},{\"node\":{\"html\":\"<p>推荐一些我用过的比较不错的Chrome插件。（长期更新）</p>\\n<ul>\\n<li><a href=\\\"https://about.sourcegraph.com/\\\">SourceGraph</a>, 自从我发现sourcegraph，我就把octotree禁用了，sourcegraph简直就是一个活生生的浏览器里的VSCode，有强大的IDE功能。</li>\\n<li><a href=\\\"https://github.com/buunguyen/octotree\\\">octotree</a>，方便看github代码</li>\\n<li><a href=\\\"https://chrome.google.com/webstore/detail/spaces/cenkmofngpohdnkbjdpilgpmbiiljjim\\\">Spaces</a>，方便讲tabs分类搜藏起来， 这对于我这种长期开着100+个tabs的来说，确实很有必要，功能够用， 有些bug，暂时没找到更合适的。</li>\\n<li><a href=\\\"https://chrome.google.com/webstore/detail/markdown-preview-plus/febilkbfcbhebfnokafefeacimjdckgl\\\">Markdown Preview Plus</a>，预览markdown。</li>\\n<li><a href=\\\"https://chrome.google.com/webstore/detail/uc-qr-code/nhelohnehpahakjoklmodmogclacjgdj\\\">UC二维码</a>，将当前页面链接生成二维码</li>\\n</ul>\\n<!-- more -->\\n<ul>\\n<li><a href=\\\"https://github.com/FelisCatus/SwitchyOmega\\\">SwitchyOmega</a>，代理软件，XX必须。</li>\\n<li><a href=\\\"https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj\\\">ModHeader</a>，可以修改请求头，拿来测试CORS等很方便。</li>\\n<li><a href=\\\"https://www.requestly.in/\\\">Requestly</a>，功能比ModHeader更强大一些</li>\\n<li><a href=\\\"https://chrome.google.com/webstore/detail/http2-and-spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin\\\">HTTP/2 and SPDY indicator</a>，查看你访问的页面是否支持HTTP2，用了才发现，原来已经这么多网站支持了。</li>\\n<li><a href=\\\"http://collamark.com/\\\">Collamark</a>，师弟开发的，用于搜藏、标注web内容，很方便，强烈推荐。</li>\\n<li><a href=\\\"https://chrome.google.com/webstore/detail/fatkun-batch-download-ima/nnjjahlikiabnchcpehcpkdeckfgnohf\\\">Fatkun图片批量下载</a>，批量下载图片</li>\\n<li><a href=\\\"https://github.com/callumlocke/json-formatter\\\">JSON Formatter</a>，调试接口用</li>\\n<li><a href=\\\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\\\">React Developer Tools</a>，React开发工具</li>\\n<li><a href=\\\"https://github.com/zalmoxisus/redux-devtools-extension\\\">Redux DevTools extension</a>，redux开发工具</li>\\n</ul>\\n<p>============================================\\n最后不得不推荐一个Firefox的插件，因为实在太强大了，基本是我现在还安装Firefox的最后一个原因了，那就是<a href=\\\"http://www.downthemall.net/\\\">DownThemAll</a>，下载速度能达到Chrome下载速度的5倍以上，用了都说好！不要去找“Chrome DownThemAll”，找到的都是假的，原因是Chrome提供的插件接口不够”low level”， 无法实现dTa的功能。</p>\\n<p>刚刚在dTa首页上看到作者说不维护dTa了，因为firefox的WebExtentions策略，以后会提供不了那么多low level的API。。。。。感觉一万只草泥马从心头飞奔而过。。。。吓得赶紧去关掉了Firefox的自动更新。。。</p>\\n<p>WebExtension的改变可以看看这里， <a href=\\\"https://zhuanlan.zhihu.com/p/26948163\\\">https://zhuanlan.zhihu.com/p/26948163</a></p>\\n<blockquote>\\n<p>这个改变对经典 Add-ons 的重度用户来说是个不小的打击，Mozilla 也在尽可能补充相关的 WebExtension API，是原有扩展的一些功能可以通过新的 API 实现，我们可以说如果在 57 版本发布后一些常用扩展实在无法迁移，还可以保存一份豪华完整版的 Firefox 56 并关掉自动更新（笑）。</p>\\n</blockquote>\\n<p>赶快行动吧， 不然来不及了。</p>\",\"timeToRead\":1,\"excerpt\":\"推荐一些我用过的比较不错的Chrome插件。（长期更新） SourceGraph , 自从我发现sourcegraph，我就把octotree禁用了，sourcegraph简直就是一个活生生的浏览器里的VSCode，有强大的IDE功能。 octotree ，方便看github…\",\"fields\":{\"slug\":\"/chrome-extentions/\"},\"frontmatter\":{\"title\":\"推荐一些Chrome插件\",\"date\":\"2017-09-15\",\"category\":\"FE\",\"tags\":[\"Chrome Extentions\",\"tools\"]}}},{\"node\":{\"html\":\"<p>自从2014年Christopher Chedeau做了<a href=\\\"http://blog.vjeux.com/2014/javascript/react-css-in-js-nationjs.html\\\">CSS in JS</a>的演讲之后， cssinjs的各种库纷纷出现，已经<a href=\\\"https://github.com/MicheleBertoli/css-in-js\\\">有好几十种了</a>。</p>\\n<p><a href=\\\"https://github.com/css-modules/css-modules\\\">css modules</a>应该是很流行的了， 说实话我没有用过， 不过在浏览作者主页的时候意外发现了<a href=\\\"https://github.com/styled-components/styled-components\\\">styled-components</a>，发现这就是我想要的！大家可以看看下面几个视频，先有个大概印象。</p>\\n<!-- more -->\\n<p><a href=\\\"https://github.com/styled-components/styled-components\\\">styled-components</a>作者<a href=\\\"https://twitter.com/mxstbr\\\">Max Stoiber</a>在2017年React大会上的演讲：</p>\\n<div>\\n          <div\\n            class=\\\"gatsby-resp-iframe-wrapper\\\"\\n            style=\\\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem\\\"\\n          >\\n            <iframe src=\\\"https://www.youtube.com/embed/2j9rSur_mnk\\\" frameborder=\\\"0\\\" allowfullscreen style=\\\"\\n            position: absolute;\\n            top: 0;\\n            left: 0;\\n            width: 100%;\\n            height: 100%;\\n          \\\"></iframe>\\n          </div>\\n          </div>\\n<p><a href=\\\"https://github.com/css-modules/css-modules\\\">css modules</a>作者<a href=\\\"https://twitter.com/glenmaddern\\\">@glenmaddern</a>在2017年欧洲CSS大会上分享<a href=\\\"https://github.com/styled-components/styled-components\\\">styled-components</a>。</p>\\n<div>\\n          <div\\n            class=\\\"gatsby-resp-iframe-wrapper\\\"\\n            style=\\\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem\\\"\\n          >\\n            <iframe src=\\\"https://www.youtube.com/embed/MT4D_DioYC8\\\" frameborder=\\\"0\\\" allowfullscreen style=\\\"\\n            position: absolute;\\n            top: 0;\\n            left: 0;\\n            width: 100%;\\n            height: 100%;\\n          \\\"></iframe>\\n          </div>\\n          </div>\\n<p><a href=\\\"https://github.com/css-modules/css-modules\\\">css modules</a>作者<a href=\\\"https://twitter.com/glenmaddern\\\">@glenmaddern</a>分享<a href=\\\"https://github.com/styled-components/styled-components\\\">styled-components</a>， 玩得很high啊。</p>\\n<div>\\n          <div\\n            class=\\\"gatsby-resp-iframe-wrapper\\\"\\n            style=\\\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem\\\"\\n          >\\n            <iframe src=\\\"https://www.youtube.com/embed/qu4U7lwZTRI\\\" frameborder=\\\"0\\\" allowfullscreen style=\\\"\\n            position: absolute;\\n            top: 0;\\n            left: 0;\\n            width: 100%;\\n            height: 100%;\\n          \\\"></iframe>\\n          </div>\\n          </div>\\n<p>想要了解更多<a href=\\\"https://github.com/styled-components/styled-components\\\">styled-components</a>， 可以看<a href=\\\"https://react-course.magicfun.ai/css/\\\">React实战课程</a>内容。</p>\\n<p>这有一篇<a href=\\\"https://github.com/callemall/material-ui\\\">Material UI</a>的一位作者<a href=\\\"https://github.com/oliviertassinari/a-journey-toward-better-style\\\">讲他们如何在各种cssinjs中做的选型</a>，介绍对比了各种cssinjs库的一些特性，大家可以了解一下， 这里是<a href=\\\"https://oliviertassinari.github.io/a-journey-toward-better-style/\\\">PPT</a>。</p>\\n<p>再提一下<a href=\\\"https://twitter.com/floydophone\\\">Pete Hunt</a>大神的<a href=\\\"https://github.com/smyte/jsxstyle\\\">jsxstyle</a>，之前看的时候还是<a href=\\\"https://medium.com/smyte/announcing-jsxstyle-1-0-3ef469d1863a\\\">1.0刚发布</a>，貌似现在快出2.0了。 大概思路是封装了用于布局的一些components，包括：</p>\\n<ul>\\n<li>Block</li>\\n<li>Flex</li>\\n<li>Inline</li>\\n<li>InlineBlock</li>\\n<li>InlineFlex</li>\\n<li>Table</li>\\n<li>TableCell</li>\\n<li>TableRow</li>\\n<li>Row</li>\\n<li>Col</li>\\n</ul>\\n<p>不过给我的感觉，有点像用<a href=\\\"https://facebook.github.io/react-native/\\\">React Native</a>来开发web的思想， 比如<a href=\\\"https://github.com/necolas/react-native-web\\\">react-native-web</a>以及淘宝出的<a href=\\\"https://github.com/taobaofed/react-web\\\">react-web</a>，不过都不太符合我的口味。</p>\\n<p><a href=\\\"mxstbr\\\">Max Stoiber</a>最近又发布了一个新的库<a href=\\\"https://github.com/styled-components/polished\\\">polished</a>，大概看了一下，也很符合我的口味，利用currying function去组合各种基本样式， 后面有时间再研究一下。阮老师已经写了<a href=\\\"http://www.ruanyifeng.com/blog/2017/04/css_in_js.html\\\">一篇文章介绍</a>啦。</p>\",\"timeToRead\":2,\"excerpt\":\"自从2014年Christopher Chedeau做了 CSS in JS 的演讲之后， cssinjs的各种库纷纷出现，已经 有好几十种了 。 css modules 应该是很流行的了， 说实话我没有用过， 不过在浏览作者主页的时候意外发现了 styled…\",\"fields\":{\"slug\":\"/cssinjs/\"},\"frontmatter\":{\"title\":\"CSS In JS\",\"date\":\"2017-08-29\",\"category\":\"FE\",\"tags\":[\"css\",\"js\",\"react\"]}}},{\"node\":{\"html\":\"<h1 id=\\\"concepts\\\"><a href=\\\"#concepts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>concepts</h1>\\n<ul>\\n<li>entry points</li>\\n<li>output</li>\\n<li>loaders</li>\\n<li>plugins</li>\\n<li>configuration</li>\\n<li>modules</li>\\n<li>module resolution</li>\\n<li>dependency graph</li>\\n<li>manifest</li>\\n<li>targets</li>\\n<li>hot module replacement</li>\\n</ul>\",\"timeToRead\":1,\"excerpt\":\"concepts entry points output loaders plugins configuration modules module resolution dependency graph manifest targets hot module…\",\"fields\":{\"slug\":\"/webpack/concepts\"},\"frontmatter\":{\"title\":\"webpack concepts\",\"date\":\"2017-08-28\",\"category\":\"FE\",\"tags\":[\"webpack\",\"js\",\"build tool\"]}}},{\"node\":{\"html\":\"<h1 id=\\\"getting-started\\\"><a href=\\\"#getting-started\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>getting started</h1>\\n<blockquote>\\n<p>Note that webpack will not alter any code other than import and export statements. If you are using other ES2015 features, make sure to use a transpiler such as Babel or Bublé via webpack’s loader system.</p>\\n</blockquote>\\n<blockquote>\\n<p>Custom parameters can be passed to webpack by adding two dashes between the npm run build command and your parameters, e.g. npm run build — —colors.</p>\\n</blockquote>\\n<h1 id=\\\"asset-management\\\"><a href=\\\"#asset-management\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Asset Management</h1>\\n<h1 id=\\\"css\\\"><a href=\\\"#css\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>CSS</h1>\\n<p>style-loader, css-loader</p>\\n<h2 id=\\\"images\\\"><a href=\\\"#images\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Images</h2>\\n<p>file-loader</p>\\n<h2 id=\\\"fonts\\\"><a href=\\\"#fonts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Fonts</h2>\\n<p>file-loader</p>\\n<h2 id=\\\"data\\\"><a href=\\\"#data\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Data</h2>\\n<p>原生支持json, csv-loader, xml-loader</p>\\n<h1 id=\\\"output-management\\\"><a href=\\\"#output-management\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Output Management</h1>\\n<h2 id=\\\"多entry\\\"><a href=\\\"#%E5%A4%9Aentry\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>多entry</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">entry<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  app<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'./src/index.js'</span><span class=\\\"token punctuation\\\">,</span>\\n  print<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'./src/print.js'</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"htmlwebpackplugin\\\"><a href=\\\"#htmlwebpackplugin\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>HtmlWebpackPlugin</h2>\\n<p>避免entry points改名， 自动生成html。</p>\\n<h2 id=\\\"cleaning-up-the-code-classlanguage-textdistcode-folder\\\"><a href=\\\"#cleaning-up-the-code-classlanguage-textdistcode-folder\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Cleaning up the <code class=\\\"language-text\\\">/dist</code> folder</h2>\\n<p><code class=\\\"language-text\\\">clean-webpack-plugin</code></p>\\n<h2 id=\\\"menifest\\\"><a href=\\\"#menifest\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Menifest</h2>\\n<blockquote>\\n<p>If you’re interested in managing webpack’s output in other ways, the manifest would be a good place to start.</p>\\n</blockquote>\\n<h1 id=\\\"development\\\"><a href=\\\"#development\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Development</h1>\\n<h2 id=\\\"using-source-maps\\\"><a href=\\\"#using-source-maps\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Using source maps</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">devtool<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'inline-source-map'</span></code></pre>\\n      </div>\\n<p>不要用在production上</p>\\n<h2 id=\\\"自动刷新\\\"><a href=\\\"#%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>自动刷新</h2>\\n<h2 id=\\\"webpacks-watch-mode\\\"><a href=\\\"#webpacks-watch-mode\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>webpack’s Watch Mode</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token string\\\">\\\"watch\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"webpack --watch\\\"</span></code></pre>\\n      </div>\\n<h2 id=\\\"webpack-dev-server\\\"><a href=\\\"#webpack-dev-server\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>webpack-dev-server</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// webpack.config.js</span>\\ndevServer<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  contentBase<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'./dist'</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// package.json</span>\\n<span class=\\\"token string\\\">\\\"start\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --open\\\"</span></code></pre>\\n      </div>\\n<h2 id=\\\"webpack-dev-middleware\\\"><a href=\\\"#webpack-dev-middleware\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>webpack-dev-middleware</h2>\\n<p>跟express配合使用的。</p>\\n<blockquote>\\n<p>webpack-dev-middleware is a wrapper that will emit files processed by webpack to a server. This is used in webpack-dev-server internally, however it’s available as a separate package to allow more custom setups if desired. We’ll take a look at an example that combines webpack-dev-middleware with an express server.</p>\\n</blockquote>\\n<h1 id=\\\"hot-module-replacement\\\"><a href=\\\"#hot-module-replacement\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hot Module Replacement</h1>\\n<h2 id=\\\"enabling-hmr\\\"><a href=\\\"#enabling-hmr\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Enabling HMR</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 如果entry有其他不相关的js， 会导致full refresh</span>\\n<span class=\\\"token comment\\\">// webpack.config.js</span>\\ndevServer<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  contentBase<span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">,</span>\\n  hot<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token comment\\\">// just client</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> \\nplugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">webpack<span class=\\\"token punctuation\\\">.</span>HotModuleReplacementPlugin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">// server</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"一些lib\\\"><a href=\\\"#%E4%B8%80%E4%BA%9Blib\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>一些lib</h2>\\n<ul>\\n<li>css的HMR直接通过<code class=\\\"language-text\\\">style-loader</code>支持的。</li>\\n<li><a href=\\\"https://github.com/gaearon/react-hot-loader\\\">React Hot Loader</a></li>\\n<li><a href=\\\"https://survivejs.com/webpack/appendices/hmr-with-react/#configuring-hmr-with-redux\\\">Redux HMR</a></li>\\n</ul>\\n<h1 id=\\\"tree-shaking\\\"><a href=\\\"#tree-shaking\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tree Shaking</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token string\\\">\\\"use strict\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/* unused harmony export square */</span>\\n<span class=\\\"token comment\\\">/* harmony export (immutable) */</span> __webpack_exports__<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"a\\\"</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> cube<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">square</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">*</span> x<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>虽然没有export，但是bundle.js里面有，需要用能支持<code class=\\\"language-text\\\">dead code removal</code>的压缩工具。</p>\\n<blockquote>\\n<p>we’ll add a minifier that supports dead code removal — the UglifyJSPlugin — to our configuration…</p>\\n</blockquote>\\n<p>必须同时满足一下两条才可以去除无用代码：</p>\\n<ol>\\n<li>用ES2015的import/export</li>\\n<li>\\n<p>支持<code class=\\\"language-text\\\">dead code removal</code>的压缩工具压缩</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 这样不行, ES2015的module可以做static analysis</span>\\nexports<span class=\\\"token punctuation\\\">.</span>square <span class=\\\"token operator\\\">=</span> square<span class=\\\"token punctuation\\\">;</span>\\nexports<span class=\\\"token punctuation\\\">.</span>cube <span class=\\\"token operator\\\">=</span> cube<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n</li>\\n</ol>\\n<p>用<code class=\\\"language-text\\\">webpack -p</code>跟添加了<code class=\\\"language-text\\\">webpack.optimize.UglifyJsPlugin()</code>，以及使用<code class=\\\"language-text\\\">uglifyjs-webpack-plugin</code>没区别。\\n<a href=\\\"https://webpack.js.org/plugins/uglifyjs-webpack-plugin/\\\">https://webpack.js.org/plugins/uglifyjs-webpack-plugin/</a></p>\\n<blockquote>\\n<p>webpack contains the same plugin under webpack.optimize.UglifyJsPlugin. The documentation is valid apart from the installation instructions</p>\\n</blockquote>\\n<h1 id=\\\"production\\\"><a href=\\\"#production\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Production</h1>\\n<p>dev和prod分开两个config.js，共用的放在webpack.common.js，然后用<a href=\\\"https://github.com/survivejs/webpack-merge\\\">webpack-merge</a>来合并，DRY。</p>\\n<p>在prod里面用<code class=\\\"language-text\\\">cheap-module-source-map</code>， 但是又UglifyJSPlugin就没有生成source-map？！！！ <a href=\\\"https://webpack.js.org/configuration/devtool/%EF%BC%8C\\\">https://webpack.js.org/configuration/devtool/，</a> 原来需要提供<code class=\\\"language-text\\\">sourceMap: true</code>参数给uglify-webpack-plugin。</p>\\n<blockquote>\\n<p>When using the uglifyjs-webpack-plugin you must provide the sourceMap: true option to enable SourceMap support.</p>\\n</blockquote>\\n<p><code class=\\\"language-text\\\">cheap-module-source-map</code>不适合用于<code class=\\\"language-text\\\">production</code>，用了<code class=\\\"language-text\\\">sourceMap: true</code>也有问题。</p>\\n<p>在webpack的配置文件里面没法使用process.env，（感觉是bug或者feature缺失？<a href=\\\"https://github.com/webpack/webpack/issues/2537\\\">#2537</a>)。需要用<code class=\\\"language-text\\\">webpack.DefinePlugin</code>来定义。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">webpack<span class=\\\"token punctuation\\\">.</span>DefinePlugin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token string\\\">'process.env'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 'NODE_ENV': JSON.stringify('production'), // 直接用'production'会报错，生成的代码里面没有''，导致找不到变量production</span>\\n        <span class=\\\"token string\\\">'NODE_ENV'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'\\\"production\\\"'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token comment\\\">// 用\\\"\\\"括起来也行，webpack是直接把process.env.NODE_ENV替换为\\\"production\\\"</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<h1 id=\\\"code-splitting\\\"><a href=\\\"#code-splitting\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Code Splitting</h1>\\n<h2 id=\\\"entry-points\\\"><a href=\\\"#entry-points\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Entry Points</h2>\\n<p>直接多个entry就会产生多个bundle.js</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">entry<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// print2: './src/print2.js',</span>\\n    app<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'./src/index.js'</span><span class=\\\"token punctuation\\\">,</span>\\n    one<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'./src/one.js'</span><span class=\\\"token punctuation\\\">,</span>\\n    two<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'./src/two.js'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>但是假设<code class=\\\"language-text\\\">one.js</code>和<code class=\\\"language-text\\\">two.js</code>里面都有<code class=\\\"language-text\\\">lodash</code>，则两个bundle都会包含<code class=\\\"language-text\\\">lodash</code>，有500多KB。</p>\\n<h2 id=\\\"commonschunkplugin\\\"><a href=\\\"#commonschunkplugin\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>CommonsChunkPlugin</h2>\\n<p>可以用<code class=\\\"language-text\\\">CommonsChunkPlugin</code>解决上面的问题， 提取<code class=\\\"language-text\\\">one.js</code>和<code class=\\\"language-text\\\">two.js</code>里面共同的<code class=\\\"language-text\\\">lodash</code>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">webpack<span class=\\\"token punctuation\\\">.</span>optimize<span class=\\\"token punctuation\\\">.</span>CommonsChunkPlugin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'common'</span><span class=\\\"token punctuation\\\">,</span>\\n      chunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'one'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'two'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token comment\\\">// 因为index.js没有引用lodash，所以必须写明那几个文件的common chunks，否则提取不到！</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>注意注释， 如果不是每个文件的公共文件， 则需要明确指定chunks。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"> chunks<span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// Select the source chunks by chunk names. The chunk must be a child of the commons chunk.</span>\\n  <span class=\\\"token comment\\\">// If omitted all entry chunks are selected.</span></code></pre>\\n      </div>\\n<h2 id=\\\"dynamic-imports\\\"><a href=\\\"#dynamic-imports\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Dynamic Imports</h2>\\n<p><a href=\\\"https://github.com/tc39/proposal-dynamic-import\\\">JS新的语法</a>，跟以前用<code class=\\\"language-text\\\">require.ensure</code>类似。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token comment\\\">/* webpackChunkName: \\\"lodash\\\" */</span> <span class=\\\"token string\\\">'lodash'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">...</span>\\n  <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>另外还需要在<code class=\\\"language-text\\\">webpack.config.js</code>里增加：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">  output<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">...</span>\\n    chunkFilename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'[name].bundle.js'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 必须有这行！</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<h2 id=\\\"bundle-analysis\\\"><a href=\\\"#bundle-analysis\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Bundle Analysis</h2>\\n<p>分析各个bundle的大小，看是否有重复，问题出现在哪里，可能哪里可以优化等。</p>\\n<ul>\\n<li><a href=\\\"https://github.com/webpack/analyse\\\">official analyze tool</a></li>\\n<li><a href=\\\"https://alexkuz.github.io/webpack-chart/\\\">webpack-chart</a></li>\\n<li><a href=\\\"https://chrisbateman.github.io/webpack-visualizer/\\\">webpack-visualizer</a></li>\\n<li><a href=\\\"https://github.com/th0r/webpack-bundle-analyzer\\\">webpack-bundle-analyzer</a></li>\\n</ul>\\n<hr>\\n<p>ps, 发现一个问题，UglifyJs不支持ES6！看样子Babel是必须的啊。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">ERROR <span class=\\\"token keyword\\\">in</span> app.4df62c770fd384e3a460.bundle.js from UglifyJs\\nUnexpected token: operator <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">[</span>./src/dynamic-imports.js:5,0<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>app.4df62c770fd384e3a460.bundle.js:157,96<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<h1 id=\\\"lazy-loading\\\"><a href=\\\"#lazy-loading\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Lazy Loading</h1>\\n<p>用<code class=\\\"language-text\\\">import()</code>实现动态加载的目的就是为了延迟加载，提高初始加载的效率， 所以可以在需要异步延迟加载的地方直接使用<code class=\\\"language-text\\\">import()</code>就可以了。</p>\\n<h1 id=\\\"cache\\\"><a href=\\\"#cache\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Cache</h1>\\n<p>使用<code class=\\\"language-text\\\">output.filename</code><a href=\\\"substitutions\\\">https://webpack.js.org/configuration/output#output-filename</a>，可以用<code class=\\\"language-text\\\">[hash]</code>和<code class=\\\"language-text\\\">[chunkhash]</code>，但是<code class=\\\"language-text\\\">[hash]</code>是每一次构建，每个文件都共用同一个hash值，所以一个文件变化，所有都会变化，不好！最好用<code class=\\\"language-text\\\">[chunkhash]</code>。 记得，<code class=\\\"language-text\\\">import()</code>动态引入的也加上hash:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// webpack.prod.js</span>\\n  output<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    filename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"[name].[chunkhash].bundle.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    chunkFilename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"[name].[chunkhash].bundle.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>貌似webpack2.1（官网文档的版本）有bug，出现如下为问题：</p>\\n<blockquote>\\n<p>As you can see the bundle’s name now reflects its content (via the hash). If we run another build without making any changes, we’d expect that filename to stay the same. However, if we were to run it again, we may find that this is not the case:</p>\\n</blockquote>\\n<blockquote>\\n<p>This is because webpack includes certain boilerplate, specifically the runtime and manifest, in the entry chunk.</p>\\n</blockquote>\\n<blockquote>\\n<p>Output may differ depending on your current webpack version. Newer versions may not have all the same issues with hashing as some older versions, but we still recommend the following steps to be safe.</p>\\n</blockquote>\\n<h2 id=\\\"extracting-boilerplate\\\"><a href=\\\"#extracting-boilerplate\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Extracting Boilerplate</h2>\\n<p>可以用<code class=\\\"language-text\\\">CommonsChunkPlugin</code>配置一个entry里都没有的名字，就可以提取出公共chunk，也就是什么都“没有”。实际上不是什么都没有，而是webpack的<code class=\\\"language-text\\\">runtime</code>，这样就可以解决前面说的问题， 不过我在webpack3.5.5里没有碰到问题， 所以就先不用了。</p>\\n<h2 id=\\\"module-identifiers\\\"><a href=\\\"#module-identifiers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Module Identifiers</h2>\\n<p>由于默认webpack的module ID用的是自增的数字，所以有可能增加一个文件，导致所有的module ID都变了， 导致所有文件“内容”都变化。</p>\\n<blockquote>\\n<p>This is because each module.id is incremented based on resolving order by default. Meaning when the order of resolving is changed, the IDs will be changed as well. </p>\\n</blockquote>\\n<p>有两个插件可以解决问题，<code class=\\\"language-text\\\">NamedModulesPlugin</code>和<code class=\\\"language-text\\\">HashedModuleIdsPlugin</code>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">webpack<span class=\\\"token punctuation\\\">.</span>NamedModulesPlugin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// new webpack.HashedModuleIdsPlugin(),</span></code></pre>\\n      </div>\\n<blockquote>\\n<p>Luckily, there are two plugins we can use to resolve this issue. The first is the NamedModulesPlugin, which will use the path to the module rather than a numerical identifier. While this plugin is useful during development for more readable output, it does take a bit longer to run. The second option is the HashedModuleIdsPlugin, which is recommended for production builds:</p>\\n</blockquote>\\n<h1 id=\\\"shimming\\\"><a href=\\\"#shimming\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Shimming</h1>\\n<p>本部分介绍如何不是“正规”的module，比如如何引入全局变量（如jQuery），如何引入polyfill等。用到的时候再说。</p>\\n<h1 id=\\\"typescript\\\"><a href=\\\"#typescript\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Typescript</h1>\\n<p>需要4个条件：</p>\\n<ol>\\n<li>TypeScript编译器</li>\\n<li>Typescript loader，比如<a href=\\\"https://github.com/TypeStrong/ts-loader\\\">ts-loader</a>, 或者<a href=\\\"https://github.com/s-panferov/awesome-typescript-loader\\\">awesome-typescript-loader</a></li>\\n<li>tsconfig.json</li>\\n<li>webpack.config.js</li>\\n</ol>\\n<h1 id=\\\"build-performance\\\"><a href=\\\"#build-performance\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Build Performance</h1>\\n<h1 id=\\\"public-path\\\"><a href=\\\"#public-path\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Public Path</h1>\",\"timeToRead\":6,\"excerpt\":\"getting started Note that webpack will not alter any code other than import and export statements. If you are using other ES2015 features…\",\"fields\":{\"slug\":\"/webpack/guides\"},\"frontmatter\":{\"title\":\"webpack guides学习笔记\",\"date\":\"2017-08-28\",\"category\":\"FE\",\"tags\":[\"webpack\",\"js\",\"build tool\"]}}}]}},\"pathContext\":{\"current\":3,\"skip\":20,\"total\":6}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---page-3-a4a7bfc763bdf1effcc6.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Magicly's Blog\"}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"html\":\"<p>最近做个app要接入一下微信sdk，按理说很简单的， 但是碰到很多坑， 记录一下。</p>\\n<!-- more -->\\n<p>APP是用RN做的， 自然想找一个封装好的RN微信，于是找到了<a href=\\\"https://github.com/yorkie/react-native-wechat\\\">https://github.com/yorkie/react-native-wechat</a> ，这个还算是star多得， 有1000多个， 相比另外一个<a href=\\\"https://github.com/reactnativecn/react-native-wx\\\">https://github.com/reactnativecn/react-native-wx</a> 貌似要活跃一些，用户也较多， 那就选react-native-wechat吧， 结果也已经7个多月没有更新过了，里面用的android的sdk都是两年多前的， 作者貌似都不知道现在用gradle了。自然也就不支持微信小程序分享。 后来看到有人提交了PR: <a href=\\\"https://github.com/yorkie/react-native-wechat/pull/324\\\">https://github.com/yorkie/react-native-wechat/pull/324</a> ，更新了sdk，支持小程序， 不过作者貌似没有merge。 索性干脆直接依赖这个fork吧：<a href=\\\"https://github.com/LittoCats/react-native-wechat\\\">https://github.com/LittoCats/react-native-wechat</a> .</p>\\n<p>然后就是按照说明配置好依赖和appId等。 结果，死活分享不出去。后来能分享出去了， 但是卡死在调用哪里， 都已经用try/catch包起来了， 但是两条路都没有走。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> Wechat<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shareToTimeline</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'text'</span><span class=\\\"token punctuation\\\">,</span>\\n        description<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'hello, wechat'</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'share text message to time line successful:'</span><span class=\\\"token punctuation\\\">,</span> result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">e</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">.</span>stack<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>既不成功，也不失败。。。。。</p>\\n<p>然后去看JS源码，看Java源码。最后发现是Java里面的回调就没有执行：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token comment\\\">// 第三方应用发送到微信的请求处理后的响应结果，会回调到该方法</span>\\n\\t<span class=\\\"token annotation punctuation\\\">@Override</span>\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">onResp</span><span class=\\\"token punctuation\\\">(</span>BaseResp resp<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>那应该就是包名或签名没有配置好了。 仔细检查没有问题啊， 也用微信提供的签名工具提取了签名。后来下载了微信的demo，一步一步调试和查资料尝试，过程花了两天， 懒得细说了，最后发现下面这些坑s：</p>\\n<h2 id=\\\"微信平台审核过之后包名和签名可以修改么？\\\"><a href=\\\"#%E5%BE%AE%E4%BF%A1%E5%B9%B3%E5%8F%B0%E5%AE%A1%E6%A0%B8%E8%BF%87%E4%B9%8B%E5%90%8E%E5%8C%85%E5%90%8D%E5%92%8C%E7%AD%BE%E5%90%8D%E5%8F%AF%E4%BB%A5%E4%BF%AE%E6%94%B9%E4%B9%88%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>微信平台审核过之后包名和签名可以修改么？</h2>\\n<p>可以。但是微信有缓存！！！要么卸载微信重装， 要么清楚微信数据， 记住是要从系统设置里面清除， 而不是从微信app里面清除！</p>\\n<ul>\\n<li><a href=\\\"http://ask.dcloud.net.cn/question/18354\\\">http://ask.dcloud.net.cn/question/18354</a></li>\\n<li><a href=\\\"http://blog.csdn.net/ZFY11/article/details/78216278\\\">http://blog.csdn.net/ZFY11/article/details/78216278</a></li>\\n</ul>\\n<h2 id=\\\"微信后台配置的包名必须是manifest里面的package！！！\\\"><a href=\\\"#%E5%BE%AE%E4%BF%A1%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE%E7%9A%84%E5%8C%85%E5%90%8D%E5%BF%85%E9%A1%BB%E6%98%AFmanifest%E9%87%8C%E9%9D%A2%E7%9A%84package%EF%BC%81%EF%BC%81%EF%BC%81\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>微信后台配置的包名必须是manifest里面的package！！！</h2>\\n<p>这个是最坑的。 因为RN默认生成的package和目录结构是<code class=\\\"language-text\\\">com.xxx</code>，而我要取另外的包名，于是在<code class=\\\"language-text\\\">app/build.gradle</code>文件里面改了<code class=\\\"language-text\\\">applicationId</code>，以为可以了，结果不行！！！微信要的其实根本就不是APP的包名， 而是类的目录结构（也算是Java的包名吧。。。）！！！！\\n至于manifest里的package和applicationId有什么区别，请看：</p>\\n<ul>\\n<li><a href=\\\"http://blog.csdn.net/qq1072313099/article/details/52872800\\\">http://blog.csdn.net/qq1072313099/article/details/52872800</a></li>\\n<li><a href=\\\"http://blog.csdn.net/u011889786/article/details/54296462\\\">http://blog.csdn.net/u011889786/article/details/54296462</a></li>\\n</ul>\\n<p>跟同事分析， 微信sdk的工具机制应该是： 微信sdk里面注册了scheme，分享或登录后微信通过scheme通知微信sdk， 然后微信sdk根据“包名”找到我们的代码<code class=\\\"language-text\\\">{package}.wxapi/WXEntryActivity.java</code>，然后执行里面的<code class=\\\"language-text\\\">onResp()</code>回调函数。所以其实微信要的不是app的包名， 而是需要找到代码的位置！！！</p>\\n<h2 id=\\\"微信分享sdk不支持分享多张图片\\\"><a href=\\\"#%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%ABsdk%E4%B8%8D%E6%94%AF%E6%8C%81%E5%88%86%E4%BA%AB%E5%A4%9A%E5%BC%A0%E5%9B%BE%E7%89%87\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>微信分享sdk不支持分享多张图片</h2>\\n<p>这个用系统的分享接口反而支持！\\n<a href=\\\"https://github.com/yorkie/react-native-wechat/issues/270\\\">https://github.com/yorkie/react-native-wechat/issues/270</a></p>\",\"timeToRead\":2,\"excerpt\":\"最近做个app要接入一下微信sdk，按理说很简单的， 但是碰到很多坑， 记录一下。 APP是用RN做的， 自然想找一个封装好的RN微信，于是找到了 https://github.com/yorkie/react-native-wechat  ，这个还算是star多得， 有100…\",\"fields\":{\"slug\":\"/wechat-sdk/\"},\"frontmatter\":{\"title\":\"接入微信SDK的坑s\",\"date\":\"2018-02-06\",\"category\":\"FE\",\"tags\":[\"微信\",\"Wechat\",\"React Native\",\"RN\"]}}},{\"node\":{\"html\":\"<p>最近做了一个小项目， 在微信里面根据用户选择的模板、用户微信头像、昵称、用户选择上传的照片合成一个图片，用户可以保存到手机上，然后发朋友圈。</p>\\n<p>说复杂其实不复杂， 总结一下其中踩过的坑。</p>\\n<!-- more -->\\n<h1 id=\\\"用canvas合成照片\\\"><a href=\\\"#%E7%94%A8canvas%E5%90%88%E6%88%90%E7%85%A7%E7%89%87\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>用Canvas合成照片</h1>\\n<p>最开始是打算自己写Canvas，绘制照片、文字等， 最后调用canvas的<code class=\\\"language-text\\\">toDataURI()</code>方法合成照片的。但是canvas上又不方便响应用户点击等操作，还得用dom写一遍， 感觉就有点重复了。 后来想起以前用过的<a href=\\\"https://github.com/niklasvh/html2canvas\\\">html2canvas库</a>，果断用之，很方便。顺便还搜到几个其他的库，不过暂时没用过，先mark一下：</p>\\n<ul>\\n<li><a href=\\\"https://github.com/tsayen/dom-to-image\\\">https://github.com/tsayen/dom-to-image</a></li>\\n</ul>\\n<p>这里有几篇blog介绍使用的，可以看看，当然官网文档永远是最权威的，适当的时候还需要看下源码。</p>\\n<ul>\\n<li><a href=\\\"https://segmentfault.com/a/1190000011478657\\\">https://segmentfault.com/a/1190000011478657</a></li>\\n<li><a href=\\\"https://www.jianshu.com/p/a99312eacf4f\\\">https://www.jianshu.com/p/a99312eacf4f</a></li>\\n<li><a href=\\\"https://www.h5jun.com/post/convert-code-to-image-via-html2canvas.html\\\">https://www.h5jun.com/post/convert-code-to-image-via-html2canvas.html</a></li>\\n</ul>\\n<h1 id=\\\"retina屏幕下canvas模糊\\\"><a href=\\\"#retina%E5%B1%8F%E5%B9%95%E4%B8%8Bcanvas%E6%A8%A1%E7%B3%8A\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Retina屏幕下canvas模糊</h1>\\n<p>马上问题来了， retina屏幕下（mac pro、iphone6+）保存出来的图片是模糊的。这个主要是canvas宽高的单位跟css单位不一致，retina屏幕下用了4倍像素渲染造成的。需要了解CSS像素、物理像素、逻辑像素、PPI、devicePixelRatio等概念，可以参考下面几篇。</p>\\n<ul>\\n<li><a href=\\\"https://segmentfault.com/q/1010000002391424\\\">https://segmentfault.com/q/1010000002391424</a></li>\\n<li><a href=\\\"https://segmentfault.com/a/1190000003730246\\\">https://segmentfault.com/a/1190000003730246</a></li>\\n<li><a href=\\\"https://www.html5rocks.com/en/tutorials/canvas/hidpi/\\\">https://www.html5rocks.com/en/tutorials/canvas/hidpi/</a></li>\\n<li><a href=\\\"https://github.com/jondavidjohn/hidpi-canvas-polyfill\\\">https://github.com/jondavidjohn/hidpi-canvas-polyfill</a></li>\\n<li><a href=\\\"https://github.com/jawil/blog/issues/21\\\">https://github.com/jawil/blog/issues/21</a></li>\\n<li><a href=\\\"https://div.io/topic/1092\\\">https://div.io/topic/1092</a></li>\\n<li><a href=\\\"http://www.dengzhr.com/frontend/html/1050\\\">http://www.dengzhr.com/frontend/html/1050</a></li>\\n<li><a href=\\\"https://benweizhu.github.io/blog/2017/03/25/css-retina-image/\\\">https://benweizhu.github.io/blog/2017/03/25/css-retina-image/</a></li>\\n<li><a href=\\\"https://www.zhihu.com/question/21653056\\\">https://www.zhihu.com/question/21653056</a></li>\\n<li><a href=\\\"https://github.com/strues/retinajs\\\">https://github.com/strues/retinajs</a></li>\\n<li><a href=\\\"https://mutian.wang/tech/1386\\\">https://mutian.wang/tech/1386</a></li>\\n<li><a href=\\\"https://www.webdesignerdepot.com/2015/08/the-state-of-responsive-images/\\\">https://www.webdesignerdepot.com/2015/08/the-state-of-responsive-images/</a></li>\\n<li><a href=\\\"https://coderwall.com/p/vmkk6a/how-to-make-the-canvas-not-look-like-crap-on-retina\\\">https://coderwall.com/p/vmkk6a/how-to-make-the-canvas-not-look-like-crap-on-retina</a></li>\\n<li>*</li>\\n</ul>\\n<h2 id=\\\"弧形文字\\\"><a href=\\\"#%E5%BC%A7%E5%BD%A2%E6%96%87%E5%AD%97\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>弧形文字</h2>\\n<p>设计稿有一个模板里面文字是弧形的，用svg实现了：</p>\\n<ul>\\n<li><a href=\\\"https://www.w3cplus.com/css3/css-secrets/circular-text.html\\\">https://www.w3cplus.com/css3/css-secrets/circular-text.html</a></li>\\n</ul>\\n<p>结果发现html2canvas没法保存svg。google之后发现html2canvas支持svg有问题：</p>\\n<ul>\\n<li><a href=\\\"https://github.com/niklasvh/html2canvas/issues/95\\\">https://github.com/niklasvh/html2canvas/issues/95</a></li>\\n<li><a href=\\\"https://github.com/niklasvh/html2canvas/issues/197\\\">https://github.com/niklasvh/html2canvas/issues/197</a></li>\\n<li><a href=\\\"https://github.com/niklasvh/html2canvas/issues/267\\\">https://github.com/niklasvh/html2canvas/issues/267</a></li>\\n</ul>\\n<p>我用inline svg也是没法绘制出来的， 开启了<code class=\\\"language-text\\\">foreignObject</code>选项，结果svg文字是可以保存了， 但是很多我不想要的内容也出来了。\\n<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/foreignObject\\\">foreignObject</a>这个不是很了解，以后再看吧。</p>\\n<p>搜了一下，发现一些把svg转成canvas的库， 大概看了一下觉得没必要引入，还不如直接自己canvas画好了。这些库mark一下：</p>\\n<ul>\\n<li><a href=\\\"https://github.com/canvg/canvg\\\">https://github.com/canvg/canvg</a></li>\\n<li><a href=\\\"https://github.com/kangax/fabric.js/\\\">https://github.com/kangax/fabric.js/</a></li>\\n<li><a href=\\\"http://flashcanvas.net/\\\">http://flashcanvas.net/</a></li>\\n</ul>\\n<p>没有解决，后来还是考虑自己用canvas画算了，参考下文：</p>\\n<ul>\\n<li><a href=\\\"https://segmentfault.com/a/1190000006258726\\\">https://segmentfault.com/a/1190000006258726</a></li>\\n</ul>\\n<h2 id=\\\"canvas裁剪圆\\\"><a href=\\\"#canvas%E8%A3%81%E5%89%AA%E5%9C%86\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>canvas裁剪圆</h2>\\n<ul>\\n<li><a href=\\\"https://www.kancloud.cn/dennis/canvas/340120\\\">https://www.kancloud.cn/dennis/canvas/340120</a></li>\\n</ul>\\n<h2 id=\\\"canvas透明背景\\\"><a href=\\\"#canvas%E9%80%8F%E6%98%8E%E8%83%8C%E6%99%AF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>canvas透明背景</h2>\\n<ul>\\n<li><a href=\\\"http://www.dengzhr.com/frontend/html/1096\\\">http://www.dengzhr.com/frontend/html/1096</a></li>\\n</ul>\\n<h2 id=\\\"iphone上竖屏拍摄图片旋转bug\\\"><a href=\\\"#iphone%E4%B8%8A%E7%AB%96%E5%B1%8F%E6%8B%8D%E6%91%84%E5%9B%BE%E7%89%87%E6%97%8B%E8%BD%ACbug\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>iPhone上竖屏拍摄图片旋转bug</h2>\\n<p>iphone和部分三星手机上竖屏拍摄图片会旋转， 需要用<a href=\\\"\\\"></a>读取Orientation，来自己纠正。</p>\\n<ul>\\n<li><a href=\\\"https://www.jianshu.com/p/8afd55beca5a\\\">https://www.jianshu.com/p/8afd55beca5a</a></li>\\n<li><a href=\\\"https://www.bbsmax.com/A/VGzlMnYNJb/\\\">https://www.bbsmax.com/A/VGzlMnYNJb/</a></li>\\n<li><a href=\\\"https://github.com/exif-js/exif-js/\\\">https://github.com/exif-js/exif-js/</a></li>\\n<li><a href=\\\"https://segmentfault.com/a/1190000009990033\\\">https://segmentfault.com/a/1190000009990033</a></li>\\n<li><a href=\\\"https://aotu.io/notes/2017/05/25/canvas-img-rotate-and-flip/index.html\\\">https://aotu.io/notes/2017/05/25/canvas-img-rotate-and-flip/index.html</a></li>\\n</ul>\\n<h2 id=\\\"轮播图\\\"><a href=\\\"#%E8%BD%AE%E6%92%AD%E5%9B%BE\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>轮播图</h2>\\n<p>轮播图太通用不过了，网上也有很多代码或者插件（很多jQuery的插件）实现。推荐两个：</p>\\n<ul>\\n<li><a href=\\\"https://github.com/kenwheeler/slick/\\\">https://github.com/kenwheeler/slick/</a></li>\\n<li><a href=\\\"https://github.com/nolimits4web/swiper/\\\">https://github.com/nolimits4web/swiper/</a>\\n两个功能几乎一样，不过slick需要jquery。\\n当然，两个都有react的移植：</li>\\n<li><a href=\\\"https://github.com/akiran/react-slick\\\">https://github.com/akiran/react-slick</a></li>\\n<li><a href=\\\"https://github.com/kidjp85/react-id-swiper\\\">https://github.com/kidjp85/react-id-swiper</a>\\n我最后用了react-id-swiper，可以根据自己需要选择。</li>\\n</ul>\\n<h2 id=\\\"图片裁剪\\\"><a href=\\\"#%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>图片裁剪</h2>\\n<p>html5里面有<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader\\\">FileReader</a>特性， 可以在前端读取修改文件内容，再结合canvas，很容易就实现前端裁剪图片了。</p>\\n<ul>\\n<li><a href=\\\"https://segmentfault.com/a/1190000000754560\\\">https://segmentfault.com/a/1190000000754560</a>\\n结果看到有人说微信android版本，不支持长按保存base64方式的图片（canvas.toDataURI）的， 吓我一大跳，结果现在好像已经修复此bug了：</li>\\n<li><a href=\\\"https://mzkmzk.gitbooks.io/web_accumulate/wei_xin_base64_tu_pian_bao_cun_shi_bai.html\\\">https://mzkmzk.gitbooks.io/web<em>accumulate/wei</em>xin<em>base64</em>tu<em>pian</em>bao<em>cun</em>shi_bai.html</a></li>\\n<li><a href=\\\"https://segmentfault.com/q/1010000007709767\\\">https://segmentfault.com/q/1010000007709767</a></li>\\n<li><a href=\\\"http://www.cnblogs.com/Travel/p/4624929.html\\\">http://www.cnblogs.com/Travel/p/4624929.html</a></li>\\n<li><a href=\\\"https://www.codecasts.com/blog/post/crop-image-local-using-html5-canvas\\\">https://www.codecasts.com/blog/post/crop-image-local-using-html5-canvas</a></li>\\n<li><a href=\\\"https://dailc.github.io/2017/11/16/imageclip_rotate_compress.html\\\">https://dailc.github.io/2017/11/16/imageclip<em>rotate</em>compress.html</a></li>\\n<li><a href=\\\"http://www.cnblogs.com/Travel/p/4624929.html\\\">http://www.cnblogs.com/Travel/p/4624929.html</a></li>\\n<li><a href=\\\"https://www.codecasts.com/blog/post/crop-image-local-using-html5-canvas\\\">https://www.codecasts.com/blog/post/crop-image-local-using-html5-canvas</a></li>\\n<li><a href=\\\"https://github.com/DominicTobias/react-image-crop\\\">https://github.com/DominicTobias/react-image-crop</a></li>\\n<li><a href=\\\"http://hpoenixf.com/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Ereact%E7%9A%84%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA%E7%BB%84%E4%BB%B6.html\\\">http://hpoenixf.com/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Ereact%E7%9A%84%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA%E7%BB%84%E4%BB%B6.html</a></li>\\n<li><a href=\\\"https://github.com/nitin42/react-imgpro\\\">https://github.com/nitin42/react-imgpro</a></li>\\n<li><a href=\\\"https://github.com/AlloyTeam/AlloyImage\\\">https://github.com/AlloyTeam/AlloyImage</a></li>\\n<li><a href=\\\"https://github.com/AlloyTeam/AlloyFinger\\\">https://github.com/AlloyTeam/AlloyFinger</a></li>\\n<li><a href=\\\"https://github.com/AlloyTeam/AlloyCrop\\\">https://github.com/AlloyTeam/AlloyCrop</a></li>\\n<li><a href=\\\"https://github.com/AlloyTeam/AlloyTouch/wiki\\\">https://github.com/AlloyTeam/AlloyTouch/wiki</a></li>\\n</ul>\\n<h2 id=\\\"读取图片每个像素点的rgb\\\"><a href=\\\"#%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87%E6%AF%8F%E4%B8%AA%E5%83%8F%E7%B4%A0%E7%82%B9%E7%9A%84rgb\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>读取图片每个像素点的RGB</h2>\\n<ul>\\n<li><a href=\\\"https://zhidao.baidu.com/question/752983355955636524.html\\\">https://zhidao.baidu.com/question/752983355955636524.html</a></li>\\n<li><a href=\\\"http://js8.in/2013/01/02/html5-canvas-%E5%9B%BE%E7%89%87%E5%83%8F%E7%B4%A0/\\\">http://js8.in/2013/01/02/html5-canvas-%E5%9B%BE%E7%89%87%E5%83%8F%E7%B4%A0/</a></li>\\n<li><a href=\\\"https://segmentfault.com/a/1190000004084956\\\">https://segmentfault.com/a/1190000004084956</a></li>\\n<li><a href=\\\"http://yijiebuyi.com/blog/58bcb7af4a0e3846d02d10def9fdeecc.html\\\">http://yijiebuyi.com/blog/58bcb7af4a0e3846d02d10def9fdeecc.html</a></li>\\n<li><a href=\\\"http://www.cnblogs.com/zichi/p/html5-file-api.html\\\">http://www.cnblogs.com/zichi/p/html5-file-api.html</a></li>\\n<li><a href=\\\"https://www.xiabingbao.com/html5/2015/05/20/html5-filereader-natural.html\\\">https://www.xiabingbao.com/html5/2015/05/20/html5-filereader-natural.html</a></li>\\n</ul>\\n<h2 id=\\\"滑动到屏幕底部\\\"><a href=\\\"#%E6%BB%91%E5%8A%A8%E5%88%B0%E5%B1%8F%E5%B9%95%E5%BA%95%E9%83%A8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>滑动到屏幕底部</h2>\\n<p>需要了解viewport、clientHeight、offsetHeight、scrollHeight、scrollTop等概念。</p>\\n<ul>\\n<li><a href=\\\"http://www.cnblogs.com/w-wanglei/p/5863240.html\\\">http://www.cnblogs.com/w-wanglei/p/5863240.html</a></li>\\n<li><a href=\\\"http://imweb.io/topic/57c5409e808fd2fb204eef52\\\">http://imweb.io/topic/57c5409e808fd2fb204eef52</a></li>\\n<li><a href=\\\"https://www.jianshu.com/p/d267456ebc0d\\\">https://www.jianshu.com/p/d267456ebc0d</a></li>\\n<li><a href=\\\"https://exp-team.github.io/blog/2017/02/25/js/infinite-scroll/\\\">https://exp-team.github.io/blog/2017/02/25/js/infinite-scroll/</a></li>\\n<li><a href=\\\"https://stackoverflow.com/questions/22675126/what-is-offsetheight-clientheight-scrollheight\\\">https://stackoverflow.com/questions/22675126/what-is-offsetheight-clientheight-scrollheight</a></li>\\n<li><a href=\\\"https://cauu.github.io/2017/04/React-infinite-scroll-list/\\\">https://cauu.github.io/2017/04/React-infinite-scroll-list/</a></li>\\n<li><a href=\\\"https://www.jianshu.com/p/97f5cbc66577\\\">https://www.jianshu.com/p/97f5cbc66577</a></li>\\n</ul>\\n<h2 id=\\\"reactrouter-v4在非组件页面使用history\\\"><a href=\\\"#reactrouter-v4%E5%9C%A8%E9%9D%9E%E7%BB%84%E4%BB%B6%E9%A1%B5%E9%9D%A2%E4%BD%BF%E7%94%A8history\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ReactRouter v4在非组件页面使用history</h2>\\n<ul>\\n<li><a href=\\\"https://github.com/brickspert/blog/issues/3\\\">https://github.com/brickspert/blog/issues/3</a></li>\\n</ul>\\n<h2 id=\\\"react高阶组件\\\"><a href=\\\"#react%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>React高阶组件</h2>\\n<p>最后用React高阶组件把各个模板重构了一下。\\n<a href=\\\"https://reactjs.org/docs/higher-order-components.html\\\">https://reactjs.org/docs/higher-order-components.html</a></p>\\n<blockquote>\\n<p>Concretely, a higher-order component is a function that takes a component and returns a new component.</p>\\n</blockquote>\\n<p>注意，高阶组件是一个<code class=\\\"language-text\\\">function</code>，而不是component， 所以你只能<code class=\\\"language-text\\\">hoc(config)(ComponentA)</code>这样调用， 而不能<code class=\\\"language-text\\\">&lt;Hoc config={config} component={ComponentA} /&gt;</code>这样调用， 因为调用过一次之后，返回的已经是React.Elements了。具体可以看<a href=\\\"https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html\\\">https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html</a></p>\\n<ul>\\n<li><a href=\\\"https://reactjs.org/docs/higher-order-components.html\\\">https://reactjs.org/docs/higher-order-components.html</a></li>\\n<li><a href=\\\"https://segmentfault.com/a/1190000004598113\\\">https://segmentfault.com/a/1190000004598113</a></li>\\n<li><a href=\\\"https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e\\\">https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e</a></li>\\n<li><a href=\\\"https://github.com/acdlite/recompose\\\">https://github.com/acdlite/recompose</a></li>\\n</ul>\\n<p>高阶组件概念来自于函数式编程里面的高阶函数，如果不熟悉函数式编程， 可以看看下面的资料：</p>\\n<ul>\\n<li><a href=\\\"https://github.com/MostlyAdequate/mostly-adequate-guide\\\">https://github.com/MostlyAdequate/mostly-adequate-guide</a></li>\\n<li><a href=\\\"https://github.com/llh911001/mostly-adequate-guide-chinese\\\">https://github.com/llh911001/mostly-adequate-guide-chinese</a></li>\\n<li><a href=\\\"http://eloquentjavascript.net/05_higher_order.html\\\">http://eloquentjavascript.net/05<em>higher</em>order.html</a></li>\\n<li><a href=\\\"https://github.com/stoeffel/awesome-fp-js\\\">https://github.com/stoeffel/awesome-fp-js</a></li>\\n<li><a href=\\\"https://github.com/lodash/lodash/wiki/FP-Guide\\\">https://github.com/lodash/lodash/wiki/FP-Guide</a></li>\\n<li><a href=\\\"http://ramdajs.com/\\\">http://ramdajs.com/</a></li>\\n<li><a href=\\\"https://github.com/ramda/ramda-fantasy\\\">https://github.com/ramda/ramda-fantasy</a></li>\\n<li><a href=\\\"https://medium.freecodecamp.org/functional-programming-in-js-with-practical-examples-part-1-87c2b0dbc276\\\">https://medium.freecodecamp.org/functional-programming-in-js-with-practical-examples-part-1-87c2b0dbc276</a></li>\\n</ul>\\n<h2 id=\\\"react-16\\\"><a href=\\\"#react-16\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>React 16</h2>\\n<p>在开发的过程中发现如下代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>居然<code class=\\\"language-text\\\">render()</code>在<code class=\\\"language-text\\\">this.a += 1</code>之前执行？！！！跟setState函数是异步调用的说法不一致啊， 不知道是不是React16Fiber带来的特性， 抽空得好好研究下React16了。</p>\",\"timeToRead\":10,\"excerpt\":\"最近做了一个小项目， 在微信里面根据用户选择的模板、用户微信头像、昵称、用户选择上传的照片合成一个图片，用户可以保存到手机上，然后发朋友圈。 说复杂其实不复杂， 总结一下其中踩过的坑。 用Canvas合成照片 最开始是打算自己写Canvas…\",\"fields\":{\"slug\":\"/canvas-webapp/\"},\"frontmatter\":{\"title\":\"照片合成webapp项目总结\",\"date\":\"2018-01-29\",\"category\":\"FE\",\"tags\":[\"React\",\"canvas\",\"svg\",\"html2canvas\",\"HOC\"]}}},{\"node\":{\"html\":\"<p>人工智能是最近两年绝对的热点，而这次人工智能的复兴，有一个很重要的原因就是计算能力的提升，主要依赖于GPU。去年Nvidia的股价飙升了几倍，市面上好点的GPU一般都买不到，因为全被做深度学习以及挖比特币的人买光了😂。</p>\\n<p>GPU，全称Graphics Processing Unit，即图像处理器，早期主要用于显示图像使用。因为图像处理主要偏简单的矩阵运算，逻辑判断等很少，因此GPU的设计跟CPU架构不一样，也因此做到一个GPU上可以有很多计算单元，可以进行大量并行计算。网上找到一个视频，应该是Nvidia某年的产品发布会，形象地演示了CPU跟GPU的区别。<a href=\\\"http://v.youku.com/v_show/id_XNDcyNTc1MjQ4==.html\\\">http://v.youku.com/v<em>show/id</em>XNDcyNTc1MjQ4==.html</a> 。知乎上也有对CPU和GPU的对比<a href=\\\"https://www.zhihu.com/question/19903344\\\">https://www.zhihu.com/question/19903344</a></p>\\n<p>后来人们逐渐发现，GPU的这种特性还可以用于神经网络的训练，因为神经网络训练中也是大量的矩阵运算，然后原来的训练速度提高了几十倍，原来需要一周训练的模型，现在几个小时就可以出结果，于是神经网络飞速发展。。。</p>\\n<!-- more -->\\n<p>GPU虽快，但是写起来很难写，要用自己特殊的语言<a href=\\\"https://zh.wikipedia.org/wiki/GLSL\\\">GLSL - OpenGL Shading Language</a>编写，一般都是是将其它语言编译过来或者有很多库封装好了直接使用。经过搜索发现了<a href=\\\"https://github.com/gpujs/gpu.js/tree/develop\\\">gpu.js</a>这个库。</p>\\n<blockquote>\\n<p>gpu.js is a JavaScript library for GPGPU (General purpose computing on GPUs) in the browser. gpu.js will automatically compile specially written JavaScript functions into shader language and run them on the GPU using the WebGL API. In case WebGL is not available, the functions will still run in regular JavaScript.</p>\\n</blockquote>\\n<p>也就是说<a href=\\\"https://github.com/gpujs/gpu.js/tree/develop\\\">gpu.js</a>这个库会把你写的js编译成<code class=\\\"language-text\\\">GLSL</code>然后在GPU上执行，以达到加速的效果。并且，如果电脑不支持GPU，它还会当成普通的js执行。可以先到<a href=\\\"http://gpu.rocks/\\\">gpu.js官网</a>上体验一下，能达到5-10倍的提速。根据不同的电脑gpu配置，提速可能更多，这篇文章里面  <a href=\\\"https://hackernoon.com/introducing-gpu-js-gpu-accelerated-javascript-ba11a6069327\\\">https://hackernoon.com/introducing-gpu-js-gpu-accelerated-javascript-ba11a6069327</a> 提到的Chrome提高了23倍，Firefox提高了125倍！\\n<img src=\\\"/blogimgs/gpurocks-disabled.png\\\" alt=\\\"gpu.rocks Disabled(default)\\\">\\n<img src=\\\"/blogimgs/gpurocks-enabled.png\\\" alt=\\\"gpu.rocks Enabled (This is where the REAL POWER IS!)\\\"></p>\\n<h1 id=\\\"支持的语法\\\"><a href=\\\"#%E6%94%AF%E6%8C%81%E7%9A%84%E8%AF%AD%E6%B3%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>支持的语法</h1>\\n<p>一开始说了，GPU的设计跟CPU差别很大，只适合做简单的计算，不适合太多复杂的逻辑。所以gpu.js也只支持js的一个很小的子集：</p>\\n<ul>\\n<li>1D, 2D, 3D array of numbers or just numbers as kernel input</li>\\n<li>1D, 2D, 3D array of numbers as kernel output</li>\\n<li>Number variables</li>\\n<li>Custom and custom native functions</li>\\n<li>Arithmetic operations (+, +=, -, *, /, %)</li>\\n<li>Javascript Math functions (Math.floor() and etc.)</li>\\n<li>Loops</li>\\n<li>if and else statements</li>\\n<li>const and let</li>\\n<li>No variables captured by a closure</li>\\n</ul>\\n<h1 id=\\\"show-me-code\\\"><a href=\\\"#show-me-code\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Show Me Code</h1>\\n<p><a href=\\\"https://github.com/abhisheksoni27/gpu.js-demo\\\">https://github.com/abhisheksoni27/gpu.js-demo</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> c <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'c'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> gpu <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">GPU</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    mode<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'gpu'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Generate Matrices</span>\\n<span class=\\\"token keyword\\\">const</span> matrices <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">generateMatrices</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">A</span> <span class=\\\"token operator\\\">=</span> matrices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">B</span> <span class=\\\"token operator\\\">=</span> matrices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> gpuMatMult <span class=\\\"token operator\\\">=</span> gpu<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createKernel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> sum <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">512</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sum <span class=\\\"token operator\\\">+=</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>thread<span class=\\\"token punctuation\\\">.</span>y<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>thread<span class=\\\"token punctuation\\\">.</span>x<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> sum<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setDimensions</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// .setOutputToTexture(true);</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">cpuMatMult</span><span class=\\\"token punctuation\\\">(</span>m<span class=\\\"token punctuation\\\">,</span> n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> m<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        result<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">var</span> sum <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> k <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> k <span class=\\\"token operator\\\">&lt;</span> m<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> k<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                sum <span class=\\\"token operator\\\">+=</span> m<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">*</span> n<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            result<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> sum<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sumMatrix</span><span class=\\\"token punctuation\\\">(</span>m<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> m<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> m<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            total <span class=\\\"token operator\\\">+=</span> m<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> total<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">//CPU</span>\\n<span class=\\\"token keyword\\\">const</span> startCPU <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>performance<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> cpuResult <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">cpuMatMult</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> endCPU <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>performance<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> cpuTime <span class=\\\"token operator\\\">=</span> endCPU <span class=\\\"token operator\\\">-</span> startCPU<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`CPU: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>cpuTime<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">ms, total: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token function\\\">sumMatrix</span><span class=\\\"token punctuation\\\">(</span>cpuResult<span class=\\\"token punctuation\\\">)</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// //GPU</span>\\n<span class=\\\"token keyword\\\">const</span> startGPU <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>performance<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">gpuMatMult</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'gpuResult: '</span><span class=\\\"token punctuation\\\">,</span> result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> endGPU <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>performance<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> gpuTime <span class=\\\"token operator\\\">=</span> endGPU <span class=\\\"token operator\\\">-</span> startGPU<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`GPU: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>gpuTime<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">ms, total: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token function\\\">sumMatrix</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//Diff</span>\\n<span class=\\\"token keyword\\\">const</span> diff <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>cpuTime <span class=\\\"token operator\\\">-</span> gpuTime<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token punctuation\\\">(</span>gpuTime<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`%c </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>diff<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'color: red;'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`times faster!`</span></span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">generateMatrices</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> matSize <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">512</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> <span class=\\\"token constant\\\">A</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> <span class=\\\"token constant\\\">B</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> matSize<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> matSize<span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">*</span> matSize <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>j <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">*</span> matSize <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>j <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token constant\\\">B</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"deeplearnjs\\\"><a href=\\\"#deeplearnjs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>deeplearn.js</h1>\\n<p>另外还有一个库是最近Google刚开源的<a href=\\\"https://github.com/PAIR-code/deeplearnjs\\\">deeplearn.js</a>， 如果要做深度学习的话是很好的工具。后面我们会找时间单独介绍。</p>\\n<h1 id=\\\"总结\\\"><a href=\\\"#%E6%80%BB%E7%BB%93\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>总结</h1>\\n<p>由于架构设计不一样，GPU很适合做简单的并发计算，应用于图像处理、深度学习等领域能大大加快速度，也直接引爆了这一次人工智能的发展。当然直接用gpu去开发程序很难编写，一般都是由特殊编译器将代码编译成可以在gpu上执行的代码。本文提高的<a href=\\\"\\\">gpu.js</a>就是在前端将js的一个子集编译成能在webgl上执行的一个编译器。</p>\\n<p>当然我们的业务逻辑比较复杂，发现很难把代码改写成能在GPU上加速执行的，最后我们采用的是之前讲过的WebWorkers+WebAssembly的方式，提速也能达到数十倍，代码还简单很多，易于维护。当然不是说复杂的问题不能转化到GPU上执行，这篇文章 <a href=\\\"https://amoffat.github.io/held-karp-gpu-demo/\\\">https://amoffat.github.io/held-karp-gpu-demo/</a> 就讲怎么用GPU加速去解决<a href=\\\"https://en.wikipedia.org/wiki/Travelling_salesman_problem\\\">TSP问题</a>，方法很巧妙，有兴趣的可以看看。</p>\\n<p>==============</p>\\n<p>话说我们后来根据对问题的深入分析，将问题的复杂度简化了，瞬间提速100倍😝，所以说做优化工程之前，一定要先确保算法已经没有什么优化的空间了。算法对速度的提升是远大于编程语言等的，当然算法的提速是可以跟工程优化叠加的，将两者结合起来我们的项目相比最之前的算法有将近3000倍的提速😍，完全解决了问题🤗。</p>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ul>\\n<li><a href=\\\"https://github.com/gpujs\\\">https://github.com/gpujs</a></li>\\n<li><a href=\\\"http://gpujs.github.io/usr-docs/files/gpu-js.html\\\">http://gpujs.github.io/usr-docs/files/gpu-js.html</a></li>\\n<li><a href=\\\"https://hackernoon.com/introducing-gpu-js-gpu-accelerated-javascript-ba11a6069327\\\">https://hackernoon.com/introducing-gpu-js-gpu-accelerated-javascript-ba11a6069327</a></li>\\n<li><a href=\\\"http://gpu.rocks/playground/\\\">http://gpu.rocks/playground/</a></li>\\n<li><a href=\\\"https://github.com/PAIR-code/deeplearnjs\\\">https://github.com/PAIR-code/deeplearnjs</a></li>\\n<li><a href=\\\"https://deeplearnjs.org/\\\">https://deeplearnjs.org/</a></li>\\n<li><a href=\\\"https://amoffat.github.io/held-karp-gpu-demo/\\\">https://amoffat.github.io/held-karp-gpu-demo/</a></li>\\n<li><a href=\\\"https://github.com/turbo/js\\\">https://github.com/turbo/js</a></li>\\n<li><a href=\\\"https://github.com/stormcolor/webclgl\\\">https://github.com/stormcolor/webclgl</a></li>\\n</ul>\",\"timeToRead\":4,\"excerpt\":\"人工智能是最近两年绝对的热点，而这次人工智能的复兴，有一个很重要的原因就是计算能力的提升，主要依赖于GPU。去年Nvidia的股价飙升了几倍，市面上好点的GPU一般都买不到，因为全被做深度学习以及挖比特币的人买光了😂。 GPU，全称Graphics Processing…\",\"fields\":{\"slug\":\"/fe-hpc/gpujs\"},\"frontmatter\":{\"title\":\"前端高性能计算之四：GPU加速计算\",\"date\":\"2017-10-16\",\"category\":\"FE\",\"tags\":[\"gpu\",\"wegbl\",\"cuda\"]}}},{\"node\":{\"html\":\"<p><a href=\\\"/fe-hpc/asmjs-and-webassembly\\\">前一篇</a>我们探索了用<a href=\\\"https://kripken.github.io/emscripten-site/index.html\\\">Emscripten</a>编译<code class=\\\"language-text\\\">C</code>代码到<code class=\\\"language-text\\\">asm.js</code>和<code class=\\\"language-text\\\">WebAssembly</code>，使前端代码执行速度大大提升，但是实际项目中由于<code class=\\\"language-text\\\">C</code>语言缺乏很多高级特性，不利于开发大型项目（说<code class=\\\"language-text\\\">C</code>可以开发操作系统kernel这种大型项目的同学不好意思，我没那么nb），而<code class=\\\"language-text\\\">C++</code>我又觉得太复杂，也没有用过<code class=\\\"language-text\\\">C++</code>做过大型项目，所以我最后选择了<a href=\\\"https://www.rust-lang.org/\\\">Rust</a>。</p>\\n<p>一开始也纠结过要用<code class=\\\"language-text\\\">Go</code>还是<code class=\\\"language-text\\\">Rust</code>或者<code class=\\\"language-text\\\">Swift</code>的，后来发现<code class=\\\"language-text\\\">Go</code>目前还不<a href=\\\"https://github.com/golang/go/issues/18892\\\">支持编译到<code class=\\\"language-text\\\">WebAssembly</code></a>，Swift按理说应该可以支持的，因为都是用LLVM做的编译器，不过没有找到好的资料，好像说要自己编译LLVM去支持<a href=\\\"https://stackoverflow.com/questions/46572144/compile-swift-to-webassembly\\\">https://stackoverflow.com/questions/46572144/compile-swift-to-webassembly</a> 。另外对Rust的一些特性很是喜欢，听说<code class=\\\"language-text\\\">Rust很复杂，比较像Scala和Haskell</code>，而偏偏我对Scala还算熟悉，也学过一下Haskell，所以决定尝试一下Rust。</p>\\n<p><a href=\\\"https://github.com/ChristianMurphy/compile-to-web\\\">https://github.com/ChristianMurphy/compile-to-web</a> 这里可以查看目前能编译到WebAssembly的语言。</p>\\n<p>PS, 话说asm.js和Rust都是Mozilla搞的呢。</p>\\n<!-- more -->\\n<h1 id=\\\"安装rust的管理工具rustup\\\"><a href=\\\"#%E5%AE%89%E8%A3%85rust%E7%9A%84%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7rustup\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>安装Rust的管理工具rustup</h1>\\n<p><a href=\\\"rustup\\\">rustup</a>用于安装管理Rust的相关工具，包括编译器rustc、包管理工具cargo等，支持安装不同版本比如stable, beta, nightly等以及在不同版本之间切换，类似于<a href=\\\"https://github.com/creationix/nvm\\\">nvm</a>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">curl</span> https://sh.rustup.rs -sSf <span class=\\\"token operator\\\">|</span> sh</code></pre>\\n      </div>\\n<h1 id=\\\"安装emscripten-rust编译器\\\"><a href=\\\"#%E5%AE%89%E8%A3%85emscripten-rust%E7%BC%96%E8%AF%91%E5%99%A8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>安装Emscripten Rust编译器</h1>\\n<p>用rustup安装最新体验版(Nightly Version)：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">rustup toolchain add nightly\\nrustup target add wasm32-unknown-emscripten --toolchain nightly</code></pre>\\n      </div>\\n<h1 id=\\\"安装cmake\\\"><a href=\\\"#%E5%AE%89%E8%A3%85cmake\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>安装cmake</h1>\\n<p>根据平台自行选择：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">brew <span class=\\\"token function\\\">install</span> cmake                  <span class=\\\"token comment\\\"># MacOS, brew</span>\\n<span class=\\\"token function\\\">sudo</span> port <span class=\\\"token function\\\">install</span> cmake             <span class=\\\"token comment\\\"># MacOS, MacPorts</span>\\n<span class=\\\"token function\\\">sudo</span> <span class=\\\"token function\\\">apt-get</span> <span class=\\\"token function\\\">install</span> cmake          <span class=\\\"token comment\\\"># Debian Linux</span></code></pre>\\n      </div>\\n<h1 id=\\\"安装-emscripten\\\"><a href=\\\"#%E5%AE%89%E8%A3%85-emscripten\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>安装 Emscripten</h1>\\n<p>参考<a href=\\\"/fe-hpc/asmjs-and-webassembly\\\">前一篇</a>，或者直接执行下面命令：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">wget</span> https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz\\n<span class=\\\"token function\\\">tar</span> -xvf emsdk-portable.tar.gz\\n<span class=\\\"token function\\\">cd</span> emsdk-portable\\n./emsdk update\\n./emsdk <span class=\\\"token function\\\">install</span> sdk-incoming-64bit</code></pre>\\n      </div>\\n<p>这一步花的时间比较久，据说要2个多小时，我是执行完命令就出去跟朋友吃饭了，所以具体时间不知道。</p>\\n<p>添加下列路径到<code class=\\\"language-text\\\">PATH</code>中：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">~/emsdk-portable\\n~/emsdk-portable/clang/fastcomp/build_incoming_64/bin\\n~/emsdk-portable/emscripten/incoming</code></pre>\\n      </div>\\n<p>终端执行<code class=\\\"language-text\\\">emcc -v</code>检查是否安装成功。</p>\\n<h1 id=\\\"用webpack运行rust\\\"><a href=\\\"#%E7%94%A8webpack%E8%BF%90%E8%A1%8Crust\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>用Webpack运行Rust</h1>\\n<p>新建一个Rust/Javascript混合项目：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">cargo new webasm --bin --vcs none\\n<span class=\\\"token function\\\">cd</span> webasm\\n<span class=\\\"token function\\\">npm</span> init\\nrustup override <span class=\\\"token keyword\\\">set</span> nightly</code></pre>\\n      </div>\\n<p>安装<a href=\\\"https://webpack.js.org\\\">Webpack</a>, <a href=\\\"https://github.com/webpack/webpack-dev-server\\\">webpack-dev-server</a>, <a href=\\\"https://www.npmjs.com/package/rust-wasm-loader\\\">rust-wasm-loader</a>, </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">npm</span> i -D webpack webpack-dev-server rust-wasm-loader</code></pre>\\n      </div>\\n<p>增加<code class=\\\"language-text\\\">package.json</code>脚本：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webasm\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"version\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"1.0.0\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"description\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"main\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"index.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"test\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"echo \\\\\\\"Error: no test specified\\\\\\\" &amp;&amp; exit 1\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"compile\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack --progress\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"serve\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"http-server\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"start\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --content-base ./build\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"author\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"magicly\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"license\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"ISC\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"devDependencies\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"http-server\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"^0.10.0\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"rust-wasm-loader\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"^0.1.2\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"webpack\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"^3.6.0\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"webpack-dev-server\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"^2.8.2\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>在<code class=\\\"language-text\\\">build</code>目录下新建文件<code class=\\\"language-text\\\">index.html</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token doctype\\\">&lt;!DOCTYPE html></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>title</span><span class=\\\"token punctuation\\\">></span></span>Hello WebAssembly<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>title</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>container<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/bundle.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>配置<code class=\\\"language-text\\\">webpack.config.js</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">module<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  entry<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'./src/index.js'</span><span class=\\\"token punctuation\\\">,</span>\\n  output<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    filename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'bundle.js'</span><span class=\\\"token punctuation\\\">,</span>\\n    path<span class=\\\"token punctuation\\\">:</span> __dirname <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'/build'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  module<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    rules<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.rs$/</span><span class=\\\"token punctuation\\\">,</span>\\n        use<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n          loader<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'rust-wasm-loader'</span><span class=\\\"token punctuation\\\">,</span>\\n          options<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// The path to the webpack output relative to the project root</span>\\n            path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">,</span>\\n            release<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token comment\\\">// 没有的话性能巨差，差不多只有1/10</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// The .wasm 'glue' code generated by Emscripten requires these node builtins,</span>\\n  <span class=\\\"token comment\\\">// but won't actually use them in a web environment. We tell Webpack to not resolve those</span>\\n  <span class=\\\"token comment\\\">// require statements since we know we won't need them.</span>\\n  externals<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'path'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>新建<code class=\\\"language-text\\\">src/main.rs</code>文件，添加我们要从js中调用的函数：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-rust\\\"><code class=\\\"language-rust\\\"><span class=\\\"token keyword\\\">fn</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">println!</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Hello, world!\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// Functions that you wish to access from Javascript</span>\\n<span class=\\\"token comment\\\">// must be marked as no_mangle</span>\\n<span class=\\\"token attribute attr-name\\\">#[no_mangle]</span>\\n<span class=\\\"token keyword\\\">pub</span> <span class=\\\"token keyword\\\">fn</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">:</span> i32<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">:</span> i32<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">-></span> i32 <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>新建<code class=\\\"language-text\\\">src/index.js</code>，写代码加载WebAssembly模块：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> wasm <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./main.rs'</span><span class=\\\"token punctuation\\\">)</span>\\n\\nwasm<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">initialize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> noExitRuntime<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>module <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// Create a Javascript wrapper around our Rust function</span>\\n  <span class=\\\"token keyword\\\">const</span> add <span class=\\\"token operator\\\">=</span> module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cwrap</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'add'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n  \\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Calling rust functions from javascript!'</span><span class=\\\"token punctuation\\\">)</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>然后执行<code class=\\\"language-text\\\">npm start</code>，访问<a href=\\\"http://localhost:8080/\\\">http://localhost:8080/</a>就可以看到调用rust代码的效果了。并且还支持热更新哦，直接修改rust代码，保存，页面就能看到最新效果。\\n<img src=\\\"/blogimgs/rust-webassembly-console.png\\\" alt=\\\"Rust WebAssembly console\\\"></p>\\n<p>测试了一下前一篇里的代码，直接运行rust优化过的代码只需要300多ms，这个基本跟C代码一样，但是用wasm运行，居然要2.7s左右，不知道是哪里没有配置好，还是说现在Rust编译成wasm没有优化好。Rust支持WebAssembly应该还不是特别成熟，可以关注<a href=\\\"https://github.com/rust-lang/rust/issues/38804\\\">https://github.com/rust-lang/rust/issues/38804</a> 跟进。</p>\\n<p>另外Rust有一个包<a href=\\\"https://crates.io/crates/webplatform%EF%BC%8C\\\">https://crates.io/crates/webplatform，</a> 可以用来操作DOM，不过我目前用不到（感觉没啥用）。</p>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ul>\\n<li><a href=\\\"https://medium.com/@ianjsikes/get-started-with-rust-webassembly-and-webpack-58d28e219635\\\">https://medium.com/@ianjsikes/get-started-with-rust-webassembly-and-webpack-58d28e219635</a></li>\\n<li><a href=\\\"http://zcfy.cc/article/get-started-with-rust-webassembly-and-webpack-ian-j-sikes-medium-3345.html\\\">http://zcfy.cc/article/get-started-with-rust-webassembly-and-webpack-ian-j-sikes-medium-3345.html</a></li>\\n<li><a href=\\\"https://users.rust-lang.org/t/compiling-to-the-web-with-rust-and-emscripten/7627\\\">Compiling to the web with Rust and emscripten</a></li>\\n<li><a href=\\\"https://www.slideshare.net/RReverser/rust-javascript\\\">Rust ⇋ JavaScript</a></li>\\n<li><a href=\\\"http://www.hellorust.com/emscripten/\\\">http://www.hellorust.com/emscripten/</a></li>\\n<li><a href=\\\"http://asquera.de/blog/2017-04-10/the-path-to-rust-on-the-web/\\\">http://asquera.de/blog/2017-04-10/the-path-to-rust-on-the-web/</a></li>\\n<li><a href=\\\"https://github.com/mrdziuban/rust-emscripten-loader\\\">https://github.com/mrdziuban/rust-emscripten-loader</a></li>\\n<li><a href=\\\"https://github.com/ballercat/wasm-loader\\\">https://github.com/ballercat/wasm-loader</a></li>\\n<li><a href=\\\"https://hackernoon.com/compiling-rust-to-webassembly-guide-411066a69fde\\\">https://hackernoon.com/compiling-rust-to-webassembly-guide-411066a69fde</a></li>\\n<li><a href=\\\"https://github.com/mbasso/awesome-wasm\\\">https://github.com/mbasso/awesome-wasm</a></li>\\n<li><a href=\\\"https://github.com/rust-lang/rust/issues/38805\\\">https://github.com/rust-lang/rust/issues/38805</a></li>\\n<li><a href=\\\"https://davidmcneil.github.io/the-rusty-web/#benchmarks\\\">https://davidmcneil.github.io/the-rusty-web/#benchmarks</a></li>\\n<li><a href=\\\"http://asmjs.org/\\\">http://asmjs.org/</a></li>\\n<li><a href=\\\"http://webassembly.org/\\\">http://webassembly.org/</a></li>\\n<li><a href=\\\"https://kripken.github.io/emscripten-site/index.html\\\">https://kripken.github.io/emscripten-site/index.html</a></li>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/WebAssembly\\\">https://developer.mozilla.org/en-US/docs/WebAssembly</a></li>\\n<li><a href=\\\"http://www.codepool.biz/emscripten-compile-cc-javascript.html\\\">http://www.codepool.biz/emscripten-compile-cc-javascript.html</a></li>\\n<li><a href=\\\"http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html\\\">http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html</a></li>\\n<li><a href=\\\"https://zhuanlan.zhihu.com/p/25865972\\\">https://zhuanlan.zhihu.com/p/25865972</a></li>\\n<li><a href=\\\"https://zhuanlan.zhihu.com/p/24632251\\\">https://zhuanlan.zhihu.com/p/24632251</a></li>\\n</ul>\",\"timeToRead\":6,\"excerpt\":\"前一篇 我们探索了用 Emscripten 编译 代码到 和 ，使前端代码执行速度大大提升，但是实际项目中由于 语言缺乏很多高级特性，不利于开发大型项目（说 可以开发操作系统kernel这种大型项目的同学不好意思，我没那么nb…\",\"fields\":{\"slug\":\"/fe-hpc/rust-asmjs-and-webassembly\"},\"frontmatter\":{\"title\":\"前端高性能计算之三：Rust -> asm.js & webassembly\",\"date\":\"2017-10-09\",\"category\":\"FE\",\"tags\":[\"Rust\",\"asm.js\",\"webassembly\"]}}},{\"node\":{\"html\":\"<p><a href=\\\"/fe-hpc/webworkers\\\">前一篇</a>我们说了要解决高性能计算的两个方法，一个是并发用WebWorkers，另一个就是用更底层的静态语言。</p>\\n<p>2012年，Mozilla的工程师<a href=\\\"https://twitter.com/kripken\\\">Alon Zakai</a>在研究<a href=\\\"http://llvm.org/\\\">LLVM</a>编译器时突发奇想：能不能把C/C++编译成Javascript，并且尽量达到Native代码的速度呢？于是他开发了<a href=\\\"https://kripken.github.io/emscripten-site/index.html\\\">Emscripten</a>编译器，用于将C/C++代码编译成Javascript的一个子集<a href=\\\"http://asmjs.org/\\\">asm.js</a>，性能差不多是原生代码的50%。大家可以看看<a href=\\\"http://kripken.github.io/mloc_emscripten_talk/\\\">这个PPT</a>。</p>\\n<p>之后Google开发了<a href=\\\"\\\">Portable Native Client</a>，也是一种能让浏览器运行C/C++代码的技术。\\n后来估计大家都觉得各搞各的不行啊，居然Google, Microsoft, Mozilla, Apple等几家大公司一起合作开发了一个面向Web的通用二进制和文本格式的项目，那就是<a href=\\\"http://webassembly.org/\\\">WebAssembly</a>，官网上的介绍是：</p>\\n<blockquote>\\n<p>WebAssembly or wasm is a new portable, size- and load-time-efficient format suitable for compilation to the web.</p>\\n</blockquote>\\n<blockquote>\\n<p>WebAssembly is currently being designed as an open standard by a W3C Community Group that includes representatives from all major browsers.</p>\\n</blockquote>\\n<p>所以，<a href=\\\"http://webassembly.org/\\\">WebAssembly</a>应该是一个前景很好的项目。我们可以看一下<a href=\\\"https://caniuse.com/#search=webassembly\\\">目前浏览器的支持情况</a>：\\n<img src=\\\"/blogimgs/caniuse-webassembly.png\\\" alt=\\\"can i use webassembly\\\"></p>\\n<!-- more -->\\n<h1 id=\\\"安装emscripten\\\"><a href=\\\"#%E5%AE%89%E8%A3%85emscripten\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>安装Emscripten</h1>\\n<p>访问<a href=\\\"https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html\\\">https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html</a></p>\\n<p>1. 下载对应平台版本的SDK</p>\\n<p>2. 通过emsdk获取最新版工具</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># Fetch the latest registry of available tools.</span>\\n./emsdk update\\n\\n<span class=\\\"token comment\\\"># Download and install the latest SDK tools.</span>\\n./emsdk <span class=\\\"token function\\\">install</span> latest\\n\\n<span class=\\\"token comment\\\"># Make the \\\"latest\\\" SDK \\\"active\\\" for the current user. (writes ~/.emscripten file)</span>\\n./emsdk activate latest\\n\\n<span class=\\\"token comment\\\"># Activate PATH and other environment variables in the current terminal</span>\\n<span class=\\\"token function\\\">source</span> ./emsdk_env.sh</code></pre>\\n      </div>\\n<p>3. 将下列添加到环境变量PATH中</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">~/emsdk-portable\\n~/emsdk-portable/clang/fastcomp/build_incoming_64/bin\\n~/emsdk-portable/emscripten/incoming</code></pre>\\n      </div>\\n<p>4. 其他</p>\\n<p>我在执行的时候碰到报错说<code class=\\\"language-text\\\">LLVM</code>版本不对，后来参考<a href=\\\"https://kripken.github.io/emscripten-site/docs/building_from_source/configuring_emscripten_settings.html\\\">文档</a>配置了<code class=\\\"language-text\\\">LLVM_ROOT</code>变量就好了，如果你没有遇到问题，可以忽略。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">LLVM_ROOT <span class=\\\"token operator\\\">=</span> os.path.expanduser<span class=\\\"token punctuation\\\">(</span>os.getenv<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'LLVM'</span>, <span class=\\\"token string\\\">'/home/ubuntu/a-path/emscripten-fastcomp/build/bin'</span><span class=\\\"token punctuation\\\">))</span></code></pre>\\n      </div>\\n<p>5. 验证是否安装好</p>\\n<p>执行<code class=\\\"language-text\\\">emcc -v</code>，如果安装好会出现如下信息：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc <span class=\\\"token punctuation\\\">(</span>Emscripten gcc/clang-like replacement + linker emulating GNU ld<span class=\\\"token punctuation\\\">)</span> 1.37.21\\nclang version 4.0.0 <span class=\\\"token punctuation\\\">(</span>https://github.com/kripken/emscripten-fastcomp-clang.git 974b55fd84ca447c4297fc3b00cefb6394571d18<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">(</span>https://github.com/kripken/emscripten-fastcomp.git 9e4ee9a67c3b67239bd1438e31263e2e86653db5<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">(</span>emscripten 1.37.21 <span class=\\\"token keyword\\\">:</span> 1.37.21<span class=\\\"token punctuation\\\">)</span>\\nTarget: x86_64-apple-darwin15.5.0\\nThread model: posix\\nInstalledDir: /Users/magicly/emsdk-portable/clang/fastcomp/build_incoming_64/bin\\nINFO:root:<span class=\\\"token punctuation\\\">(</span>Emscripten: Running sanity checks<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<h1 id=\\\"hello-webassembly\\\"><a href=\\\"#hello-webassembly\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hello, WebAssembly!</h1>\\n<p>创建一个文件<code class=\\\"language-text\\\">hello.c</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code class=\\\"language-c\\\"><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Hello, WebAssembly!\\\\n\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>编译<code class=\\\"language-text\\\">C/C++</code>代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc hello.c</code></pre>\\n      </div>\\n<p>上述命令会生成一个<code class=\\\"language-text\\\">a.out.js</code>文件，我们可以直接用<code class=\\\"language-text\\\">Node.js</code>执行：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">node a.out.js</code></pre>\\n      </div>\\n<p>输出</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">Hello, WebAssembly<span class=\\\"token operator\\\">!</span></code></pre>\\n      </div>\\n<p>为了让代码运行在网页里面，执行下面命令会生成<code class=\\\"language-text\\\">hello.html</code>和<code class=\\\"language-text\\\">hello.js</code>两个文件，其中<code class=\\\"language-text\\\">hello.js</code>和<code class=\\\"language-text\\\">a.out.js</code>内容是完全一样的。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc hello.c -o hello.html</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  webasm-study md5 a.out.js\\nMD5 <span class=\\\"token punctuation\\\">(</span>a.out.js<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> d7397f44f817526a4d0f94bc85e46429\\n➜  webasm-study md5 hello.js\\nMD5 <span class=\\\"token punctuation\\\">(</span>hello.js<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> d7397f44f817526a4d0f94bc85e46429</code></pre>\\n      </div>\\n<p>然后在浏览器打开hello.html，可以看到页面\\n<img src=\\\"/blogimgs/hello1.png\\\" alt=\\\"hello1.html\\\"></p>\\n<p>前面生成的代码都是<code class=\\\"language-text\\\">asm.js</code>，毕竟<a href=\\\"https://kripken.github.io/emscripten-site/index.html\\\">Emscripten</a>是人家作者<a href=\\\"https://twitter.com/kripken\\\">Alon Zakai</a>最早用来生成<code class=\\\"language-text\\\">asm.js</code>的，默认输出<code class=\\\"language-text\\\">asm.js</code>也就不足为奇了。当然，可以通过option生成<code class=\\\"language-text\\\">wasm</code>，会生成三个文件：<code class=\\\"language-text\\\">hello-wasm.html</code>, <code class=\\\"language-text\\\">hello-wasm.js</code>, <code class=\\\"language-text\\\">hello-wasm.wasm</code>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc hello.c -s WASM<span class=\\\"token operator\\\">=</span>1 -o hello-wasm.html</code></pre>\\n      </div>\\n<p>然后浏览器打开<code class=\\\"language-text\\\">hello-wasm.html</code>，发现报错<code class=\\\"language-text\\\">TypeError: Failed to fetch</code>。原因是<code class=\\\"language-text\\\">wasm</code>文件是通过<code class=\\\"language-text\\\">XHR</code>异步加载的，用<code class=\\\"language-text\\\">file:////</code>访问会报错，所以我们需要启一个服务器。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> -g serve\\nserve <span class=\\\"token keyword\\\">.</span></code></pre>\\n      </div>\\n<p>然后访问<code class=\\\"language-text\\\">http://localhost:5000/hello-wasm.html</code>，就可以看到正常结果了。</p>\\n<h1 id=\\\"调用cc函数\\\"><a href=\\\"#%E8%B0%83%E7%94%A8cc%E5%87%BD%E6%95%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>调用C/C++函数</h1>\\n<p>前面的<code class=\\\"language-text\\\">Hello, WebAssembly!</code>都是<code class=\\\"language-text\\\">main</code>函数直接打出来的，而我们使用<code class=\\\"language-text\\\">WebAssembly</code>的目的是为了高性能计算，做法多半是用C/C++实现某个函数进行耗时的计算，然后编译成<code class=\\\"language-text\\\">wasm</code>，暴露给js去调用。</p>\\n<p>在文件<code class=\\\"language-text\\\">add.c</code>中写如下代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code class=\\\"language-c\\\"><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"a + b: %d\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>有两种方法可以把<code class=\\\"language-text\\\">add</code>方法暴露出来给js调用。</p>\\n<h2 id=\\\"通过命令行参数暴露api\\\"><a href=\\\"#%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E6%9A%B4%E9%9C%B2api\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>通过命令行参数暴露API</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc -s EXPORTED_FUNCTIONS<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"['_add']\\\"</span> add.c -o add.js</code></pre>\\n      </div>\\n<p>注意方法名<code class=\\\"language-text\\\">add</code>前必须加<code class=\\\"language-text\\\">_</code>。\\n然后我们可以在<code class=\\\"language-text\\\">Node.js</code>里面这样使用：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// file node-add.js</span>\\n<span class=\\\"token keyword\\\">const</span> add_module <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./add.js'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>add_module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ccall</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'add'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>执行<code class=\\\"language-text\\\">node node-add.js</code>会输出<code class=\\\"language-text\\\">5</code>。\\n如果需要在web页面使用的话，执行：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc -s EXPORTED_FUNCTIONS<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"['_add']\\\"</span> add.c -o add.html</code></pre>\\n      </div>\\n<p>然后在生成的<code class=\\\"language-text\\\">add.html</code>中加入如下代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\">  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onclick</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>nativeAdd()<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>click<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>text/javascript<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\">\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">nativeAdd</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> Module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ccall</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'add'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>然后点击button，就可以看到执行结果了。</p>\\n<p><code class=\\\"language-text\\\">Module.ccall</code>会直接调用<code class=\\\"language-text\\\">C/C++</code>代码的方法，更通用的场景是我们获取到一个包装过的函数，可以在js里面反复调用，这需要用<code class=\\\"language-text\\\">Module.cwrap</code>，具体细节可以参看<a href=\\\"https://kripken.github.io/emscripten-site/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html#interacting-with-code-ccall-cwrap\\\">文档</a>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> cAdd <span class=\\\"token operator\\\">=</span> add_module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cwrap</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'add'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">cAdd</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">cAdd</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"定义函数的时候添加code-classlanguage-textemscripten_keepalivecode\\\"><a href=\\\"#%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E7%9A%84%E6%97%B6%E5%80%99%E6%B7%BB%E5%8A%A0code-classlanguage-textemscripten_keepalivecode\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>定义函数的时候添加<code class=\\\"language-text\\\">EMSCRIPTEN_KEEPALIVE</code></h2>\\n<p>添加文件<code class=\\\"language-text\\\">add2.c</code>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code class=\\\"language-c\\\"><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n<span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;emscripten.h></span></span>\\n\\n<span class=\\\"token keyword\\\">int</span> EMSCRIPTEN_KEEPALIVE <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"a + b: %d\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>执行命令：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc add2.c -o add2.html</code></pre>\\n      </div>\\n<p>同样在<code class=\\\"language-text\\\">add2.html</code>中添加代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\">  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onclick</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>nativeAdd()<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>click<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>text/javascript<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\">\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">nativeAdd</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> Module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ccall</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'add'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>但是，当你点击button的时候，报错：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">Assertion failed: the runtime was exited <span class=\\\"token punctuation\\\">(</span>use NO_EXIT_RUNTIME to keep it alive after main<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> exits<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>可以通过在<code class=\\\"language-text\\\">main()</code>中添加<code class=\\\"language-text\\\">emscripten_exit_with_live_runtime()</code>解决：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code class=\\\"language-c\\\"><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n<span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;emscripten.h></span></span>\\n\\n<span class=\\\"token keyword\\\">int</span> EMSCRIPTEN_KEEPALIVE <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"a + b: %d\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">emscripten_exit_with_live_runtime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>或者也可以直接在命令行中添加<code class=\\\"language-text\\\">-s NO_EXIT_RUNTIME=1</code>来解决，</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc add2.c -o add2.js -s NO_EXIT_RUNTIME<span class=\\\"token operator\\\">=</span>1</code></pre>\\n      </div>\\n<p>不过会报一个警告：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">exit<span class=\\\"token punctuation\\\">(</span>0<span class=\\\"token punctuation\\\">)</span> implicitly called by end of main<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>, but noExitRuntime, so not exiting the runtime <span class=\\\"token punctuation\\\">(</span>you can use emscripten_force_exit, <span class=\\\"token keyword\\\">if</span> you want to force a <span class=\\\"token boolean\\\">true</span> shutdown<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>所以建议采用第一种方法。</p>\\n<p>上述生成的代码都是<code class=\\\"language-text\\\">asm.js</code>，只需要在编译参数中添加<code class=\\\"language-text\\\">-s WASM=1</code>中就可以生成<code class=\\\"language-text\\\">wasm</code>，然后使用方法都一样。</p>\\n<h1 id=\\\"用asmjs和webassembly执行耗时计算\\\"><a href=\\\"#%E7%94%A8asmjs%E5%92%8Cwebassembly%E6%89%A7%E8%A1%8C%E8%80%97%E6%97%B6%E8%AE%A1%E7%AE%97\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>用asm.js和WebAssembly执行耗时计算</h1>\\n<p>前面准备工作都做完了， 现在我们来试一下用<code class=\\\"language-text\\\">C</code>代码来优化<a href=\\\"./webworkers\\\">前一篇</a>中提过的问题。代码很简单：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code class=\\\"language-c\\\"><span class=\\\"token comment\\\">// file sum.c</span>\\n<span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n<span class=\\\"token comment\\\">// #include &lt;emscripten.h></span>\\n\\n<span class=\\\"token keyword\\\">long</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> start<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">long</span> end<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">long</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    total <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    total <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> total<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"sum(0, 1000000000): %ld\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000000000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// emscripten_exit_with_live_runtime();</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>注意用<code class=\\\"language-text\\\">gcc</code>编译的时候需要把跟<code class=\\\"language-text\\\">emscriten</code>相关的两行代码注释掉，否则编译不过。\\n我们先直接用<code class=\\\"language-text\\\">gcc</code>编译成<code class=\\\"language-text\\\">native code</code>看看代码运行多块呢？</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  webasm-study gcc sum.c\\n➜  webasm-study <span class=\\\"token function\\\">time</span> ./a.out\\nsum<span class=\\\"token punctuation\\\">(</span>0, 1000000000<span class=\\\"token punctuation\\\">)</span>: 0./a.out  5.70s user 0.02s system 99% cpu 5.746 total\\n➜  webasm-study gcc -O1 sum.c\\n➜  webasm-study <span class=\\\"token function\\\">time</span> ./a.out\\nsum<span class=\\\"token punctuation\\\">(</span>0, 1000000000<span class=\\\"token punctuation\\\">)</span>: 0./a.out  0.00s user 0.00s system 64% cpu 0.003 total\\n➜  webasm-study gcc -O2 sum.c\\n➜  webasm-study <span class=\\\"token function\\\">time</span> ./a.out\\nsum<span class=\\\"token punctuation\\\">(</span>0, 1000000000<span class=\\\"token punctuation\\\">)</span>: 0./a.out  0.00s user 0.00s system 64% cpu 0.003 total</code></pre>\\n      </div>\\n<p>可以看到有没有优化差别还是很大的，优化过的代码执行时间是<strong>3ms!</strong>。really？仔细想想，我for循环了10亿次啊，每次for执行大概是两次加法，两次赋值，一次比较，而我总共做了两次for循环，也就是说至少是100亿次操作，而我的mac pro是<code class=\\\"language-text\\\">2.5 GHz Intel Core i7</code>，所以1s应该也就执行25亿次CPU指令操作吧，怎么可能逆天到这种程度，肯定是哪里错了。想起之前看到的<a href=\\\"http://ling0322.info/2014/01/20/rust-vs-go-in-code-optimization.html\\\">一篇rust测试性能的文章</a>，说rust直接在编译的时候算出了答案， 然后把结果直接写到了编译出来的代码里， 不知道gcc是不是也做了类似的事情。在知乎上<a href=\\\"https://www.zhihu.com/question/27090458\\\">GCC中-O1 -O2 -O3 优化的原理是什么？</a>这篇文章里， 还真有loop-invariant code motion（LICM）针对for的优化，所以我把代码增加了一些if判断，希望能“糊弄”得了gcc的优化。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code class=\\\"language-c\\\"><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n<span class=\\\"token comment\\\">// #include &lt;emscripten.h></span>\\n\\n<span class=\\\"token comment\\\">// long EMSCRIPTEN_KEEPALIVE sum(long start, long end) {</span>\\n<span class=\\\"token keyword\\\">long</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> start<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">long</span> end<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">long</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> total<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"sum(0, 1000000000): %ld\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100000000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// emscripten_exit_with_live_runtime();</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>执行结果大概要正常一些了。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">➜  webasm-study gcc -O2 sum.c\\n➜  webasm-study <span class=\\\"token function\\\">time</span> ./a.out\\nsum<span class=\\\"token punctuation\\\">(</span>0, 1000000000<span class=\\\"token punctuation\\\">)</span>: 0./a.out  0.32s user 0.00s system 99% cpu 0.324 total</code></pre>\\n      </div>\\n<p>ok，我们来编译成<code class=\\\"language-text\\\">asm.js</code>了。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code class=\\\"language-c\\\"><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n<span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;emscripten.h></span></span>\\n\\n<span class=\\\"token keyword\\\">long</span> EMSCRIPTEN_KEEPALIVE <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> start<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">long</span> end<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token comment\\\">// long sum(long start, long end) {</span>\\n  <span class=\\\"token keyword\\\">long</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> total<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"sum(0, 1000000000): %ld\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100000000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">emscripten_exit_with_live_runtime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>执行</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc sum.c -o sum.html</code></pre>\\n      </div>\\n<p>然后在<code class=\\\"language-text\\\">sum.html</code>中添加代码</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\">  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onclick</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>nativeSum()<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>NativeSum<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onclick</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>jsSumCalc()<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>JSSum<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>text/javascript<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\">\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">nativeSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      t1 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> Module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ccall</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sum'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100000000</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      t2 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`result: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>result<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">, cost time: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>text/javascript<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\">\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">jsSum</span><span class=\\\"token punctuation\\\">(</span>start<span class=\\\"token punctuation\\\">,</span> end<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">let</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          total <span class=\\\"token operator\\\">+=</span> i<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          total <span class=\\\"token operator\\\">+=</span> i <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          total <span class=\\\"token operator\\\">-=</span> i<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          total <span class=\\\"token operator\\\">-=</span> i <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n\\n      <span class=\\\"token keyword\\\">return</span> total<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">jsSumCalc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">N</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">100000000</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// 总次数1亿</span>\\n      t1 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">jsSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">N</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      t2 <span class=\\\"token operator\\\">=</span> Date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`result: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>result<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">, cost time: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>另外，我们修改成编译成WebAssembly看看效果呢？</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc sum.c -o sum.js -s WASM<span class=\\\"token operator\\\">=</span>1</code></pre>\\n      </div>\\n<table>\\n<thead>\\n<tr>\\n<th>Browser</th>\\n<th>webassembly</th>\\n<th>asm.js</th>\\n<th>js</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Chrome61</td>\\n<td>1300ms</td>\\n<td>600ms</td>\\n<td>3300ms</td>\\n</tr>\\n<tr>\\n<td>Firefox55</td>\\n<td>600ms</td>\\n<td>800ms</td>\\n<td>700ms</td>\\n</tr>\\n<tr>\\n<td>Safari9.1</td>\\n<td>不支持</td>\\n<td>2800ms</td>\\n<td>因不支持ES6我懒得改写没测试</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>感觉Firefox有点不合理啊， 默认的JS太强了吧。然后觉得webassembly也没有特别强啊，突然发现<code class=\\\"language-text\\\">emcc</code>编译的时候没有指定优化选项<code class=\\\"language-text\\\">-O2</code>。再来一次：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">emcc -O2 sum.c -o sum.js <span class=\\\"token comment\\\"># for asm.js</span>\\nemcc -O2 sum.c -o sum.js -s WASM<span class=\\\"token operator\\\">=</span>1 <span class=\\\"token comment\\\"># for webassembly</span></code></pre>\\n      </div>\\n<table>\\n<thead>\\n<tr>\\n<th>Browser</th>\\n<th>webassembly -O2</th>\\n<th>asm.js -O2</th>\\n<th>js</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Chrome61</td>\\n<td>1300ms</td>\\n<td>600ms</td>\\n<td>3300ms</td>\\n</tr>\\n<tr>\\n<td>Firefox55</td>\\n<td>650ms</td>\\n<td>630ms</td>\\n<td>700ms</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>居然没什么变化， 大失所望。号称<code class=\\\"language-text\\\">asm.js</code>可以达到native的50%速度么，这个倒是好像达到了。但是今年<a href=\\\"https://www.youtube.com/watch?v=6v4E6oksar0\\\">Compiling for the Web with WebAssembly (Google I/O ‘17)</a>里说WebAssembly是<code class=\\\"language-text\\\">1.2x slower than native code</code>，感觉不对呢。<a href=\\\"http://asmjs.org/\\\">asm.js</a>还有一个好处是，它就是js，所以即使浏览器不支持，也能当成不同的js执行，只是没有加速效果。当然<a href=\\\"http://webassembly.org/\\\">WebAssembly</a>受到各大厂商一致推崇，作为一个新的标准，肯定前景会更好，期待会有更好的表现。</p>\\n<h1 id=\\\"rust\\\"><a href=\\\"#rust\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Rust</h1>\\n<p>本来还想写Rust编译成WebAssembly的，不过感觉本文已经太长了， 后期再写如果结合Rust做WebAssembly吧。</p>\\n<p>着急的可以先看看这两篇</p>\\n<ul>\\n<li><a href=\\\"https://users.rust-lang.org/t/compiling-to-the-web-with-rust-and-emscripten/7627\\\">Compiling to the web with Rust and emscripten</a></li>\\n<li><a href=\\\"https://www.slideshare.net/RReverser/rust-javascript\\\">Rust ⇋ JavaScript</a></li>\\n</ul>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ul>\\n<li><a href=\\\"http://asmjs.org/\\\">http://asmjs.org/</a></li>\\n<li><a href=\\\"http://webassembly.org/\\\">http://webassembly.org/</a></li>\\n<li><a href=\\\"https://kripken.github.io/emscripten-site/index.html\\\">https://kripken.github.io/emscripten-site/index.html</a></li>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/WebAssembly\\\">https://developer.mozilla.org/en-US/docs/WebAssembly</a></li>\\n<li><a href=\\\"http://www.codepool.biz/emscripten-compile-cc-javascript.html\\\">http://www.codepool.biz/emscripten-compile-cc-javascript.html</a></li>\\n<li><a href=\\\"http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html\\\">http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html</a></li>\\n<li><a href=\\\"https://zhuanlan.zhihu.com/p/25865972\\\">https://zhuanlan.zhihu.com/p/25865972</a></li>\\n</ul>\",\"timeToRead\":11,\"excerpt\":\"前一篇 我们说了要解决高性能计算的两个方法，一个是并发用WebWorkers，另一个就是用更底层的静态语言。 2012年，Mozilla的工程师 Alon Zakai 在研究 LLVM 编译器时突发奇想：能不能把C/C++编译成Javascript，并且尽量达到Native…\",\"fields\":{\"slug\":\"/fe-hpc/asmjs-and-webassembly\"},\"frontmatter\":{\"title\":\"前端高性能计算之二：asm.js & webassembly\",\"date\":\"2017-09-25\",\"category\":\"FE\",\"tags\":[\"asm.js\",\"webassembly\"]}}},{\"node\":{\"html\":\"<p>最近做一个项目，里面涉及到在前端做大量计算，直接用js跑了一下，大概需要15s的时间， \\u001b也就是用户的浏览器会卡死15s，这个完全接受不了。</p>\\n<p>虽说有V8这样牛逼的引擎，但大家知道js并不适合做CPU密集型的计算，一是因为单线程，二是因为动态语言。我们就从这两个突破口入手，首先搞定“单线程”的限制，尝试用WebWorkers来加速计算。</p>\\n<!-- more -->\\n<h1 id=\\\"什么是webworkers\\\"><a href=\\\"#%E4%BB%80%E4%B9%88%E6%98%AFwebworkers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>什么是WebWorkers</h1>\\n<p>简单说，<a href=\\\"http://www.whatwg.org/specs/web-workers/current-work/\\\">WebWorkers</a>是一个HTML5的新API，web开发者可以通过此API在后台运行一个脚本而不阻塞UI，可以用来做需要大量计算的事情，充分利用CPU多核。</p>\\n<p>大家可以看看这篇文章介绍<a href=\\\"https://www.html5rocks.com/en/tutorials/workers/basics/%EF%BC%8C\\\">https://www.html5rocks.com/en/tutorials/workers/basics/，</a> 或者<a href=\\\"https://www.html5rocks.com/zh/tutorials/workers/basics/\\\">对应的中文版</a>。</p>\\n<blockquote>\\n<p>The Web Workers specification defines an API for spawning background scripts in your web application. Web Workers allow you to do things like fire up long-running scripts to handle computationally intensive tasks, but without blocking the UI or other scripts to handle user interactions. </p>\\n</blockquote>\\n<p>可以打开<a href=\\\"https://nerget.com/rayjs-mt/rayjs.html\\\">这个链接</a>自己体验一下WebWorkers的加速效果。</p>\\n<p>现在浏览器基本都<a href=\\\"https://caniuse.com/#search=webworkers\\\">支持WebWorkers了</a>。\\n<img src=\\\"/blogimgs/caniuse-webworkers.png\\\" alt=\\\"can i use webworkers\\\"></p>\\n<h1 id=\\\"paralleljs\\\"><a href=\\\"#paralleljs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Parallel.js</h1>\\n<p>直接使用<a href=\\\"http://www.whatwg.org/specs/web-workers/current-work/\\\">WebWorkers</a>接口还是太繁琐，好在有人已经对此作了封装：<a href=\\\"https://parallel.js.org/\\\">Parallel.js</a>。</p>\\n<p>注意<a href=\\\"https://parallel.js.org/\\\">Parallel.js</a>可以通过node安装：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> paralleljs</code></pre>\\n      </div>\\n<p>不过这个是在node.js下用的，用的node的cluster模块。如果要在浏览器里使用的话， 需要直接应用js:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>parallel.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>然后可以得到一个全局变量，<code class=\\\"language-text\\\">Parallel</code>。<code class=\\\"language-text\\\">Parallel</code>提供了<code class=\\\"language-text\\\">map</code>和<code class=\\\"language-text\\\">reduce</code>两个函数式编程的接口，可以非常方便的进行并发操作。</p>\\n<p>我们先来定义一下我们的问题，由于业务比较复杂，我这里把问题简化成求1-1,0000,0000的和，然后在依次减去1-1,0000,0000，答案显而易见： 0！ 这样做是因为数字太大的话会有数据精度的问题，两种方法的结果会有一些差异，会让人觉得并行的方法不可靠。此问题在我的mac pro chrome61下直接简单地跑js运行的话大概是1.5s（我们实际业务问题需要15s，这里为了避免用户测试的时候把浏览器搞死，我们简化了问题）。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">N</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">100000000</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// 总次数1亿</span>\\n\\n<span class=\\\"token comment\\\">// 更新自2017-10-24 16：47：00</span>\\n<span class=\\\"token comment\\\">// 代码没有任何含义，纯粹是为了模拟一个耗时计算，直接用</span>\\n<span class=\\\"token comment\\\">//   for (let i = start; i &lt;= end; i += 1) total += i;</span>\\n<span class=\\\"token comment\\\">// 有几个问题，一是代码太简单没有任何稍微复杂一点的操作，后面用C代码优化的时候会优化得很夸张，没法对比。</span>\\n<span class=\\\"token comment\\\">// 二是数据溢出问题， 我懒得处理这个问题，下面代码简单地先加起来，然后再减掉，答案显而易见为0，便于测试。</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span>start<span class=\\\"token punctuation\\\">,</span> end<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">+=</span> i<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">+=</span> i <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">-=</span> i<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> i <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      total <span class=\\\"token operator\\\">-=</span> i <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> total<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">paraSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">N</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">N1</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">N</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//我们分成10分，没分分别交给一个web worker，parallel.js会根据电脑的CPU核数建立适量的workers</span>\\n  <span class=\\\"token keyword\\\">let</span> p <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Parallel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>sum<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> p<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">10000000</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> n <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">10000000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">// 在parallel.js里面没法直接应用外部变量N1</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> acc <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">const</span> e <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span> acc <span class=\\\"token operator\\\">+</span> e<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token constant\\\">N</span><span class=\\\"token punctuation\\\">,</span> sum<span class=\\\"token punctuation\\\">,</span> paraSum <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>代码比较简单，我这里说几个刚用的时候遇到的坑。</p>\\n<ul>\\n<li><strong>require所有需要的函数</strong></li>\\n</ul>\\n<p>比如在上诉代码中用到了<code class=\\\"language-text\\\">sum</code>，你需要提前<code class=\\\"language-text\\\">require(sum)</code>，如果sum中由用到了另一个函数<code class=\\\"language-text\\\">f</code>，你还需要<code class=\\\"language-text\\\">require(f)</code>，同样如果<code class=\\\"language-text\\\">f</code>中用到了<code class=\\\"language-text\\\">g</code>，则还需要<code class=\\\"language-text\\\">require(g)</code>，直到你require了所有用到的定义的函数。。。。</p>\\n<ul>\\n<li><strong>没法<code class=\\\"language-text\\\">require</code>变量</strong></li>\\n</ul>\\n<p>我们上诉代码我本来定义了<code class=\\\"language-text\\\">N1</code>，但是没法用</p>\\n<ul>\\n<li><strong><code class=\\\"language-text\\\">ES6</code>编译成<code class=\\\"language-text\\\">ES5</code>之后的问题以及Chrome没报错</strong></li>\\n</ul>\\n<p>实际项目中一开始我们用到了<code class=\\\"language-text\\\">ES6</code>的特性：<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\\\">数组解构</a>。本来这是很简单的特性，现在大部分浏览器都已经支持了，不过我当时配置的babel会编译成<code class=\\\"language-text\\\">ES5</code>，所以会生成代码<code class=\\\"language-text\\\">_slicedToArray</code>，大家可以<a href=\\\"http://babeljs.io/repl/#?babili=false&#x26;browsers=&#x26;build=&#x26;builtIns=false&#x26;code_lz=GYVwdgxgLglg9mABMAFAbQIYBpECMC6AlIgN4BQiiATgKZQhVIaIDUeA3GQL5lkDmiALzJ0AJhwBmImQgIAznAA2NAHSK4fFH0JA&#x26;debug=false&#x26;circleciRepo=&#x26;evaluate=true&#x26;lineWrap=false&#x26;presets=es2015%2Creact%2Cstage-2&#x26;prettier=false&#x26;targets=&#x26;version=6.26.0\\\">在线上Babel测试</a>，然后Chrome下面始终不work，也没有任何报错信息，查了很久，后来在Firefox下打开，有报错信息：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\">ReferenceError: _slicedToArray is not defined</code></pre>\\n      </div>\\n<p>看来Chrome也不是万能的啊。。。</p>\\n<p>大家可以在<a href=\\\"./parallel-test\\\">此Demo页面</a>测试， 提速大概在4倍左右，当然还是得看自己电脑CPU的核数。\\n另外我后来在同样的电脑上Firefox55.0.3（64位）测试，上诉代码居然只要190ms！！！在Safari9.1.1下也是190ms左右。。。</p>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ul>\\n<li><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\\\">https://developer.mozilla.org/zh-CN/docs/Web/API/Web<em>Workers</em>API/Using<em>web</em>workers</a></li>\\n<li><a href=\\\"https://www.html5rocks.com/en/tutorials/workers/basics/\\\">https://www.html5rocks.com/en/tutorials/workers/basics/</a></li>\\n<li><a href=\\\"https://parallel.js.org/\\\">https://parallel.js.org/</a></li>\\n<li><a href=\\\"https://johnresig.com/blog/web-workers/\\\">https://johnresig.com/blog/web-workers/</a></li>\\n<li><a href=\\\"http://javascript.ruanyifeng.com/htmlapi/webworker.html\\\">http://javascript.ruanyifeng.com/htmlapi/webworker.html</a></li>\\n<li><a href=\\\"http://blog.teamtreehouse.com/using-web-workers-to-speed-up-your-javascript-applications\\\">http://blog.teamtreehouse.com/using-web-workers-to-speed-up-your-javascript-applications</a></li>\\n</ul>\",\"timeToRead\":3,\"excerpt\":\"最近做一个项目，里面涉及到在前端做大量计算，直接用js跑了一下，大概需要15s的时间， \\u001b也就是用户的浏览器会卡死15s，这个完全接受不了。 虽说有V8这样牛逼的引擎，但大家知道js并不适合做CPU…\",\"fields\":{\"slug\":\"/fe-hpc/webworkers\"},\"frontmatter\":{\"title\":\"前端高性能计算之一：WebWorkers\",\"date\":\"2017-09-22\",\"category\":\"FE\",\"tags\":[\"js\",\"hpc\"]}}},{\"node\":{\"html\":\"<p>推荐一些我用过的比较不错的Chrome插件。（长期更新）</p>\\n<ul>\\n<li><a href=\\\"https://about.sourcegraph.com/\\\">SourceGraph</a>, 自从我发现sourcegraph，我就把octotree禁用了，sourcegraph简直就是一个活生生的浏览器里的VSCode，有强大的IDE功能。</li>\\n<li><a href=\\\"https://github.com/buunguyen/octotree\\\">octotree</a>，方便看github代码</li>\\n<li><a href=\\\"https://chrome.google.com/webstore/detail/spaces/cenkmofngpohdnkbjdpilgpmbiiljjim\\\">Spaces</a>，方便讲tabs分类搜藏起来， 这对于我这种长期开着100+个tabs的来说，确实很有必要，功能够用， 有些bug，暂时没找到更合适的。</li>\\n<li><a href=\\\"https://chrome.google.com/webstore/detail/markdown-preview-plus/febilkbfcbhebfnokafefeacimjdckgl\\\">Markdown Preview Plus</a>，预览markdown。</li>\\n<li><a href=\\\"https://chrome.google.com/webstore/detail/uc-qr-code/nhelohnehpahakjoklmodmogclacjgdj\\\">UC二维码</a>，将当前页面链接生成二维码</li>\\n</ul>\\n<!-- more -->\\n<ul>\\n<li><a href=\\\"https://github.com/FelisCatus/SwitchyOmega\\\">SwitchyOmega</a>，代理软件，XX必须。</li>\\n<li><a href=\\\"https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj\\\">ModHeader</a>，可以修改请求头，拿来测试CORS等很方便。</li>\\n<li><a href=\\\"https://www.requestly.in/\\\">Requestly</a>，功能比ModHeader更强大一些</li>\\n<li><a href=\\\"https://chrome.google.com/webstore/detail/http2-and-spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin\\\">HTTP/2 and SPDY indicator</a>，查看你访问的页面是否支持HTTP2，用了才发现，原来已经这么多网站支持了。</li>\\n<li><a href=\\\"http://collamark.com/\\\">Collamark</a>，师弟开发的，用于搜藏、标注web内容，很方便，强烈推荐。</li>\\n<li><a href=\\\"https://chrome.google.com/webstore/detail/fatkun-batch-download-ima/nnjjahlikiabnchcpehcpkdeckfgnohf\\\">Fatkun图片批量下载</a>，批量下载图片</li>\\n<li><a href=\\\"https://github.com/callumlocke/json-formatter\\\">JSON Formatter</a>，调试接口用</li>\\n<li><a href=\\\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\\\">React Developer Tools</a>，React开发工具</li>\\n<li><a href=\\\"https://github.com/zalmoxisus/redux-devtools-extension\\\">Redux DevTools extension</a>，redux开发工具</li>\\n</ul>\\n<p>============================================\\n最后不得不推荐一个Firefox的插件，因为实在太强大了，基本是我现在还安装Firefox的最后一个原因了，那就是<a href=\\\"http://www.downthemall.net/\\\">DownThemAll</a>，下载速度能达到Chrome下载速度的5倍以上，用了都说好！不要去找“Chrome DownThemAll”，找到的都是假的，原因是Chrome提供的插件接口不够”low level”， 无法实现dTa的功能。</p>\\n<p>刚刚在dTa首页上看到作者说不维护dTa了，因为firefox的WebExtentions策略，以后会提供不了那么多low level的API。。。。。感觉一万只草泥马从心头飞奔而过。。。。吓得赶紧去关掉了Firefox的自动更新。。。</p>\\n<p>WebExtension的改变可以看看这里， <a href=\\\"https://zhuanlan.zhihu.com/p/26948163\\\">https://zhuanlan.zhihu.com/p/26948163</a></p>\\n<blockquote>\\n<p>这个改变对经典 Add-ons 的重度用户来说是个不小的打击，Mozilla 也在尽可能补充相关的 WebExtension API，是原有扩展的一些功能可以通过新的 API 实现，我们可以说如果在 57 版本发布后一些常用扩展实在无法迁移，还可以保存一份豪华完整版的 Firefox 56 并关掉自动更新（笑）。</p>\\n</blockquote>\\n<p>赶快行动吧， 不然来不及了。</p>\",\"timeToRead\":1,\"excerpt\":\"推荐一些我用过的比较不错的Chrome插件。（长期更新） SourceGraph , 自从我发现sourcegraph，我就把octotree禁用了，sourcegraph简直就是一个活生生的浏览器里的VSCode，有强大的IDE功能。 octotree ，方便看github…\",\"fields\":{\"slug\":\"/chrome-extentions/\"},\"frontmatter\":{\"title\":\"推荐一些Chrome插件\",\"date\":\"2017-09-15\",\"category\":\"FE\",\"tags\":[\"Chrome Extentions\",\"tools\"]}}},{\"node\":{\"html\":\"<p>自从2014年Christopher Chedeau做了<a href=\\\"http://blog.vjeux.com/2014/javascript/react-css-in-js-nationjs.html\\\">CSS in JS</a>的演讲之后， cssinjs的各种库纷纷出现，已经<a href=\\\"https://github.com/MicheleBertoli/css-in-js\\\">有好几十种了</a>。</p>\\n<p><a href=\\\"https://github.com/css-modules/css-modules\\\">css modules</a>应该是很流行的了， 说实话我没有用过， 不过在浏览作者主页的时候意外发现了<a href=\\\"https://github.com/styled-components/styled-components\\\">styled-components</a>，发现这就是我想要的！大家可以看看下面几个视频，先有个大概印象。</p>\\n<!-- more -->\\n<p><a href=\\\"https://github.com/styled-components/styled-components\\\">styled-components</a>作者<a href=\\\"https://twitter.com/mxstbr\\\">Max Stoiber</a>在2017年React大会上的演讲：</p>\\n<div>\\n          <div\\n            class=\\\"gatsby-resp-iframe-wrapper\\\"\\n            style=\\\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem\\\"\\n          >\\n            <iframe src=\\\"https://www.youtube.com/embed/2j9rSur_mnk\\\" frameborder=\\\"0\\\" allowfullscreen style=\\\"\\n            position: absolute;\\n            top: 0;\\n            left: 0;\\n            width: 100%;\\n            height: 100%;\\n          \\\"></iframe>\\n          </div>\\n          </div>\\n<p><a href=\\\"https://github.com/css-modules/css-modules\\\">css modules</a>作者<a href=\\\"https://twitter.com/glenmaddern\\\">@glenmaddern</a>在2017年欧洲CSS大会上分享<a href=\\\"https://github.com/styled-components/styled-components\\\">styled-components</a>。</p>\\n<div>\\n          <div\\n            class=\\\"gatsby-resp-iframe-wrapper\\\"\\n            style=\\\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem\\\"\\n          >\\n            <iframe src=\\\"https://www.youtube.com/embed/MT4D_DioYC8\\\" frameborder=\\\"0\\\" allowfullscreen style=\\\"\\n            position: absolute;\\n            top: 0;\\n            left: 0;\\n            width: 100%;\\n            height: 100%;\\n          \\\"></iframe>\\n          </div>\\n          </div>\\n<p><a href=\\\"https://github.com/css-modules/css-modules\\\">css modules</a>作者<a href=\\\"https://twitter.com/glenmaddern\\\">@glenmaddern</a>分享<a href=\\\"https://github.com/styled-components/styled-components\\\">styled-components</a>， 玩得很high啊。</p>\\n<div>\\n          <div\\n            class=\\\"gatsby-resp-iframe-wrapper\\\"\\n            style=\\\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem\\\"\\n          >\\n            <iframe src=\\\"https://www.youtube.com/embed/qu4U7lwZTRI\\\" frameborder=\\\"0\\\" allowfullscreen style=\\\"\\n            position: absolute;\\n            top: 0;\\n            left: 0;\\n            width: 100%;\\n            height: 100%;\\n          \\\"></iframe>\\n          </div>\\n          </div>\\n<p>想要了解更多<a href=\\\"https://github.com/styled-components/styled-components\\\">styled-components</a>， 可以看<a href=\\\"https://react-course.magicfun.ai/css/\\\">React实战课程</a>内容。</p>\\n<p>这有一篇<a href=\\\"https://github.com/callemall/material-ui\\\">Material UI</a>的一位作者<a href=\\\"https://github.com/oliviertassinari/a-journey-toward-better-style\\\">讲他们如何在各种cssinjs中做的选型</a>，介绍对比了各种cssinjs库的一些特性，大家可以了解一下， 这里是<a href=\\\"https://oliviertassinari.github.io/a-journey-toward-better-style/\\\">PPT</a>。</p>\\n<p>再提一下<a href=\\\"https://twitter.com/floydophone\\\">Pete Hunt</a>大神的<a href=\\\"https://github.com/smyte/jsxstyle\\\">jsxstyle</a>，之前看的时候还是<a href=\\\"https://medium.com/smyte/announcing-jsxstyle-1-0-3ef469d1863a\\\">1.0刚发布</a>，貌似现在快出2.0了。 大概思路是封装了用于布局的一些components，包括：</p>\\n<ul>\\n<li>Block</li>\\n<li>Flex</li>\\n<li>Inline</li>\\n<li>InlineBlock</li>\\n<li>InlineFlex</li>\\n<li>Table</li>\\n<li>TableCell</li>\\n<li>TableRow</li>\\n<li>Row</li>\\n<li>Col</li>\\n</ul>\\n<p>不过给我的感觉，有点像用<a href=\\\"https://facebook.github.io/react-native/\\\">React Native</a>来开发web的思想， 比如<a href=\\\"https://github.com/necolas/react-native-web\\\">react-native-web</a>以及淘宝出的<a href=\\\"https://github.com/taobaofed/react-web\\\">react-web</a>，不过都不太符合我的口味。</p>\\n<p><a href=\\\"mxstbr\\\">Max Stoiber</a>最近又发布了一个新的库<a href=\\\"https://github.com/styled-components/polished\\\">polished</a>，大概看了一下，也很符合我的口味，利用currying function去组合各种基本样式， 后面有时间再研究一下。阮老师已经写了<a href=\\\"http://www.ruanyifeng.com/blog/2017/04/css_in_js.html\\\">一篇文章介绍</a>啦。</p>\",\"timeToRead\":2,\"excerpt\":\"自从2014年Christopher Chedeau做了 CSS in JS 的演讲之后， cssinjs的各种库纷纷出现，已经 有好几十种了 。 css modules 应该是很流行的了， 说实话我没有用过， 不过在浏览作者主页的时候意外发现了 styled…\",\"fields\":{\"slug\":\"/cssinjs/\"},\"frontmatter\":{\"title\":\"CSS In JS\",\"date\":\"2017-08-29\",\"category\":\"FE\",\"tags\":[\"css\",\"js\",\"react\"]}}},{\"node\":{\"html\":\"<h1 id=\\\"concepts\\\"><a href=\\\"#concepts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>concepts</h1>\\n<ul>\\n<li>entry points</li>\\n<li>output</li>\\n<li>loaders</li>\\n<li>plugins</li>\\n<li>configuration</li>\\n<li>modules</li>\\n<li>module resolution</li>\\n<li>dependency graph</li>\\n<li>manifest</li>\\n<li>targets</li>\\n<li>hot module replacement</li>\\n</ul>\",\"timeToRead\":1,\"excerpt\":\"concepts entry points output loaders plugins configuration modules module resolution dependency graph manifest targets hot module…\",\"fields\":{\"slug\":\"/webpack/concepts\"},\"frontmatter\":{\"title\":\"webpack concepts\",\"date\":\"2017-08-28\",\"category\":\"FE\",\"tags\":[\"webpack\",\"js\",\"build tool\"]}}},{\"node\":{\"html\":\"<h1 id=\\\"getting-started\\\"><a href=\\\"#getting-started\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>getting started</h1>\\n<blockquote>\\n<p>Note that webpack will not alter any code other than import and export statements. If you are using other ES2015 features, make sure to use a transpiler such as Babel or Bublé via webpack’s loader system.</p>\\n</blockquote>\\n<blockquote>\\n<p>Custom parameters can be passed to webpack by adding two dashes between the npm run build command and your parameters, e.g. npm run build — —colors.</p>\\n</blockquote>\\n<h1 id=\\\"asset-management\\\"><a href=\\\"#asset-management\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Asset Management</h1>\\n<h1 id=\\\"css\\\"><a href=\\\"#css\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>CSS</h1>\\n<p>style-loader, css-loader</p>\\n<h2 id=\\\"images\\\"><a href=\\\"#images\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Images</h2>\\n<p>file-loader</p>\\n<h2 id=\\\"fonts\\\"><a href=\\\"#fonts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Fonts</h2>\\n<p>file-loader</p>\\n<h2 id=\\\"data\\\"><a href=\\\"#data\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Data</h2>\\n<p>原生支持json, csv-loader, xml-loader</p>\\n<h1 id=\\\"output-management\\\"><a href=\\\"#output-management\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Output Management</h1>\\n<h2 id=\\\"多entry\\\"><a href=\\\"#%E5%A4%9Aentry\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>多entry</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">entry<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  app<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'./src/index.js'</span><span class=\\\"token punctuation\\\">,</span>\\n  print<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'./src/print.js'</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"htmlwebpackplugin\\\"><a href=\\\"#htmlwebpackplugin\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>HtmlWebpackPlugin</h2>\\n<p>避免entry points改名， 自动生成html。</p>\\n<h2 id=\\\"cleaning-up-the-code-classlanguage-textdistcode-folder\\\"><a href=\\\"#cleaning-up-the-code-classlanguage-textdistcode-folder\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Cleaning up the <code class=\\\"language-text\\\">/dist</code> folder</h2>\\n<p><code class=\\\"language-text\\\">clean-webpack-plugin</code></p>\\n<h2 id=\\\"menifest\\\"><a href=\\\"#menifest\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Menifest</h2>\\n<blockquote>\\n<p>If you’re interested in managing webpack’s output in other ways, the manifest would be a good place to start.</p>\\n</blockquote>\\n<h1 id=\\\"development\\\"><a href=\\\"#development\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Development</h1>\\n<h2 id=\\\"using-source-maps\\\"><a href=\\\"#using-source-maps\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Using source maps</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">devtool<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'inline-source-map'</span></code></pre>\\n      </div>\\n<p>不要用在production上</p>\\n<h2 id=\\\"自动刷新\\\"><a href=\\\"#%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>自动刷新</h2>\\n<h2 id=\\\"webpacks-watch-mode\\\"><a href=\\\"#webpacks-watch-mode\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>webpack’s Watch Mode</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token string\\\">\\\"watch\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"webpack --watch\\\"</span></code></pre>\\n      </div>\\n<h2 id=\\\"webpack-dev-server\\\"><a href=\\\"#webpack-dev-server\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>webpack-dev-server</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// webpack.config.js</span>\\ndevServer<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  contentBase<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'./dist'</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// package.json</span>\\n<span class=\\\"token string\\\">\\\"start\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"webpack-dev-server --open\\\"</span></code></pre>\\n      </div>\\n<h2 id=\\\"webpack-dev-middleware\\\"><a href=\\\"#webpack-dev-middleware\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>webpack-dev-middleware</h2>\\n<p>跟express配合使用的。</p>\\n<blockquote>\\n<p>webpack-dev-middleware is a wrapper that will emit files processed by webpack to a server. This is used in webpack-dev-server internally, however it’s available as a separate package to allow more custom setups if desired. We’ll take a look at an example that combines webpack-dev-middleware with an express server.</p>\\n</blockquote>\\n<h1 id=\\\"hot-module-replacement\\\"><a href=\\\"#hot-module-replacement\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hot Module Replacement</h1>\\n<h2 id=\\\"enabling-hmr\\\"><a href=\\\"#enabling-hmr\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Enabling HMR</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 如果entry有其他不相关的js， 会导致full refresh</span>\\n<span class=\\\"token comment\\\">// webpack.config.js</span>\\ndevServer<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  contentBase<span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">,</span>\\n  hot<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token comment\\\">// just client</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> \\nplugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">webpack<span class=\\\"token punctuation\\\">.</span>HotModuleReplacementPlugin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">// server</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"一些lib\\\"><a href=\\\"#%E4%B8%80%E4%BA%9Blib\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>一些lib</h2>\\n<ul>\\n<li>css的HMR直接通过<code class=\\\"language-text\\\">style-loader</code>支持的。</li>\\n<li><a href=\\\"https://github.com/gaearon/react-hot-loader\\\">React Hot Loader</a></li>\\n<li><a href=\\\"https://survivejs.com/webpack/appendices/hmr-with-react/#configuring-hmr-with-redux\\\">Redux HMR</a></li>\\n</ul>\\n<h1 id=\\\"tree-shaking\\\"><a href=\\\"#tree-shaking\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tree Shaking</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token string\\\">\\\"use strict\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/* unused harmony export square */</span>\\n<span class=\\\"token comment\\\">/* harmony export (immutable) */</span> __webpack_exports__<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"a\\\"</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> cube<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">square</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">*</span> x<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>虽然没有export，但是bundle.js里面有，需要用能支持<code class=\\\"language-text\\\">dead code removal</code>的压缩工具。</p>\\n<blockquote>\\n<p>we’ll add a minifier that supports dead code removal — the UglifyJSPlugin — to our configuration…</p>\\n</blockquote>\\n<p>必须同时满足一下两条才可以去除无用代码：</p>\\n<ol>\\n<li>用ES2015的import/export</li>\\n<li>\\n<p>支持<code class=\\\"language-text\\\">dead code removal</code>的压缩工具压缩</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 这样不行, ES2015的module可以做static analysis</span>\\nexports<span class=\\\"token punctuation\\\">.</span>square <span class=\\\"token operator\\\">=</span> square<span class=\\\"token punctuation\\\">;</span>\\nexports<span class=\\\"token punctuation\\\">.</span>cube <span class=\\\"token operator\\\">=</span> cube<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n</li>\\n</ol>\\n<p>用<code class=\\\"language-text\\\">webpack -p</code>跟添加了<code class=\\\"language-text\\\">webpack.optimize.UglifyJsPlugin()</code>，以及使用<code class=\\\"language-text\\\">uglifyjs-webpack-plugin</code>没区别。\\n<a href=\\\"https://webpack.js.org/plugins/uglifyjs-webpack-plugin/\\\">https://webpack.js.org/plugins/uglifyjs-webpack-plugin/</a></p>\\n<blockquote>\\n<p>webpack contains the same plugin under webpack.optimize.UglifyJsPlugin. The documentation is valid apart from the installation instructions</p>\\n</blockquote>\\n<h1 id=\\\"production\\\"><a href=\\\"#production\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Production</h1>\\n<p>dev和prod分开两个config.js，共用的放在webpack.common.js，然后用<a href=\\\"https://github.com/survivejs/webpack-merge\\\">webpack-merge</a>来合并，DRY。</p>\\n<p>在prod里面用<code class=\\\"language-text\\\">cheap-module-source-map</code>， 但是又UglifyJSPlugin就没有生成source-map？！！！ <a href=\\\"https://webpack.js.org/configuration/devtool/%EF%BC%8C\\\">https://webpack.js.org/configuration/devtool/，</a> 原来需要提供<code class=\\\"language-text\\\">sourceMap: true</code>参数给uglify-webpack-plugin。</p>\\n<blockquote>\\n<p>When using the uglifyjs-webpack-plugin you must provide the sourceMap: true option to enable SourceMap support.</p>\\n</blockquote>\\n<p><code class=\\\"language-text\\\">cheap-module-source-map</code>不适合用于<code class=\\\"language-text\\\">production</code>，用了<code class=\\\"language-text\\\">sourceMap: true</code>也有问题。</p>\\n<p>在webpack的配置文件里面没法使用process.env，（感觉是bug或者feature缺失？<a href=\\\"https://github.com/webpack/webpack/issues/2537\\\">#2537</a>)。需要用<code class=\\\"language-text\\\">webpack.DefinePlugin</code>来定义。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">webpack<span class=\\\"token punctuation\\\">.</span>DefinePlugin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token string\\\">'process.env'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 'NODE_ENV': JSON.stringify('production'), // 直接用'production'会报错，生成的代码里面没有''，导致找不到变量production</span>\\n        <span class=\\\"token string\\\">'NODE_ENV'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'\\\"production\\\"'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token comment\\\">// 用\\\"\\\"括起来也行，webpack是直接把process.env.NODE_ENV替换为\\\"production\\\"</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<h1 id=\\\"code-splitting\\\"><a href=\\\"#code-splitting\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Code Splitting</h1>\\n<h2 id=\\\"entry-points\\\"><a href=\\\"#entry-points\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Entry Points</h2>\\n<p>直接多个entry就会产生多个bundle.js</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">entry<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// print2: './src/print2.js',</span>\\n    app<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'./src/index.js'</span><span class=\\\"token punctuation\\\">,</span>\\n    one<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'./src/one.js'</span><span class=\\\"token punctuation\\\">,</span>\\n    two<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'./src/two.js'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>但是假设<code class=\\\"language-text\\\">one.js</code>和<code class=\\\"language-text\\\">two.js</code>里面都有<code class=\\\"language-text\\\">lodash</code>，则两个bundle都会包含<code class=\\\"language-text\\\">lodash</code>，有500多KB。</p>\\n<h2 id=\\\"commonschunkplugin\\\"><a href=\\\"#commonschunkplugin\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>CommonsChunkPlugin</h2>\\n<p>可以用<code class=\\\"language-text\\\">CommonsChunkPlugin</code>解决上面的问题， 提取<code class=\\\"language-text\\\">one.js</code>和<code class=\\\"language-text\\\">two.js</code>里面共同的<code class=\\\"language-text\\\">lodash</code>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">webpack<span class=\\\"token punctuation\\\">.</span>optimize<span class=\\\"token punctuation\\\">.</span>CommonsChunkPlugin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'common'</span><span class=\\\"token punctuation\\\">,</span>\\n      chunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'one'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'two'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token comment\\\">// 因为index.js没有引用lodash，所以必须写明那几个文件的common chunks，否则提取不到！</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>注意注释， 如果不是每个文件的公共文件， 则需要明确指定chunks。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"> chunks<span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// Select the source chunks by chunk names. The chunk must be a child of the commons chunk.</span>\\n  <span class=\\\"token comment\\\">// If omitted all entry chunks are selected.</span></code></pre>\\n      </div>\\n<h2 id=\\\"dynamic-imports\\\"><a href=\\\"#dynamic-imports\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Dynamic Imports</h2>\\n<p><a href=\\\"https://github.com/tc39/proposal-dynamic-import\\\">JS新的语法</a>，跟以前用<code class=\\\"language-text\\\">require.ensure</code>类似。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token comment\\\">/* webpackChunkName: \\\"lodash\\\" */</span> <span class=\\\"token string\\\">'lodash'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">...</span>\\n  <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>另外还需要在<code class=\\\"language-text\\\">webpack.config.js</code>里增加：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">  output<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">...</span>\\n    chunkFilename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'[name].bundle.js'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 必须有这行！</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<h2 id=\\\"bundle-analysis\\\"><a href=\\\"#bundle-analysis\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Bundle Analysis</h2>\\n<p>分析各个bundle的大小，看是否有重复，问题出现在哪里，可能哪里可以优化等。</p>\\n<ul>\\n<li><a href=\\\"https://github.com/webpack/analyse\\\">official analyze tool</a></li>\\n<li><a href=\\\"https://alexkuz.github.io/webpack-chart/\\\">webpack-chart</a></li>\\n<li><a href=\\\"https://chrisbateman.github.io/webpack-visualizer/\\\">webpack-visualizer</a></li>\\n<li><a href=\\\"https://github.com/th0r/webpack-bundle-analyzer\\\">webpack-bundle-analyzer</a></li>\\n</ul>\\n<hr>\\n<p>ps, 发现一个问题，UglifyJs不支持ES6！看样子Babel是必须的啊。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">ERROR <span class=\\\"token keyword\\\">in</span> app.4df62c770fd384e3a460.bundle.js from UglifyJs\\nUnexpected token: operator <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">[</span>./src/dynamic-imports.js:5,0<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>app.4df62c770fd384e3a460.bundle.js:157,96<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<h1 id=\\\"lazy-loading\\\"><a href=\\\"#lazy-loading\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Lazy Loading</h1>\\n<p>用<code class=\\\"language-text\\\">import()</code>实现动态加载的目的就是为了延迟加载，提高初始加载的效率， 所以可以在需要异步延迟加载的地方直接使用<code class=\\\"language-text\\\">import()</code>就可以了。</p>\\n<h1 id=\\\"cache\\\"><a href=\\\"#cache\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Cache</h1>\\n<p>使用<code class=\\\"language-text\\\">output.filename</code><a href=\\\"substitutions\\\">https://webpack.js.org/configuration/output#output-filename</a>，可以用<code class=\\\"language-text\\\">[hash]</code>和<code class=\\\"language-text\\\">[chunkhash]</code>，但是<code class=\\\"language-text\\\">[hash]</code>是每一次构建，每个文件都共用同一个hash值，所以一个文件变化，所有都会变化，不好！最好用<code class=\\\"language-text\\\">[chunkhash]</code>。 记得，<code class=\\\"language-text\\\">import()</code>动态引入的也加上hash:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// webpack.prod.js</span>\\n  output<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    filename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"[name].[chunkhash].bundle.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    chunkFilename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"[name].[chunkhash].bundle.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>貌似webpack2.1（官网文档的版本）有bug，出现如下为问题：</p>\\n<blockquote>\\n<p>As you can see the bundle’s name now reflects its content (via the hash). If we run another build without making any changes, we’d expect that filename to stay the same. However, if we were to run it again, we may find that this is not the case:</p>\\n</blockquote>\\n<blockquote>\\n<p>This is because webpack includes certain boilerplate, specifically the runtime and manifest, in the entry chunk.</p>\\n</blockquote>\\n<blockquote>\\n<p>Output may differ depending on your current webpack version. Newer versions may not have all the same issues with hashing as some older versions, but we still recommend the following steps to be safe.</p>\\n</blockquote>\\n<h2 id=\\\"extracting-boilerplate\\\"><a href=\\\"#extracting-boilerplate\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Extracting Boilerplate</h2>\\n<p>可以用<code class=\\\"language-text\\\">CommonsChunkPlugin</code>配置一个entry里都没有的名字，就可以提取出公共chunk，也就是什么都“没有”。实际上不是什么都没有，而是webpack的<code class=\\\"language-text\\\">runtime</code>，这样就可以解决前面说的问题， 不过我在webpack3.5.5里没有碰到问题， 所以就先不用了。</p>\\n<h2 id=\\\"module-identifiers\\\"><a href=\\\"#module-identifiers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Module Identifiers</h2>\\n<p>由于默认webpack的module ID用的是自增的数字，所以有可能增加一个文件，导致所有的module ID都变了， 导致所有文件“内容”都变化。</p>\\n<blockquote>\\n<p>This is because each module.id is incremented based on resolving order by default. Meaning when the order of resolving is changed, the IDs will be changed as well. </p>\\n</blockquote>\\n<p>有两个插件可以解决问题，<code class=\\\"language-text\\\">NamedModulesPlugin</code>和<code class=\\\"language-text\\\">HashedModuleIdsPlugin</code>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">webpack<span class=\\\"token punctuation\\\">.</span>NamedModulesPlugin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// new webpack.HashedModuleIdsPlugin(),</span></code></pre>\\n      </div>\\n<blockquote>\\n<p>Luckily, there are two plugins we can use to resolve this issue. The first is the NamedModulesPlugin, which will use the path to the module rather than a numerical identifier. While this plugin is useful during development for more readable output, it does take a bit longer to run. The second option is the HashedModuleIdsPlugin, which is recommended for production builds:</p>\\n</blockquote>\\n<h1 id=\\\"shimming\\\"><a href=\\\"#shimming\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Shimming</h1>\\n<p>本部分介绍如何不是“正规”的module，比如如何引入全局变量（如jQuery），如何引入polyfill等。用到的时候再说。</p>\\n<h1 id=\\\"typescript\\\"><a href=\\\"#typescript\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Typescript</h1>\\n<p>需要4个条件：</p>\\n<ol>\\n<li>TypeScript编译器</li>\\n<li>Typescript loader，比如<a href=\\\"https://github.com/TypeStrong/ts-loader\\\">ts-loader</a>, 或者<a href=\\\"https://github.com/s-panferov/awesome-typescript-loader\\\">awesome-typescript-loader</a></li>\\n<li>tsconfig.json</li>\\n<li>webpack.config.js</li>\\n</ol>\\n<h1 id=\\\"build-performance\\\"><a href=\\\"#build-performance\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Build Performance</h1>\\n<h1 id=\\\"public-path\\\"><a href=\\\"#public-path\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Public Path</h1>\",\"timeToRead\":6,\"excerpt\":\"getting started Note that webpack will not alter any code other than import and export statements. If you are using other ES2015 features…\",\"fields\":{\"slug\":\"/webpack/guides\"},\"frontmatter\":{\"title\":\"webpack guides学习笔记\",\"date\":\"2017-08-28\",\"category\":\"FE\",\"tags\":[\"webpack\",\"js\",\"build tool\"]}}}]}},\"pathContext\":{\"current\":3,\"skip\":20,\"total\":6}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/page-3.json\n// module id = 632\n// module chunks = 217820771614769"],"sourceRoot":""}
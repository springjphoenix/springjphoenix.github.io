webpackJsonp([0xaf3e124e163e],{633:function(n,a){n.exports={data:{site:{siteMetadata:{title:"Magicly's Blog"}},allMarkdownRemark:{edges:[{node:{html:'<p>今天有朋友咨询我说是不是iOS没有企业开发证书， 没办法横屏，搞得我云里雾里。 我说不会吧， 谁告诉你的。 他说是他们外包了一个小游戏， 外包的开发人员给他们说的。。。我给他看了一个appstore里的小游戏，是可以横屏的，而且也是个人开发者。 他问了，然后给我说，开发人员说是因为他们用的H5开发的原因。为了破除这个谣言， 我准备自己测试一下。</p>\n<!-- more -->\n<p>首先准备一段html内容：</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>谁说html5不能横屏的。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我就是要横屏。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>要横屏。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>横屏。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>屏。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>图片也是可以的。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://img001.photo.21cn.com/photos/album/20120904/o/6A7A403C29766CBCB38C616BDFD48486.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>其实原理很简单，只需要把内容向右旋转90度就变成了横屏啊。先把定位修改为<code class="language-text">absolute</code>：</p>\n<div class="gatsby-highlight">\n      <pre class="language-css"><code class="language-css">    <span class="token selector">#content</span> <span class="token punctuation">{</span>\n      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>\n      <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n      <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n      <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n      <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token selector">#content p</span> <span class="token punctuation">{</span>\n      <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n      <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>\n      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token selector">img</span> <span class="token punctuation">{</span>\n      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>其实除了<code class="language-text">position: absolute;</code>这行代码其他都是不必要的，其他只是为了做一些居中对齐等。然后我们用js判断是竖屏(portrait)还是横屏(landscape)，如果是竖屏，向右旋转90度。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">  <span class="token keyword">const</span> width <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> height <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>width <span class="token operator">&lt;</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>width <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> contentDOM <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'content\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> height <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n    contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> width <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n    contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token punctuation">(</span>height <span class="token operator">-</span> width<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n    contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token punctuation">(</span>height <span class="token operator">-</span> width<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n    contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">\'rotate(90deg)\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span></code></pre>\n      </div>\n<p><img src="/blogimgs/landscape-right.png" alt="正确旋转"></p>\n<p>但是如果用户的屏幕旋转按钮开着，然后用户又把手机横过来，就悲剧了，如下图。\n<img src="/blogimgs/landscape-wrong.png" alt="错误旋转"></p>\n<p>所以我们还需要监听屏幕变化，如果用户自己把屏幕横过来，就把之前的旋转去掉。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">  <span class="token keyword">const</span> evt <span class="token operator">=</span> <span class="token string">"onorientationchange"</span> <span class="token keyword">in</span> window <span class="token operator">?</span> <span class="token string">"orientationchange"</span> <span class="token punctuation">:</span> <span class="token string">"resize"</span><span class="token punctuation">;</span>\n  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>evt<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> width <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> height <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> contentDOM <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'content\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'width: \'</span> <span class="token operator">+</span> width <span class="token operator">+</span> <span class="token string">\' height: \'</span> <span class="token operator">+</span> height<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>width <span class="token operator">></span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 横屏</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> width <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> height <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">\'0px\'</span><span class="token punctuation">;</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">\'0px\'</span><span class="token punctuation">;</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">\'none\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 竖屏，这里微信应该由bug，我切换为竖屏的时候，width:375, height: 323, 导致不能旋转角度。 在safari、chrome上是正确的。</span>\n      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'change to portrait\'</span><span class="token punctuation">)</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> height <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> width <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token punctuation">(</span>height <span class="token operator">-</span> width<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token punctuation">(</span>height <span class="token operator">-</span> width<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n      contentDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">\'rotate(90deg)\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>完整的Demo请看<a href="/orientation.html">这里</a>。</p>\n<p><a href="http://www.gad.qq.com/article/detail/25663">这篇文章</a>里说了，</p>\n<blockquote>\n<p>直到如今有些人仍在说，如果做H5游戏一定要做竖屏游戏，其实要是深入了解一下，说这些话的，很大一部分是2015年或更早进入H5游戏行业中来的，还有一部分是受到那些早期做H5游戏影响的人。</p>\n</blockquote>\n<p>可见不是不能做， 而是他们没有跟上最新的技术步伐， 或者他们嫌太麻烦了或者他们做不出来吧。可见找到一个靠谱的外包服务团队是多么不容易啊。 <a href="https://www.magicfun.ai">漫极客科技</a>是一家致力于为客户提供高效率高质量服务的靠谱的技术公司，公司创始人曾在人人网、网易游戏、腾讯等多家知名互联网公司工作， 掌握web、app、数据分析、人工智能等多种技术，期待“用技术优化生活”， 改善众多客户的生活质量。有需要请联系他们~</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="http://www.jianshu.com/p/9c3264f4a405">http://www.jianshu.com/p/9c3264f4a405</a></li>\n<li><a href="http://tgask.qq.com/?/article/4">http://tgask.qq.com/?/article/4</a></li>\n<li><a href="http://www.gad.qq.com/article/detail/25663">http://www.gad.qq.com/article/detail/25663</a></li>\n<li><a href="https://www.zhihu.com/question/26631812">https://www.zhihu.com/question/26631812</a></li>\n<li><a href="https://segmentfault.com/q/1010000006686885">https://segmentfault.com/q/1010000006686885</a></li>\n</ul>',timeToRead:2,excerpt:"今天有朋友咨询我说是不是iOS没有企业开发证书， 没办法横屏，搞得我云里雾里。 我说不会吧， 谁告诉你的。 他说是他们外包了一个小游戏， 外包的开发人员给他们说的。。。我给他看了一个appstore…",fields:{slug:"/h5-orientation-on-ios/"},frontmatter:{title:"手机上如何让页面强制横屏",date:"2017-08-07",category:"FE",tags:["h5"]}}},{node:{html:'<p>=========2017-09-14更新===========</p>\n<p>推荐大家看看这个网站<a href="http://learnlayout.com/">learnlayout</a>， 比较全面。</p>\n<p>其中可能会经常看到下面这段话：</p>\n<blockquote>\n<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n</blockquote>\n<p>我查了一下，原来是用于排版演示用的拉丁文：</p>\n<blockquote>\n<p>Lorem ipsum是指一篇常用于排版设计领域的拉丁文文章，主要的目的为测试文章或文字在不同字型、版型下看起来的效果。中文的类似用法则称为乱数假文、随机假文。</p>\n</blockquote>\n<p>有兴趣的可以看看<a href="https://zh.wikipedia.org/wiki/Lorem_ipsum">Wiki</a>， 我还发现原来阮一峰老师之前也写过一篇<a href="http://www.ruanyifeng.com/blog/2009/04/lorem_ipsum.html">介绍文章</a>呢。</p>\n<p>==============================</p>\n<p>布局是CSS中一个很重要的部分，甚至我觉得是最重要也是最难的部分，其他诸如字体大小、颜色等等都是很容易的。最近总结一下使用过的CSS常用布局，包括水平居中、垂直居中、单列布局、多列布局等，以及最新的flex布局，希望能给前端小伙伴一些帮助，也作为自己的知识总结。</p>\n<!-- more -->\n<p>在后面的例子中，我特意将各个块背景颜色调出来方便大家“欣赏”。</p>\n<h1 id="水平居中"><a href="#%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>水平居中</h1>\n<h2 id="子元素为inline"><a href="#%E5%AD%90%E5%85%83%E7%B4%A0%E4%B8%BAinline" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>子元素为inline</h2>\n<p>直接对父元素设置</p>\n<div class="gatsby-highlight">\n      <pre class="language-css"><code class="language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center</code></pre>\n      </div>\n<p>如：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://magicly.me<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>magicly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>显示为：</p>\n<div style="background-color: red; text-align: center; height: 100px;">\n    <a href="https://magicly.me" style="background-color: green;">magicly</a>\n</div>\n<h2 id="子元素为block且定宽（宽度可以是百分比）"><a href="#%E5%AD%90%E5%85%83%E7%B4%A0%E4%B8%BAblock%E4%B8%94%E5%AE%9A%E5%AE%BD%EF%BC%88%E5%AE%BD%E5%BA%A6%E5%8F%AF%E4%BB%A5%E6%98%AF%E7%99%BE%E5%88%86%E6%AF%94%EF%BC%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>子元素为block且定宽（宽度可以是百分比）</h2>\n<p>对子元素设置左右margin为auto</p>\n<div class="gatsby-highlight">\n      <pre class="language-css"><code class="language-css"><span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>如：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>magicly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>显示为：</p>\n<div style="background-color: red; height: 100px;">\n    <div style="background-color: green; width: 500px; margin: 0 auto;">magicly</div>\n</div>\n<h2 id="子元素为block但是不定宽"><a href="#%E5%AD%90%E5%85%83%E7%B4%A0%E4%B8%BAblock%E4%BD%86%E6%98%AF%E4%B8%8D%E5%AE%9A%E5%AE%BD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>子元素为block但是不定宽</h2>\n<p>设置子元素</p>\n<div class="gatsby-highlight">\n      <pre class="language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> inline</code></pre>\n      </div>\n<p>以及设置父元素</p>\n<div class="gatsby-highlight">\n      <pre class="language-css"><code class="language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>如：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> inline</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://img001.photo.21cn.com/photos/album/20120904/o/6A7A403C29766CBCB38C616BDFD48486.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>显示为：</p>\n<div style="background-color: red; text-align: center;">\n    <div style="background-color: green; display: inline"><img src="http://img001.photo.21cn.com/photos/album/20120904/o/6A7A403C29766CBCB38C616BDFD48486.jpg" /></div>\n</div>\n<h1 id="垂直居中"><a href="#%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>垂直居中</h1>\n<h2 id="子元素为inline-1"><a href="#%E5%AD%90%E5%85%83%E7%B4%A0%E4%B8%BAinline-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>子元素为inline</h2>\n<p>设置父元素的height和line-height相等， 如：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://magicly.me<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>magicly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>显示为：</p>\n<div style="background-color: red; text-align: center; height: 100px; line-height: 100px;">\n    <a href="https://magicly.me" style="background-color: green;">magicly</a>\n</div>\n<h2 id="子元素为block"><a href="#%E5%AD%90%E5%85%83%E7%B4%A0%E4%B8%BAblock" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>子元素为block</h2>\n<p>设置子元素position:absolute 并设置top、bottom为0（如果还要左右居中的话，可以设置left: 0; right: 0;），父元素要设置定位为static以外的值（如relative），margin:auto;\n如：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 569px<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 462px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span> <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://img001.photo.21cn.com/photos/album/20120904/o/6A7A403C29766CBCB38C616BDFD48486.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>显示为：</p>\n<div style="background-color: red; height: 600px; position: relative;">\n    <div style="background-color: green; height: 569px; width: 462px; position: absolute; top: 0; bottom: 0; left:0; right: 0; margin: auto;"><img src="http://img001.photo.21cn.com/photos/album/20120904/o/6A7A403C29766CBCB38C616BDFD48486.jpg" /></div>\n</div>\n<h1 id="单列布局"><a href="#%E5%8D%95%E5%88%97%E5%B8%83%E5%B1%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>单列布局</h1>\n<p>主要有两种:</p>\n<ul>\n<li>header, content, footer宽度相同，有一个max-width</li>\n<li>header和footer占满浏览器100%宽度，content有一个max-width</li>\n</ul>\n<p>第一种：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>尾部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>显示为：</p>\n<header style="background-color: red; width: 600px; margin: 0 auto;">头部</header>\n<main style="background-color: green; width: 600px; margin: 0 auto;">内容</main>\n<footer style="background-color: yellow; width: 600px; margin: 0 auto;">尾部</footer>\n<p>第二种：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>尾部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>显示为：</p>\n<header style="background-color: red;">头部</header>\n<main style="background-color: green; width: 600px; margin: 0 auto;">内容</main>\n<footer style="background-color: yellow;">尾部</footer>\n<h1 id="两列"><a href="#%E4%B8%A4%E5%88%97" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>两列</h1>\n<h2 id="float--margin"><a href="#float--margin" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>float + margin</h2>\n<p>用float将边栏与主要内容拉到一行，然后设置主要内容的margin。</p>\n<ul>\n<li>\n<p>左边栏:</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">margin-left</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主要内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<main style="background-color: red;">\n<aside style="background-color: yellow; float: left; width: 50px;">边栏</aside>\n<section style="background-color: green; margin-left: 50px;">主要内容</section>\n</main>\n</li>\n<li>\n<p>右边栏</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">margin-right</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主要内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<main style="background-color: red;">\n<aside style="background-color: yellow; float: right; width: 50px;">边栏</aside>\n<section style="background-color: green; margin-right: 50px;">主要内容</section>\n</main>\n</li>\n</ul>\n<h2 id="position-absolute--margin"><a href="#position-absolute--margin" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>position: absolute + margin</h2>\n<ul>\n<li>\n<p>左边栏:</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">margin-left</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主要内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<main style="background-color: red; position: relative;">\n<aside style="background-color: yellow; position: absolute; left: 0; width: 50px;">边栏</aside>\n<section style="background-color: green; margin-left: 50px;">主要内容</section>\n</main>\n</li>\n<li>\n<p>右边栏</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">margin-right</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主要内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<main style="background-color: red; position: relative;">\n<aside style="background-color: yellow; position: absolute; right: 0; width: 50px;">边栏</aside>\n<section style="background-color: green; margin-right: 50px;">主要内容</section>\n</main>\n</li>\n</ul>\n<h1 id="三列布局"><a href="#%E4%B8%89%E5%88%97%E5%B8%83%E5%B1%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>三列布局</h1>\n<p>比较经典有圣杯布局，以及据说是淘宝UED（玉伯）提出的双飞翼布局。</p>\n<h2 id="圣杯布局"><a href="#%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>圣杯布局</h2>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span> 0 100px 0 90px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主要内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 90px<span class="token punctuation">;</span> <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> -90px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">margin-left</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">right</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token property">clear</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>尾部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>显示为：</p>\n<header style="background-color: red;">头部</header>\n<main style="background-color: black; position: relative; padding: 0 100px 0 90px;">\n  <section style="background-color: green; height: 100px; float: left; width: 100%;">主要内容</section>\n  <aside style="background-color: yellow; height: 100px; float: left; width: 90px; margin-left: -100%; position: relative; left: -90px;">左边栏</aside>\n  <aside style="background-color: yellow; height: 100px; float: left; width: 100px; margin-left: -100px; position: relative; right: -100px;">右边栏</aside>\n</main>\n<div style="background-color: blue; clear: left;">尾部</div>\n<h2 id="双飞翼布局"><a href="#%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>双飞翼布局</h2>\n<p>传统的双飞翼布局不是这样的， 只是我发现直接在section用padding也可以达到效果。</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span> 0 100px 0 90px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主要内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 90px<span class="token punctuation">;</span> <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">margin-left</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token property">clear</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>尾部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>显示为：</p>\n<header style="background-color: red;">头部</header>\n<main style="background-color: black; position: relative;">\n  <section style="background-color: green; height: 100px; float: left; width: 100%; padding: 0 100px 0 90px;">主要内容</section>\n  <aside style="background-color: yellow; height: 100px; float: left; width: 90px; margin-left: -100%;">左边栏</aside>\n  <aside style="background-color: yellow; height: 100px; float: left; width: 100px; margin-left: -100px;">右边栏</aside>\n</main>\n<div style="background-color: blue; clear: left;">尾部</div>\n<p>圣杯布局和双飞翼布局的原理<a href="http://www.cnblogs.com/star91/p/5773436.html">这篇文章</a>讲解得比较清楚，我就不再赘述。</p>\n<h1 id="flex布局"><a href="#flex%E5%B8%83%E5%B1%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>flex布局</h1>\n<p>flex布局目前已经很常用了，浏览器支持得也很好，甚至连<a href="">React Native</a>也是用flex布局的，这么重要想想也觉得应该单独成篇啦。后续再写，有兴趣的可以看看阮老师的下面两篇文章。</p>\n<ul>\n<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></li>\n<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">http://www.ruanyifeng.com/blog/2015/07/flex-examples.html</a></li>\n</ul>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="https://zhuanlan.zhihu.com/p/25565751">https://zhuanlan.zhihu.com/p/25565751</a></li>\n<li><a href="http://www.cnblogs.com/star91/p/5773436.html">http://www.cnblogs.com/star91/p/5773436.html</a></li>\n<li><a href="http://www.zhangxinxu.com/wordpress/2013/11/margin-auto-absolute-%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/">http://www.zhangxinxu.com/wordpress/2013/11/margin-auto-absolute-绝对定位-水平垂直居中/</a></li>\n<li><a href="https://www.w3schools.com/html/html5_semantic_elements.asp">https://www.w3schools.com/html/html5<em>semantic</em>elements.asp</a></li>\n<li><a href="http://coolshell.cn/articles/6840.html">http://coolshell.cn/articles/6840.html</a></li>\n</ul>',
timeToRead:7,excerpt:"=========2017-09-14更新=========== 推荐大家看看这个网站 learnlayout ， 比较全面。 其中可能会经常看到下面这段话： Lorem ipsum dolor sit amet, consectetur adipisicing elit…",fields:{slug:"/css-layout/"},frontmatter:{title:"CSS常用布局",date:"2017-07-19",category:"FE",tags:["css"]}}},{node:{html:'<p>最近将blog生成器由<a href="https://hexo.io">Hexo</a>换到了<a href="https://github.com/gatsbyjs/gatsby">Gatsby</a>，原来页面现保留在这里<a href="https://magicly.coding.me/%EF%BC%8C">https://magicly.coding.me/，</a> 留作纪念。</p>\n<p>之前用<a href="https://hexo.io">Hexo</a>写的blog，没有太大问题（反正我也写得少）。由于国内网络环境，托管在<a href="https://github.cm">Github</a>的页面访问很慢，于是我想，是否可以像用<a href="https://facebook.github.io/react/">React</a>那样开发， index.html只是一个简单的包装页面， 所有资源都打包放到bundle.js（当然webpack是可以支持code spliting的），这样我可以把index.html放在国外，然后在里面引用放在国内免费CDN上的bundle.js，这样速度就能达到最大化。 至于为什么不把index.html也放国内，因为要备案啊！！！备案啊！！！备案啊！！！一般谁会愿意为了写个blog去折腾呢？</p>\n<!-- more -->\n<p>于是google搜索react static site generator，浏览之后发现了<a href="https://github.com/gatsbyjs/gatsby">Gatsby</a>这个开源项目，简直是神器！不仅是用React实现的项目，而且用<a href="">graphql</a>来实现支持多数据源，且采用了很多最佳实践，包括<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers">Service Work</a>、离线使用等。 而且一个React Component是一个页面， 当然markdown通过<a href="http://remark.js.org/">Remark</a>转化也对应一个页面，这样平时写blog就直接用markdown，有一些复杂的演示项目就可以直接写React Component了，而且后面会支持直接在markdown中应用React Component， 想想就有点小激动呢。</p>\n<p>折腾了一周，刚好碰到前两天<a href="https://twitter.com/gatsbyjs/status/883051117013123072">发布了1.0版本</a>，记录一下使用方式。</p>\n<h1 id="安装gatsby"><a href="#%E5%AE%89%E8%A3%85gatsby" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装Gatsby</h1>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g gatsby</code></pre>\n      </div>\n<h1 id="新建gatsby项目"><a href="#%E6%96%B0%E5%BB%BAgatsby%E9%A1%B9%E7%9B%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>新建gatsby项目</h1>\n<p>由于项目比较新，目前没有hexo那么成熟的theme，有一些人做了一些starter， 你可以直接用我这个。</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/magicly/gatsby-starter-blog.git\n<span class="token function">git</span> checkout branch myblog\n<span class="token function">cd</span> gatsby-starter-blog\n<span class="token function">npm</span> <span class="token function">install</span></code></pre>\n      </div>\n<h1 id="运行"><a href="#%E8%BF%90%E8%A1%8C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>运行</h1>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">gatsby develop</code></pre>\n      </div>\n<p>热更新真是爽爆！</p>\n<h1 id="打包部署"><a href="#%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>打包部署</h1>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">gatsby build</code></pre>\n      </div>\n<p>会在public下生成所有的资源，如果你用github pages服务的话， 把public下的目录push上去就可以。</p>\n<p>接着我发现了更好的pages服务，<a href="https://netlify.com/">Netlify</a>，你直接push源码，Netlify会自动给你打包部署到CDN，所以访问速度也会快很多（但是都在国外，还是会有一些影响）。Netlify之于Gatsby就好比github pages之于<a href="https://github.com/jekyll/jekyll">Jekyll</a>，当然Netlify也支持<a href="https://github.com/jekyll/jekyll">Jekyll</a>和<a href="https://hexo.io">Hexo</a>等，以及其他很多功能，请访问<a href="https://www.netlify.com/docs/">Doc</a>。</p>\n<h1 id="评论"><a href="#%E8%AF%84%E8%AE%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>评论</h1>\n<p>原来用多说，然后多说关了，后来改成网易云跟帖，前几天发公告说8.1关闭服务，额。。。。。然后只好再找了一个<a href="https://github.com/imsun/gitment">Gitment</a>，github应该不会倒闭吧。 用之前确实考虑了下，只支持github账号，而且国内环境也不太好你懂得，后来一想，反正受众也是coder，如果翻墙和github账号都没有的话， 也就不要评论了吧，这样就可以过滤掉来发小广告的啦。。。</p>\n<p>==========================================</p>\n<p>研究gatsby之余发现了<a href="https://jamstack.org/">JAMStack</a>，很多想法跟我不谋而合，有时间好好学习下。</p>',timeToRead:1,excerpt:"最近将blog生成器由 Hexo 换到了 Gatsby ，原来页面现保留在这里 https://magicly.coding.me/，  留作纪念。 之前用 Hexo 写的blog，没有太大问题（反正我也写得少）。由于国内网络环境，托管在 Github…",fields:{slug:"/blog-change-to-gatsby/"},frontmatter:{title:"用Gatsby重写blog",date:"2017-07-09",category:"React",tags:["Gatsby","React"]}}},{node:{html:'<h1 id="如何查看cuda版本"><a href="#%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Bcuda%E7%89%88%E6%9C%AC" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>如何查看cuda版本</h1>\n<p><a href="http://www.cnblogs.com/shrimp-can/p/5253672.html">http://www.cnblogs.com/shrimp-can/p/5253672.html</a></p>\n<p>默认目录为：local，进入local：cd /usr/local</p>\n<p>输入命令：ls，查看该目录下的文件，可以看到安装的cuda在此处</p>\n<p>进入cuda文件：cd cuda-7.5（我的是7.5），此处为安装的东西</p>\n<!-- more -->\n<h1 id="安装docker"><a href="#%E5%AE%89%E8%A3%85docker" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装docker</h1>\n<p><a href="https://docs.docker.com/engine/installation/linux/ubuntu/">https://docs.docker.com/engine/installation/linux/ubuntu/</a></p>\n<h1 id="安装nvidia-docker"><a href="#%E5%AE%89%E8%A3%85nvidia-docker" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装nvidia-docker</h1>\n<p><a href="https://github.com/NVIDIA/nvidia-docker">https://github.com/NVIDIA/nvidia-docker</a></p>\n<h1 id="docker端口映射"><a href="#docker%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>docker端口映射</h1>\n<p><a href="https://opskumu.gitbooks.io/docker/content/chapter5.html">https://opskumu.gitbooks.io/docker/content/chapter5.html</a></p>\n<h1 id="遇到的问题"><a href="#%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>遇到的问题</h1>\n<h2 id="dpkg-lock"><a href="#dpkg-lock" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>dpkg lock</h2>\n<blockquote>\n<p>dpkg: error: dpkg status database is locked by another process</p>\n</blockquote>\n<p><a href="https://askubuntu.com/questions/219545/dpkg-error-dpkg-status-database-is-locked-by-another-process">https://askubuntu.com/questions/219545/dpkg-error-dpkg-status-database-is-locked-by-another-process</a></p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">sudo rm /var/lib/dpkg/lock\nsudo dpkg --configure -a</code></pre>\n      </div>',timeToRead:1,excerpt:"如何查看cuda版本 http://www.cnblogs.com/shrimp-can/p/5253672.html 默认目录为：local，进入local：cd /usr/local 输入命令：ls，查看该目录下的文件，可以看到安装的cuda在此处 进入cuda文件：cd…",fields:{slug:"/aws-docker/"},frontmatter:{title:"aws上配置docker",date:"2017-04-19",category:"ML",tags:["aws","docker","ml"]}}},{node:{html:'<p>深度学习没有GPU的支持可以说完全不能解决实际问题， 稍大一点的数据集可能就要几个小时，GPU能起到10倍以及更高的速度提升。之前我们做了<a href="http://magicly.me/2017/04/15/aws-dl-config/">AWS的深度学习配置</a>，今天再看看国内阿里云的HPC配置。</p>\n<!-- more -->\n<h1 id="购买--登录"><a href="#%E8%B4%AD%E4%B9%B0--%E7%99%BB%E5%BD%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>购买 &#x26; 登录</h1>\n<p>在<a href="https://hpc-buy.aliyun.com/#/postpay">阿里云hpc页面</a>购买，目前按量付费只支持华东1（杭州），G4配置：</p>\n<blockquote>\n<p>CPU : Intel Xeon E5 v4 CPU 32物理核\nGPU : Nvidia Tesla M40 x2\n单机峰值计算能力突破每秒16万亿次单精度浮点运算。</p>\n</blockquote>\n<p>价格是37.50￥/时，价格差不多是AWS p2.xlarge的6倍， 所以我们最后要测试一下AWS p2.xlarge和阿里云HPC的性能对比，看看谁的性价比高。</p>\n<p>对了，阿里云HPC目前不支持自定义镜像，只有一种选择CentOS7！！！！所以后面我们必须用docker，不然如果按需付费来使用的话， 每次都得重装所有软件。可以把docker看成轻量级的AMI镜像。</p>\n<p>由于HPC是只能内网访问的物理机， 需要先登录跳转机， 然后走内网访问HPC，这样安全一些。华东1购买HPC的时候会分配一个跳转机，需要在<a href="https://hpc.console.aliyun.com/#/postpay/list/">控制台</a>设置跳转机的初始密码，重启跳转机密码方能生效。HPC物理机的密码会通过阿里云站内消息的方式发给你，好像都是111111，建议在第一次登录的时候用passwd命令修改。</p>\n<h1 id="配置外网"><a href="#%E9%85%8D%E7%BD%AE%E5%A4%96%E7%BD%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>配置外网</h1>\n<p>现在HPC物理机能直接访问外网了？！！\nwget能直接访问， 但是yum install的时候就是网络超时，真是蛋疼！</p>\n<p>参看<a href="https://yq.aliyun.com/articles/66993?spm=5176.doc48632.2.5.V1yqJr">这篇文档</a>配置HPC外网。文档里面有好几个地方不对，我重新写一下吧。</p>\n<h2 id="跳转机ecs配置"><a href="#%E8%B7%B3%E8%BD%AC%E6%9C%BAecs%E9%85%8D%E7%BD%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>跳转机ECS配置</h2>\n<ol>\n<li>\n<p>下载VPN包，解压并进入VPN-ECS</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">wget http://public-img-test.oss-cn-hangzhou.aliyuncs.com/VPN.tar.gz\ntar zxvf VPN.tar.gz &amp;&amp; cd VPN/VPN-ECS</code></pre>\n      </div>\n</li>\n<li>\n<p>目录下并没有文档说的run.sh， 而是两个</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">run4centos6.sh\nrun4centos7.sh</code></pre>\n      </div>\n<p>用lsb_release命令查看系统版本（还记得我说其实目前只能选centos7么）：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[root@iZ23gbdj71dZ VPN-ECS]# lsb_release -a\nLSB Version:\t:core-4.1-amd64:core-4.1-noarch\nDistributor ID:\tCentOS\nDescription:\tCentOS Linux release 7.0.1406 (Core)\nRelease:\t7.0.1406\nCodename:\tCore</code></pre>\n      </div>\n<p>那就执行run4centos7.sh吧</p>\n</li>\n<li>\n<p>ifconfig检查是否有vpn_ppp0这个网卡</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">ifconfig\nvpn_vpn0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n    inet 192.168.30.11  netmask 255.255.255.0  broadcast 192.168.30.255\n    ether 00:ac:66:6f:b0:52  txqueuelen 500  (Ethernet)\n    RX packets 1  bytes 42 (42.0 B)\n    RX errors 0  dropped 0  overruns 0  frame 0\n    TX packets 4  bytes 168 (168.0 B)\n    TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</code></pre>\n      </div>\n</li>\n</ol>\n<h2 id="hpc配置"><a href="#hpc%E9%85%8D%E7%BD%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HPC配置</h2>\n<ol>\n<li>\n<p>下载VPN包，解压并进入VPN-HPC\n由于HPC目前不能访问外网OSS（真是蛋疼， 其实HPC现在访问外网比如<a href="http://www.platform.ai/files/dogscats.zip%E6%98%AF%E5%8F%AF%E4%BB%A5%E7%9A%84%EF%BC%8C%E4%BD%86%E5%B1%85%E7%84%B6%E7%9C%9F%E7%9A%84%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AEhttp://public-img-test.oss-cn-hangzhou.aliyuncs.com/VPN.tar.gz%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%89%EF%BC%8C%E6%89%80%E4%BB%A5%E7%94%A8scp%E5%B0%86%E4%B9%8B%E5%89%8D%E5%9C%A8%E8%B7%B3%E8%BD%AC%E6%9C%BA%E4%B8%8A%E4%B8%8B%E8%BD%BD%E7%9A%84VPN%E5%8C%85copy%E5%88%B0HPC%E3%80%82">http://www.platform.ai/files/dogscats.zip是可以的，但居然真的不能访问http://public-img-test.oss-cn-hangzhou.aliyuncs.com/VPN.tar.gz！！！），所以用scp将之前在跳转机上下载的VPN包copy到HPC。</a></p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">scp root@[跳转机内网IP地址]:/root/VPN.tar.gz .\ntar zxvf VPN.tar.gz &amp;&amp; cd VPN/VPN-HPC</code></pre>\n      </div>\n</li>\n<li>\n<p>执行run.sh</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">./run.sh [跳转机内网IP地址]</code></pre>\n      </div>\n</li>\n<li>\n<p>测试是否能访问外网</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">ping www.taobao.com\ncurl www.taobao.com\nwget www.baidu.com</code></pre>\n      </div>\n<p>可以了。 话说我一开始就可以啊！！！！\n测试一下wget VPN包呢？</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[root@AliHPC-M40-410 VPN-HPC]# wget http://public-img-test.oss-cn-hangzhou.aliyuncs.com/VPN.tar.gz\n--2017-04-19 10:50:59--  http://public-img-test.oss-cn-hangzhou.aliyuncs.com/VPN.tar.gz\n正在连接 10.168.56.7:3128... 失败：没有到主机的路由。</code></pre>\n      </div>\n<p>居然还是访问不到!!!</p>\n</li>\n<li>\n<p>文档里面说如果这时候还不行， 看看http<em>proxy &#x26; https</em>proxy两个变量，如果设置了，删除</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[root@AliHPC-M40-410 VPN-HPC]# echo $http_proxy\nhttp://10.168.56.7:3128/\n[root@AliHPC-M40-410 VPN-HPC]# echo $https_proxy\nhttp://10.168.56.7:3128/</code></pre>\n      </div>\n<p>确实设置了， 试试看删除之后呢。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">unset http_proxy\nunset https_proxy\nwget http://public-img-test.oss-cn-hangzhou.aliyuncs.com/VPN.tar.gz</code></pre>\n      </div>\n<p>好吧，真的可以了！！！</p>\n</li>\n</ol>\n<h1 id="配置docker"><a href="#%E9%85%8D%E7%BD%AEdocker" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>配置docker</h1>\n<p>参考<a href="https://yq.aliyun.com/articles/64979?spm=5176.doc48632.2.6.V1yqJr">这篇https://yq.aliyun.com/articles/64979?spm=5176.doc48632.2.6.V1yqJr</a>，其实大部分都不是必须的，只需要下面两步即可。</p>\n<ol>\n<li>\n<p>更新repo，镜像里已经装了docker的，更新一下版本</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">sudo yum update</code></pre>\n      </div>\n</li>\n<li>\n<p>验证docker是否装好</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">sudo docker run hello-world</code></pre>\n      </div>\n<p>噢啦。。。</p>\n</li>\n</ol>\n<h2 id="安装nvidia-docker"><a href="#%E5%AE%89%E8%A3%85nvidia-docker" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装nvidia-docker</h2>\n<p>nvidia－docker 是 Nvidia 公司为 docker 所做的封装，开源代码可以在<a href="https://github.com/NVIDIA/nvidia-docker">Github</a>找到。nvidia－docker 可以对GPU做抽象，只要容器中的GPU驱动版本不高于宿主机的GPU驱动版本，即可在容器中使用GPU资源。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text"># Install nvidia-docker and nvidia-docker-plugin\nwget -P /tmp https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.1/nvidia-docker-1.0.1-1.x86_64.rpm\nsudo rpm -i /tmp/nvidia-docker*.rpm &amp;&amp; rm /tmp/nvidia-docker*.rpm\nsudo systemctl start nvidia-docker\n\n# Test nvidia-smi\nnvidia-docker run --rm nvidia/cuda nvidia-smi</code></pre>\n      </div>\n<h1 id="测试tensorflow"><a href="#%E6%B5%8B%E8%AF%95tensorflow" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试tensorflow</h1>\n<p>阿里云HPC服务器在交付时已经安装好TensorFlow （版本 0.8rc），用户无需做任何额外工作即可直接运行。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">/disk1/deeplearning/anaconda2/bin/python -m &quot;tensorflow.models.image.mnist.convolutional&quot;</code></pre>\n      </div>\n<p>上两张图，看一下跑起来的时候资源消耗：\n<img src="http://oml1i2pi6.bkt.clouddn.com/nvidia-smi-when-tensorflow-is-run.png" alt="nvidia-smi when tensorflow is run">\n<img src="http://oml1i2pi6.bkt.clouddn.com/htop-when-tensorflow-is-run.png" alt="htop when tensorflow is run"></p>\n<h1 id="tensorflow-docker"><a href="#tensorflow-docker" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>tensorflow docker</h1>\n<p>我打算用docker跑tensorflow，测试一下性能。结果用<a href="https://help.aliyun.com/document_detail/51489.html">阿里提供的镜像</a>时候又发现cuda版本问题。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[root@AliHPC-M40-410 deeplearning]# nvidia-docker run registry.cn-beijing.aliyuncs.com/tensorflow-samples/alexnet_benchmark:1.0.0-devel-gpu\n\nStatus: Downloaded newer image for registry.cn-beijing.aliyuncs.com/tensorflow-samples/alexnet_benchmark:1.0.0-devel-gpu\nnvidia-docker | 2017/04/19 13:02:34 Error: unsupported CUDA version: driver 7.5 &lt; image 8.0</code></pre>\n      </div>\n<p>直接用yum upgrade cuda不行的， 需要添加cuda8的源才能正常安装cuda8， 参看<a href="https://developer.nvidia.com/cuda-downloads">nvidia文档</a></p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">wget http://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-repo-rhel7-8.0.61-1.x86_64.rpm\nrpm -ivh cuda-repo-rhel7-8.0.61-1.x86_64.rpm\nyum install cuda</code></pre>\n      </div>\n<p>居然有1.3G这么大，花了一个多小时，55555， 有点想放弃了，关键是安装了之后不能制作镜像，如果按需付费下次还得再来一次，每次安装cuda8就得花40块钱？！！！看样子阿里云HPC就是给有钱人准备的,9000￥/月。我已经给阿里云提了工单，请求他们把镜像升级到cuda8.0， 不知道啥时候回响应呢。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">安装  2 软件包 (+31 依赖软件包)\n升级  1 软件包 (+ 4 依赖软件包)\n\n总下载量：1.3 G\nIs this ok [y/d/N]: y</code></pre>\n      </div>\n<p>装好之后居然</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[root@AliHPC-M40-410 deeplearning]# nvidia-smi                                          │[root@AliHPC-M40-410 deeplearning]# nvidia-docker stop 2448268d9525\nFailed to initialize NVML: Driver/library version mismatch</code></pre>\n      </div>\n<p>额。。。。。。。</p>\n<p>在等待cuda安装的时候，我在阿里云的docker hub上找了个<a href="https://dev.aliyun.com/list.html?namePrefix=tensorflow">tensorflow镜像</a>。这个docker image包含jupyter notebook，默认监听的端口是8888，需要把docker的端口映射到宿主机（HPC）上。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">nvidia-docker run -p 80:8888 registry.cn-hangzhou.aliyuncs.com/denverdino/tensorflow</code></pre>\n      </div>\n<p>这时候在HPC上wget localhost就可以访问到jupyter notebook的index.html了，但是我们之前说过HPC只能在内网，所以还需要配置<a href="https://help.aliyun.com/document_detail/25836.html">反向代理</a>。</p>\n<ol>\n<li>\n<p>ECS跳转机部署代理服务器tengine</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">wget http://tengine.taobao.org/download/tengine-2.1.1.tar.gz\ntar zxvf tengine-2.1.1.tar.gz\ncd tengine-2.1.1/\n./configure\nmake\nsudo make install</code></pre>\n      </div>\n<p>默认安装在/usr/local/nginx/</p>\n</li>\n<li>\n<p>编辑ECS Tengine配置文件\nroot权限打开/usr/local/nginx/conf/nginx.conf，增加一个server模块，监听本机的某个端口（比如8888），将所有请求转发到HPC的物理机，配置如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">server {\n    listen       8888;\n#    listen       somename:8080;\n#    server_name  somename  alias  another.alias;\n\n    location / {\n        proxy_pass http://10.172.68.130; #10.172.68.130是HPC物理机的内网地址\n    }\n}</code></pre>\n      </div>\n<p>这样之后在ECS下wget localhost:8888可以访问到jupyter notebook的index.html了。但是用ECS公网IP在本地浏览器上访问的时候发现连不上， 应该是防火墙的原因吧，把ECS的8888的端口打开（如果ECS连不上HPC的端口，估计也是防火墙的问题，因为我这里用的是80端口，所以没有报错）。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">iptables -I INPUT -p TCP --dport 8888 -j ACCEPT</code></pre>\n      </div>\n<p>AWS里的话是用安全组配置inbound rules，对于不熟悉iptables的用户要友好一些。现在可以在本地浏览器上访问jupyter notebook了。\n<img src="http://oml1i2pi6.bkt.clouddn.com/hpc-jupyter-notebook.png" alt="hpc jupyter notebook"></p>\n</li>\n</ol>\n<h1 id="some-tricks"><a href="#some-tricks" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>some tricks</h1>\n<ol>\n<li>\n<p>安装tmux</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">yum install tmux</code></pre>\n      </div>\n</li>\n<li>\n<p>安装htop</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">-------------- For RHEL/CentOS 7 --------------\nwget http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-9.noarch.rpm\nrpm -ihv epel-release-7-9.noarch.rpm \nyum install htop</code></pre>\n      </div>\n</li>\n<li>加速下载数据集\n话说在HPC上直接下载数据集有点慢（尤其是国外的），可以考虑开一台最低配置的普通ecs，不限制网速，在上面下载好datasets，然后再“内网”（阿里云不同区的服务器是不能内网互联的，比如hk的ecs就不能内网访问杭州的ecs，所以需要用公网ip，但是哪怕用公网ip，速度也是上百倍的差别， 3.4MB/s vs 24.2KB/s）同步到hpc上，如果是国外的datasets，可以开一台低配的相关ecs，0.165￥/时，价格差了200多倍啊。</li>\n</ol>\n<h1 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h1>\n<p>经过几个小时的折腾， 我还没有配好可以正确使用gpu的HPC实例。后来看到这篇<a href="https://yq.aliyun.com/articles/68206">在阿里云HPC和容器服务上，像梵高一样作画</a>，应该比较简单的， 只是目前必须用北京的HPC才可以这么方便的使用。而北京目前必须按月付费，9000￥/月，暂时我还用不起啊。所以还是先放弃HPC，用AWS吧。。。</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="https://yq.aliyun.com/articles/66993?spm=5176.doc48632.2.5.V1yqJr">https://yq.aliyun.com/articles/66993?spm=5176.doc48632.2.5.V1yqJr</a></li>\n<li><a href="https://yq.aliyun.com/articles/64979?spm=5176.doc48632.2.6.V1yqJr">https://yq.aliyun.com/articles/64979?spm=5176.doc48632.2.6.V1yqJr</a></li>\n<li><a href="https://help.aliyun.com/document_detail/48632.html?spm=5176.doc52231.6.573.uqYEBN">https://help.aliyun.com/document_detail/48632.html?spm=5176.doc52231.6.573.uqYEBN</a></li>\n<li><a href="https://github.com/NVIDIA/nvidia-docker">https://github.com/NVIDIA/nvidia-docker</a></li>\n<li><a href="https://opskumu.gitbooks.io/docker/content/chapter5.html">https://opskumu.gitbooks.io/docker/content/chapter5.html</a></li>\n</ul>',timeToRead:7,excerpt:"深度学习没有GPU的支持可以说完全不能解决实际问题， 稍大一点的数据集可能就要几个小时，GPU能起到10倍以及更高的速度提升。之前我们做了 AWS的深度学习配置 ，今天再看看国内阿里云的HPC配置。 购买 & 登录 在 阿里云hpc页面 购买，目前按量付费只支持华东1（杭州），G…",fields:{slug:"/2017-04-09-aliyun-hpc-config/"},frontmatter:{title:"阿里云HPC深度学习配置从入门到真的放弃",date:"2017-04-19",category:"ML",tags:["rnn","neural network","dl","ml"]}}},{node:{html:'<p>深度学习的流行跟计算能力的大大提高密不可分，尤其是GPU的大量使用，Nvidia去年股价涨了500%呢。用CPU要运行一个月的项目， 可能用GPU几个小时就运行完了，效率和速度不可同日耳语。工欲善其事必先利其器，所以正确地配置好GPU是进入深度学习的开端，而用AWS的GPU服务是最快捷方便的，本文就教你如何快速的配置好AWS的p2实例，提高深度学习效率。</p>\n<!-- more -->\n<h1 id="安装aws-instance"><a href="#%E5%AE%89%E8%A3%85aws-instance" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装AWS Instance</h1>\n<h2 id="instance选择"><a href="#instance%E9%80%89%E6%8B%A9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Instance选择</h2>\n<p>AWS提供很多实例，有计算型的（CPU比较好）， 有内存型的（内存比较高），有高磁盘IO型的，也有适合用于深度学习的GPU型。具体不同型号的特点配置以及价格参见<a href="https://aws.amazon.com/ec2/pricing/on-demand/">AWS Pricing</a>。</p>\n<p>这里我们选择p2.xlarge，4核CPU，61G内存，一个Nvidia GPU（有2496个并行处理核，12G内存），具体信息可以看<a href="https://aws.amazon.com/blogs/aws/new-p2-instance-type-for-amazon-ec2-up-to-16-gpus/">这里</a>。</p>\n<p>当然p2.xlarge的价格(0.9$/h)当然比t2.xlarge的价格(0.188$/h)要高， 所以我的建议是，在本机或者t2上写好代码，找一个小一点的数据集跑一下， 调试得差不多了， 然后启动p2.xlarge，在全量数据集上run。这里说一下，如果数据集是国外的（大部分都是），aws下载能达到20MB/s，相比国内下载速度，真是爽得不要不要的。</p>\n<h2 id="ami选择"><a href="#ami%E9%80%89%E6%8B%A9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AMI选择</h2>\n<p>AWS Instance安装的时候支持选择镜像。还记得以前重装windows系统么， 装完之后需要安装各种驱动，输入法、qq、浏览器、word。。。blabla一堆软件，有可能几个小时就过去了。所以后来出了Ghost盘，安装好各种软件后，做个Ghost盘，然后以后重装的时候就只需要装Ghost盘，十分钟就可以装好，然后所有该要的软件都有了，大大节约了时间。AWS的镜像叫AMI。</p>\n<p>社区已经有很多人制作了深度学习的AMI，我们也可以选择自己制作。用云服务要改变传统开发思维，要有”随要随开，用完即走“的思想。所以用aws的基本流程如下：</p>\n<ol>\n<li>选择一个基础的AMI</li>\n<li>安装好Instance</li>\n<li>安装各种需要的软件，比如python，numpy，matplot，tensorflow，keras，cuda等</li>\n<li>在AWS管理控制台右键选中instance，点image，create image。然后就等着，几分钟就好了。</li>\n<li>做相应的开发，写代码，下载数据集等blabla。。。</li>\n<li>工作一段时间之后要休息了，制作新的AMI</li>\n<li>释放instance</li>\n<li>第二天来，新开instance，用5制作的AMI，继续上次的工作。</li>\n</ol>\n<p>这里推荐几个社区制作的深度学习相关的AMI，<a href="https://aws.amazon.com/marketplace/pp/B01M0AXXQB">Deep Learning AMI Amazon Linux Version</a>, Deep Learning AMI Ubuntu Linux - 1.3_Apr2017 - ami-638c1e03, <a href="https://github.com/ritchieng/tensorflow-aws-ami">TFAMI</a>。我因为最近在看<a href="http://course.fast.ai/">Fast.ai</a>课程， 所以选择了课程对应的AMI。话说<a href="https://github.com/fastai/courses/tree/master/setup">这个课程有完整的脚本</a>来创建、开启、连接、关闭AWS实例，很是方便， 大家可以看看。这是一个实战性很强的课程， 推荐一下。</p>\n<h1 id="jupyter-notebook"><a href="#jupyter-notebook" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>jupyter notebook</h1>\n<p>jupyter notebook的作用和好处以及基本的安装我就不多说了， 自行google吧。主要说一下要在AMS上配置jupyter notebook需要注意的事项。</p>\n<ol>\n<li>需要在AMS Instance的安全组里打开8888端口。</li>\n<li>\n<p>由于会在公网上访问，为了安全， 需要给jupyter notebook设置一个密码，方法如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">ubuntu@ip-10-0-0-14:~/nbs$ ipython\nIn <span class="token punctuation">[</span>1<span class="token punctuation">]</span>: from IPython.lib <span class="token function">import</span> <span class="token function">passwd</span>\nIn <span class="token punctuation">[</span>2<span class="token punctuation">]</span>: passwd<span class="token punctuation">(</span><span class="token punctuation">)</span>\nEnter password:\nVerify password:\nOut<span class="token punctuation">[</span>2<span class="token punctuation">]</span>: <span class="token string">\'sha1:XXXXXXXXXXXXXXX\'</span>\nIn <span class="token punctuation">[</span>3<span class="token punctuation">]</span>: <span class="token keyword">exit</span></code></pre>\n      </div>\n<p>将上诉生成的密码copy到~/.jupyter/jupyter<em>notebook</em>config.py（如果没有此文件， 先运行jupyter notebook —generate-config）里:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">vim ~/.jupyter/jupyter_notebook_config.py\nc.NotebookApp.password = u&#39;sha1:XXXXXXXXXXXXXX&#39;\nc.NotebookApp.ip = &#39;*&#39; #如果没有这行，会只监听localhost:8888，外网无法访问</code></pre>\n      </div>\n<p>然后就可以在浏览器里输入<a href="http://%5Bip%5D:8888%E8%AE%BF%E9%97%AEjupyter">http://[ip]:8888访问jupyter</a> notebook，开心地开始写代码吧。</p>\n</li>\n</ol>\n<p>数据存放位置</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">ubuntu@ip-10-0-0-14:~/courses/deeplearning1/nbs$ find ~ -name vgg16.h5\n/home/ubuntu/.keras/models/vgg16.h5</code></pre>\n      </div>\n<h1 id="竞价实例"><a href="#%E7%AB%9E%E4%BB%B7%E5%AE%9E%E4%BE%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>竞价实例</h1>\n<p>竞价实例是一种特殊的实例，能够以超低的价格提供配置一样的实例，和普通实例的差别在于不可停止，因此当你想跑比较大的网络的时候（训练时间大于1小时），用竞价实例会非常划算。0.9美元每小时的 p2.xlarge 在竞价实例一个月的历史记录里很少超过0.3美元。即使超过了，也不会出高于0.9美元的价格。</p>\n<h1 id="选择哪个区的aws"><a href="#%E9%80%89%E6%8B%A9%E5%93%AA%E4%B8%AA%E5%8C%BA%E7%9A%84aws" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>选择哪个区的AWS</h1>\n<p>这个建议看看自己的网络环境下，连哪个区的速度快。用<a href="http://www.cloudping.info/">CloudPing.info</a>测试一下就可以，貌似国内访问美西要快点，我的网络好的情况下ping值能在200ms，差的时候500ms+。</p>\n<h1 id="推荐几个软件"><a href="#%E6%8E%A8%E8%8D%90%E5%87%A0%E4%B8%AA%E8%BD%AF%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>推荐几个软件</h1>\n<h2 id="tmux"><a href="#tmux" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>tmux</h2>\n<p>可以在一个ssh连接里面同时开启多个窗口，比如一个启动jupyter notebook，一个打开htop，一个执行正常的命令。并且用Ctrl + B d离开tmux后， 下次再进来（哪怕是重新ssh登录），直接用tmux attach可以回到上次的回话，相当方便。</p>\n<h2 id="htop"><a href="#htop" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>htop</h2>\n<p>监控内存、CPU占用等。</p>\n<h2 id="screen"><a href="#screen" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>screen</h2>\n<p>避免离开ssh后jupyter notebook挂掉。</p>\n<h1 id="坑"><a href="#%E5%9D%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>坑</h1>\n<ul>\n<li>\n<p>用fast.ai课程提供的脚本创建Instance的话，再次安装的时候报错</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">An error occurred (InvalidKeyPair.NotFound) when calling the RunInstances operation: The key pair &#39;aws-key-fast-ai&#39; does not exist</code></pre>\n      </div>\n<p>尝试着把~/.ssh/aws-key-fast-ai.pem删除后好了。</p>\n</li>\n</ul>\n<p>要想做深度学习，GPU简直是必须的。举个例子， 我在t2.xlarge上用VGG16跑<a href="https://www.kaggle.com/c/dogs-vs-cats-redux-kernels-edition">kaggle dogs vs cats比赛</a>，要花一个多小时，而用p2.xlarge，只需要600多s，速度提升了10倍啊！上次听AWS技术分享会，他们提到，云服务重新定义了一个公式1 * 1000 === 1000 * 1，是说你用1台服务器跑1000个小时所花的费用，跟1000台服务器跑1小时的费用是一样的，但这样几乎把效率提升了1000倍啊！这在没有云的时代，谁敢想象随随便便调用1000台服务器呢。</p>\n<p>另外国内的阿里云也有针对深度学习的配置，叫<a href="https://www.aliyun.com/product/hpc?spm=5176.8142029.388261.36.6n7Ioo">HPC</a>，后面也会再写篇关于阿里云HPC的配置。</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="http://www.jiqizhixin.com/article/2608">http://www.jiqizhixin.com/article/2608</a></li>\n<li><a href="https://zhuanlan.zhihu.com/p/25066187">https://zhuanlan.zhihu.com/p/25066187</a></li>\n<li><a href="http://www.cnblogs.com/meelo/p/5994505.html">http://www.cnblogs.com/meelo/p/5994505.html</a></li>\n</ul>',
timeToRead:3,excerpt:"深度学习的流行跟计算能力的大大提高密不可分，尤其是GPU的大量使用，Nvidia去年股价涨了500%呢。用CPU要运行一个月的项目， 可能用GPU几个小时就运行完了，效率和速度不可同日耳语。工欲善其事必先利其器，所以正确地配置好GPU是进入深度学习的开端，而用AWS的GPU…",fields:{slug:"/aws-dl-config/"},frontmatter:{title:"AWS深度学习配置",date:"2017-04-15",category:"ML",tags:["rnn","neural network","dl","ml"]}}},{node:{html:'<p>之前翻译了<a href="//magicly.me/2017/03/09/iamtrask-anyone-can-code-lstm/">一篇介绍RNN的文章</a>，一直没看到<a href="https://twitter.com/iamtrask">作者</a>写新的介绍LSTM的blog，于是我又找了其他资料学习。本文先介绍一下LSTM，然后用LSTM在金庸、古龙的人名上做了训练，可以生成新的武侠名字，如果有兴趣的，还可以多搜集点人名，用于给小孩儿取名呢，哈哈，justforfun，大家玩得开心…</p>\n<!-- more -->\n<h1 id="rnn回顾"><a href="#rnn%E5%9B%9E%E9%A1%BE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RNN回顾</h1>\n<p>RNN的出现是为了解决状态记忆的问题，解决方法很简单，每一个时间点t的隐藏状态h(t)不再简单地依赖于数据，还依赖于前一个时间节点t-1的隐藏状态h(t-1)。可以看出这是一种递归定义（所以循环神经网络又叫递归神经网络Recursive Neural Network），h(t-1)又依赖于h(t-2)，h(t-2)依赖于h(t-3)…所以h(t)依赖于之前每一个时间点的输入，也就是说h(t)记住了之前所有的输入。\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/RNN-rolled.png" alt="rnn">\n上图如果按时间展开，就可以看出RNN其实也就是普通神经网络在时间上的堆叠。\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/RNN-unrolled.png" alt="rnn-unrolled"></p>\n<h1 id="rnn问题：long-term-dependencies"><a href="#rnn%E9%97%AE%E9%A2%98%EF%BC%9Along-term-dependencies" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RNN问题：Long-Term Dependencies</h1>\n<p>一切似乎很完美，但是如果h(t)依赖于h(t - 1000)，依赖路径特别长，会导致计算梯度的时候出现梯度消失的问题，训练时间很长根本没法实际使用。下面是一个依赖路径很长的例子：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">我老家【成都】的。。。【此处省去500字】。。。我们那里经常吃【火锅】。。。</code></pre>\n      </div>\n<h1 id="lstm"><a href="#lstm" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LSTM</h1>\n<p>Long Short Term Memory神经网络，也就是LSTM，由<a href="http://deeplearning.cs.cmu.edu/pdfs/Hochreiter97_lstm.pdf"> Hochreiter &#x26; Schmidhuber于1997年发表</a>。它的出现就是为了解决Long-Term Dependencies的问题，很来出现了很多改进版本，目前应用在相当多的领域（包括机器翻译、对话机器人、语音识别、Image Caption等）。</p>\n<p>标准的RNN里，重复的模块里只是一个很简单的结构，如下图：\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-SimpleRNN.png" alt="rnn structure"></p>\n<p>LSTM也是类似的链表结构，不过它的内部构造要复杂得多：\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-chain.png" alt="lstm structure">\n上图中的图标含义如下：\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM2-notation.png" alt="lstm components"></p>\n<p>LSTM的核心思想是cell state（类似于hidden state，有LSTM变种把cell state和hidden state合并了， 比如GRU）和三种门：输入门、忘记门、输出门。</p>\n<p>cell state每次作为输入传递到下一个时间点，经过一些线性变化后继续传往再下一个时间点（我还没看过<a href="http://deeplearning.cs.cmu.edu/pdfs/Hochreiter97_lstm.pdf">原始论文</a>，不知道为啥有了hidden state后还要cell state，好在确实有改良版将两者合并了，所以暂时不去深究了）。\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-C-line.png" alt="cell state"></p>\n<p>门的概念来自于电路设计（我没学过，就不敢卖弄了）。LSTM里，门控制通过门之后信息能留下多少。如下图，sigmoid层输出[0, 1]的值，决定多少数据可以穿过门， 0表示谁都过不了，1表示全部通过。\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-gate.png" alt="gate"></p>\n<p>下面我们来看看每个“门”到底在干什么。</p>\n<p>首先我们要决定之前的cell state需要保留多少。 它根据h(t-1)和x(t)计算出一个[0, 1]的数，决定cell state保留多少，0表示全部丢弃，1表示全部保留。为什么要丢弃呢，不是保留得越多越好么？假设LSTM在生成文章，里面有小明和小红，小明在看电视，小红在厨房做饭。如果当前的主语是小明， ok，那LSTM应该输出看电视相关的，比如找遥控器啊， 换台啊，如果主语已经切换到小红了， 那么接下来最好暂时把电视机忘掉，而输出洗菜、酱油、电饭煲等。\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-focus-f.png" alt="forget gate"></p>\n<p>第二步就是决定输入多大程度上影响cell state。这个地方由两部分构成， 一个用sigmoid函数计算出有多少数据留下，一个用tanh函数计算出一个候选C(t)。 这个地方就好比是主语从小明切换到小红了， 电视机就应该切换到厨房。\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-focus-i.png" alt="input gate"></p>\n<p>然后我们把留下来的（t-1时刻的）cell state和新增加的合并起来，就得到了t时刻的cell state。\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-focus-C.png" alt="combine to cell state"></p>\n<p>最后我们把cell state经过tanh压缩到[-1, 1]，然后输送给输出门（[0, 1]决定输出多少东西）。\n<img src="//colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-focus-o.png" alt="output"></p>\n<p>现在也出了很多LSTM的变种， 有兴趣的可以看<a href="//colah.github.io/posts/2015-08-Understanding-LSTMs/">这里</a>。另外，LSTM只是为了解决RNN的long-term dependencies，也有人从另外的角度来解决的，比如<a href="http://arxiv.org/pdf/1402.3511v1.pdf">Clockwork RNNs by Koutnik, et al. (2014).</a></p>\n<h1 id="show-me-the-code"><a href="#show-me-the-code" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>show me the code!</h1>\n<p>我用的<a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/">Andrej Karpathy大神</a>的代码， 做了些小改动。这个代码的好处是不依赖于任何深度学习框架，只需要有numpy就可以马上run起来！\n{% gist magicly/df9e5806fbd44ed5ec73dce9444afb30 %}</p>\n<p>然后从网上找了<a href="http://www.oocities.org/sg/ye_feng_dengmi/h/hucai6-02.htm">金庸小说的人名</a>，做了些预处理，每行一个名字，保存到input.txt里，运行代码就可以了。古龙的没有找到比较全的名字， 只有这份<a href="https://tieba.baidu.com/p/1559430344">武功排行榜</a>，只有100多人。</p>\n<p>下面是根据两份名单训练的结果，已经将完全一致的名字（比如段誉）去除了，所以下面的都是LSTM“新创作发明”的名字哈。来， 大家猜猜哪一个结果是金庸的， 哪一个是古龙的呢？</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">{&#39;姜曾铁&#39;, &#39;袁南兰&#39;, &#39;石万奉&#39;, &#39;郭万嗔&#39;, &#39;蔡家&#39;, &#39;程伯芷&#39;, &#39;汪铁志&#39;, &#39;陈衣&#39;, &#39;薛铁&#39;, \n&#39;哈赤蔡师&#39;, &#39;殷飞虹&#39;, &#39;钟小砚&#39;, &#39;凤一刀&#39;, &#39;宝兰&#39;, &#39;齐飞虹&#39;, &#39;无若之&#39;, &#39;王老英&#39;, &#39;钟&#39;, \n&#39;钟百胜&#39;, &#39;师&#39;, &#39;李沅震&#39;, &#39;曹兰&#39;, &#39;赵一刀&#39;, &#39;钟灵四&#39;, &#39;宗家妹&#39;, &#39;崔树胜&#39;, &#39;桑飞西&#39;, \n&#39;上官公希轰&#39;, &#39;刘之余人童怀道&#39;, &#39;周云鹤&#39;, &#39;天&#39;, &#39;凤&#39;, &#39;西灵素&#39;, &#39;大智虎师&#39;, &#39;阮徒忠&#39;, \n&#39;王兆能&#39;, &#39;袁铮衣商宝鹤&#39;, &#39;常伯凤&#39;, &#39;苗人大&#39;, &#39;倪不凤&#39;, &#39;蔡铁&#39;, &#39;无伯志&#39;, &#39;凤一弼&#39;, \n&#39;曹鹊&#39;, &#39;黄宾&#39;, &#39;曾铁文&#39;, &#39;姬胡峰&#39;, &#39;李何豹&#39;, &#39;上官铁&#39;, &#39;童灵同&#39;, &#39;古若之&#39;, &#39;慕官景岳&#39;, \n&#39;崔百真&#39;, &#39;陈官&#39;, &#39;陈钟&#39;, &#39;倪调峰&#39;, &#39;妹沅刀&#39;, &#39;徐双英&#39;, &#39;任通督&#39;, &#39;上官铁褚容&#39;, &#39;大剑太&#39;, \n&#39;胡阳&#39;, &#39;生&#39;, &#39;南仁郑&#39;, &#39;南调&#39;, &#39;石双震&#39;, &#39;海铁山&#39;, &#39;殷鹤真&#39;, &#39;司鱼督&#39;, &#39;德小&#39;, \n&#39;若四&#39;, &#39;武通涛&#39;, &#39;田青农&#39;, &#39;常尘英&#39;, &#39;常不志&#39;, &#39;倪不涛&#39;, &#39;欧阳&#39;, &#39;大提督&#39;, &#39;胡玉堂&#39;, \n&#39;陈宝鹤&#39;, &#39;南仁通四蒋赫侯&#39;}</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">{&#39;邀三&#39;, &#39;熊猫开&#39;, &#39;鹰星&#39;, &#39;陆开&#39;, &#39;花&#39;, &#39;薛玉罗平&#39;, &#39;南宫主&#39;, &#39;南宫九&#39;, &#39;孙夫人&#39;,\n&#39;荆董灭&#39;, &#39;铁不愁&#39;, &#39;裴独&#39;, &#39;玮剑&#39;, &#39;人&#39;, &#39;陆小龙王紫无牙&#39;, &#39;连千里&#39;, &#39;仲先生&#39;, \n&#39;俞白&#39;, &#39;方大&#39;, &#39;叶雷一魂&#39;, &#39;独孤上红&#39;, &#39;叶怜花&#39;, &#39;雷大归&#39;, &#39;恕飞&#39;, &#39;白双发&#39;, \n&#39;邀一郎&#39;, &#39;东楼&#39;, &#39;铁中十一点红&#39;, &#39;凤星真&#39;, &#39;无魏柳老凤三&#39;, &#39;萧猫儿&#39;, &#39;东郭先凤&#39;, \n&#39;日孙&#39;, &#39;地先生&#39;, &#39;孟摘星&#39;, &#39;江小小凤&#39;, &#39;花双楼&#39;, &#39;李佩&#39;, &#39;仇珏&#39;, &#39;白坏刹&#39;, &#39;燕悲情&#39;, \n&#39;姬悲雁&#39;, &#39;东郭大&#39;, &#39;谢晓陆凤&#39;, &#39;碧玉伯&#39;, &#39;司实三&#39;, &#39;陆浪&#39;, &#39;赵布雁&#39;, &#39;荆孤蓝&#39;, \n&#39;怜燕南天&#39;, &#39;萧怜静&#39;, &#39;龙布雁&#39;, &#39;东郭鱼&#39;, &#39;司东郭金天&#39;, &#39;薛啸天&#39;, &#39;熊宝玉&#39;, &#39;无莫静&#39;,\n&#39;柳罗李&#39;, &#39;东官小鱼&#39;, &#39;渐飞&#39;, &#39;陆地鱼&#39;, &#39;阿吹王&#39;, &#39;高傲&#39;, &#39;萧十三&#39;, &#39;龙童&#39;, &#39;玉罗赵&#39;, \n&#39;谢郎唐傲&#39;, &#39;铁夜帝&#39;, &#39;江小凤&#39;, &#39;孙玉玉夜&#39;, &#39;仇仲忍&#39;, &#39;萧地孙&#39;, &#39;铁莫棠&#39;, &#39;柴星夫&#39;, \n&#39;展夫人&#39;, &#39;碧玉&#39;, &#39;老无鱼&#39;, &#39;铁铁花&#39;, &#39;独&#39;, &#39;薛月宫九&#39;, &#39;老郭和尚&#39;, &#39;东郭大路陆上龙关飞&#39;, \n&#39;司藏&#39;, &#39;李千&#39;, &#39;孙白人&#39;, &#39;南双平&#39;, &#39;王玮&#39;, &#39;姬原情&#39;, &#39;东郭大路孙玉&#39;, &#39;白玉罗生&#39;, &#39;高儿&#39;, \n&#39;东珏天&#39;, &#39;萧王尚&#39;, &#39;九&#39;, &#39;凤三静&#39;, &#39;和空摘星&#39;, &#39;关吹雪&#39;, &#39;上官官小凤&#39;, &#39;仇上官金飞&#39;, \n&#39;陆上龙啸天&#39;, &#39;司空星魂&#39;, &#39;邀衣人&#39;, &#39;主&#39;, &#39;李寻欢天&#39;, &#39;东情&#39;, &#39;玉夫随&#39;, &#39;赵小凤&#39;, &#39;东郭灭&#39;, &#39;邀祟厚&#39;, &#39;司空星&#39;}</code></pre>\n      </div>\n<p>感兴趣的还可以用古代诗人、词人等的名字来做训练，大家机器好或者有时间的可以多训练下，训练得越多越准确。</p>\n<h1 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h1>\n<p>RNN由于具有记忆功能，在NLP、Speech、Computer Vision等诸多领域都展示了强大的力量。实际上，RNN是<a href="http://binds.cs.umass.edu/papers/1995_Siegelmann_Science.pdf">图灵等价的</a>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">If training vanilla neural nets is optimization over functions, training recurrent nets is optimization over programs.</code></pre>\n      </div>\n<p>LSTM是一种目前相当常用和实用的RNN算法，主要解决了RNN的long-term dependencies问题。另外RNN也一直在产生新的研究，比如Attention机制。有空再介绍咯。。。</p>\n<h1 id="refers"><a href="#refers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refers</h1>\n<ul>\n<li><a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/">http://colah.github.io/posts/2015-08-Understanding-LSTMs/</a></li>\n<li><a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/">http://karpathy.github.io/2015/05/21/rnn-effectiveness/</a></li>\n<li><a href="https://www.zhihu.com/question/29411132">https://www.zhihu.com/question/29411132</a></li>\n<li><a href="https://gist.github.com/karpathy/d4dee566867f8291f086">https://gist.github.com/karpathy/d4dee566867f8291f086</a></li>\n<li><a href="https://deeplearning4j.org/lstm.html">https://deeplearning4j.org/lstm.html</a></li>\n</ul>',timeToRead:3,excerpt:"之前翻译了 一篇介绍RNN的文章 ，一直没看到 作者 写新的介绍LSTM的blog，于是我又找了其他资料学习。本文先介绍一下LSTM，然后用LSTM在金庸、古龙的人名上做了训练，可以生成新的武侠名字，如果有兴趣的，还可以多搜集点人名，用于给小孩儿取名呢，哈哈，justforfun…",fields:{slug:"/rnn-lstm-generate-name/"},frontmatter:{title:"用LSTM生成武侠人名",date:"2017-04-07",category:"ML",tags:["rnn","neural network","dl","ml"]}}},{node:{html:'<p>最近在看Udacity的<a href="https://classroom.udacity.com/courses/ud730/">ud730课程</a>，号称是tensorflow官方宣传片哈哈，因为用到的代码直接在<a href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples/udacity">tensorflow的代码里面</a>。</p>\n<p>课程主要包括四大部分：</p>\n<ul>\n<li>机器学习的基本概念</li>\n<li>深度神经网络</li>\n<li>卷积神经网络</li>\n<li>循环神经网络</li>\n</ul>\n<!-- more -->\n<h1 id="机器学习基本概念"><a href="#%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>机器学习基本概念</h1>\n<ul>\n<li>softmax</li>\n<li>cross-entropy</li>\n<li>overfitting &#x26; regularization</li>\n<li>train / validate / test dataset的用途</li>\n<li>SGD，随机梯度下降算法</li>\n<li>Momentum &#x26; learning rate decay，动量法和学习率调节下降</li>\n<li>Hyper-parameter，超参数空间</li>\n</ul>\n<h1 id="深度神经网络"><a href="#%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>深度神经网络</h1>\n<ul>\n<li>线性模型的局限</li>\n<li>ReLu</li>\n<li>Chain Rule， 链式法则</li>\n<li>Back propagation，反向传播</li>\n<li>Regularization，正则化</li>\n<li>Dropout</li>\n</ul>\n<h1 id="卷积神经网络"><a href="#%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>卷积神经网络</h1>\n<ul>\n<li>Statistical Invariants，统计不变性</li>\n<li>\n<p>Convolutional NN，Convnets，卷积网络</p>\n<ul>\n<li>feature map</li>\n<li>stride</li>\n<li>max pooling</li>\n</ul>\n</li>\n</ul>\n<h1 id="循环神经网络"><a href="#%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>循环神经网络</h1>\n<ul>\n<li>Embeddings</li>\n<li>word2vec</li>\n<li>tSNE</li>\n<li>RNN</li>\n<li>梯度消失/爆炸</li>\n<li>LSTM</li>\n<li>Beam搜索</li>\n</ul>\n<p>课程总共有6个tasks，目前完成了3个， 代码在<a href="https://github.com/magicly/udacity-ud730">github上</a>，后续会继续更新本文和代码， 欢迎有兴趣的关注。</p>\n<p>To be continued…</p>',timeToRead:1,excerpt:"最近在看Udacity的 ud730课程 ，号称是tensorflow官方宣传片哈哈，因为用到的代码直接在 tensorflow的代码里面 。 课程主要包括四大部分： 机器学习的基本概念 深度神经网络 卷积神经网络 循环神经网络 机器学习基本概念 softmax cross…",fields:{slug:"/udacity-ud730-notes/"},frontmatter:{title:"udacity课程ud730深度学习学习笔记",date:"2017-03-31",category:"ML",tags:["ml","udacity","tensorflow","AI","cnn","rnn","lstm","word2vec"]}}},{node:{html:'<h1 id="假设函数空间，hypothesis"><a href="#%E5%81%87%E8%AE%BE%E5%87%BD%E6%95%B0%E7%A9%BA%E9%97%B4%EF%BC%8Chypothesis" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>假设函数空间，Hypothesis</h1>\n<h1 id="目标（损失）函数，objectloss-function"><a href="#%E7%9B%AE%E6%A0%87%EF%BC%88%E6%8D%9F%E5%A4%B1%EF%BC%89%E5%87%BD%E6%95%B0%EF%BC%8Cobjectloss-function" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>目标（损失）函数，Object/Loss Function</h1>\n<h1 id="梯度下降，gradient-descent"><a href="#%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%EF%BC%8Cgradient-descent" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>梯度下降，Gradient Descent</h1>\n<h1 id="随机梯度下降，stochastic-gradient-descent"><a href="#%E9%9A%8F%E6%9C%BA%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%EF%BC%8Cstochastic-gradient-descent" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>随机梯度下降，Stochastic Gradient Descent</h1>',timeToRead:1,excerpt:"假设函数空间，Hypothesis 目标（损失）函数，Object/Loss Function 梯度下降，Gradient Descent 随机梯度下降，Stochastic Gradient Descent",fields:{slug:"/linear-regression/"},frontmatter:{title:"linear-regression",date:"2017-03-10",category:"ML",tags:["linear regression","ml"]}}},{node:{html:'<p>本文翻译自<a href="https://twitter.com/iamtrask">@iamtrask</a>的<a href="http://iamtrask.github.io/2015/11/15/anyone-can-code-lstm/">Anyone Can Learn To Code an LSTM-RNN in Python (Part 1: RNN)</a>。本文作者已通过<a href="https://twitter.com/magicly007/with_replies">twitter联系作者，获得授权</a>。</p>\n<h1 id="概要"><a href="#%E6%A6%82%E8%A6%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>概要</h1>\n<p>我通过玩具代码一边学习一边调试能达到最好的学习效果。本文通过一个简单的python实现，教会你循环神经网络。</p>\n<p>原文作者<a href="https://twitter.com/iamtrask">@iamtrask</a>说他会在twitter上继续发布第二部分LSTM，敬请关注。</p>\n<!-- more -->\n<h1 id="废话少说，-给我看看代码"><a href="#%E5%BA%9F%E8%AF%9D%E5%B0%91%E8%AF%B4%EF%BC%8C-%E7%BB%99%E6%88%91%E7%9C%8B%E7%9C%8B%E4%BB%A3%E7%A0%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>废话少说， 给我看看代码</h1>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">import</span> copy<span class="token punctuation">,</span> numpy <span class="token keyword">as</span> np\nnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#固定随机数生成器的种子，便于得到固定的输出，【译者注：完全是为了方便调试用的]</span>\n\n<span class="token comment"># compute sigmoid nonlinearity</span>\n<span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#激活函数</span>\n    output <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> output\n\n<span class="token comment"># convert output of sigmoid function to its derivative</span>\n<span class="token keyword">def</span> <span class="token function">sigmoid_output_to_derivative</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#激活函数的导数</span>\n    <span class="token keyword">return</span> output<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>output<span class="token punctuation">)</span>\n\n<span class="token comment"># training dataset generation</span>\nint2binary <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">#整数到其二进制表示的映射</span>\nbinary_dim <span class="token operator">=</span> <span class="token number">8</span> <span class="token comment">#暂时制作256以内的加法， 可以调大</span>\n\n<span class="token comment">## 以下5行代码计算0-256的二进制表示</span>\nlargest_number <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>binary_dim<span class="token punctuation">)</span>\nbinary <span class="token operator">=</span> np<span class="token punctuation">.</span>unpackbits<span class="token punctuation">(</span>\n    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">range</span><span class="token punctuation">(</span>largest_number<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>largest_number<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    int2binary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> binary<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n\n<span class="token comment"># input variables</span>\nalpha <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token comment">#学习速率</span>\ninput_dim <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">#因为我们是做两个数相加，每次会喂给神经网络两个bit，所以输入的维度是2</span>\nhidden_dim <span class="token operator">=</span> <span class="token number">16</span> <span class="token comment">#隐藏层的神经元节点数，远比理论值要大（译者注：理论上而言，应该一个节点就可以记住有无进位了，但我试了发现4的时候都没法收敛），你可以自己调整这个数，看看调大了是容易更快地收敛还是更慢</span>\noutput_dim <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">#我们的输出是一个数，所以维度为1</span>\n\n\n<span class="token comment"># initialize neural network weights</span>\nsynapse_0 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span>input_dim<span class="token punctuation">,</span>hidden_dim<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">#输入层到隐藏层的转化矩阵，维度为2*16， 2是输入维度，16是隐藏层维度</span>\nsynapse_1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span>hidden_dim<span class="token punctuation">,</span>output_dim<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>\nsynapse_h <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span>hidden_dim<span class="token punctuation">,</span>hidden_dim<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>\n<span class="token comment"># 译者注：np.random.random产生的是[0,1)的随机数，2 * [0, 1) - 1 => [-1, 1)，</span>\n<span class="token comment"># 是为了有正有负更快地收敛，这涉及到如何初始化参数的问题，通常来说都是靠“经验”或者说“启发式规则”，说得直白一点就是“蒙的”！机器学习里面，超参数的选择，大部分都是这种情况，哈哈。。。</span>\n<span class="token comment"># 我自己试了一下用【0, 2)之间的随机数，貌似不能收敛，用[0,1)就可以，呵呵。。。</span>\n\n<span class="token comment"># 以下三个分别对应三个矩阵的变化</span>\nsynapse_0_update <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>synapse_0<span class="token punctuation">)</span>\nsynapse_1_update <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>synapse_1<span class="token punctuation">)</span>\nsynapse_h_update <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>synapse_h<span class="token punctuation">)</span>\n\n<span class="token comment"># training logic</span>\n<span class="token comment"># 学习10000个例子</span>\n<span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    \n    <span class="token comment"># 下面6行代码，随机产生两个0-128的数字，并查出他们的二进制表示。为了避免相加之和超过256，这里选择两个0-128的数字</span>\n    <span class="token comment"># generate a simple addition problem (a + b = c)</span>\n    a_int <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>largest_number<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># int version</span>\n    a <span class="token operator">=</span> int2binary<span class="token punctuation">[</span>a_int<span class="token punctuation">]</span> <span class="token comment"># binary encoding</span>\n\n    b_int <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>largest_number<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># int version</span>\n    b <span class="token operator">=</span> int2binary<span class="token punctuation">[</span>b_int<span class="token punctuation">]</span> <span class="token comment"># binary encoding</span>\n\n    <span class="token comment"># true answer</span>\n    c_int <span class="token operator">=</span> a_int <span class="token operator">+</span> b_int\n    c <span class="token operator">=</span> int2binary<span class="token punctuation">[</span>c_int<span class="token punctuation">]</span>\n    \n    <span class="token comment"># where we\'ll store our best guess (binary encoded)</span>\n    <span class="token comment"># 存储神经网络的预测值</span>\n    d <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>c<span class="token punctuation">)</span>\n\n    overallError <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">#每次把总误差清零</span>\n    \n    layer_2_deltas <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#存储每个时间点输出层的误差</span>\n    layer_1_values <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#存储每个时间点隐藏层的值</span>\n    layer_1_values<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>hidden_dim<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#一开始没有隐藏层，所以里面都是0</span>\n    \n    <span class="token comment"># moving along the positions in the binary encoding</span>\n    <span class="token keyword">for</span> position <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>binary_dim<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#循环遍历每一个二进制位</span>\n        \n        <span class="token comment"># generate input and output</span>\n        X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>binary_dim <span class="token operator">-</span> position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>binary_dim <span class="token operator">-</span> position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#从右到左，每次去两个输入数字的一个bit位</span>\n        y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>c<span class="token punctuation">[</span>binary_dim <span class="token operator">-</span> position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token comment">#正确答案</span>\n\n        <span class="token comment"># hidden layer (input ~+ prev_hidden)</span>\n        layer_1 <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>synapse_0<span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>layer_1_values<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>synapse_h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#（输入层 + 之前的隐藏层） -> 新的隐藏层，这是体现循环神经网络的最核心的地方！！！</span>\n\n        <span class="token comment"># output layer (new binary representation)</span>\n        layer_2 <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>layer_1<span class="token punctuation">,</span>synapse_1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#隐藏层 * 隐藏层到输出层的转化矩阵synapse_1 -> 输出层</span>\n\n        <span class="token comment"># did we miss?... if so, by how much?</span>\n        layer_2_error <span class="token operator">=</span> y <span class="token operator">-</span> layer_2 <span class="token comment">#预测误差是多少</span>\n        layer_2_deltas<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>layer_2_error<span class="token punctuation">)</span><span class="token operator">*</span>sigmoid_output_to_derivative<span class="token punctuation">(</span>layer_2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#我们把每一个时间点的误差导数都记录下来</span>\n        overallError <span class="token operator">+=</span> np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>layer_2_error<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#总误差</span>\n    \n        <span class="token comment"># decode estimate so we can print it out</span>\n        d<span class="token punctuation">[</span>binary_dim <span class="token operator">-</span> position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">round</span><span class="token punctuation">(</span>layer_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#记录下每一个预测bit位</span>\n        \n        <span class="token comment"># store hidden layer so we can use it in the next timestep</span>\n        layer_1_values<span class="token punctuation">.</span>append<span class="token punctuation">(</span>copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>layer_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#记录下隐藏层的值，在下一个时间点用</span>\n    \n    future_layer_1_delta <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>hidden_dim<span class="token punctuation">)</span>\n    \n    <span class="token comment">#前面代码我们完成了所有时间点的正向传播以及计算最后一层的误差，现在我们要做的是反向传播，从最后一个时间点到第一个时间点</span>\n    <span class="token keyword">for</span> position <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>binary_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        \n        X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#最后一次的两个输入</span>\n        layer_1 <span class="token operator">=</span> layer_1_values<span class="token punctuation">[</span><span class="token operator">-</span>position<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#当前时间点的隐藏层</span>\n        prev_layer_1 <span class="token operator">=</span> layer_1_values<span class="token punctuation">[</span><span class="token operator">-</span>position<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">#前一个时间点的隐藏层</span>\n        \n        <span class="token comment"># error at output layer</span>\n        layer_2_delta <span class="token operator">=</span> layer_2_deltas<span class="token punctuation">[</span><span class="token operator">-</span>position<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#当前时间点输出层导数</span>\n        <span class="token comment"># error at hidden layer</span>\n        <span class="token comment"># 通过后一个时间点（因为是反向传播）的隐藏层误差和当前时间点的输出层误差，计算当前时间点的隐藏层误差</span>\n        layer_1_delta <span class="token operator">=</span> <span class="token punctuation">(</span>future_layer_1_delta<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>synapse_h<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">+</span> layer_2_delta<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>synapse_1<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> sigmoid_output_to_derivative<span class="token punctuation">(</span>layer_1<span class="token punctuation">)</span>\n\n        <span class="token comment"># let\'s update all our weights so we can try again</span>\n        <span class="token comment"># 我们已经完成了当前时间点的反向传播误差计算， 可以构建更新矩阵了。但是我们并不会现在就更新权重矩阵，因为我们还要用他们计算前一个时间点的更新矩阵呢。</span>\n        <span class="token comment"># 所以要等到我们完成了所有反向传播误差计算， 才会真正的去更新权重矩阵，我们暂时把更新矩阵存起来。</span>\n        <span class="token comment"># 可以看这里了解更多关于反向传播的知识http://iamtrask.github.io/2015/07/12/basic-python-network/</span>\n        synapse_1_update <span class="token operator">+=</span> np<span class="token punctuation">.</span>atleast_2d<span class="token punctuation">(</span>layer_1<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>layer_2_delta<span class="token punctuation">)</span>\n        synapse_h_update <span class="token operator">+=</span> np<span class="token punctuation">.</span>atleast_2d<span class="token punctuation">(</span>prev_layer_1<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>layer_1_delta<span class="token punctuation">)</span>\n        synapse_0_update <span class="token operator">+=</span> X<span class="token punctuation">.</span>T<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>layer_1_delta<span class="token punctuation">)</span>\n        \n        future_layer_1_delta <span class="token operator">=</span> layer_1_delta\n    \n\n    <span class="token comment"># 我们已经完成了所有的反向传播，可以更新几个转换矩阵了。并把更新矩阵变量清零</span>\n    synapse_0 <span class="token operator">+=</span> synapse_0_update <span class="token operator">*</span> alpha\n    synapse_1 <span class="token operator">+=</span> synapse_1_update <span class="token operator">*</span> alpha\n    synapse_h <span class="token operator">+=</span> synapse_h_update <span class="token operator">*</span> alpha\n\n    synapse_0_update <span class="token operator">*=</span> <span class="token number">0</span>\n    synapse_1_update <span class="token operator">*=</span> <span class="token number">0</span>\n    synapse_h_update <span class="token operator">*=</span> <span class="token number">0</span>\n    \n    <span class="token comment"># print out progress</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">1000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error:"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>overallError<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Pred:"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"True:"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        out <span class="token operator">=</span> <span class="token number">0</span>\n        <span class="token keyword">for</span> index<span class="token punctuation">,</span>x <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            out <span class="token operator">+=</span> x<span class="token operator">*</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a_int<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" + "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b_int<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h1 id="运行时输出"><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E8%BE%93%E5%87%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>运行时输出</h1>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">Error:[ 3.45638663]\nPred:[0 0 0 0 0 0 0 1]\nTrue:[0 1 0 0 0 1 0 1]\n9 + 60 = 1\n------------\nError:[ 3.63389116]\nPred:[1 1 1 1 1 1 1 1]\nTrue:[0 0 1 1 1 1 1 1]\n28 + 35 = 255\n------------\nError:[ 3.91366595]\nPred:[0 1 0 0 1 0 0 0]\nTrue:[1 0 1 0 0 0 0 0]\n116 + 44 = 72\n------------\nError:[ 3.72191702]\nPred:[1 1 0 1 1 1 1 1]\nTrue:[0 1 0 0 1 1 0 1]\n4 + 73 = 223\n------------\nError:[ 3.5852713]\nPred:[0 0 0 0 1 0 0 0]\nTrue:[0 1 0 1 0 0 1 0]\n71 + 11 = 8\n------------\nError:[ 2.53352328]\nPred:[1 0 1 0 0 0 1 0]\nTrue:[1 1 0 0 0 0 1 0]\n81 + 113 = 162\n------------\nError:[ 0.57691441]\nPred:[0 1 0 1 0 0 0 1]\nTrue:[0 1 0 1 0 0 0 1]\n81 + 0 = 81\n------------\nError:[ 1.42589952]\nPred:[1 0 0 0 0 0 0 1]\nTrue:[1 0 0 0 0 0 0 1]\n4 + 125 = 129\n------------\nError:[ 0.47477457]\nPred:[0 0 1 1 1 0 0 0]\nTrue:[0 0 1 1 1 0 0 0]\n39 + 17 = 56\n------------\nError:[ 0.21595037]\nPred:[0 0 0 0 1 1 1 0]\nTrue:[0 0 0 0 1 1 1 0]\n11 + 3 = 14\n------------</code></pre>\n      </div>\n<h1 id="第一部分：什么是神经元记忆"><a href="#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%E7%A5%9E%E7%BB%8F%E5%85%83%E8%AE%B0%E5%BF%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>第一部分：什么是神经元记忆</h1>\n<p>顺着背出字母表，你很容易做到吧？</p>\n<p>倒着背呢， 有点难哦。</p>\n<p>试着想一首你记得的歌词。为什么顺着回忆比倒着回忆难？你能直接跳到第二小节的中间么？额， 好像有点难。 这是为什么呢？</p>\n<p>这其实很符合逻辑。 你记忆字母表或者歌词并不是像计算机把信息存储在硬盘上那样的（译者注：计算机可以随机访问磁盘。）。你是顺序记忆的。知道了前一个字母，你很容易知道下一个。这是一种条件记忆，只有你最近知道了前一个记忆，你才容易想起来下一个记忆，就想你熟悉的链表一样。</p>\n<p>但是，并不是说你不唱歌的时候，歌就不在你脑子里了。而是说你如果想直接跳到中间那部分，你会发现很难直接找到其在脑中的呈现（也许是一堆神经元）。你想直接搜索到一首歌的中间部分，这是很难的， 因为你以前没有这样做过，所以没有索引可以指向歌曲的中间部分。 就好比你邻居家有很多小路， 你从前门进去顺着路走很容易找到后院，但是让你直接到后院去就不太容易。想了解更过关于大脑的知识，请看<a href="http://www.human-memory.net/processes_recall.html">这里</a>。</p>\n<p>跟链表很像，记忆这样存储很高效。我们可以发现这样存储在解决很多问题时候有优势。</p>\n<p>如果你的数据是一个序列，那么记忆就很重要（意味着你必须记住某些东西）。看下面的视频：</p>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 75%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem"\n          >\n            <iframe src="https://www.youtube.com/embed/UL0ZOgN2SqY" frameborder="0" allowfullscreen style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>\n<p>每一个数据点就是视频中的一帧。如果你想训练一个神经网络来预测下一帧小球的位置， 那么知道上一帧小球的位置就很重要。这样的序列数据就是我们需要构建循环神经网络的原因。那么， 神经网络怎么记住以前的信息呢？</p>\n<p>神经网络有隐藏层。一般而言，隐藏层的状态由输入决定。所以，一般而言神经网络的信息流如下图：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">input -&gt; hidden -&gt; output</code></pre>\n      </div>\n<p>这很简单直接。特定的输入决定特定的隐藏层，特定的隐藏层又决定了输出。这是一种封闭系统。记忆改变了这种状况。记忆意味着，隐藏状态是由当前时间点的输入和上一个时间点的隐藏状态决定的。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">(input + prev_hidden) -&gt; hidden -&gt; output</code></pre>\n      </div>\n<p>为什么是隐藏层而不是输入层呢？我们也可以这样做呀：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">(input + prev_input) -&gt; hidden -&gt; output</code></pre>\n      </div>\n<p>现在，仔细想想，如果有四个时间点，如果我们采用隐藏层循环是如下图：\n<img src="http://oml1i2pi6.bkt.clouddn.com/hidden-recurrence.jpg" alt="hidden layer recurrence">\n如果采用输入层循环会是：\n<img src="http://oml1i2pi6.bkt.clouddn.com/input-recurrence.jpg" alt="input layer recurrence">\n看到区别没，隐藏层记忆了之前所有的输入信息，而输入层循环则只能利用到上一个输入。举个例子，假设一首歌词里面有”…I love you…”和”…I love carrots…”，如果采用输入层循环，则没法根据”I love”来预测下一个词是什么？因为当前输入是love，前一个输入是I，这两种情况一致，所以没法区分。 而隐藏层循环则可以记住更久之前的输入信息，因而能更好地预测下一个词。理论上而言，隐藏层循环可以记住所有之前的输入，当然记忆会随着时间流逝逐渐忘却。有兴趣的可以看<a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/">这篇blog</a>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">            停下来好好想想， 直到你感觉想明白了再继续。</code></pre>\n      </div>\n<h1 id="第二部分：rnn---神经网络记忆"><a href="#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%EF%BC%9Arnn---%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%B0%E5%BF%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>第二部分：RNN - 神经网络记忆</h1>\n<p>现在我们已经有了一些直观认识， 接下来让我们更进一步分析。正如在<a href="http://iamtrask.github.io/2015/07/12/basic-python-network/">反向传播这篇blog</a>里介绍的，神经网络的输入层是由输入数据集决定的。每一行输入数据用来产生隐藏层（通过正向传播）。每个隐藏层又用于产生输出层（假设只有一层隐藏层）。如我们之前所说，记忆意味着隐藏层是由输入数据和前一次的隐藏层组合而成。怎么做的呢？很像神经网络里面其他传播的做法一样， 通过矩阵！这个矩阵定义了当前隐藏层跟前一个隐藏层的关系。</p>\n<p><img src="http://iamtrask.github.io/img/basic_recurrence_singleton.png" alt="rnn">\n这幅图中很重要的一点是有三个权重矩阵。有两个我们很熟悉了。SYNAPSE<em>0用于把输入数据传播到隐藏层。SYNAPSE</em>1把隐藏层传播到输出数据。新矩阵（SYNAPSE<em>h，用于循环）把当前的隐藏层（layer</em>1）传播到下一个时间点的隐藏层（还是layer_1）。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">            停下来好好想想， 直到你感觉想明白了再继续。</code></pre>\n      </div>\n<p><img src="http://iamtrask.github.io/img/recurrence_gif.gif" alt="forward">\n上面的gif图展示了循环神经网络的神奇之处以及一些很重要的性质。它展示了四个时间点隐藏层的情况。第一个时间点，隐藏层仅由输入数据决定。第二个时间点，隐藏层是由输入数据和第一个时间点的隐藏层共同决定的。以此类推。你应该注意到了，第四个时间点的时候，网络已经“满了”。所以大概第五个时间点来的时候，就要选择哪些记忆保留，哪些记忆覆盖。现实如此。这就是记忆“容量”的概念。如你所想，更大的隐藏层，就能记住更长时间的东西。同样，这就需要神经网络学会<strong>忘记不相关的记忆</strong>然后<strong>记住重要的记忆</strong>。第三步有没看出什么重要信息？为什么<strong>绿色</strong>的要比其他颜色的多呢？</p>\n<p>另外要注意的是隐藏层夹在输入层和输出层中间，所以输出已经不仅仅取决于输入了。输入仅仅改变记忆，而输出仅仅依赖于记忆。有趣的是，如果2，3，4时间节点没有输入数据的话，隐藏层同样会随着时间流逝而变化。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">        停下来好好想想，确保你明白了刚讲的内容。</code></pre>\n      </div>\n<h1 id="第三部分：基于时间的反向传播"><a href="#%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%EF%BC%9A%E5%9F%BA%E4%BA%8E%E6%97%B6%E9%97%B4%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>第三部分：基于时间的反向传播</h1>\n<p>那么循环神经网络是怎么学习的呢？看看下面的图。黑色表示预测结果，明黄色表示错误，褐黄色表示导数。\n<img src="http://iamtrask.github.io/img/backprop_through_time.gif" alt="bp">\n网络通过从1到4的全部前向传播（可以是任意长度的整个序列），然后再从4到1的反向传播导数来学习。你可以把它看成一个有点变形的普通神经网络，除了我们在不同的地方共享权值（synapses 0,1,and h）。除了这点， 它就是一个普通的神经网络。</p>\n<h1 id="我们的玩具代码"><a href="#%E6%88%91%E4%BB%AC%E7%9A%84%E7%8E%A9%E5%85%B7%E4%BB%A3%E7%A0%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我们的玩具代码</h1>\n<p>来，我们用循环神经网络做个模型来实现<strong>二进制加法</strong>。看到下面的图没，你猜猜顶上的彩色的1表示什么意思呢？\n<img src="http://iamtrask.github.io/img/binary_addition.GIF" alt="toy code">\n方框里的彩色的1表示<strong>进位</strong>。我们就要用循环神经网络来记住这个进位。求和的时候需要记住<strong>进位</strong>（如果不懂，可以看<a href="https://www.youtube.com/watch?v=jB_sRh5yoZk">这里</a>）。</p>\n<p>二进制加法做法就是，从右往左，根据上面两行的bit来预测第三行的bit为1还是0。我们想要神经网络遍历整个二进制序列记住是否有进位，以便能计算出正确的结果。不要太纠结这个问题本身，神经网络也不在乎这个问题。它在乎的只是每个时刻它会收到两个输入（0或者1），然后它会传递给用于记忆是否有进位的隐藏层。神经网络会把所有这些信息（输入和隐藏层的记忆）考虑进去，来对每一位（每个时间点）做出正确的预测。</p>\n<hr>\n<p>下面原文里面是针对每行代码做的注释， 为了方便阅读， 我直接把注释写到了代码里面， 便于大家阅读。</p>\n<p>译者注：RNN在自然语言处理里面大量使用，包括机器翻译，对话系统，机器做诗词等，本文只是简单介绍了一下原理。后续我会写一些应用方面的文章，敬请期待。</p>',
timeToRead:6,excerpt:"本文翻译自 @iamtrask 的 Anyone Can Learn To Code an LSTM-RNN in Python (Part 1: RNN) 。本文作者已通过 twitter…",fields:{slug:"/iamtrask-anyone-can-code-lstm/"},frontmatter:{title:"所有人都能学会用Python写出RNN-LSTM代码",date:"2017-03-09",category:"ML",tags:["rnn","neural network","dl","ml"]}}}]}},pathContext:{current:4,skip:30,total:6}}}});
//# sourceMappingURL=path---page-4-404398be52aa3bd7a520.js.map
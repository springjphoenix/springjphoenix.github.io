{"version":3,"sources":["webpack:///path---page-5-f514c60eb5c029cd6f8d.js","webpack:///./.cache/json/page-5.json"],"names":["webpackJsonp","630","module","exports","data","site","siteMetadata","title","allMarkdownRemark","edges","node","html","timeToRead","excerpt","fields","slug","frontmatter","date","category","tags","pathContext","current","skip","total"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,mBAA0BC,mBAAsBC,QAAUC,MAAQC,KAAA,4xFAAAC,WAAA,EAAAC,QAAA,IAAAC,QAAw3FC,KAAA,gBAAsBC,aAAgBT,MAAA,SAAAU,KAAA,aAAAC,SAAA,KAAAC,MAAA,yDAAsHT,MAAQC,KAAA,umaAAu3XC,WAAA,EAAAC,QAAA,sHAAAC,QAA01DC,KAAA,kBAAwBC,aAAgBT,MAAA,eAAAU,KAAA,aAAAC,SAAA,KAAAC,MAAA,2CAA8GT,MAAQC,KAAA;AAAq5iDC,WAAA,EAAAC,QAAA,qIAAAC,QAAoSC,KAAA,uCAA6CC,aAAgBT,MAAA,sCAAAU,KAAA,aAAAC,SAAA,KAAAC,MAAA,aAAuGT,MAAQC,KAAA,gUAA4RC,WAAA,EAAAC,QAAA,sIAAAC,QAAsNC,KAAA,2CAAiDC,aAAgBT,MAAA,+BAAAU,KAAA,aAAAC,SAAA,UAAAC,MAAA,8BAAsHT,MAAQC,KAAA,yLAAAC,WAAA,EAAAC,QAAA,6FAAAC,QAAkUC,KAAA,2BAAiCC,aAAgBT,MAAA,iBAAAU,KAAA,aAAAC,SAAA,KAAAC,MAAA,6BAAkGT,MAAQC,KAAA,qqSAA8vDC,WAAA,EAAAC,QAAA,mIAAAC,QAAotPC,KAAA,iCAAuCC,aAAgBT,MAAA,sBAAAU,KAAA,aAAAC,SAAA,SAAAC,MAAA,yBAAuGT,MAAQC,KAAA,uxPAAAC,WAAA,EAAAC,QAAA,wIAAAC,QAAqtQC,KAAA,wBAA8BC,aAAgBT,MAAA,iBAAAU,KAAA,aAAAC,SAAA,UAAAC,MAAA,mCAA6GT,MAAQC,KAAA,mmUAA2rRC,WAAA,EAAAC,QAAA,yIAAAC,QAA+/DC,KAAA,gBAAsBC,aAAgBT,MAAA,WAAAU,KAAA,aAAAC,SAAA,OAAAC,MAAA,gDAAiHT,MAAQC,KAAA;AAA4yUC,WAAA,EAAAC,QAAA,wIAAAC,QAA02IC,KAAA,8BAAoCC,aAAgBT,MAAA,gBAAAU,KAAA,aAAAC,SAAA,OAAAC,MAAA,2BAAiGT,MAAQC,KAAA;AAA8pwFC,WAAA,EAAAC,QAAA,sIAAAC,QAA2gFC,KAAA,8CAAoDC,aAAgBT,MAAA,qCAAAU,KAAA,aAAAC,SAAA,OAAAC,MAAA,yCAAmIC,aAAgBC,QAAA,EAAAC,KAAA,GAAAC,MAAA","file":"path---page-5-f514c60eb5c029cd6f8d.js","sourcesContent":["webpackJsonp([10891958300999],{\n\n/***/ 630:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Magicly's Blog\"}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"html\":\"<p>机器学习已经影响了我们生活中的每一个地方， 了解一些机器学习知识， 便于提高竞争力， 避免被机器替代。\\n下面是我参考咨询了很多大牛之后搜集整理的一些学习资料， 基本都是该领域世界最顶尖的高手亲自授课，以及一些最流行的工具库， 值得学习。</p>\\n<!-- more -->\\n<ul>\\n<li>台湾大学李宏毅老师的机器学习和深度学习课程，<a href=\\\"http://speech.ee.ntu.edu.tw/~tlkagk/courses.html%EF%BC%8C\\\">http://speech.ee.ntu.edu.tw/~tlkagk/courses.html，</a> bilibili上有视频：<a href=\\\"https://www.bilibili.com/video/av10590361/\\\">https://www.bilibili.com/video/av10590361/</a> , <a href=\\\"https://www.bilibili.com/video/av9770302/\\\">https://www.bilibili.com/video/av9770302/</a> 。 另外有个很好的pdf可以快速了解机器学习内容：<a href=\\\"https://www.slideshare.net/tw_dsconf/ss-62245351\\\">https://www.slideshare.net/tw_dsconf/ss-62245351</a> </li>\\n<li>Fast.ai课程，<a href=\\\"http://course.fast.ai/\\\">http://course.fast.ai/</a> ， 中文版<a href=\\\"http://geek.ai100.com.cn/tag/fast-ai\\\">http://geek.ai100.com.cn/tag/fast-ai</a> ，已完成，这个是我目前觉得最好的课程。</li>\\n<li>Andrew NG <a href=\\\"https://www.coursera.org/learn/machine-learning\\\">https://www.coursera.org/learn/machine-learning</a> （已完成）</li>\\n<li>Andrew NG Unsupervised Feature Learning and Deep Learning <a href=\\\"http://deeplearning.stanford.edu/tutorial/\\\">http://deeplearning.stanford.edu/tutorial/</a> （学习ing）</li>\\n<li><a href=\\\"http://neuralnetworksanddeeplearning.com/\\\">http://neuralnetworksanddeeplearning.com/</a> （已完成）</li>\\n<li>Andrew NG, standford的机器学习课程之一， <a href=\\\"http://cs229.stanford.edu/\\\">http://cs229.stanford.edu/</a></li>\\n<li>Neural Networks for Machine Learning <a href=\\\"https://www.coursera.org/learn/neural-networks\\\">https://www.coursera.org/learn/neural-networks</a> by Geoffrey Hinton, Professor(深度学习创始人) （学习中），有点后悔， 这个课程并不是适合初学者。参考<a href=\\\"https://www.quora.com/Is-it-wise-to-learn-deep-learning-from-Hintons-course-on-Coursera\\\">这里</a></li>\\n<li>李飞飞课程<a href=\\\"http://cs231n.github.io/\\\">http://cs231n.github.io/</a></li>\\n<li>斯坦福自然语言处理 <a href=\\\"http://web.stanford.edu/class/cs224n/\\\">http://web.stanford.edu/class/cs224n/</a></li>\\n<li>Tensorflow for Deep Learning Research <a href=\\\"http://web.stanford.edu/class/cs20si/\\\">http://web.stanford.edu/class/cs20si/</a></li>\\n<li>伯克利人工智能课程 <a href=\\\"http://www-inst.eecs.berkeley.edu/~cs188/archives.html\\\">http://www-inst.eecs.berkeley.edu/~cs188/archives.html</a></li>\\n<li><a href=\\\"http://www.deeplearningbook.org/\\\">http://www.deeplearningbook.org/</a>, by Ian Goodfellow and Yoshua Bengio（深度学习四大金刚之一） and Aaron Courville</li>\\n<li>udacity深度学习课程tensorflow <a href=\\\"https://classroom.udacity.com/courses/ud730/\\\">https://classroom.udacity.com/courses/ud730/</a> （已完成）</li>\\n<li><a href=\\\"https://keras.io\\\">https://keras.io</a></li>\\n<li><a href=\\\"https://scikit-learn.org\\\">https://scikit-learn.org</a></li>\\n<li><a href=\\\"https://www.tensorflow.org\\\">https://www.tensorflow.org</a></li>\\n<li><a href=\\\"http://deeplearning.net/\\\">http://deeplearning.net/</a></li>\\n<li><a href=\\\"https://www.kaggle.com\\\">https://www.kaggle.com</a></li>\\n</ul>\",\"timeToRead\":2,\"excerpt\":\"…\",\"fields\":{\"slug\":\"/ml-content/\"},\"frontmatter\":{\"title\":\"机器学习计划\",\"date\":\"2017-02-12\",\"category\":\"ML\",\"tags\":[\"AI\",\"ML\",\"machine learning\",\"deep learning\",\"深度学习\"]}}},{\"node\":{\"html\":\"<h1 id=\\\"什么是贝塞尔曲线\\\"><a href=\\\"#%E4%BB%80%E4%B9%88%E6%98%AF%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>什么是贝塞尔曲线</h1>\\n<p>最近做一个动画效果时需要将物体做曲线移动， 本来记得css3里的动画是可以指定beizer curve的， 结果用的时候发现css3的beizer curve只用来做easing timing function。简单来说就是拿来控制动画“非线性”移动，比如越来越快（ease-in）， 越来越慢（ease-out），先慢后快再慢（ease-in-out）等， 让动画效果更“灵动”， 避免线性（linear）的死板。</p>\\n<p>可以看看这两个页面， 有一个直观的感受。</p>\\n<!-- more -->\\n<ul>\\n<li><a href=\\\"http://cubic-bezier.com/\\\">http://cubic-bezier.com/</a></li>\\n<li><a href=\\\"http://easings.net/zh-cn\\\">http://easings.net/zh-cn</a></li>\\n</ul>\\n<p>beizer curve在css3中的使用， 可以自己google一下， 或者看下：</p>\\n<ul>\\n<li><a href=\\\"http://www.w3school.com.cn/css3/css3_transition.asp\\\">http://www.w3school.com.cn/css3/css3_transition.asp</a></li>\\n<li><a href=\\\"http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html\\\">http://www.ruanyifeng.com/blog/2014/02/css<em>transition</em>and_animation.html</a></li>\\n</ul>\\n<p>引用wiki上的介绍：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">    在数学的数值分析领域中，贝塞尔曲线（英语：Bézier curve）是计算机图形学中相当重要的参数曲线。更高维度的广泛化贝塞尔曲线就称作贝塞尔曲面，其中贝塞尔三角是一种特殊的实例。\\n    贝塞尔曲线于1962年，由法国工程师皮埃尔·贝塞尔（Pierre Bézier）所广泛发表，他运用贝塞尔曲线来为汽车的主体进行设计。贝塞尔曲线最初由Paul de Casteljau于1959年运用de Casteljau算法开发，以稳定数值的方法求出贝塞尔曲线。</code></pre>\\n      </div>\\n<p>有数学功底或者有兴趣的可以参考下面几篇文章， 我就不赘述了（最讨厌那种什么都要copy过来，弄得好像跟是自己写的样， 别人已经写得很清楚了， 干嘛再重复劳动一遍呢， 又没有自己的新的见解，赠人链接， 手留余香。 😁哈）。</p>\\n<ul>\\n<li><a href=\\\"https://en.wikipedia.org/wiki/B%C3%A9zier_curve\\\">https://en.wikipedia.org/wiki/B%C3%A9zier_curve</a></li>\\n<li><a href=\\\"https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A\\\">https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A</a></li>\\n<li><a href=\\\"http://www.html-js.com/article/1628\\\">http://www.html-js.com/article/1628</a></li>\\n<li><a href=\\\"http://www.cnblogs.com/hnfxs/p/3148483.html\\\">http://www.cnblogs.com/hnfxs/p/3148483.html</a></li>\\n<li></li>\\n</ul>\\n<h1 id=\\\"在线工具\\\"><a href=\\\"#%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>在线工具</h1>\\n<p>下面是几个比较有用的工具， 方便大家。</p>\\n<ul>\\n<li><a href=\\\"http://blogs.sitepointstatic.com/examples/tech/canvas-curves/quadratic-curve.html\\\">http://blogs.sitepointstatic.com/examples/tech/canvas-curves/quadratic-curve.html</a></li>\\n<li><a href=\\\"http://myst729.github.io/bezier-curve/\\\">http://myst729.github.io/bezier-curve/</a></li>\\n<li><a href=\\\"http://xuanfengge.com/easeing/ceaser/\\\">http://xuanfengge.com/easeing/ceaser/</a></li>\\n<li><a href=\\\"http://yisibl.github.io/cubic-bezier/#.17,.67,.83,.67\\\">http://yisibl.github.io/cubic-bezier/#.17,.67,.83,.67</a></li>\\n<li><a href=\\\"http://cubic-bezier.com/#.17,.67,.83,.67\\\">http://cubic-bezier.com/#.17,.67,.83,.67</a></li>\\n</ul>\\n<h1 id=\\\"实现\\\"><a href=\\\"#%E5%AE%9E%E7%8E%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>实现</h1>\\n<p>前面资料都是把bezier curve拿来当timing function的， 而我的需求是要让物体（某个dom节点）沿着某条beizer curve移动，于是继续google， 找到了几个。</p>\\n<ul>\\n<li>Android实现: <a href=\\\"https://github.com/Yasic/QQBubbleView\\\">https://github.com/Yasic/QQBubbleView</a></li>\\n</ul>\\n<p>Android的我用不到， 放这里主要是里面的gif图很直观，哈哈。</p>\\n<ul>\\n<li>CSS实现：<a href=\\\"http://jinlong.github.io/2016/01/14/moving-along-a-curved-path-in-css-with-layered-animation/%EF%BC%8C\\\">http://jinlong.github.io/2016/01/14/moving-along-a-curved-path-in-css-with-layered-animation/，</a> 原文：<a href=\\\"http://tobiasahlin.com/blog/curved-path-animations-in-css/\\\">http://tobiasahlin.com/blog/curved-path-animations-in-css/</a></li>\\n</ul>\\n<p>CSS的实现真是相当tricky， 我解释一下。CSS里面的animation translate是直接按照直线移动到目的地的， 这是因为沿X轴和Y轴都是匀速运动（linear），所以合成之后的速度必然是斜角45°移动过去的。我们可以把X轴看成时间轴， 这时如果Y轴的移动函数是某个beizer curve，那合成之后的移动曲线就是beizer curve了。具体实现的时候还用到了:after伪元素了。</p>\\n<p>复杂一点的我觉得还是需要用js去控制， 于是自然想到了用js代码去按照beizer curve公式实现。</p>\\n<ul>\\n<li>JS实现： <a href=\\\"http://blog.csdn.net/cuixiping/article/details/6872095\\\">http://blog.csdn.net/cuixiping/article/details/6872095</a></li>\\n</ul>\\n<p>这个用的公式不直观，应该是进行了变换之后的， 我直接照着公式写了一个。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">PointOnCubicBezier2</span><span class=\\\"token punctuation\\\">(</span>cp<span class=\\\"token punctuation\\\">,</span> t<span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">   <span class=\\\"token comment\\\">// B(t) = P0 * (1-t)^3 + 3 * P1 * t * (1-t)^2 + 3 * P2 * t^2 * (1-t) + P3 * t^3</span>\\n</span>        <span class=\\\"token keyword\\\">const</span> one_t <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1.0</span> <span class=\\\"token operator\\\">-</span> t<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">P0</span> <span class=\\\"token operator\\\">=</span> cp<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">P1</span> <span class=\\\"token operator\\\">=</span> cp<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">P2</span> <span class=\\\"token operator\\\">=</span> cp<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">P3</span> <span class=\\\"token operator\\\">=</span> cp<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> x <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">P0</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>one_t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token constant\\\">P1</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">*</span> t <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>one_t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token constant\\\">P2</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> one_t <span class=\\\"token operator\\\">+</span> <span class=\\\"token constant\\\">P3</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> y <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">P0</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>one_t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token constant\\\">P1</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">*</span> t <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>one_t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token constant\\\">P2</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> one_t <span class=\\\"token operator\\\">+</span> <span class=\\\"token constant\\\">P3</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> pointF <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Point2D</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> pointF<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>对比了一下两个函数的输出值， 完全是一样的， 应该就是数学变换而已， 我懒得去做推倒了。</p>\\n<p>后来找到一个三阶beizer curve的实现，看这里\\n<a href=\\\"https://github.com/gre/bezier-easing%EF%BC%8C\\\">https://github.com/gre/bezier-easing，</a> 这个实现可能有点NB，以至于<a href=\\\"https://facebook.github.io/react-native/\\\">React Native</a>、<a href=\\\"http://velocityjs.org/\\\">Velocity</a>等项目都使用了，屌屌的。</p>\\n<p>用<a href=\\\"https://github.com/bestiejs/benchmark.js\\\">benchmark</a>跑一下分：<a href=\\\"https://jsperf.com/beizer-curve5\\\">看这里</a>， chrome下我写的方法居然慢了94%！看样子代码可读性是要付出代价的哈。我还是老老实实用<a href=\\\"https://github.com/gre/bezier-easing%E5%90%A7%E3%80%82\\\">https://github.com/gre/bezier-easing吧。</a></p>\\n<p>刚刚又搜到一篇文章， 讲解地更细致深入， 害得我不想继续写了。 直接看这里吧。<a href=\\\"http://www.jianshu.com/p/55c721887568\\\">http://www.jianshu.com/p/55c721887568</a></p>\\n<h1 id=\\\"如何将多个点用贝塞尔曲线连起来\\\"><a href=\\\"#%E5%A6%82%E4%BD%95%E5%B0%86%E5%A4%9A%E4%B8%AA%E7%82%B9%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E8%BF%9E%E8%B5%B7%E6%9D%A5\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>如何将多个点用贝塞尔曲线连起来</h1>\\n<ul>\\n<li><a href=\\\"http://www.zheng-hang.com/?id=43\\\">http://www.zheng-hang.com/?id=43</a></li>\\n<li><a href=\\\"http://www.cnblogs.com/hnfxs/p/3148743.html\\\">http://www.cnblogs.com/hnfxs/p/3148743.html</a></li>\\n</ul>\",\"timeToRead\":4,\"excerpt\":\"什么是贝塞尔曲线 最近做一个动画效果时需要将物体做曲线移动， 本来记得css3里的动画是可以指定beizer curve的， 结果用的时候发现css3的beizer curve只用来做easing timing function…\",\"fields\":{\"slug\":\"/bezier-curve/\"},\"frontmatter\":{\"title\":\"bezier-curve\",\"date\":\"2016-11-29\",\"category\":\"FE\",\"tags\":[\"js\",\"css\",\"animation\",\"beizer curve\"]}}},{\"node\":{\"html\":\"<p>用了一年多的<a href=\\\"https://facebook.github.io/react/\\\">React</a>，真是爽的不要不要的， 谁用谁知道， 一般人我不告诉他！</p>\\n<p>最近用的过程中发现console里面总是出现这样的警告</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">react.js:20478 Warning: setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op. Please check the code for the Small component.</code></pre>\\n      </div>\\n<p>虽不影响使用， 但是对于一个有代码洁癖的有追求的程序员来说， 怎么受得了呢！</p>\\n<p>react的error或者warning信息还是写得比较好的， 从上面我们可以看出原因是我们在一个unmounted的component上调用setState方法。分析业务代码， 发现是某个弹窗component需要从server加载数据， 有时候网络慢， 还没有加载出来用户就把弹窗关了， 所以对应的component变成了unmounted， 等到fetch请求成功之后， 再调用setState就warning了。</p>\\n<p>为了方便分析问题， 我把问题简化了， 同时为了用户直接能在浏览器打开看到效果， 而不用nodejs、npm、babel、webpack、react等一堆东西install半天， 我直接引用了react cdn上的文件。代码如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token doctype\\\">&lt;!DOCTYPE html></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">charset</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>UTF-8<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>title</span><span class=\\\"token punctuation\\\">></span></span>Hello World<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>title</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://unpkg.com/react@latest/dist/react.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://unpkg.com/react-dom@latest/dist/react-dom.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://unpkg.com/babel-standalone@6.15.0/babel.min.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>root<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>text/babel<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\">\\n\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Big</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        small<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function-variable function\\\">closeSmall</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'closeSmall'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> small<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>hello <span class=\\\"token keyword\\\">from</span> Big Component <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>h2 onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>closeSmall<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>close small <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h2<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>small <span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">&lt;</span>Small <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Small</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'init data'</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'componentDidMount'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fetch data from server succeed...'</span><span class=\\\"token punctuation\\\">)</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`this._isMounted: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_isMounted<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'data from server'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5000</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>hello <span class=\\\"token keyword\\\">from</span> Small Component <span class=\\\"token operator\\\">...</span>  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n        data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n      ReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>Big <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n        document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>代码里面用setTimeout模拟了从server获取数据， 大家如果在5s内点击close small， 就可以重现这个问题。</p>\\n<p>问题的解决方法很自然地想到，如果可以在setState之前检查一下this component是否还是mounted状态就可以了。查react的文档，发现原来之前确实是有isMounted()这个方法的， 不过已经不推荐使用了， 因为<a href=\\\"https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html\\\">isMounted is an Antipattern</a>。</p>\\n<p>第一种解决方法就是自己模拟实现isMounted这个方法， 虽然已经被贴上Antipattern的标签， 但是有些时候用这种方法还是比较方便的。代码如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token doctype\\\">&lt;!DOCTYPE html></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">charset</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>UTF-8<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>title</span><span class=\\\"token punctuation\\\">></span></span>Hello World<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>title</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://unpkg.com/react@latest/dist/react.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://unpkg.com/react-dom@latest/dist/react-dom.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://unpkg.com/babel-standalone@6.15.0/babel.min.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>root<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>text/babel<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\">\\n\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Big</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        small<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function-variable function\\\">closeSmall</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'closeSmall'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> small<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>hello <span class=\\\"token keyword\\\">from</span> Big Component <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>h2 onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>closeSmall<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>close small <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h2<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>small <span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">&lt;</span>Small <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Small</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'init data'</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_isMounted <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_isMounted <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'componentDidMount'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fetch data from server succeed...'</span><span class=\\\"token punctuation\\\">)</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`this._isMounted: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_isMounted<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_isMounted<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'data from server'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5000</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">componentWillUnmount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_isMounted <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>hello <span class=\\\"token keyword\\\">from</span> Small Component <span class=\\\"token operator\\\">...</span>  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n        data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n      ReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>Big <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n        document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>对于callback现在已经有更好的解决方案， 伟大的<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\\\">Promise</a>！如果这个promise能在componentWillUnmount()的时候cancel掉就完美了。可惜google之后发现官方Promise实现目前并不支持cancel！<a href=\\\"http://stackoverflow.com/questions/29478751/how-to-cancel-an-emcascript6-vanilla-javascript-promise-chain\\\">看这里</a>， 还有<a href=\\\"http://stackoverflow.com/questions/30233302/promise-is-it-possible-to-force-cancel-a-promise\\\">这里</a>，所以除非你使用第三方Promise库， 比如据说性能比原生还好的<a href=\\\"http://bluebirdjs.com/docs/api/cancellation.html\\\">Bluebird</a>。</p>\\n<p>当然有些时候没必要搞这么复杂， facebook的<a href=\\\"https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html\\\">文档</a>给了一个简易的cancelable的Promise。最好代码如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token doctype\\\">&lt;!DOCTYPE html></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">charset</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>UTF-8<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>title</span><span class=\\\"token punctuation\\\">></span></span>Hello World<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>title</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://unpkg.com/react@latest/dist/react.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://unpkg.com/react-dom@latest/dist/react-dom.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://unpkg.com/babel-standalone@6.15.0/babel.min.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>root<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>text/babel<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\">\\n\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Big</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      small<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function-variable function\\\">closeSmall</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'closeSmall'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> small<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>hello <span class=\\\"token keyword\\\">from</span> Component <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>h2 onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>closeSmall<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>close small <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h2<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>small <span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">&lt;</span>Small <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Small</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'init data'</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'componentDidMount'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>cancelablePromise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">makeCancelable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fetch data from server succeed...'</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'data from server'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5000</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>cancelablePromise\\n      <span class=\\\"token punctuation\\\">.</span>promise\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'resolved: '</span><span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>reason <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>reason<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">' isCanceled'</span><span class=\\\"token punctuation\\\">,</span> reason<span class=\\\"token punctuation\\\">.</span>isCanceled<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">componentWillUnmount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>cancelablePromise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cancel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// Cancel the promise</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>hello <span class=\\\"token keyword\\\">from</span> Small Component <span class=\\\"token operator\\\">...</span>  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n      data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">makeCancelable</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> hasCanceled_ <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> wrappedPromise <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      hasCanceled_ <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> isCanceled<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      hasCanceled_ <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> isCanceled<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    promise<span class=\\\"token punctuation\\\">:</span> wrappedPromise<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">cancel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      hasCanceled_ <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n      ReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>Big <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n        document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>well, it’s ok now!</p>\",\"timeToRead\":4,\"excerpt\":\"用了一年多的 React ，真是爽的不要不要的， 谁用谁知道， 一般人我不告诉他！ 最近用的过程中发现console里面总是出现这样的警告 虽不影响使用， 但是对于一个有代码洁癖的有追求的程序员来说， 怎么受得了呢！ react的error或者warning…\",\"fields\":{\"slug\":\"/react-ismounted-is-an-antipattern/\"},\"frontmatter\":{\"title\":\"react系列之isMounted is an Antipattern\",\"date\":\"2016-11-19\",\"category\":\"FE\",\"tags\":[\"react\"]}}},{\"node\":{\"html\":\"<p><a href=\\\"http://blog.coderzh.com/2015/09/13/use-webhook-automated-deploy-hugo/?hmsr=toutiao.io&#x26;utm_medium=toutiao.io&#x26;utm_source=toutiao.io\\\">http://blog.coderzh.com/2015/09/13/use-webhook-automated-deploy-hugo/?hmsr=toutiao.io&#x26;utm<em>medium=toutiao.io&#x26;utm</em>source=toutiao.io</a></p>\\n<p>…</p>\",\"timeToRead\":1,\"excerpt\":\"http://blog.coderzh.com/2015/09/13/use-webhook-automated-deploy-hugo/?hmsr=toutiao.io&utm medium=toutiao.io&utm source=toutiao.io …\",\"fields\":{\"slug\":\"/auto-deploy-githubPages-by-webhook-md/\"},\"frontmatter\":{\"title\":\"利用webhook实现github pages的自动部署\",\"date\":\"2015-09-16\",\"category\":\"default\",\"tags\":[\"github\",\"webhook\",\"ssh\"]}}},{\"node\":{\"html\":\"<p>javascript es6 arrow function.</p>\\n<!-- more -->\\n<p>开始学习ES6.\\n<a href=\\\"https://hacks.mozilla.org/category/es6-in-depth/\\\">https://hacks.mozilla.org/category/es6-in-depth/</a></p>\",\"timeToRead\":1,\"excerpt\":\"javascript es6 arrow function. 开始学习ES6.\\n https://hacks.mozilla.org/category/es6-in-depth/\",\"fields\":{\"slug\":\"/js-arrow-functions-md/\"},\"frontmatter\":{\"title\":\"javascript箭头函数\",\"date\":\"2015-09-07\",\"category\":\"JS\",\"tags\":[\"js\",\"javascript\",\"es6\"]}}},{\"node\":{\"html\":\"<p>微信公共号现在很火，一些简单的应用，做一个公共号比开发一款app成本要小很多，而且利用朋友圈的转发，相比app去app store里上架等着用户下载，要容易很多。</p>\\n<p>但是微信公共号的调试有点不方便，必须在微信<a href=\\\"https://mp.weixin.qq.com/\\\">管理后台</a>配置一个微信能访问到（公网）的url，然后在公共号里输入内容，微信以xml格式转发给这个url，url回复之后微信再将response回复给使用公共号的微信用户。当然微信也提供了<a href=\\\"http://mp.weixin.qq.com/debug\\\">调试工具</a>， 可以直接构造数据，方便调试各个接口。 但是依然需要一个公网的url作为接口。于是最原始的开发方式就是，修改代码，上传到server，（如果是有些静态语言还需要重启服务器），然后看是否正常work，如果不行的话，在可能错误的地方打出log，然后又是修改代码，上传server，重启。。。。。就这样，每次改一点点，你都可以泡杯咖啡了，老板就会觉得你很闲。参看<a href=\\\"http://www.oschina.net/news/15579/reasons-why-people-who-work-with-computers-seem-to\\\">为什么搞计算机工作的人总是看上去很清闲</a>。</p>\\n<!-- more -->\\n<p>有没有办法可以直接在本地调试呢，简单说，就是微信把数据传到我本地的电脑上，我每次改完代码，不用重新上传server，直接在本地加log等。经过研究，找到几个方法，记录下来，与大家分享，绝对能节约很多很多很多时间，然后就可以去陪妹纸了， 如果你有的话，没有的话<a href=\\\"http://www.zhihu.com/question/20385321\\\">here</a>。</p>\\n<p>第一种方法，你本地电脑有公网ip。比如家里宽带，没用路由，直接把网线插上，应该就是公网IP，吧。 如果家里有多人使用，你可以再路由器里配置NAT地址转换。自行<a href=\\\"https://www.google.com.hk/webhp?sourceid=chrome-instant&#x26;ion=1&#x26;espv=2&#x26;ie=UTF-8#q=NAT%20%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2\\\">Google</a>吧。</p>\\n<p>第二种，也是我搜到的最多的，用ngrok这个神器！网上一堆资料，比如<a href=\\\"http://www.mbnow.tk/2014/12/05/ngrok/\\\">这个</a>，我Google到的最多的也是这个，而且看上去也应该很简单。 <a href=\\\"http://www.oray.com/\\\">花生壳</a>我10年前用过（x，不小心暴露年龄了），应该是一样的。网上说，缺点是</p>\\n<blockquote>\\n<p>不过 ngrok 速度较慢，微信服务器对实时性要求较高，每次通信超过 5 秒便超时，所以此法也不建议使用。</p>\\n</blockquote>\\n<p>我觉得用花生壳的话可能好点，因为是国内的（有兴趣的可以自己去试试哈）。没有用ngrok试一下，因为“无法显示此网页”！网上就是“骗子”多，明明没有的网站，大家都描绘的绘声绘色。</p>\\n<p>第三种，用ssh建立反向通道。对了，使用此种方法，你还是需要一个公网IP的。 作为一名专业工程师，拥有公网 ip 地址的 VPS 服务器基本成了标配，<a href=\\\"http://www.qcloud.com/redirect.php?redirect=1002&#x26;cps_key=0a3641075e434bf76a016a44d2918e4a\\\">腾讯云VPS</a> 最便宜的一款每年也就几百块钱，平时挂挂自己喜欢的服务，做个站长，跑跑自己的开源项目甚爽。</p>\\n<ol>\\n<li>申请<a href=\\\"http://www.qcloud.com/redirect.php?redirect=1001&#x26;cps_key=0a3641075e434bf76a016a44d2918e4a\\\">腾讯云</a></li>\\n<li>本地安装ssh，如果是linux或mac，都是自带的。如果是windows的话，可以安装<a href=\\\"https://www.cygwin.com/\\\">Cygwin</a>，如果你嫌弃它太重了，安装了<a href=\\\"https://git-scm.com/download/gui/win\\\">Git</a>也是可以的。如果你也不想装或者不会装Git，额，(⊙o⊙)…，好吧，那你还是不要写程序了。</li>\\n<li>\\n<p>建立ssh反向通道。\\n这一步里有很多坑，我花了差不多一天才完全搞定。你们可以先参考这几篇文章，了解下原理啥的。</p>\\n<ul>\\n<li><a href=\\\"http://blog.zjutoe.net/?p=95\\\">http://blog.zjutoe.net/?p=95</a></li>\\n<li><a href=\\\"http://my.oschina.net/abcfy2/blog/177094\\\">http://my.oschina.net/abcfy2/blog/177094</a></li>\\n<li><a href=\\\"http://www.zzbaike.com/wiki/PuTTY/Putty%E5%BB%BA%E7%AB%8B%E9%9A%A7%E9%81%93%E7%9A%84%E6%96%B9%E6%B3%95\\\">http://www.zzbaike.com/wiki/PuTTY/Putty%E5%BB%BA%E7%AB%8B%E9%9A%A7%E9%81%93%E7%9A%84%E6%96%B9%E6%B3%95</a></li>\\n<li><a href=\\\"http://www.freeoa.net/osuport/netmanage/linux-ssh-tunneling-proxy_1892.html\\\">http://www.freeoa.net/osuport/netmanage/linux-ssh-tunneling-proxy_1892.html</a></li>\\n<li><a href=\\\"https://qdan.me/list/VOSXmsI4tv7fIciF\\\">https://qdan.me/list/VOSXmsI4tv7fIciF</a></li>\\n</ul>\\n</li>\\n</ol>\\n<p>好吧，来看我的具体一步一步做法。</p>\\n<ol>\\n<li>\\n<p>ssh -R 9999:localhost:9000 ubuntu@myserver<em>ip</em>address，输入密码</p>\\n</li>\\n<li>\\n<p>server上查看一下是否监听了9999端口，netstat -anltp | grep 9999</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">ubuntu@VM-39-45-ubuntu:~$ <span class=\\\"token function\\\">netstat</span> -anltp <span class=\\\"token operator\\\">|</span> <span class=\\\"token function\\\">grep</span> 9999\\n<span class=\\\"token punctuation\\\">(</span>Not all processes could be identified, non-owned process info\\nwill not be shown, you would have to be root to see it all.<span class=\\\"token punctuation\\\">)</span>\\ntcp        0      0 127.0.0.1:9999          0.0.0.0:*               LISTEN      -\\ntcp6       0      0 ::1:9999                :::*                    LISTEN      -</code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>在本地9000（我用的<a href=\\\"https://www.playframework.com/documentation/1.3.x/home\\\">play 1</a>，可以了解下它到底为啥这么好用<a href=\\\"http://segmentfault.com/a/1190000000374033\\\">Play Framework —— Java开发者的梦想框架</a>）上开启web服务</p>\\n</li>\\n<li>\\n<p>在浏览器里输入<a href=\\\"http://myserver_ip_address:9999%EF%BC%8C\\\">http://myserver<em>ip</em>address:9999，</a> 居然是没有响应！奇怪！直接在server上用curl <a href=\\\"http://localhost:9999\\\">http://localhost:9999</a> 是可以的！仔细看netstat输出，发现监听的9999端口是本地的！！！也就是说只能在本地访问，那有xx用啊！！！</p>\\n</li>\\n<li>\\n<p>看看ssh —help， 原来是可以指定bind_address的， man ssh看看</p>\\n<blockquote>\\n<p>By default, the listening socket on the server will be bound to the loopback interface only.  This may be overridden by specifying a bind<em>address. An empty bind</em>address, or the address ‘*’, indicates that the remote socket should listen on all interfaces.  Specifying a remote bind<em>address will only succeed if the server’s GatewayPorts option is enabled (see sshd</em>config(5)).</p>\\n</blockquote>\\n</li>\\n</ol>\\n<p>  继续看看 man sshd_config</p>\\n<blockquote>\\n<p>GatewayPorts\\nSpecifies whether remote hosts are allowed to connect to ports forwarded for the client.  By default, sshd(8) binds remote port forwardings to the\\nloopback address.  This prevents other remote hosts from connecting to forwarded ports.  GatewayPorts can be used to specify that sshd should allow</p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">remote port forwardings to bind to non-loopback addresses, thus allowing other hosts to connect.  The argument may be “no” to force remote port\\nforwardings to be available to the local host only, “yes” to force remote port forwardings to bind to the wildcard address, or “clientspecified” to\\nallow the client to select the address to which the forwarding is bound.  The default is “no”.</code></pre>\\n      </div>\\n<p> sudo vim /etc/ssh/sshd<em>config，添加GatewayPorts clientspecified，GatewayPorts yes也可以，退出，sudo service sshd restart，重启ssh服务。重新ssh -R :9999:localhost:9000 ubuntu@myserver</em>ip<em>address（仔细看，就9999前多了一个冒号:），输入密码，netstat -anltp | grep 9999，果然\\n<code class=\\\"language-text\\\">tcp        0      0 0.0.0.0:9999            0.0.0.0:*               LISTEN      -\\n\\ttcp6       0      0 :::9999                 :::*                    LISTEN      -</code>\\n浏览器里输入<a href=\\\"http://myserver\\\">http://myserver</a></em>ip_address:9999， 这回可以看到本地打出日志了。</p>\\n<ol start=\\\"6\\\">\\n<li>\\n<p>然后发现微信里面配置的url只能是80端口。简单，直接改成ssh -R :80:localhost:9000 ubuntu@myserver<em>ip</em>address就可以了，吧！奇怪，直接访问<a href=\\\"http://myserver_ip_address%EF%BC%8C\\\">http://myserver<em>ip</em>address，</a> 打不开网页！用netstat -anltp | grep 80，居然什么都没有！说明server没有在80端口监听呀！哦，对了ubuntu低于1024的端口是需要用root权限的。</p>\\n</li>\\n<li>\\n<p>ubuntu里root默认是关闭的。sudo passwd root，设置root密码后，可以打开。还需要在sudo vim /etc/ssh/sshd_config\\t添加</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">#PermitRootLogin without-password\\nPermitRootLogin yes</code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>重启ssh，再重新用root账号连接，ssh -R :80:localhost:9000 root@myserver<em>ip</em>address， 一切ok，<a href=\\\"http://myserver_ip_address%EF%BC%8C\\\">http://myserver<em>ip</em>address，</a> 本地代码打出日志，说明流量已经导入到本地了。</p>\\n</li>\\n<li>\\n<p>最后，就可以在<a href=\\\"http://mp.weixin.qq.com/debug\\\">微信公众平台接口调试工具</a>里调试了，配合<a href=\\\"http://playframework.com/\\\">Play!</a>的hot reload，随时修改代码，加log，然后马上就可以看到效果，不用重新编译，不用上传server，不用重启。。。。生活真是幸福美满啊。。。。</p>\\n</li>\\n<li>\\n<p>几个问题说明：</p>\\n<ol>\\n<li>直接用ssh连接的话，断开之后端口映射就没有了，可以用autossh， 只是我就是临时需要调试用的时候才ssh建立反向隧道，所以我不用autossh。</li>\\n<li>直接用root登陆ssh，开通80端口。应该是有安全隐患的， 吧！对安全不是很了解，但感觉直接用root肯定不是最佳实践。网上有各种方法解决这个问题，比如用iptables端口映射，或者nginx反向代理的，<a href=\\\"http://stackoverflow.com/questions/23281895/node-js-eacces-error-when-listening-on-http-80-port-permission-denied\\\">看这里</a>，参看1的原因，我没有采用。还是一次focus一个点吧，不然光环境就配置几天，有点太慢了。</li>\\n</ol>\\n</li>\\n</ol>\\n<p>通过本文的配置，可以在本地方便的开发调试微信公共号了。但是对于微信提供的<a href=\\\"http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html\\\">JS-SDK</a>，又存在另外的问题，这个我会<a href=\\\"http://my.oschina.net/magicly007/blog/480704\\\">另外写一篇blog来解决</a>。毕竟，我们程序员应该坚持<a href=\\\"https://en.wikipedia.org/wiki/Single_responsibility_principle\\\">Single responsibility principle</a>嘛。</p>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ol>\\n<li><a href=\\\"http://www.mbnow.tk/2014/12/05/ngrok/\\\">http://www.mbnow.tk/2014/12/05/ngrok/</a></li>\\n<li><a href=\\\"http://my.oschina.net/jfinal/blog/336861\\\">http://my.oschina.net/jfinal/blog/336861</a></li>\\n<li><a href=\\\"http://www.mbnow.tk/2014/12/05/ngrok/\\\">http://www.mbnow.tk/2014/12/05/ngrok/</a></li>\\n<li><a href=\\\"http://liyaodong.com/2015/07/06/%E5%BE%AE%E4%BF%A1%E8%B0%83%E8%AF%95%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/\\\">http://liyaodong.com/2015/07/06/%E5%BE%AE%E4%BF%A1%E8%B0%83%E8%AF%95%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</a></li>\\n<li><a href=\\\"http://my.oschina.net/abcfy2/blog/177094\\\">http://my.oschina.net/abcfy2/blog/177094</a></li>\\n<li><a href=\\\"http://www.zhihu.com/question/25456655\\\">http://www.zhihu.com/question/25456655</a></li>\\n<li><a href=\\\"http://my.oschina.net/atanl/blog/391611\\\">http://my.oschina.net/atanl/blog/391611</a></li>\\n</ol>\\n<blockquote>\\n<p>Written with <a href=\\\"https://stackedit.io/\\\">StackEdit</a>.</p>\\n</blockquote>\",\"timeToRead\":5,\"excerpt\":\"微信公共号现在很火，一些简单的应用，做一个公共号比开发一款app成本要小很多，而且利用朋友圈的转发，相比app去app store里上架等着用户下载，要容易很多。 但是微信公共号的调试有点不方便，必须在微信 管理后台 配置一个微信能访问到（公网）的url…\",\"fields\":{\"slug\":\"/ssh-reverse-tunnel-wx-local/\"},\"frontmatter\":{\"title\":\"利用SSH反向通道在本地调试微信公共号\",\"date\":\"2015-07-26\",\"category\":\"weixin\",\"tags\":[\"ssh\",\"weixin\",\"微信\"]}}},{\"node\":{\"html\":\"<p>引用<a href=\\\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\\\">阮老师</a>的话，</p>\\n<blockquote>\\n<p>喜欢写Blog的人，会经历三个阶段。</p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。\\n第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。\\n第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</code></pre>\\n      </div>\\n<p>自己比较懒惰，也就偶尔在<a href=\\\"http://my.oschina.net/magicly007/blog\\\">OC</a>上写点闲散的笔记，最近觉得还是应该要把自己的知识系统地梳理一下，便决定开一个独立的域名，自己记录Blog。</p>\\n<p>之前就了解Github Pages，也断断续续用MarkDown写过几篇放着，但是没有用<a href=\\\"http://jekyllrb.com/\\\">jekyll</a>，或者<a href=\\\"http://octopress.org/\\\">octpress</a>等串起来，上个月再次想配置好jekyll，结果在mac下始终配置不好（怪我咯）。今天决定一定要配置好，搜集了大量资料（google “jekyll 像黑客一样”），结果意外在<a href=\\\"http://www.douban.com/group/topic/39939196/\\\">http://www.douban.com/group/topic/39939196/</a>的回复中看到“用pelican吧 python的 还有hexo是nodejs的 ”。因为最近刚好在看nodejs，觉得很有兴趣，于是改为尝试<a href=\\\"https://hexo.io/zh-cn/\\\">hexo</a>。</p>\\n<!-- more -->\\n<h1 id=\\\"简介\\\"><a href=\\\"#%E7%AE%80%E4%BB%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>简介</h1>\\n<p><a href=\\\"http://ibruce.info/2013/11/22/hexo-your-blog/\\\">http://ibruce.info/2013/11/22/hexo-your-blog/</a></p>\\n<blockquote>\\n<p>hexo出自台湾大学生<a href=\\\"https://twitter.com/tommy351\\\">tommy351</a>之手，是一个基于<a href=\\\"https://nodejs.org/\\\">Node.js</a>的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。先看看tommy是如何吐槽Octopress的 →＿→ <a href=\\\"http://zespia.tw/blog/2012/10/11/hexo-debut/\\\">Hexo颯爽登場</a>。</p>\\n</blockquote>\\n<h1 id=\\\"安装\\\"><a href=\\\"#%E5%AE%89%E8%A3%85\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>安装</h1>\\n<p>首先安装Node.js，然后运行</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">\\t<span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> -g hexo-cli\\n\\t<span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> hexo --save</code></pre>\\n      </div>\\n<h1 id=\\\"初始化配置\\\"><a href=\\\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>初始化配置</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">\\thexo init\\n\\t<span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span></code></pre>\\n      </div>\\n<h1 id=\\\"写blog\\\"><a href=\\\"#%E5%86%99blog\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>写blog</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">\\thexo n</code></pre>\\n      </div>\\n<h1 id=\\\"生成\\\"><a href=\\\"#%E7%94%9F%E6%88%90\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>生成</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">\\thexo g</code></pre>\\n      </div>\\n<h1 id=\\\"本地预览\\\"><a href=\\\"#%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>本地预览</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">\\thexo s</code></pre>\\n      </div>\\n<h1 id=\\\"发布\\\"><a href=\\\"#%E5%8F%91%E5%B8%83\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>发布</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">\\thexo d</code></pre>\\n      </div>\\n<p>实在觉得没必<a href=\\\"https://en.wikipedia.org/wiki/Reinventing_the_wheel\\\">重复造轮子</a>，重写已经有很详细资料的东西。强烈推荐<a href=\\\"http://ibruce.info/2013/11/22/hexo-your-blog/\\\">这篇</a>。 我觉得基本涵盖了方方面面，如果以后有新东西这里面没有的，我再写吧~</p>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ol>\\n<li><a href=\\\"http://ibruce.info/2013/11/22/hexo-your-blog/\\\">http://ibruce.info/2013/11/22/hexo-your-blog/</a></li>\\n<li><a href=\\\"http://wsgzao.github.io/post/hexo-guide/\\\">http://wsgzao.github.io/post/hexo-guide/</a></li>\\n<li><a href=\\\"http://www.jianshu.com/p/05289a4bc8b2\\\">http://www.jianshu.com/p/05289a4bc8b2</a></li>\\n<li><a href=\\\"http://yangjian.me/workspace/building-blog-with-hexo/\\\">http://yangjian.me/workspace/building-blog-with-hexo/</a></li>\\n<li><a href=\\\"http://yangjian.me/workspace/building-blog-with-hexo/\\\">http://yangjian.me/workspace/building-blog-with-hexo/</a></li>\\n<li><a href=\\\"http://blog.csdn.net/jackystudio/article/details/16117585\\\">http://blog.csdn.net/jackystudio/article/details/16117585</a></li>\\n</ol>\\n<blockquote>\\n<p>Written with <a href=\\\"https://stackedit.io/\\\">StackEdit</a>.</p>\\n</blockquote>\",\"timeToRead\":2,\"excerpt\":\"引用 阮老师 的话， 喜欢写Blog的人，会经历三个阶段。 自己比较懒惰，也就偶尔在 OC 上写点闲散的笔记，最近觉得还是应该要把自己的知识系统地梳理一下，便决定开一个独立的域名，自己记录Blog。 之前就了解Github Pages，也断断续续用MarkDown…\",\"fields\":{\"slug\":\"/my-first-hexo-blog/\"},\"frontmatter\":{\"title\":\"我的第一个hexo Blog\",\"date\":\"2015-07-26\",\"category\":\"default\",\"tags\":[\"hexo\",\"github\",\"githubPages\"]}}},{\"node\":{\"html\":\"<p>需要在代码里面发邮件是很经常的事情，包括找回密码，通知用户领奖，监控报警等。</p>\\n<p>在Java里面实现比较简单，Oracle自己提供了<a href=\\\"http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-eeplat-419426.html#javamail-1.4.7-oth-JPR\\\">JavaMail</a>， 不过API比较底层，用起来不方便，可以自己封装下，也可以直接使用Apache的开源项目<a href=\\\"https://commons.apache.org/proper/commons-email/\\\">Commons Email</a>。 下面的代码，可以以小马哥的名义给自己发邮件，该功能仅用于测试，请谨慎使用，产生的问题，本人概不负责。 /微笑</p>\\n<!-- more -->\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">import</span> org<span class=\\\"token punctuation\\\">.</span>apache<span class=\\\"token punctuation\\\">.</span>commons<span class=\\\"token punctuation\\\">.</span>mail<span class=\\\"token punctuation\\\">.</span>EmailAttachment<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> org<span class=\\\"token punctuation\\\">.</span>apache<span class=\\\"token punctuation\\\">.</span>commons<span class=\\\"token punctuation\\\">.</span>mail<span class=\\\"token punctuation\\\">.</span>EmailException<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> org<span class=\\\"token punctuation\\\">.</span>apache<span class=\\\"token punctuation\\\">.</span>commons<span class=\\\"token punctuation\\\">.</span>mail<span class=\\\"token punctuation\\\">.</span>MultiPartEmail<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> java<span class=\\\"token punctuation\\\">.</span>net<span class=\\\"token punctuation\\\">.</span>MalformedURLException<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> java<span class=\\\"token punctuation\\\">.</span>net<span class=\\\"token punctuation\\\">.</span>URL<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Created by magicalli on 2015/7/6.\\n */</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MultiPartEmailTest</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> EmailException<span class=\\\"token punctuation\\\">,</span> MalformedURLException <span class=\\\"token punctuation\\\">{</span>\\n        MultiPartEmail email <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MultiPartEmail</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHostName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"smtp.tencent.com\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//        email.setAuthentication(\\\"youremail@tencent.com\\\", \\\"***\\\");//邮件服务器验证：用户名/密码</span>\\n        email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setCharset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"UTF-8\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setFrom</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"pony@qq.com\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"马化腾\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addTo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"magicalli@tencent.com\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setSubject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"加油奋斗！\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setMsg</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"come on! 加油奋斗吧，早晚有一天你会出任CEO，迎娶白富美，走上人生巅峰！ http://www.qq.com\\\\n\\\\n\\\\n pony\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        EmailAttachment attachment <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">EmailAttachment</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        attachment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setPath</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"d:/lzl.jpg\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// 本地文件</span>\\n        attachment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setDisposition</span><span class=\\\"token punctuation\\\">(</span>EmailAttachment<span class=\\\"token punctuation\\\">.</span>ATTACHMENT<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        attachment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setDescription</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"林志玲1\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        attachment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"lzl_1\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">attach</span><span class=\\\"token punctuation\\\">(</span>attachment<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        EmailAttachment attachment2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">EmailAttachment</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        attachment2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setURL</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">URL</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"http://mat1.qq.com/datalib_img/star/pic/lib/2007-01-15/2007011511104716122311.jpg\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//远程文件, 如果不是qq.com域名下，内网是访问不了的哈</span>\\n        attachment2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setDisposition</span><span class=\\\"token punctuation\\\">(</span>EmailAttachment<span class=\\\"token punctuation\\\">.</span>ATTACHMENT<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        attachment2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setDescription</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"林志玲2\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        attachment2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"lzl_2\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">attach</span><span class=\\\"token punctuation\\\">(</span>attachment2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><a href=\\\"https://commons.apache.org/proper/commons-email/\\\">Commons Email</a>支持好几种格式，包括简单文本，html，带附件等。需要的可以自己查看文档。</p>\\n<p>基于smtp的协议邮件协议很简单，大家甚至可以直接用telnet来发送，可以参考这边文章<a href=\\\"http://blog.csdn.net/ghsau/article/details/8602076\\\">Java Mail(一)：telnet实现发送收取邮件</a>. </p>\\n<p>一般公司内网没有验证发送方，你可以冒充公司任何一个员工发送邮件（包括你们老板），一般外面的邮件服务器，比如qq, 126, 163等，是需要验证密码的。</p>\\n<p>重申一遍，别用这个代码干坏事，后果自负， 与本人无关！</p>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ol>\\n<li><a href=\\\"http://blog.csdn.net/ghsau/article/details/8602076\\\">http://blog.csdn.net/ghsau/article/details/8602076</a></li>\\n<li><a href=\\\"http://blog.csdn.net/ghsau/article/details/17839983\\\">http://blog.csdn.net/ghsau/article/details/17839983</a></li>\\n<li><a href=\\\"http://haolloyin.blog.51cto.com/1177454/354320\\\">http://haolloyin.blog.51cto.com/1177454/354320</a></li>\\n<li><a href=\\\"http://www.runoob.com/java/java-sending-email.html\\\">http://www.runoob.com/java/java-sending-email.html</a></li>\\n<li><a href=\\\"https://commons.apache.org/proper/commons-email/\\\">https://commons.apache.org/proper/commons-email/</a></li>\\n<li><a href=\\\"http://blog.csdn.net/qiaqia609/article/details/11580589\\\">http://blog.csdn.net/qiaqia609/article/details/11580589</a></li>\\n</ol>\\n<blockquote>\\n<p>Written with <a href=\\\"https://stackedit.io/\\\">StackEdit</a>.</p>\\n</blockquote>\",\"timeToRead\":2,\"excerpt\":\"需要在代码里面发邮件是很经常的事情，包括找回密码，通知用户领奖，监控报警等。 在Java里面实现比较简单，Oracle自己提供了 JavaMail ， 不过API比较底层，用起来不方便，可以自己封装下，也可以直接使用Apache的开源项目 Commons Email…\",\"fields\":{\"slug\":\"/java-email/\"},\"frontmatter\":{\"title\":\"Java发送邮件\",\"date\":\"2015-07-13\",\"category\":\"Java\",\"tags\":[\"Java\",\"Email\",\"JavaMail\",\"Apache Commons\"]}}},{\"node\":{\"html\":\"<p>经常遇到一个问题，需要在内存里缓存一批数据来提高效率（避免每次都读取DB）。那问题来了，这些对象到底会占用多大内存呢，这直接决定了可以缓存多少条记录，以及上线之后是否会内存不够等问题。</p>\\n<p>来看几种解决方法。</p>\\n<!-- more -->\\n<h1 id=\\\"测试\\\"><a href=\\\"#%E6%B5%8B%E8%AF%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>测试</h1>\\n<p>实践是检验真理的唯一标准！比如你要想cache10w条记录，那你就把10w条记录加载到内存，然后看看到底用了多少内存。至于怎么看内存花了多少，你可以</p>\\n<ol>\\n<li>任务管理器</li>\\n<li>top</li>\\n<li>Java Runtime类</li>\\n<li>blabla。。。。</li>\\n</ol>\\n<p>我们来看看直接从Java程序里能获取到的Runtime。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">import</span> java<span class=\\\"token punctuation\\\">.</span>util<span class=\\\"token punctuation\\\">.</span>*<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Created by magicalli on 2015/2/3.\\n */</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">TestMemory</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">A</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> a<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"--- Memory Usage ---:\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        Runtime rt <span class=\\\"token operator\\\">=</span> Runtime<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getRuntime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">//打印总内存大小 //打印空闲内存大小 //打印已用内存大小 单位(字节)</span>\\n        <span class=\\\"token keyword\\\">long</span> usedMemory <span class=\\\"token operator\\\">=</span> rt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">totalMemory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> rt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">freeMemory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Total Memory= \\\"</span> <span class=\\\"token operator\\\">+</span> rt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">totalMemory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" Free Memory = \\\"</span> <span class=\\\"token operator\\\">+</span> rt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">freeMemory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" Used　Memory=\\\"</span> <span class=\\\"token operator\\\">+</span> usedMemory<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token comment\\\">// 把你要测试的占用内存的代码放在这里------start--------------</span>\\n        <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> N <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">100000</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">int</span><span class=\\\"token punctuation\\\">[</span>N<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        Integer<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> arr2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Integer</span><span class=\\\"token punctuation\\\">[</span>N<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        A<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> arrA <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">A</span><span class=\\\"token punctuation\\\">[</span>N<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> N<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//            arr2[i] = i;</span>\\n<span class=\\\"token comment\\\">//            arrA[i] = new A();</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">//        List&lt;Integer> list = new ArrayList&lt;Integer>();</span>\\n        Map<span class=\\\"token generics function\\\"><span class=\\\"token punctuation\\\">&lt;</span>Integer<span class=\\\"token punctuation\\\">,</span> String<span class=\\\"token punctuation\\\">></span></span> map <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">HashMap</span><span class=\\\"token generics function\\\"><span class=\\\"token punctuation\\\">&lt;</span>Integer<span class=\\\"token punctuation\\\">,</span> String<span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//        for (int i = 0; i &lt; N; i++) {</span>\\n<span class=\\\"token comment\\\">//            list.add(i);</span>\\n<span class=\\\"token comment\\\">//            map.put(i, UUID.randomUUID().toString());</span>\\n<span class=\\\"token comment\\\">//        }</span>\\n<span class=\\\"token comment\\\">//        System.out.println(map.size());</span>\\n        <span class=\\\"token comment\\\">// 把你要测试的占用内存的代码放在这里------end--------------</span>\\n\\n        <span class=\\\"token keyword\\\">long</span> usedMemory2 <span class=\\\"token operator\\\">=</span> rt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">totalMemory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> rt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">freeMemory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Total Memory= \\\"</span> <span class=\\\"token operator\\\">+</span> rt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">totalMemory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" Free Memory = \\\"</span> <span class=\\\"token operator\\\">+</span> rt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">freeMemory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" Used　Memory=\\\"</span> <span class=\\\"token operator\\\">+</span> usedMemory2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">long</span> objMemory <span class=\\\"token operator\\\">=</span> usedMemory2 <span class=\\\"token operator\\\">-</span> usedMemory<span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"object use memory: \\\"</span> <span class=\\\"token operator\\\">+</span> objMemory <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">1024</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\"k\\\"</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" each is: \\\"</span> <span class=\\\"token operator\\\">+</span> objMemory <span class=\\\"token operator\\\">/</span> N<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>上面方法的最大好处就是可以直接获得实际占用内存大小，是比较简单有效的方法。不好的地方就是如果数据量比较小，可能偏差比较大，而且你也不能解释为什么Integer[]比int[]占用内存大很多，关键是专家说：这种内存占用应该是心里算出来的，你还要去run一下程序，明显就low了，还想晋级？再练练吧！所以我们来看看怎么掐指一算！</p>\\n<h1 id=\\\"计算\\\"><a href=\\\"#%E8%AE%A1%E7%AE%97\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>计算</h1>\\n<p>这个需要了解JVM里的内存分布，知道每个对象都有object header，blabal。这里推荐一篇好文<a href=\\\"http://www.cnblogs.com/magialmoon/p/3757767.html\\\">一个Java对象到底占用多大内存？</a>，我就不重复了。</p>\\n<p>还看到另一种计算方式，用的Unsafe，不过感觉没有前面用Instrumentation的好。参考这里<a href=\\\"http://blog.csdn.net/bobpauline/article/details/20699233\\\">Java计算一个对象占用内存的大小</a></p>\\n<h1 id=\\\"线上查看\\\"><a href=\\\"#%E7%BA%BF%E4%B8%8A%E6%9F%A5%E7%9C%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>线上查看</h1>\\n<p>如果是要查看线上程序哪个对象占用了大量内存（比如分析内存泄露），那么可以使用jmap。</p>\\n<h1 id=\\\"相关知识\\\"><a href=\\\"#%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>相关知识</h1>\\n<p>你可能需要了解jps，jinfo，打包jar，manifest，查看jvm运行参数等。</p>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ol>\\n<li><a href=\\\"http://www.importnew.com/14948.html\\\">http://www.importnew.com/14948.html</a></li>\\n<li><a href=\\\"http://www.cnblogs.com/magialmoon/p/3757767.html\\\">http://www.cnblogs.com/magialmoon/p/3757767.html</a></li>\\n<li><a href=\\\"http://www.oschina.net/question/1_4486\\\">http://www.oschina.net/question/1_4486</a></li>\\n<li><a href=\\\"http://blog.csdn.net/bobpauline/article/details/20699233\\\">http://blog.csdn.net/bobpauline/article/details/20699233</a></li>\\n<li><a href=\\\"http://happyqing.iteye.com/blog/2013639\\\">http://happyqing.iteye.com/blog/2013639</a></li>\\n<li><a href=\\\"http://sunqi.iteye.com/blog/1917802\\\">http://sunqi.iteye.com/blog/1917802</a></li>\\n<li><a href=\\\"http://www.blogjava.net/stone2083/archive/2013/06/08/400410.html\\\">http://www.blogjava.net/stone2083/archive/2013/06/08/400410.html</a></li>\\n<li><a href=\\\"http://yueyemaitian.iteye.com/blog/2033046\\\">http://yueyemaitian.iteye.com/blog/2033046</a></li>\\n<li><a href=\\\"http://www.ibm.com/developerworks/cn/java/j-lo-jse61/index.html\\\">http://www.ibm.com/developerworks/cn/java/j-lo-jse61/index.html</a></li>\\n<li><a href=\\\"http://www.ibm.com/developerworks/cn/java/j-lo-instrumentation/\\\">http://www.ibm.com/developerworks/cn/java/j-lo-instrumentation/</a></li>\\n</ol>\\n<blockquote>\\n<p>Written with <a href=\\\"https://stackedit.io/\\\">StackEdit</a>.</p>\\n</blockquote>\",\"timeToRead\":2,\"excerpt\":\"经常遇到一个问题，需要在内存里缓存一批数据来提高效率（避免每次都读取DB）。那问题来了，这些对象到底会占用多大内存呢，这直接决定了可以缓存多少条记录，以及上线之后是否会内存不够等问题。 来看几种解决方法。 测试 实践是检验真理的唯一标准！比如你要想cache10w…\",\"fields\":{\"slug\":\"/how-big-is-a-java-object/\"},\"frontmatter\":{\"title\":\"一个Java对象到底有多大\",\"date\":\"2015-06-13\",\"category\":\"Java\",\"tags\":[\"Java\",\"JVM\",\"Java反射\"]}}},{\"node\":{\"html\":\"<p>java5之后的java.util.concurrent包是世界级并发大师Doug Lea的作品，里面主要实现了</p>\\n<ol>\\n<li>atomic包里Integer/Long对应的原子类，主要基于CAS；</li>\\n<li>一些同步子，包括Lock，CountDownLatch，Semaphore，FutureTask等，这些都是基于AbstractQueuedSynchronizer类；</li>\\n<li>关于线程执行的Executors类等；</li>\\n<li>一些并发的集合类，比如ConcurrentHashMap，ConcurrentLinkedQueue，CopyOnWriteArrayList等。</li>\\n</ol>\\n<p>今天我们主要介绍AbstractQueuedSynchronizer这个可以说是最核心的类，没有之一。整个concurrent包里，基本都直接或间接地用到了这个类。Doug Lea的这篇<a href=\\\"http://gee.cs.oswego.edu/dl/papers/aqs.pdf\\\">论文</a>里面讲AQS的实现。</p>\\n<!-- more -->\\n<h1 id=\\\"aqs\\\"><a href=\\\"#aqs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>AQS</h1>\\n<p>首先，我们来想象一下，一间屋里有一个大家都想要得到的会让你很爽的东西（something which makes you so happy, e.g. W.C）。当有人进去把门关起来在独占享用的时候，其他人就只能在外面排队等待，既然在等待，你就不能老是去敲门说哎，好了没有啊。老是这样的话里面的人就很不爽了，而且你可以利用这点等待时间干点别的，比如看看小说视频背背单词或者就干脆椅子上睡觉，当前面独占的人爽完之后，就会出来说，啊，好爽，到你们了。然后大家可能按照排队顺序获取或者大家疯抢这个状态，有可能一个人自己进去独占，有可能几个人说，哎没关系，我们可以一起来。然后他们进去爽，爽完之后再出来通知下一个。</p>\\n<p>我们来把上面这段话翻译成AQS里面的术语。有一个状态state，会有多个Thread尝试获取，当一个Thread独占（EXCLUSIVE，比如Lock）之后，其他后面到来的Thread就会被放到一个Queue的队尾（tail），然后睡眠（park），一直等到前面的Thread唤醒（unpark）它，当然这里有可能被假唤醒（就好比你定了闹钟8点起床，结果7点就自然醒或者被外面车吵醒），所以这个Thread会判断一下是不是到自己了，没有的话就继续park（在一个死循环里）；当拥有state的Thread释放（release）之后，它会唤醒Queue中的下一个Thread（unparkSuccessor）。然后下一个Thread获取（acquire）到state，完成自己的任务，然后继续unparkSuccessor。前面主要说的是EXCLUSIVE模式，AQS还支持共享（SHARED）模式，区别在于尝试获取（tryAcquireShared）的时候即使之前已经有Thread获取了state，但是可能仍然能获取（比如ReadLock）。同样释放（doReleaseShared）的时候除了通知Queue里面第一个（head），还会继续通知后续的节点（Node），只要它们是SHARED。</p>\\n<p>AQS就是实现了：</p>\\n<ol>\\n<li>自动管理这个同步状态state（int类型），更新的时候需要用CAS保证原子性</li>\\n<li>阻塞和唤醒线程park/unpark</li>\\n<li>队列管理，一个双向链表实现queue</li>\\n</ol>\\n<p>AQS是一个abstract class，可以通过继承AQS，定义state的含义，以及tryAcquire，tryRelease，以及对应的share模式下tryAcquireShared，tryReleaseShared这几个方法，定义出自己想要的同步子（Synchronizers）。一般而言，是定义一个内部类Sync extends AQS，实现前面说的几个方法，然后再包一层，暴露出相应的方法。这样做的好处是你可以在包装器类里面取更直观的名字，如ReentrantLock里的lock，unlock和CountDownLatch里的countDown，await，而不是太通用的acquire和release等。而且AQS里面一些方法是为了监控和调试使用，直接暴露出来也不好。</p>\\n<p>下面我们来看J.U.C里面两个常用的Synchronizers。</p>\\n<h1 id=\\\"reentrantlock\\\"><a href=\\\"#reentrantlock\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ReentrantLock</h1>\\n<h2 id=\\\"使用\\\"><a href=\\\"#%E4%BD%BF%E7%94%A8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>使用</h2>\\n<p>ReentrantLock的语义跟synchronized关键字基本一样，而且我之前看<a href=\\\"http://book.douban.com/subject/6522893/\\\">《深入理解Java虚拟机》</a>里面的评测说JDK6之后，两者的效率基本一致了（JDK5之前ReentrantLock要比synchronized快很多）。Javadoc里面说基本用法如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">X</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ReentrantLock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">m</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// block until condition holds</span>\\n    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// ... method body</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n      lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"源码\\\"><a href=\\\"#%E6%BA%90%E7%A0%81\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>源码</h2>\\n<p>ReentrantLock用state表示是否被锁，0表示没有线程获取到锁，>=1表示某个线程获取了N次锁（因为是重入的，只要保证lock和unlock成对出现就没有问题）。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token comment\\\">/** Synchronizer providing all implementation mechanics */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> Sync sync<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Sync</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">AbstractQueuedSynchronizer</span> <span class=\\\"token punctuation\\\">{</span></code></pre>\\n      </div>\\n<p>定义了一个内部类，基本任务都代理给sync完成。而Sync又是一个abstract class，这里主要是因为实现了两种抢占锁的机制，公平锁和非公平锁。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">FairSync</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Sync</span>\\n\\t\\n\\t<span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">NonfairSync</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Sync</span></code></pre>\\n      </div>\\n<p>所谓公平不公平简单来说就是本文开头说的，当资源释放的时候，大家是按照排队顺序先到先得，还是有人插队大家疯抢。</p>\\n<p>提供了两个构造函数：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">ReentrantLock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">NonfairSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//默认非公平锁，AQS论文说非公平锁效率高些，理由其实很简单，公平锁通知队列第一个节点，要把它唤醒，而唤醒是需要时间的，在锁释放到第一个节点被唤醒这段时间其实锁是可以用但是没有被用的（available but not used）；而非公平锁，释放了之后立马就可以被别人用，所以提高了效率，但是有可能导致饥饿锁，这个就要具体看业务需求了。</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">ReentrantLock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">boolean</span> fair<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync <span class=\\\"token operator\\\">=</span> fair <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">FairSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">NonfairSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//指定公平与否</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>加锁的实现</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>简单代理给了sync，在FairSync里为</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token function\\\">acquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>acquire的实现在AQS里面：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">acquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">tryAcquire</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n            <span class=\\\"token function\\\">acquireQueued</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">addWaiter</span><span class=\\\"token punctuation\\\">(</span>Node<span class=\\\"token punctuation\\\">.</span>EXCLUSIVE<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token function\\\">selfInterrupt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>tryAcquire是要在子类里自己实现的，在FairSync如下;</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t\\t <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryAcquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> acquires<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">final</span> Thread current <span class=\\\"token operator\\\">=</span> Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">int</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//0表示锁没有被线程用，1表示已经有线程占用</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">hasQueuedPredecessors</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token comment\\\">//判断自己是否是第一个节点，实现公平</span>\\n                    <span class=\\\"token function\\\">compareAndSetState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> acquires<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//CAS更新状态</span>\\n                    <span class=\\\"token function\\\">setExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span>current<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//设置当前线程拥有状态</span>\\n                    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>current <span class=\\\"token operator\\\">==</span> <span class=\\\"token function\\\">getExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//1表示已经有线程占用，再判断一下是否被当前线程占用，来实现重入（Reentrant）特性</span>\\n                <span class=\\\"token keyword\\\">int</span> nextc <span class=\\\"token operator\\\">=</span> c <span class=\\\"token operator\\\">+</span> acquires<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nextc <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Maximum lock count exceeded\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>nextc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//更新状态</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>如果获取失败，addWaiter(Node.EXCLUSIVE)将当前线程加入队尾</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">private</span> Node <span class=\\\"token function\\\">addWaiter</span><span class=\\\"token punctuation\\\">(</span>Node mode<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        Node node <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Node</span><span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> mode<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//用当前线程构造Node，独占模式</span>\\n        <span class=\\\"token comment\\\">// Try the fast path of enq; backup to full enq on failure</span>\\n        Node pred <span class=\\\"token operator\\\">=</span> tail<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>pred <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            node<span class=\\\"token punctuation\\\">.</span>prev <span class=\\\"token operator\\\">=</span> pred<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetTail</span><span class=\\\"token punctuation\\\">(</span>pred<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//快速判断，CAS更新tail节点</span>\\n                pred<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> node<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token function\\\">enq</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//如果失败，进入enq方法</span>\\n        <span class=\\\"token keyword\\\">return</span> node<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n\\t <span class=\\\"token keyword\\\">private</span> Node <span class=\\\"token function\\\">enq</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">final</span> Node node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            Node t <span class=\\\"token operator\\\">=</span> tail<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>t <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// Must initialize</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetHead</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Node</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">//如果还没有head，CAS初始化一个head</span>\\n                    tail <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//这段代码跟addWaiter里一样，CAS更新tail节点</span>\\n                node<span class=\\\"token punctuation\\\">.</span>prev <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetTail</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    t<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">return</span> t<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>现在我们已经将获取不到锁的线程加入队尾了，现在要将它挂起acquireQueued(addWaiter(Node.EXCLUSIVE), arg))：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">acquireQueued</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">final</span> Node node<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">boolean</span> failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">boolean</span> interrupted <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//在一个死循环中，避免假唤醒</span>\\n                <span class=\\\"token keyword\\\">final</span> Node p <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">predecessor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//获取当前节点的前一个节点，如果是head说明自己是第一个可以获取资源的线程，实现公平</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>p <span class=\\\"token operator\\\">==</span> head <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token function\\\">tryAcquire</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//是第一个可以获取资源的线程并且尝试获取成功</span>\\n                    <span class=\\\"token function\\\">setHead</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    p<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// help GC</span>\\n                    failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">return</span> interrupted<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">shouldParkAfterFailedAcquire</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                    <span class=\\\"token function\\\">parkAndCheckInterrupt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">//没有获取到资源，睡眠park去</span>\\n                    interrupted <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>failed<span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">cancelAcquire</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">parkAndCheckInterrupt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        LockSupport<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">park</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">interrupted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>上面完成了获取锁的过程，简单来说就是尝试获取，失败就加入队尾，挂起，等待被唤醒。</p>\\n<p>下面来看看释放锁</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">release</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//代理给sync，调用AQS的release</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">//下面代码在AQS中</span>\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">release</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">tryRelease</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//尝试释放资源，需要在子类里实现</span>\\n            Node h <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>h <span class=\\\"token operator\\\">!=</span> null <span class=\\\"token operator\\\">&amp;&amp;</span> h<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">!=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">unparkSuccessor</span><span class=\\\"token punctuation\\\">(</span>h<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//通知下一个节点</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">unparkSuccessor</span><span class=\\\"token punctuation\\\">(</span>Node node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">/*\\n         * If status is negative (i.e., possibly needing signal) try\\n         * to clear in anticipation of signalling.  It is OK if this\\n         * fails or if status is changed by waiting thread.\\n         */</span>\\n        <span class=\\\"token keyword\\\">int</span> ws <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>waitStatus<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>ws <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token function\\\">compareAndSetWaitStatus</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> ws<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token comment\\\">/*\\n         * Thread to unpark is held in successor, which is normally\\n         * just the next node.  But if cancelled or apparently null,\\n         * traverse backwards from tail to find the actual\\n         * non-cancelled successor.\\n         */</span>\\n         <span class=\\\"token comment\\\">// 主要在这里找到下一个需要通知的节点，如果node.next就是需要通知的节点，则直接通知；否则，可能node.next == null（原因是双向链表设置b.pre = a和a.next = b的时候不能保证原子性，只能保证b.pre = a成功，这时候另一条线程可能看到a.next == null）或者s.waitStatus > 0（原因是线程等不及被取消了static final int CANCELLED = 1;），这个时候就要从队尾tail开始找，找到离队头head最近的一个需要通知的节点Node。</span>\\n        Node s <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s <span class=\\\"token operator\\\">==</span> null <span class=\\\"token operator\\\">||</span> s<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            s <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>Node t <span class=\\\"token operator\\\">=</span> tail<span class=\\\"token punctuation\\\">;</span> t <span class=\\\"token operator\\\">!=</span> null <span class=\\\"token operator\\\">&amp;&amp;</span> t <span class=\\\"token operator\\\">!=</span> node<span class=\\\"token punctuation\\\">;</span> t <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">.</span>prev<span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                    s <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span>\\n            LockSupport<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unpark</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">.</span>thread<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//唤醒线程</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>看看需要在子类里实现的tryRelease：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t\\t<span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryRelease</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> releases<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">int</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> releases<span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//释放锁，state减去相应的值</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token function\\\">getExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IllegalMonitorStateException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//避免A线程锁了之后，B线程故意捣乱释放锁</span>\\n            <span class=\\\"token keyword\\\">boolean</span> free <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//当前线程已经完全释放了锁</span>\\n                free <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token function\\\">setExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span>null<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//释放锁的拥有者</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//设置状态，这个方面没有同步，没有CAS，有同学问过岂不是有线程并发问题？其实到这里，只有一个线程会调用这个方法，所以不会有并发错误，仔细想想，是吧？是吧？</span>\\n            <span class=\\\"token keyword\\\">return</span> free<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>到这里，基本都已经完成，对了，还没有说非公平锁NonfairSync是怎么抢占锁的。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t\\t<span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">//先抢一把（插队），万一成功了就不排队，不公平性就体现在这里！</span>\\n                <span class=\\\"token function\\\">setExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">else</span>\\n                <span class=\\\"token function\\\">acquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>跟FairSync.lock()对比，可以看出，只是在acquire(1)之前，先抢一把，抢不到才乖乖的去排队。</p>\\n<p>我们再看看NonfairSync.tryAcquire()怎么实现的</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t\\t<span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryAcquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> acquires<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">nonfairTryAcquire</span><span class=\\\"token punctuation\\\">(</span>acquires<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//调用父类方法nonfairTryAcquire</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">nonfairTryAcquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> acquires<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">final</span> Thread current <span class=\\\"token operator\\\">=</span> Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">int</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> acquires<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//跟FairSync.tryAcquire只有这里一行有差异，即少了!hasQueuedPredecessors()，也就是说不判断前面有没有人，任何时候只要它醒来，都会去抢，所以不公平！============刚又看了一遍，发现其实final boolean acquireQueued(final Node node, int arg)方法里已经有node.predecessor() == head的判断，感觉这个不公平的tryAcquire貌似没有意义，各位看官怎么看呢，请留言哈，谢谢~</span>\\n                    <span class=\\\"token function\\\">setExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span>current<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>current <span class=\\\"token operator\\\">==</span> <span class=\\\"token function\\\">getExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">int</span> nextc <span class=\\\"token operator\\\">=</span> c <span class=\\\"token operator\\\">+</span> acquires<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nextc <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// overflow</span>\\n                    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Maximum lock count exceeded\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>nextc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"countdownlatch\\\"><a href=\\\"#countdownlatch\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>CountDownLatch</h1>\\n<p>我们之前说了，AQS支持独占EXCLUSIVE和共享SHARED两种模式，而刚刚的ReentrantLock的就是独占模式，我们来看看一个使用共享模式的类。</p>\\n<h2 id=\\\"使用-1\\\"><a href=\\\"#%E4%BD%BF%E7%94%A8-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>使用</h2>\\n<p>CountDownLatch就好比一道门，它可以用来等所有资源都到齐了，才开门，让这些线程同时通过。比如如下是CountDownLatch一个通用用法：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">package</span> concurrentStudy<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> java<span class=\\\"token punctuation\\\">.</span>util<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span>CountDownLatch<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Created by magicalli on 2014/12/13.\\n */</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">IndexPlusPlusTest01</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> NThreads <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// 线程数</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> M <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">100000</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//循环次数，太小的话（比如10）可能看不出来效果</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">volatile</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">int</span> n <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//加volatile的目的是为了证明volatile没有“原子性”！</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">final</span> CountDownLatch startGate <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">CountDownLatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> CountDownLatch endGate <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">CountDownLatch</span><span class=\\\"token punctuation\\\">(</span>NThreads<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> NThreads<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Thread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Runnable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token annotation punctuation\\\">@Override</span>\\n                <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n                        startGate<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//所有线程start之后等待“门“打开，保证同时真正开始运行</span>\\n                    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">InterruptedException</span> e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        e<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">printStackTrace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n\\n                    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> M<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        n <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n\\n                    endGate<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">countDown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        startGate<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">countDown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//打开“门”，让所有线程同时run起来</span>\\n        <span class=\\\"token keyword\\\">long</span> t1 <span class=\\\"token operator\\\">=</span> System<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentTimeMillis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        endGate<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//等所有线程都结束之后才打印n，否则总是会打出错误的n；我见过这里用Thread.sleep()，但是问题在于，你怎么知道该等多久才能保证所有线程结束以及刚好结束呢？！</span>\\n        <span class=\\\"token keyword\\\">long</span> t2 <span class=\\\"token operator\\\">=</span> System<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentTimeMillis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"cost time: \\\"</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"n: \\\"</span> <span class=\\\"token operator\\\">+</span> n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>对了，上面代码是拿来验证volatile不具备原子性的，是错误的代码哦。如果想并发安全，大家可以想想可以用哪些方式实现。</p>\\n<h2 id=\\\"源码-1\\\"><a href=\\\"#%E6%BA%90%E7%A0%81-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>源码</h2>\\n<p>CountDownLatch同样也是定义了一个继承自AQS的内部类Sync：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Sync</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">AbstractQueuedSynchronizer</span></code></pre>\\n      </div>\\n<p>构造函数如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">CountDownLatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> count<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"count &lt; 0\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sync <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Sync</span><span class=\\\"token punctuation\\\">(</span>count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>count表示有多少个任务还在运行，每个Thread完成了任务或者准备好开始之前，就会调用countDown方法将count-1，当count==0时候，await就不再阻塞，所有在上面阻塞的Thread都可以顺利通过。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">acquireSharedInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>直接调用AQS的acquireSharedInterruptibly方法，从方法名可以看出，支持中断响应</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">acquireSharedInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">interrupted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InterruptedException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//响应中断</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token function\\\">doAcquireSharedInterruptibly</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>tryAcquireShared在子类中实现：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">        <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> acquires<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//如果state为0，说明所有Thread完成任务，可以不阻塞了</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>如果没有获取到，将Thread加入队尾，挂起。下面这个方法跟独占模式下acquireQueued(addWaiter(Node.EXCLUSIVE), arg))这个方法代码是基本一致的。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">doAcquireSharedInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">final</span> Node node <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">addWaiter</span><span class=\\\"token punctuation\\\">(</span>Node<span class=\\\"token punctuation\\\">.</span>SHARED<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//共享模式</span>\\n        <span class=\\\"token keyword\\\">boolean</span> failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">final</span> Node p <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">predecessor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>p <span class=\\\"token operator\\\">==</span> head<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">int</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token function\\\">setHeadAndPropagate</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> r<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//跟EXCLUSIVE的一大区别</span>\\n                        p<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// help GC</span>\\n                        failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">shouldParkAfterFailedAcquire</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                    <span class=\\\"token function\\\">parkAndCheckInterrupt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InterruptedException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//响应中断，这里直接抛异常</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>failed<span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">cancelAcquire</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">setHeadAndPropagate</span><span class=\\\"token punctuation\\\">(</span>Node node<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> propagate<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        Node h <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Record old head for check below</span>\\n        <span class=\\\"token function\\\">setHead</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">/*\\n         * Try to signal next queued node if:\\n         *   Propagation was indicated by caller,\\n         *     or was recorded (as h.waitStatus either before\\n         *     or after setHead) by a previous operation\\n         *     (note: this uses sign-check of waitStatus because\\n         *      PROPAGATE status may transition to SIGNAL.)\\n         * and\\n         *   The next node is waiting in shared mode,\\n         *     or we don't know, because it appears null\\n         *\\n         * The conservatism in both of these checks may cause\\n         * unnecessary wake-ups, but only when there are multiple\\n         * racing acquires/releases, so most need signals now or soon\\n         * anyway.\\n         */</span>\\n         <span class=\\\"token comment\\\">// 如果当前节点是愿意共享，并且下一个节点也是愿意共享的，那么就进入doReleaseShared，唤醒下一个节点，下面会详解</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>propagate <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> h <span class=\\\"token operator\\\">==</span> null <span class=\\\"token operator\\\">||</span> h<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span>\\n            <span class=\\\"token punctuation\\\">(</span>h <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> null <span class=\\\"token operator\\\">||</span> h<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            Node s <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s <span class=\\\"token operator\\\">==</span> null <span class=\\\"token operator\\\">||</span> s<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">doReleaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>前面完成了等待CountDownLatch的count变成0的过程，下面看看countDown</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">countDown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">releaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//调用AQS的</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token comment\\\">// AQS中</span>\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">releaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">tryReleaseShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//尝试释放，需要在子类中实现</span>\\n            <span class=\\\"token function\\\">doReleaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//真正释放</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t\\t<span class=\\\"token comment\\\">// Sync子类中实现</span>\\n\\t    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryReleaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> releases<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// Decrement count; signal when transition to zero</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">int</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">int</span> nextc <span class=\\\"token operator\\\">=</span> c<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetState</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">,</span> nextc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">// 在死循环中CAS将count-1</span>\\n                    <span class=\\\"token keyword\\\">return</span> nextc <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        \\n    <span class=\\\"token comment\\\">// AQS中</span>\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">doReleaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">/*\\n         * Ensure that a release propagates, even if there are other\\n         * in-progress acquires/releases.  This proceeds in the usual\\n         * way of trying to unparkSuccessor of head if it needs\\n         * signal. But if it does not, status is set to PROPAGATE to\\n         * ensure that upon release, propagation continues.\\n         * Additionally, we must loop in case a new node is added\\n         * while we are doing this. Also, unlike other uses of\\n         * unparkSuccessor, we need to know if CAS to reset status\\n         * fails, if so rechecking.\\n         */</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            Node h <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>h <span class=\\\"token operator\\\">!=</span> null <span class=\\\"token operator\\\">&amp;&amp;</span> h <span class=\\\"token operator\\\">!=</span> tail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">int</span> ws <span class=\\\"token operator\\\">=</span> h<span class=\\\"token punctuation\\\">.</span>waitStatus<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>ws <span class=\\\"token operator\\\">==</span> Node<span class=\\\"token punctuation\\\">.</span>SIGNAL<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSetWaitStatus</span><span class=\\\"token punctuation\\\">(</span>h<span class=\\\"token punctuation\\\">,</span> Node<span class=\\\"token punctuation\\\">.</span>SIGNAL<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                        <span class=\\\"token keyword\\\">continue</span><span class=\\\"token punctuation\\\">;</span>            <span class=\\\"token comment\\\">// loop to recheck cases</span>\\n                    <span class=\\\"token function\\\">unparkSuccessor</span><span class=\\\"token punctuation\\\">(</span>h<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//遍历queue，通知所有SHARED的节点，因为是共享模式，这些Node都应该被唤醒，直到遇到某个EXCLUSIVE的Node</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>ws <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                         <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSetWaitStatus</span><span class=\\\"token punctuation\\\">(</span>h<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> Node<span class=\\\"token punctuation\\\">.</span>PROPAGATE<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">continue</span><span class=\\\"token punctuation\\\">;</span>                <span class=\\\"token comment\\\">// loop on failed CAS</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>h <span class=\\\"token operator\\\">==</span> head<span class=\\\"token punctuation\\\">)</span>                   <span class=\\\"token comment\\\">// loop if head changed</span>\\n                <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>unparkSuccessor跟之前独占模式里面的是同一个函数，即调用unpark唤醒Thread。</p>\\n<p>我们知道为了避免获取不到锁长时间等待，一般阻塞的方法都会支持带超时时间的方法，比如CountDownLatch里就有</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> timeout<span class=\\\"token punctuation\\\">,</span> TimeUnit unit<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">tryAcquireSharedNanos</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> unit<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toNanos</span><span class=\\\"token punctuation\\\">(</span>timeout<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>调用AQS里面的tryAcquireSharedNanos方法</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryAcquireSharedNanos</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">long</span> nanosTimeout<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">interrupted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InterruptedException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span>\\n            <span class=\\\"token function\\\">doAcquireSharedNanos</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">,</span> nanosTimeout<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">doAcquireSharedNanos</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">long</span> nanosTimeout<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nanosTimeout <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span>L<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">long</span> deadline <span class=\\\"token operator\\\">=</span> System<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">nanoTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> nanosTimeout<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> Node node <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">addWaiter</span><span class=\\\"token punctuation\\\">(</span>Node<span class=\\\"token punctuation\\\">.</span>SHARED<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">boolean</span> failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">final</span> Node p <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">predecessor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>p <span class=\\\"token operator\\\">==</span> head<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">int</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token function\\\">setHeadAndPropagate</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> r<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                        p<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// help GC</span>\\n                        failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                nanosTimeout <span class=\\\"token operator\\\">=</span> deadline <span class=\\\"token operator\\\">-</span> System<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">nanoTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nanosTimeout <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span>L<span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//如果已经没时间了，直接return false</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">shouldParkAfterFailedAcquire</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                    nanosTimeout <span class=\\\"token operator\\\">></span> spinForTimeoutThreshold<span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">//大于某个阈值，才park，否则进入自旋</span>\\n                    LockSupport<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parkNanos</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> nanosTimeout<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//调用带超时的park方法</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">interrupted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InterruptedException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>failed<span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">cancelAcquire</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>可以看到，跟不带超时的doAcquireSharedInterruptibly方法相比，区别主要在于每次for循环期间，检查时间是否过期和调用带超时的park。nanosTimeout > spinForTimeoutThreshold这个判断主要是因为park/unpark本身也需要花时间，为了更准确地完成超时的机制，在超时时间马上就要到了的时候，就进入自旋，不再park了，这应该是Doug Lea测试了park/unpark时间比1000纳秒要长吧。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token comment\\\">/**\\n     * The number of nanoseconds for which it is faster to spin\\n     * rather than to use timed park. A rough estimate suffices\\n     * to improve responsiveness with very short timeouts.\\n     */</span>\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">long</span> spinForTimeoutThreshold <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1000</span>L<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h1 id=\\\"总结\\\"><a href=\\\"#%E6%80%BB%E7%BB%93\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>总结</h1>\\n<p>J.U.C里AQS是一个相当核心的类，可以说没有它就没有J.U.C包。推荐大家看看<a href=\\\"http://gee.cs.oswego.edu/dl/papers/aqs.pdf\\\">AQS</a>这篇论文（网上有一些翻译，推荐大家还是看原文吧）。主要是用一个state表示状态，子类可以根据需要来定义state的含义，以及获取释放资源时具体如何操作state，当然需要通过CAS实现原子更改。当获取不到state的时候，线程加入队列，挂起。释放之后，唤醒队列中的线程。AQS支持两种模式，独占EXCLUSIVE和共享SHARED。J.U.C里本身也有很多直接继承AQS实现的类，包括Lock，CountDownLatch，Semaphore，FutureTask等，如果这些还不能满足你的使用，那么可以直接继承AQS来实现需要。</p>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ol>\\n<li><a href=\\\"http://gee.cs.oswego.edu/dl/papers/aqs.pdf\\\">http://gee.cs.oswego.edu/dl/papers/aqs.pdf</a></li>\\n<li><a href=\\\"http://ifeve.com/introduce-abstractqueuedsynchronizer/\\\">http://ifeve.com/introduce-abstractqueuedsynchronizer/</a></li>\\n<li><a href=\\\"http://ifeve.com/jdk1-8-abstractqueuedsynchronizer/\\\">http://ifeve.com/jdk1-8-abstractqueuedsynchronizer/</a></li>\\n<li><a href=\\\"http://ifeve.com/jdk1-8-abstractqueuedsynchronizer-part2/\\\">http://ifeve.com/jdk1-8-abstractqueuedsynchronizer-part2/</a></li>\\n<li><a href=\\\"http://book.douban.com/subject/6522893/\\\">http://book.douban.com/subject/6522893/</a></li>\\n<li><a href=\\\"http://my.oschina.net/magicly007/blog/364102\\\">http://my.oschina.net/magicly007/blog/364102</a></li>\\n</ol>\\n<blockquote>\\n<p>Written with <a href=\\\"https://stackedit.io/\\\">StackEdit</a>.</p>\\n</blockquote>\",\"timeToRead\":9,\"excerpt\":\"java5之后的java.util.concurrent包是世界级并发大师Doug Lea的作品，里面主要实现了 atomic包里Integer/Long对应的原子类，主要基于CAS； 一些同步子，包括Lock，CountDownLatch，Semaphore…\",\"fields\":{\"slug\":\"/java-concurrrency-3-juc-source-code-read/\"},\"frontmatter\":{\"title\":\"Java Concurrency（三）——J.U.C AQS源码解读\",\"date\":\"2015-01-13\",\"category\":\"Java\",\"tags\":[\"Java\",\"concurrency\",\"jdk\",\"源码阅读\"]}}}]}},\"pathContext\":{\"current\":5,\"skip\":40,\"total\":6}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---page-5-f514c60eb5c029cd6f8d.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Magicly's Blog\"}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"html\":\"<p>机器学习已经影响了我们生活中的每一个地方， 了解一些机器学习知识， 便于提高竞争力， 避免被机器替代。\\n下面是我参考咨询了很多大牛之后搜集整理的一些学习资料， 基本都是该领域世界最顶尖的高手亲自授课，以及一些最流行的工具库， 值得学习。</p>\\n<!-- more -->\\n<ul>\\n<li>台湾大学李宏毅老师的机器学习和深度学习课程，<a href=\\\"http://speech.ee.ntu.edu.tw/~tlkagk/courses.html%EF%BC%8C\\\">http://speech.ee.ntu.edu.tw/~tlkagk/courses.html，</a> bilibili上有视频：<a href=\\\"https://www.bilibili.com/video/av10590361/\\\">https://www.bilibili.com/video/av10590361/</a> , <a href=\\\"https://www.bilibili.com/video/av9770302/\\\">https://www.bilibili.com/video/av9770302/</a> 。 另外有个很好的pdf可以快速了解机器学习内容：<a href=\\\"https://www.slideshare.net/tw_dsconf/ss-62245351\\\">https://www.slideshare.net/tw_dsconf/ss-62245351</a> </li>\\n<li>Fast.ai课程，<a href=\\\"http://course.fast.ai/\\\">http://course.fast.ai/</a> ， 中文版<a href=\\\"http://geek.ai100.com.cn/tag/fast-ai\\\">http://geek.ai100.com.cn/tag/fast-ai</a> ，已完成，这个是我目前觉得最好的课程。</li>\\n<li>Andrew NG <a href=\\\"https://www.coursera.org/learn/machine-learning\\\">https://www.coursera.org/learn/machine-learning</a> （已完成）</li>\\n<li>Andrew NG Unsupervised Feature Learning and Deep Learning <a href=\\\"http://deeplearning.stanford.edu/tutorial/\\\">http://deeplearning.stanford.edu/tutorial/</a> （学习ing）</li>\\n<li><a href=\\\"http://neuralnetworksanddeeplearning.com/\\\">http://neuralnetworksanddeeplearning.com/</a> （已完成）</li>\\n<li>Andrew NG, standford的机器学习课程之一， <a href=\\\"http://cs229.stanford.edu/\\\">http://cs229.stanford.edu/</a></li>\\n<li>Neural Networks for Machine Learning <a href=\\\"https://www.coursera.org/learn/neural-networks\\\">https://www.coursera.org/learn/neural-networks</a> by Geoffrey Hinton, Professor(深度学习创始人) （学习中），有点后悔， 这个课程并不是适合初学者。参考<a href=\\\"https://www.quora.com/Is-it-wise-to-learn-deep-learning-from-Hintons-course-on-Coursera\\\">这里</a></li>\\n<li>李飞飞课程<a href=\\\"http://cs231n.github.io/\\\">http://cs231n.github.io/</a></li>\\n<li>斯坦福自然语言处理 <a href=\\\"http://web.stanford.edu/class/cs224n/\\\">http://web.stanford.edu/class/cs224n/</a></li>\\n<li>Tensorflow for Deep Learning Research <a href=\\\"http://web.stanford.edu/class/cs20si/\\\">http://web.stanford.edu/class/cs20si/</a></li>\\n<li>伯克利人工智能课程 <a href=\\\"http://www-inst.eecs.berkeley.edu/~cs188/archives.html\\\">http://www-inst.eecs.berkeley.edu/~cs188/archives.html</a></li>\\n<li><a href=\\\"http://www.deeplearningbook.org/\\\">http://www.deeplearningbook.org/</a>, by Ian Goodfellow and Yoshua Bengio（深度学习四大金刚之一） and Aaron Courville</li>\\n<li>udacity深度学习课程tensorflow <a href=\\\"https://classroom.udacity.com/courses/ud730/\\\">https://classroom.udacity.com/courses/ud730/</a> （已完成）</li>\\n<li><a href=\\\"https://keras.io\\\">https://keras.io</a></li>\\n<li><a href=\\\"https://scikit-learn.org\\\">https://scikit-learn.org</a></li>\\n<li><a href=\\\"https://www.tensorflow.org\\\">https://www.tensorflow.org</a></li>\\n<li><a href=\\\"http://deeplearning.net/\\\">http://deeplearning.net/</a></li>\\n<li><a href=\\\"https://www.kaggle.com\\\">https://www.kaggle.com</a></li>\\n</ul>\",\"timeToRead\":2,\"excerpt\":\"…\",\"fields\":{\"slug\":\"/ml-content/\"},\"frontmatter\":{\"title\":\"机器学习计划\",\"date\":\"2017-02-12\",\"category\":\"ML\",\"tags\":[\"AI\",\"ML\",\"machine learning\",\"deep learning\",\"深度学习\"]}}},{\"node\":{\"html\":\"<h1 id=\\\"什么是贝塞尔曲线\\\"><a href=\\\"#%E4%BB%80%E4%B9%88%E6%98%AF%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>什么是贝塞尔曲线</h1>\\n<p>最近做一个动画效果时需要将物体做曲线移动， 本来记得css3里的动画是可以指定beizer curve的， 结果用的时候发现css3的beizer curve只用来做easing timing function。简单来说就是拿来控制动画“非线性”移动，比如越来越快（ease-in）， 越来越慢（ease-out），先慢后快再慢（ease-in-out）等， 让动画效果更“灵动”， 避免线性（linear）的死板。</p>\\n<p>可以看看这两个页面， 有一个直观的感受。</p>\\n<!-- more -->\\n<ul>\\n<li><a href=\\\"http://cubic-bezier.com/\\\">http://cubic-bezier.com/</a></li>\\n<li><a href=\\\"http://easings.net/zh-cn\\\">http://easings.net/zh-cn</a></li>\\n</ul>\\n<p>beizer curve在css3中的使用， 可以自己google一下， 或者看下：</p>\\n<ul>\\n<li><a href=\\\"http://www.w3school.com.cn/css3/css3_transition.asp\\\">http://www.w3school.com.cn/css3/css3_transition.asp</a></li>\\n<li><a href=\\\"http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html\\\">http://www.ruanyifeng.com/blog/2014/02/css<em>transition</em>and_animation.html</a></li>\\n</ul>\\n<p>引用wiki上的介绍：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">    在数学的数值分析领域中，贝塞尔曲线（英语：Bézier curve）是计算机图形学中相当重要的参数曲线。更高维度的广泛化贝塞尔曲线就称作贝塞尔曲面，其中贝塞尔三角是一种特殊的实例。\\n    贝塞尔曲线于1962年，由法国工程师皮埃尔·贝塞尔（Pierre Bézier）所广泛发表，他运用贝塞尔曲线来为汽车的主体进行设计。贝塞尔曲线最初由Paul de Casteljau于1959年运用de Casteljau算法开发，以稳定数值的方法求出贝塞尔曲线。</code></pre>\\n      </div>\\n<p>有数学功底或者有兴趣的可以参考下面几篇文章， 我就不赘述了（最讨厌那种什么都要copy过来，弄得好像跟是自己写的样， 别人已经写得很清楚了， 干嘛再重复劳动一遍呢， 又没有自己的新的见解，赠人链接， 手留余香。 😁哈）。</p>\\n<ul>\\n<li><a href=\\\"https://en.wikipedia.org/wiki/B%C3%A9zier_curve\\\">https://en.wikipedia.org/wiki/B%C3%A9zier_curve</a></li>\\n<li><a href=\\\"https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A\\\">https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A</a></li>\\n<li><a href=\\\"http://www.html-js.com/article/1628\\\">http://www.html-js.com/article/1628</a></li>\\n<li><a href=\\\"http://www.cnblogs.com/hnfxs/p/3148483.html\\\">http://www.cnblogs.com/hnfxs/p/3148483.html</a></li>\\n<li></li>\\n</ul>\\n<h1 id=\\\"在线工具\\\"><a href=\\\"#%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>在线工具</h1>\\n<p>下面是几个比较有用的工具， 方便大家。</p>\\n<ul>\\n<li><a href=\\\"http://blogs.sitepointstatic.com/examples/tech/canvas-curves/quadratic-curve.html\\\">http://blogs.sitepointstatic.com/examples/tech/canvas-curves/quadratic-curve.html</a></li>\\n<li><a href=\\\"http://myst729.github.io/bezier-curve/\\\">http://myst729.github.io/bezier-curve/</a></li>\\n<li><a href=\\\"http://xuanfengge.com/easeing/ceaser/\\\">http://xuanfengge.com/easeing/ceaser/</a></li>\\n<li><a href=\\\"http://yisibl.github.io/cubic-bezier/#.17,.67,.83,.67\\\">http://yisibl.github.io/cubic-bezier/#.17,.67,.83,.67</a></li>\\n<li><a href=\\\"http://cubic-bezier.com/#.17,.67,.83,.67\\\">http://cubic-bezier.com/#.17,.67,.83,.67</a></li>\\n</ul>\\n<h1 id=\\\"实现\\\"><a href=\\\"#%E5%AE%9E%E7%8E%B0\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>实现</h1>\\n<p>前面资料都是把bezier curve拿来当timing function的， 而我的需求是要让物体（某个dom节点）沿着某条beizer curve移动，于是继续google， 找到了几个。</p>\\n<ul>\\n<li>Android实现: <a href=\\\"https://github.com/Yasic/QQBubbleView\\\">https://github.com/Yasic/QQBubbleView</a></li>\\n</ul>\\n<p>Android的我用不到， 放这里主要是里面的gif图很直观，哈哈。</p>\\n<ul>\\n<li>CSS实现：<a href=\\\"http://jinlong.github.io/2016/01/14/moving-along-a-curved-path-in-css-with-layered-animation/%EF%BC%8C\\\">http://jinlong.github.io/2016/01/14/moving-along-a-curved-path-in-css-with-layered-animation/，</a> 原文：<a href=\\\"http://tobiasahlin.com/blog/curved-path-animations-in-css/\\\">http://tobiasahlin.com/blog/curved-path-animations-in-css/</a></li>\\n</ul>\\n<p>CSS的实现真是相当tricky， 我解释一下。CSS里面的animation translate是直接按照直线移动到目的地的， 这是因为沿X轴和Y轴都是匀速运动（linear），所以合成之后的速度必然是斜角45°移动过去的。我们可以把X轴看成时间轴， 这时如果Y轴的移动函数是某个beizer curve，那合成之后的移动曲线就是beizer curve了。具体实现的时候还用到了:after伪元素了。</p>\\n<p>复杂一点的我觉得还是需要用js去控制， 于是自然想到了用js代码去按照beizer curve公式实现。</p>\\n<ul>\\n<li>JS实现： <a href=\\\"http://blog.csdn.net/cuixiping/article/details/6872095\\\">http://blog.csdn.net/cuixiping/article/details/6872095</a></li>\\n</ul>\\n<p>这个用的公式不直观，应该是进行了变换之后的， 我直接照着公式写了一个。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">PointOnCubicBezier2</span><span class=\\\"token punctuation\\\">(</span>cp<span class=\\\"token punctuation\\\">,</span> t<span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">   <span class=\\\"token comment\\\">// B(t) = P0 * (1-t)^3 + 3 * P1 * t * (1-t)^2 + 3 * P2 * t^2 * (1-t) + P3 * t^3</span>\\n</span>        <span class=\\\"token keyword\\\">const</span> one_t <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1.0</span> <span class=\\\"token operator\\\">-</span> t<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">P0</span> <span class=\\\"token operator\\\">=</span> cp<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">P1</span> <span class=\\\"token operator\\\">=</span> cp<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">P2</span> <span class=\\\"token operator\\\">=</span> cp<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">P3</span> <span class=\\\"token operator\\\">=</span> cp<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> x <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">P0</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>one_t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token constant\\\">P1</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">*</span> t <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>one_t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token constant\\\">P2</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> one_t <span class=\\\"token operator\\\">+</span> <span class=\\\"token constant\\\">P3</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> y <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">P0</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>one_t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token constant\\\">P1</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">*</span> t <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>one_t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token constant\\\">P2</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> one_t <span class=\\\"token operator\\\">+</span> <span class=\\\"token constant\\\">P3</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">*</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> pointF <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Point2D</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> pointF<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>对比了一下两个函数的输出值， 完全是一样的， 应该就是数学变换而已， 我懒得去做推倒了。</p>\\n<p>后来找到一个三阶beizer curve的实现，看这里\\n<a href=\\\"https://github.com/gre/bezier-easing%EF%BC%8C\\\">https://github.com/gre/bezier-easing，</a> 这个实现可能有点NB，以至于<a href=\\\"https://facebook.github.io/react-native/\\\">React Native</a>、<a href=\\\"http://velocityjs.org/\\\">Velocity</a>等项目都使用了，屌屌的。</p>\\n<p>用<a href=\\\"https://github.com/bestiejs/benchmark.js\\\">benchmark</a>跑一下分：<a href=\\\"https://jsperf.com/beizer-curve5\\\">看这里</a>， chrome下我写的方法居然慢了94%！看样子代码可读性是要付出代价的哈。我还是老老实实用<a href=\\\"https://github.com/gre/bezier-easing%E5%90%A7%E3%80%82\\\">https://github.com/gre/bezier-easing吧。</a></p>\\n<p>刚刚又搜到一篇文章， 讲解地更细致深入， 害得我不想继续写了。 直接看这里吧。<a href=\\\"http://www.jianshu.com/p/55c721887568\\\">http://www.jianshu.com/p/55c721887568</a></p>\\n<h1 id=\\\"如何将多个点用贝塞尔曲线连起来\\\"><a href=\\\"#%E5%A6%82%E4%BD%95%E5%B0%86%E5%A4%9A%E4%B8%AA%E7%82%B9%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E8%BF%9E%E8%B5%B7%E6%9D%A5\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>如何将多个点用贝塞尔曲线连起来</h1>\\n<ul>\\n<li><a href=\\\"http://www.zheng-hang.com/?id=43\\\">http://www.zheng-hang.com/?id=43</a></li>\\n<li><a href=\\\"http://www.cnblogs.com/hnfxs/p/3148743.html\\\">http://www.cnblogs.com/hnfxs/p/3148743.html</a></li>\\n</ul>\",\"timeToRead\":4,\"excerpt\":\"什么是贝塞尔曲线 最近做一个动画效果时需要将物体做曲线移动， 本来记得css3里的动画是可以指定beizer curve的， 结果用的时候发现css3的beizer curve只用来做easing timing function…\",\"fields\":{\"slug\":\"/bezier-curve/\"},\"frontmatter\":{\"title\":\"bezier-curve\",\"date\":\"2016-11-29\",\"category\":\"FE\",\"tags\":[\"js\",\"css\",\"animation\",\"beizer curve\"]}}},{\"node\":{\"html\":\"<p>用了一年多的<a href=\\\"https://facebook.github.io/react/\\\">React</a>，真是爽的不要不要的， 谁用谁知道， 一般人我不告诉他！</p>\\n<p>最近用的过程中发现console里面总是出现这样的警告</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">react.js:20478 Warning: setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op. Please check the code for the Small component.</code></pre>\\n      </div>\\n<p>虽不影响使用， 但是对于一个有代码洁癖的有追求的程序员来说， 怎么受得了呢！</p>\\n<p>react的error或者warning信息还是写得比较好的， 从上面我们可以看出原因是我们在一个unmounted的component上调用setState方法。分析业务代码， 发现是某个弹窗component需要从server加载数据， 有时候网络慢， 还没有加载出来用户就把弹窗关了， 所以对应的component变成了unmounted， 等到fetch请求成功之后， 再调用setState就warning了。</p>\\n<p>为了方便分析问题， 我把问题简化了， 同时为了用户直接能在浏览器打开看到效果， 而不用nodejs、npm、babel、webpack、react等一堆东西install半天， 我直接引用了react cdn上的文件。代码如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token doctype\\\">&lt;!DOCTYPE html></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">charset</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>UTF-8<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>title</span><span class=\\\"token punctuation\\\">></span></span>Hello World<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>title</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://unpkg.com/react@latest/dist/react.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://unpkg.com/react-dom@latest/dist/react-dom.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://unpkg.com/babel-standalone@6.15.0/babel.min.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>root<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>text/babel<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\">\\n\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Big</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        small<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function-variable function\\\">closeSmall</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'closeSmall'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> small<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>hello <span class=\\\"token keyword\\\">from</span> Big Component <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>h2 onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>closeSmall<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>close small <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h2<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>small <span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">&lt;</span>Small <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Small</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'init data'</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'componentDidMount'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fetch data from server succeed...'</span><span class=\\\"token punctuation\\\">)</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`this._isMounted: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_isMounted<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'data from server'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5000</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>hello <span class=\\\"token keyword\\\">from</span> Small Component <span class=\\\"token operator\\\">...</span>  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n        data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n      ReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>Big <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n        document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>代码里面用setTimeout模拟了从server获取数据， 大家如果在5s内点击close small， 就可以重现这个问题。</p>\\n<p>问题的解决方法很自然地想到，如果可以在setState之前检查一下this component是否还是mounted状态就可以了。查react的文档，发现原来之前确实是有isMounted()这个方法的， 不过已经不推荐使用了， 因为<a href=\\\"https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html\\\">isMounted is an Antipattern</a>。</p>\\n<p>第一种解决方法就是自己模拟实现isMounted这个方法， 虽然已经被贴上Antipattern的标签， 但是有些时候用这种方法还是比较方便的。代码如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token doctype\\\">&lt;!DOCTYPE html></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">charset</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>UTF-8<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>title</span><span class=\\\"token punctuation\\\">></span></span>Hello World<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>title</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://unpkg.com/react@latest/dist/react.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://unpkg.com/react-dom@latest/dist/react-dom.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://unpkg.com/babel-standalone@6.15.0/babel.min.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>root<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>text/babel<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\">\\n\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Big</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        small<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function-variable function\\\">closeSmall</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'closeSmall'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> small<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>hello <span class=\\\"token keyword\\\">from</span> Big Component <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>h2 onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>closeSmall<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>close small <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h2<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>small <span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">&lt;</span>Small <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Small</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'init data'</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_isMounted <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_isMounted <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'componentDidMount'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fetch data from server succeed...'</span><span class=\\\"token punctuation\\\">)</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`this._isMounted: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_isMounted<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_isMounted<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'data from server'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5000</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">componentWillUnmount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_isMounted <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>hello <span class=\\\"token keyword\\\">from</span> Small Component <span class=\\\"token operator\\\">...</span>  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n        data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n      ReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>Big <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n        document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>对于callback现在已经有更好的解决方案， 伟大的<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\\\">Promise</a>！如果这个promise能在componentWillUnmount()的时候cancel掉就完美了。可惜google之后发现官方Promise实现目前并不支持cancel！<a href=\\\"http://stackoverflow.com/questions/29478751/how-to-cancel-an-emcascript6-vanilla-javascript-promise-chain\\\">看这里</a>， 还有<a href=\\\"http://stackoverflow.com/questions/30233302/promise-is-it-possible-to-force-cancel-a-promise\\\">这里</a>，所以除非你使用第三方Promise库， 比如据说性能比原生还好的<a href=\\\"http://bluebirdjs.com/docs/api/cancellation.html\\\">Bluebird</a>。</p>\\n<p>当然有些时候没必要搞这么复杂， facebook的<a href=\\\"https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html\\\">文档</a>给了一个简易的cancelable的Promise。最好代码如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token doctype\\\">&lt;!DOCTYPE html></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">charset</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>UTF-8<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>title</span><span class=\\\"token punctuation\\\">></span></span>Hello World<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>title</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://unpkg.com/react@latest/dist/react.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://unpkg.com/react-dom@latest/dist/react-dom.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://unpkg.com/babel-standalone@6.15.0/babel.min.js<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>root<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>text/babel<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script language-javascript\\\">\\n\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Big</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      small<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function-variable function\\\">closeSmall</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'closeSmall'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> small<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>hello <span class=\\\"token keyword\\\">from</span> Component <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>h2 onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>closeSmall<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>close small <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h2<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>small <span class=\\\"token operator\\\">?</span> <span class=\\\"token operator\\\">&lt;</span>Small <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Small</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'init data'</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'componentDidMount'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>cancelablePromise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">makeCancelable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fetch data from server succeed...'</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'data from server'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5000</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>cancelablePromise\\n      <span class=\\\"token punctuation\\\">.</span>promise\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'resolved: '</span><span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>reason <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>reason<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">' isCanceled'</span><span class=\\\"token punctuation\\\">,</span> reason<span class=\\\"token punctuation\\\">.</span>isCanceled<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">componentWillUnmount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>cancelablePromise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cancel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// Cancel the promise</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>hello <span class=\\\"token keyword\\\">from</span> Small Component <span class=\\\"token operator\\\">...</span>  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n      data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">makeCancelable</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> hasCanceled_ <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> wrappedPromise <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      hasCanceled_ <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> isCanceled<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      hasCanceled_ <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> isCanceled<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    promise<span class=\\\"token punctuation\\\">:</span> wrappedPromise<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">cancel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      hasCanceled_ <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n      ReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>Big <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n        document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    </span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>well, it’s ok now!</p>\",\"timeToRead\":4,\"excerpt\":\"用了一年多的 React ，真是爽的不要不要的， 谁用谁知道， 一般人我不告诉他！ 最近用的过程中发现console里面总是出现这样的警告 虽不影响使用， 但是对于一个有代码洁癖的有追求的程序员来说， 怎么受得了呢！ react的error或者warning…\",\"fields\":{\"slug\":\"/react-ismounted-is-an-antipattern/\"},\"frontmatter\":{\"title\":\"react系列之isMounted is an Antipattern\",\"date\":\"2016-11-19\",\"category\":\"FE\",\"tags\":[\"react\"]}}},{\"node\":{\"html\":\"<p><a href=\\\"http://blog.coderzh.com/2015/09/13/use-webhook-automated-deploy-hugo/?hmsr=toutiao.io&#x26;utm_medium=toutiao.io&#x26;utm_source=toutiao.io\\\">http://blog.coderzh.com/2015/09/13/use-webhook-automated-deploy-hugo/?hmsr=toutiao.io&#x26;utm<em>medium=toutiao.io&#x26;utm</em>source=toutiao.io</a></p>\\n<p>…</p>\",\"timeToRead\":1,\"excerpt\":\"http://blog.coderzh.com/2015/09/13/use-webhook-automated-deploy-hugo/?hmsr=toutiao.io&utm medium=toutiao.io&utm source=toutiao.io …\",\"fields\":{\"slug\":\"/auto-deploy-githubPages-by-webhook-md/\"},\"frontmatter\":{\"title\":\"利用webhook实现github pages的自动部署\",\"date\":\"2015-09-16\",\"category\":\"default\",\"tags\":[\"github\",\"webhook\",\"ssh\"]}}},{\"node\":{\"html\":\"<p>javascript es6 arrow function.</p>\\n<!-- more -->\\n<p>开始学习ES6.\\n<a href=\\\"https://hacks.mozilla.org/category/es6-in-depth/\\\">https://hacks.mozilla.org/category/es6-in-depth/</a></p>\",\"timeToRead\":1,\"excerpt\":\"javascript es6 arrow function. 开始学习ES6.\\n https://hacks.mozilla.org/category/es6-in-depth/\",\"fields\":{\"slug\":\"/js-arrow-functions-md/\"},\"frontmatter\":{\"title\":\"javascript箭头函数\",\"date\":\"2015-09-07\",\"category\":\"JS\",\"tags\":[\"js\",\"javascript\",\"es6\"]}}},{\"node\":{\"html\":\"<p>微信公共号现在很火，一些简单的应用，做一个公共号比开发一款app成本要小很多，而且利用朋友圈的转发，相比app去app store里上架等着用户下载，要容易很多。</p>\\n<p>但是微信公共号的调试有点不方便，必须在微信<a href=\\\"https://mp.weixin.qq.com/\\\">管理后台</a>配置一个微信能访问到（公网）的url，然后在公共号里输入内容，微信以xml格式转发给这个url，url回复之后微信再将response回复给使用公共号的微信用户。当然微信也提供了<a href=\\\"http://mp.weixin.qq.com/debug\\\">调试工具</a>， 可以直接构造数据，方便调试各个接口。 但是依然需要一个公网的url作为接口。于是最原始的开发方式就是，修改代码，上传到server，（如果是有些静态语言还需要重启服务器），然后看是否正常work，如果不行的话，在可能错误的地方打出log，然后又是修改代码，上传server，重启。。。。。就这样，每次改一点点，你都可以泡杯咖啡了，老板就会觉得你很闲。参看<a href=\\\"http://www.oschina.net/news/15579/reasons-why-people-who-work-with-computers-seem-to\\\">为什么搞计算机工作的人总是看上去很清闲</a>。</p>\\n<!-- more -->\\n<p>有没有办法可以直接在本地调试呢，简单说，就是微信把数据传到我本地的电脑上，我每次改完代码，不用重新上传server，直接在本地加log等。经过研究，找到几个方法，记录下来，与大家分享，绝对能节约很多很多很多时间，然后就可以去陪妹纸了， 如果你有的话，没有的话<a href=\\\"http://www.zhihu.com/question/20385321\\\">here</a>。</p>\\n<p>第一种方法，你本地电脑有公网ip。比如家里宽带，没用路由，直接把网线插上，应该就是公网IP，吧。 如果家里有多人使用，你可以再路由器里配置NAT地址转换。自行<a href=\\\"https://www.google.com.hk/webhp?sourceid=chrome-instant&#x26;ion=1&#x26;espv=2&#x26;ie=UTF-8#q=NAT%20%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2\\\">Google</a>吧。</p>\\n<p>第二种，也是我搜到的最多的，用ngrok这个神器！网上一堆资料，比如<a href=\\\"http://www.mbnow.tk/2014/12/05/ngrok/\\\">这个</a>，我Google到的最多的也是这个，而且看上去也应该很简单。 <a href=\\\"http://www.oray.com/\\\">花生壳</a>我10年前用过（x，不小心暴露年龄了），应该是一样的。网上说，缺点是</p>\\n<blockquote>\\n<p>不过 ngrok 速度较慢，微信服务器对实时性要求较高，每次通信超过 5 秒便超时，所以此法也不建议使用。</p>\\n</blockquote>\\n<p>我觉得用花生壳的话可能好点，因为是国内的（有兴趣的可以自己去试试哈）。没有用ngrok试一下，因为“无法显示此网页”！网上就是“骗子”多，明明没有的网站，大家都描绘的绘声绘色。</p>\\n<p>第三种，用ssh建立反向通道。对了，使用此种方法，你还是需要一个公网IP的。 作为一名专业工程师，拥有公网 ip 地址的 VPS 服务器基本成了标配，<a href=\\\"http://www.qcloud.com/redirect.php?redirect=1002&#x26;cps_key=0a3641075e434bf76a016a44d2918e4a\\\">腾讯云VPS</a> 最便宜的一款每年也就几百块钱，平时挂挂自己喜欢的服务，做个站长，跑跑自己的开源项目甚爽。</p>\\n<ol>\\n<li>申请<a href=\\\"http://www.qcloud.com/redirect.php?redirect=1001&#x26;cps_key=0a3641075e434bf76a016a44d2918e4a\\\">腾讯云</a></li>\\n<li>本地安装ssh，如果是linux或mac，都是自带的。如果是windows的话，可以安装<a href=\\\"https://www.cygwin.com/\\\">Cygwin</a>，如果你嫌弃它太重了，安装了<a href=\\\"https://git-scm.com/download/gui/win\\\">Git</a>也是可以的。如果你也不想装或者不会装Git，额，(⊙o⊙)…，好吧，那你还是不要写程序了。</li>\\n<li>\\n<p>建立ssh反向通道。\\n这一步里有很多坑，我花了差不多一天才完全搞定。你们可以先参考这几篇文章，了解下原理啥的。</p>\\n<ul>\\n<li><a href=\\\"http://blog.zjutoe.net/?p=95\\\">http://blog.zjutoe.net/?p=95</a></li>\\n<li><a href=\\\"http://my.oschina.net/abcfy2/blog/177094\\\">http://my.oschina.net/abcfy2/blog/177094</a></li>\\n<li><a href=\\\"http://www.zzbaike.com/wiki/PuTTY/Putty%E5%BB%BA%E7%AB%8B%E9%9A%A7%E9%81%93%E7%9A%84%E6%96%B9%E6%B3%95\\\">http://www.zzbaike.com/wiki/PuTTY/Putty%E5%BB%BA%E7%AB%8B%E9%9A%A7%E9%81%93%E7%9A%84%E6%96%B9%E6%B3%95</a></li>\\n<li><a href=\\\"http://www.freeoa.net/osuport/netmanage/linux-ssh-tunneling-proxy_1892.html\\\">http://www.freeoa.net/osuport/netmanage/linux-ssh-tunneling-proxy_1892.html</a></li>\\n<li><a href=\\\"https://qdan.me/list/VOSXmsI4tv7fIciF\\\">https://qdan.me/list/VOSXmsI4tv7fIciF</a></li>\\n</ul>\\n</li>\\n</ol>\\n<p>好吧，来看我的具体一步一步做法。</p>\\n<ol>\\n<li>\\n<p>ssh -R 9999:localhost:9000 ubuntu@myserver<em>ip</em>address，输入密码</p>\\n</li>\\n<li>\\n<p>server上查看一下是否监听了9999端口，netstat -anltp | grep 9999</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">ubuntu@VM-39-45-ubuntu:~$ <span class=\\\"token function\\\">netstat</span> -anltp <span class=\\\"token operator\\\">|</span> <span class=\\\"token function\\\">grep</span> 9999\\n<span class=\\\"token punctuation\\\">(</span>Not all processes could be identified, non-owned process info\\nwill not be shown, you would have to be root to see it all.<span class=\\\"token punctuation\\\">)</span>\\ntcp        0      0 127.0.0.1:9999          0.0.0.0:*               LISTEN      -\\ntcp6       0      0 ::1:9999                :::*                    LISTEN      -</code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>在本地9000（我用的<a href=\\\"https://www.playframework.com/documentation/1.3.x/home\\\">play 1</a>，可以了解下它到底为啥这么好用<a href=\\\"http://segmentfault.com/a/1190000000374033\\\">Play Framework —— Java开发者的梦想框架</a>）上开启web服务</p>\\n</li>\\n<li>\\n<p>在浏览器里输入<a href=\\\"http://myserver_ip_address:9999%EF%BC%8C\\\">http://myserver<em>ip</em>address:9999，</a> 居然是没有响应！奇怪！直接在server上用curl <a href=\\\"http://localhost:9999\\\">http://localhost:9999</a> 是可以的！仔细看netstat输出，发现监听的9999端口是本地的！！！也就是说只能在本地访问，那有xx用啊！！！</p>\\n</li>\\n<li>\\n<p>看看ssh —help， 原来是可以指定bind_address的， man ssh看看</p>\\n<blockquote>\\n<p>By default, the listening socket on the server will be bound to the loopback interface only.  This may be overridden by specifying a bind<em>address. An empty bind</em>address, or the address ‘*’, indicates that the remote socket should listen on all interfaces.  Specifying a remote bind<em>address will only succeed if the server’s GatewayPorts option is enabled (see sshd</em>config(5)).</p>\\n</blockquote>\\n</li>\\n</ol>\\n<p>  继续看看 man sshd_config</p>\\n<blockquote>\\n<p>GatewayPorts\\nSpecifies whether remote hosts are allowed to connect to ports forwarded for the client.  By default, sshd(8) binds remote port forwardings to the\\nloopback address.  This prevents other remote hosts from connecting to forwarded ports.  GatewayPorts can be used to specify that sshd should allow</p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">remote port forwardings to bind to non-loopback addresses, thus allowing other hosts to connect.  The argument may be “no” to force remote port\\nforwardings to be available to the local host only, “yes” to force remote port forwardings to bind to the wildcard address, or “clientspecified” to\\nallow the client to select the address to which the forwarding is bound.  The default is “no”.</code></pre>\\n      </div>\\n<p> sudo vim /etc/ssh/sshd<em>config，添加GatewayPorts clientspecified，GatewayPorts yes也可以，退出，sudo service sshd restart，重启ssh服务。重新ssh -R :9999:localhost:9000 ubuntu@myserver</em>ip<em>address（仔细看，就9999前多了一个冒号:），输入密码，netstat -anltp | grep 9999，果然\\n<code class=\\\"language-text\\\">tcp        0      0 0.0.0.0:9999            0.0.0.0:*               LISTEN      -\\n\\ttcp6       0      0 :::9999                 :::*                    LISTEN      -</code>\\n浏览器里输入<a href=\\\"http://myserver\\\">http://myserver</a></em>ip_address:9999， 这回可以看到本地打出日志了。</p>\\n<ol start=\\\"6\\\">\\n<li>\\n<p>然后发现微信里面配置的url只能是80端口。简单，直接改成ssh -R :80:localhost:9000 ubuntu@myserver<em>ip</em>address就可以了，吧！奇怪，直接访问<a href=\\\"http://myserver_ip_address%EF%BC%8C\\\">http://myserver<em>ip</em>address，</a> 打不开网页！用netstat -anltp | grep 80，居然什么都没有！说明server没有在80端口监听呀！哦，对了ubuntu低于1024的端口是需要用root权限的。</p>\\n</li>\\n<li>\\n<p>ubuntu里root默认是关闭的。sudo passwd root，设置root密码后，可以打开。还需要在sudo vim /etc/ssh/sshd_config\\t添加</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">#PermitRootLogin without-password\\nPermitRootLogin yes</code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>重启ssh，再重新用root账号连接，ssh -R :80:localhost:9000 root@myserver<em>ip</em>address， 一切ok，<a href=\\\"http://myserver_ip_address%EF%BC%8C\\\">http://myserver<em>ip</em>address，</a> 本地代码打出日志，说明流量已经导入到本地了。</p>\\n</li>\\n<li>\\n<p>最后，就可以在<a href=\\\"http://mp.weixin.qq.com/debug\\\">微信公众平台接口调试工具</a>里调试了，配合<a href=\\\"http://playframework.com/\\\">Play!</a>的hot reload，随时修改代码，加log，然后马上就可以看到效果，不用重新编译，不用上传server，不用重启。。。。生活真是幸福美满啊。。。。</p>\\n</li>\\n<li>\\n<p>几个问题说明：</p>\\n<ol>\\n<li>直接用ssh连接的话，断开之后端口映射就没有了，可以用autossh， 只是我就是临时需要调试用的时候才ssh建立反向隧道，所以我不用autossh。</li>\\n<li>直接用root登陆ssh，开通80端口。应该是有安全隐患的， 吧！对安全不是很了解，但感觉直接用root肯定不是最佳实践。网上有各种方法解决这个问题，比如用iptables端口映射，或者nginx反向代理的，<a href=\\\"http://stackoverflow.com/questions/23281895/node-js-eacces-error-when-listening-on-http-80-port-permission-denied\\\">看这里</a>，参看1的原因，我没有采用。还是一次focus一个点吧，不然光环境就配置几天，有点太慢了。</li>\\n</ol>\\n</li>\\n</ol>\\n<p>通过本文的配置，可以在本地方便的开发调试微信公共号了。但是对于微信提供的<a href=\\\"http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html\\\">JS-SDK</a>，又存在另外的问题，这个我会<a href=\\\"http://my.oschina.net/magicly007/blog/480704\\\">另外写一篇blog来解决</a>。毕竟，我们程序员应该坚持<a href=\\\"https://en.wikipedia.org/wiki/Single_responsibility_principle\\\">Single responsibility principle</a>嘛。</p>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ol>\\n<li><a href=\\\"http://www.mbnow.tk/2014/12/05/ngrok/\\\">http://www.mbnow.tk/2014/12/05/ngrok/</a></li>\\n<li><a href=\\\"http://my.oschina.net/jfinal/blog/336861\\\">http://my.oschina.net/jfinal/blog/336861</a></li>\\n<li><a href=\\\"http://www.mbnow.tk/2014/12/05/ngrok/\\\">http://www.mbnow.tk/2014/12/05/ngrok/</a></li>\\n<li><a href=\\\"http://liyaodong.com/2015/07/06/%E5%BE%AE%E4%BF%A1%E8%B0%83%E8%AF%95%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/\\\">http://liyaodong.com/2015/07/06/%E5%BE%AE%E4%BF%A1%E8%B0%83%E8%AF%95%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</a></li>\\n<li><a href=\\\"http://my.oschina.net/abcfy2/blog/177094\\\">http://my.oschina.net/abcfy2/blog/177094</a></li>\\n<li><a href=\\\"http://www.zhihu.com/question/25456655\\\">http://www.zhihu.com/question/25456655</a></li>\\n<li><a href=\\\"http://my.oschina.net/atanl/blog/391611\\\">http://my.oschina.net/atanl/blog/391611</a></li>\\n</ol>\\n<blockquote>\\n<p>Written with <a href=\\\"https://stackedit.io/\\\">StackEdit</a>.</p>\\n</blockquote>\",\"timeToRead\":5,\"excerpt\":\"微信公共号现在很火，一些简单的应用，做一个公共号比开发一款app成本要小很多，而且利用朋友圈的转发，相比app去app store里上架等着用户下载，要容易很多。 但是微信公共号的调试有点不方便，必须在微信 管理后台 配置一个微信能访问到（公网）的url…\",\"fields\":{\"slug\":\"/ssh-reverse-tunnel-wx-local/\"},\"frontmatter\":{\"title\":\"利用SSH反向通道在本地调试微信公共号\",\"date\":\"2015-07-26\",\"category\":\"weixin\",\"tags\":[\"ssh\",\"weixin\",\"微信\"]}}},{\"node\":{\"html\":\"<p>引用<a href=\\\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\\\">阮老师</a>的话，</p>\\n<blockquote>\\n<p>喜欢写Blog的人，会经历三个阶段。</p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。\\n第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。\\n第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</code></pre>\\n      </div>\\n<p>自己比较懒惰，也就偶尔在<a href=\\\"http://my.oschina.net/magicly007/blog\\\">OC</a>上写点闲散的笔记，最近觉得还是应该要把自己的知识系统地梳理一下，便决定开一个独立的域名，自己记录Blog。</p>\\n<p>之前就了解Github Pages，也断断续续用MarkDown写过几篇放着，但是没有用<a href=\\\"http://jekyllrb.com/\\\">jekyll</a>，或者<a href=\\\"http://octopress.org/\\\">octpress</a>等串起来，上个月再次想配置好jekyll，结果在mac下始终配置不好（怪我咯）。今天决定一定要配置好，搜集了大量资料（google “jekyll 像黑客一样”），结果意外在<a href=\\\"http://www.douban.com/group/topic/39939196/\\\">http://www.douban.com/group/topic/39939196/</a>的回复中看到“用pelican吧 python的 还有hexo是nodejs的 ”。因为最近刚好在看nodejs，觉得很有兴趣，于是改为尝试<a href=\\\"https://hexo.io/zh-cn/\\\">hexo</a>。</p>\\n<!-- more -->\\n<h1 id=\\\"简介\\\"><a href=\\\"#%E7%AE%80%E4%BB%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>简介</h1>\\n<p><a href=\\\"http://ibruce.info/2013/11/22/hexo-your-blog/\\\">http://ibruce.info/2013/11/22/hexo-your-blog/</a></p>\\n<blockquote>\\n<p>hexo出自台湾大学生<a href=\\\"https://twitter.com/tommy351\\\">tommy351</a>之手，是一个基于<a href=\\\"https://nodejs.org/\\\">Node.js</a>的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。先看看tommy是如何吐槽Octopress的 →＿→ <a href=\\\"http://zespia.tw/blog/2012/10/11/hexo-debut/\\\">Hexo颯爽登場</a>。</p>\\n</blockquote>\\n<h1 id=\\\"安装\\\"><a href=\\\"#%E5%AE%89%E8%A3%85\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>安装</h1>\\n<p>首先安装Node.js，然后运行</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">\\t<span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> -g hexo-cli\\n\\t<span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> hexo --save</code></pre>\\n      </div>\\n<h1 id=\\\"初始化配置\\\"><a href=\\\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>初始化配置</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">\\thexo init\\n\\t<span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span></code></pre>\\n      </div>\\n<h1 id=\\\"写blog\\\"><a href=\\\"#%E5%86%99blog\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>写blog</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">\\thexo n</code></pre>\\n      </div>\\n<h1 id=\\\"生成\\\"><a href=\\\"#%E7%94%9F%E6%88%90\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>生成</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">\\thexo g</code></pre>\\n      </div>\\n<h1 id=\\\"本地预览\\\"><a href=\\\"#%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>本地预览</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">\\thexo s</code></pre>\\n      </div>\\n<h1 id=\\\"发布\\\"><a href=\\\"#%E5%8F%91%E5%B8%83\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>发布</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">\\thexo d</code></pre>\\n      </div>\\n<p>实在觉得没必<a href=\\\"https://en.wikipedia.org/wiki/Reinventing_the_wheel\\\">重复造轮子</a>，重写已经有很详细资料的东西。强烈推荐<a href=\\\"http://ibruce.info/2013/11/22/hexo-your-blog/\\\">这篇</a>。 我觉得基本涵盖了方方面面，如果以后有新东西这里面没有的，我再写吧~</p>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ol>\\n<li><a href=\\\"http://ibruce.info/2013/11/22/hexo-your-blog/\\\">http://ibruce.info/2013/11/22/hexo-your-blog/</a></li>\\n<li><a href=\\\"http://wsgzao.github.io/post/hexo-guide/\\\">http://wsgzao.github.io/post/hexo-guide/</a></li>\\n<li><a href=\\\"http://www.jianshu.com/p/05289a4bc8b2\\\">http://www.jianshu.com/p/05289a4bc8b2</a></li>\\n<li><a href=\\\"http://yangjian.me/workspace/building-blog-with-hexo/\\\">http://yangjian.me/workspace/building-blog-with-hexo/</a></li>\\n<li><a href=\\\"http://yangjian.me/workspace/building-blog-with-hexo/\\\">http://yangjian.me/workspace/building-blog-with-hexo/</a></li>\\n<li><a href=\\\"http://blog.csdn.net/jackystudio/article/details/16117585\\\">http://blog.csdn.net/jackystudio/article/details/16117585</a></li>\\n</ol>\\n<blockquote>\\n<p>Written with <a href=\\\"https://stackedit.io/\\\">StackEdit</a>.</p>\\n</blockquote>\",\"timeToRead\":2,\"excerpt\":\"引用 阮老师 的话， 喜欢写Blog的人，会经历三个阶段。 自己比较懒惰，也就偶尔在 OC 上写点闲散的笔记，最近觉得还是应该要把自己的知识系统地梳理一下，便决定开一个独立的域名，自己记录Blog。 之前就了解Github Pages，也断断续续用MarkDown…\",\"fields\":{\"slug\":\"/my-first-hexo-blog/\"},\"frontmatter\":{\"title\":\"我的第一个hexo Blog\",\"date\":\"2015-07-26\",\"category\":\"default\",\"tags\":[\"hexo\",\"github\",\"githubPages\"]}}},{\"node\":{\"html\":\"<p>需要在代码里面发邮件是很经常的事情，包括找回密码，通知用户领奖，监控报警等。</p>\\n<p>在Java里面实现比较简单，Oracle自己提供了<a href=\\\"http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-eeplat-419426.html#javamail-1.4.7-oth-JPR\\\">JavaMail</a>， 不过API比较底层，用起来不方便，可以自己封装下，也可以直接使用Apache的开源项目<a href=\\\"https://commons.apache.org/proper/commons-email/\\\">Commons Email</a>。 下面的代码，可以以小马哥的名义给自己发邮件，该功能仅用于测试，请谨慎使用，产生的问题，本人概不负责。 /微笑</p>\\n<!-- more -->\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">import</span> org<span class=\\\"token punctuation\\\">.</span>apache<span class=\\\"token punctuation\\\">.</span>commons<span class=\\\"token punctuation\\\">.</span>mail<span class=\\\"token punctuation\\\">.</span>EmailAttachment<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> org<span class=\\\"token punctuation\\\">.</span>apache<span class=\\\"token punctuation\\\">.</span>commons<span class=\\\"token punctuation\\\">.</span>mail<span class=\\\"token punctuation\\\">.</span>EmailException<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> org<span class=\\\"token punctuation\\\">.</span>apache<span class=\\\"token punctuation\\\">.</span>commons<span class=\\\"token punctuation\\\">.</span>mail<span class=\\\"token punctuation\\\">.</span>MultiPartEmail<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> java<span class=\\\"token punctuation\\\">.</span>net<span class=\\\"token punctuation\\\">.</span>MalformedURLException<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> java<span class=\\\"token punctuation\\\">.</span>net<span class=\\\"token punctuation\\\">.</span>URL<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Created by magicalli on 2015/7/6.\\n */</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MultiPartEmailTest</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> EmailException<span class=\\\"token punctuation\\\">,</span> MalformedURLException <span class=\\\"token punctuation\\\">{</span>\\n        MultiPartEmail email <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MultiPartEmail</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHostName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"smtp.tencent.com\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//        email.setAuthentication(\\\"youremail@tencent.com\\\", \\\"***\\\");//邮件服务器验证：用户名/密码</span>\\n        email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setCharset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"UTF-8\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setFrom</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"pony@qq.com\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"马化腾\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addTo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"magicalli@tencent.com\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setSubject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"加油奋斗！\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setMsg</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"come on! 加油奋斗吧，早晚有一天你会出任CEO，迎娶白富美，走上人生巅峰！ http://www.qq.com\\\\n\\\\n\\\\n pony\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        EmailAttachment attachment <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">EmailAttachment</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        attachment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setPath</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"d:/lzl.jpg\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// 本地文件</span>\\n        attachment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setDisposition</span><span class=\\\"token punctuation\\\">(</span>EmailAttachment<span class=\\\"token punctuation\\\">.</span>ATTACHMENT<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        attachment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setDescription</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"林志玲1\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        attachment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"lzl_1\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">attach</span><span class=\\\"token punctuation\\\">(</span>attachment<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        EmailAttachment attachment2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">EmailAttachment</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        attachment2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setURL</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">URL</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"http://mat1.qq.com/datalib_img/star/pic/lib/2007-01-15/2007011511104716122311.jpg\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//远程文件, 如果不是qq.com域名下，内网是访问不了的哈</span>\\n        attachment2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setDisposition</span><span class=\\\"token punctuation\\\">(</span>EmailAttachment<span class=\\\"token punctuation\\\">.</span>ATTACHMENT<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        attachment2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setDescription</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"林志玲2\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        attachment2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"lzl_2\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">attach</span><span class=\\\"token punctuation\\\">(</span>attachment2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        email<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><a href=\\\"https://commons.apache.org/proper/commons-email/\\\">Commons Email</a>支持好几种格式，包括简单文本，html，带附件等。需要的可以自己查看文档。</p>\\n<p>基于smtp的协议邮件协议很简单，大家甚至可以直接用telnet来发送，可以参考这边文章<a href=\\\"http://blog.csdn.net/ghsau/article/details/8602076\\\">Java Mail(一)：telnet实现发送收取邮件</a>. </p>\\n<p>一般公司内网没有验证发送方，你可以冒充公司任何一个员工发送邮件（包括你们老板），一般外面的邮件服务器，比如qq, 126, 163等，是需要验证密码的。</p>\\n<p>重申一遍，别用这个代码干坏事，后果自负， 与本人无关！</p>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ol>\\n<li><a href=\\\"http://blog.csdn.net/ghsau/article/details/8602076\\\">http://blog.csdn.net/ghsau/article/details/8602076</a></li>\\n<li><a href=\\\"http://blog.csdn.net/ghsau/article/details/17839983\\\">http://blog.csdn.net/ghsau/article/details/17839983</a></li>\\n<li><a href=\\\"http://haolloyin.blog.51cto.com/1177454/354320\\\">http://haolloyin.blog.51cto.com/1177454/354320</a></li>\\n<li><a href=\\\"http://www.runoob.com/java/java-sending-email.html\\\">http://www.runoob.com/java/java-sending-email.html</a></li>\\n<li><a href=\\\"https://commons.apache.org/proper/commons-email/\\\">https://commons.apache.org/proper/commons-email/</a></li>\\n<li><a href=\\\"http://blog.csdn.net/qiaqia609/article/details/11580589\\\">http://blog.csdn.net/qiaqia609/article/details/11580589</a></li>\\n</ol>\\n<blockquote>\\n<p>Written with <a href=\\\"https://stackedit.io/\\\">StackEdit</a>.</p>\\n</blockquote>\",\"timeToRead\":2,\"excerpt\":\"需要在代码里面发邮件是很经常的事情，包括找回密码，通知用户领奖，监控报警等。 在Java里面实现比较简单，Oracle自己提供了 JavaMail ， 不过API比较底层，用起来不方便，可以自己封装下，也可以直接使用Apache的开源项目 Commons Email…\",\"fields\":{\"slug\":\"/java-email/\"},\"frontmatter\":{\"title\":\"Java发送邮件\",\"date\":\"2015-07-13\",\"category\":\"Java\",\"tags\":[\"Java\",\"Email\",\"JavaMail\",\"Apache Commons\"]}}},{\"node\":{\"html\":\"<p>经常遇到一个问题，需要在内存里缓存一批数据来提高效率（避免每次都读取DB）。那问题来了，这些对象到底会占用多大内存呢，这直接决定了可以缓存多少条记录，以及上线之后是否会内存不够等问题。</p>\\n<p>来看几种解决方法。</p>\\n<!-- more -->\\n<h1 id=\\\"测试\\\"><a href=\\\"#%E6%B5%8B%E8%AF%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>测试</h1>\\n<p>实践是检验真理的唯一标准！比如你要想cache10w条记录，那你就把10w条记录加载到内存，然后看看到底用了多少内存。至于怎么看内存花了多少，你可以</p>\\n<ol>\\n<li>任务管理器</li>\\n<li>top</li>\\n<li>Java Runtime类</li>\\n<li>blabla。。。。</li>\\n</ol>\\n<p>我们来看看直接从Java程序里能获取到的Runtime。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">import</span> java<span class=\\\"token punctuation\\\">.</span>util<span class=\\\"token punctuation\\\">.</span>*<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Created by magicalli on 2015/2/3.\\n */</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">TestMemory</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">A</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> a<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"--- Memory Usage ---:\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        Runtime rt <span class=\\\"token operator\\\">=</span> Runtime<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getRuntime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">//打印总内存大小 //打印空闲内存大小 //打印已用内存大小 单位(字节)</span>\\n        <span class=\\\"token keyword\\\">long</span> usedMemory <span class=\\\"token operator\\\">=</span> rt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">totalMemory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> rt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">freeMemory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Total Memory= \\\"</span> <span class=\\\"token operator\\\">+</span> rt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">totalMemory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" Free Memory = \\\"</span> <span class=\\\"token operator\\\">+</span> rt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">freeMemory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" Used　Memory=\\\"</span> <span class=\\\"token operator\\\">+</span> usedMemory<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token comment\\\">// 把你要测试的占用内存的代码放在这里------start--------------</span>\\n        <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> N <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">100000</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">int</span><span class=\\\"token punctuation\\\">[</span>N<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        Integer<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> arr2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Integer</span><span class=\\\"token punctuation\\\">[</span>N<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        A<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> arrA <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">A</span><span class=\\\"token punctuation\\\">[</span>N<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> N<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//            arr2[i] = i;</span>\\n<span class=\\\"token comment\\\">//            arrA[i] = new A();</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">//        List&lt;Integer> list = new ArrayList&lt;Integer>();</span>\\n        Map<span class=\\\"token generics function\\\"><span class=\\\"token punctuation\\\">&lt;</span>Integer<span class=\\\"token punctuation\\\">,</span> String<span class=\\\"token punctuation\\\">></span></span> map <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">HashMap</span><span class=\\\"token generics function\\\"><span class=\\\"token punctuation\\\">&lt;</span>Integer<span class=\\\"token punctuation\\\">,</span> String<span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//        for (int i = 0; i &lt; N; i++) {</span>\\n<span class=\\\"token comment\\\">//            list.add(i);</span>\\n<span class=\\\"token comment\\\">//            map.put(i, UUID.randomUUID().toString());</span>\\n<span class=\\\"token comment\\\">//        }</span>\\n<span class=\\\"token comment\\\">//        System.out.println(map.size());</span>\\n        <span class=\\\"token comment\\\">// 把你要测试的占用内存的代码放在这里------end--------------</span>\\n\\n        <span class=\\\"token keyword\\\">long</span> usedMemory2 <span class=\\\"token operator\\\">=</span> rt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">totalMemory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> rt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">freeMemory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Total Memory= \\\"</span> <span class=\\\"token operator\\\">+</span> rt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">totalMemory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" Free Memory = \\\"</span> <span class=\\\"token operator\\\">+</span> rt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">freeMemory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" Used　Memory=\\\"</span> <span class=\\\"token operator\\\">+</span> usedMemory2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">long</span> objMemory <span class=\\\"token operator\\\">=</span> usedMemory2 <span class=\\\"token operator\\\">-</span> usedMemory<span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"object use memory: \\\"</span> <span class=\\\"token operator\\\">+</span> objMemory <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">1024</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\"k\\\"</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" each is: \\\"</span> <span class=\\\"token operator\\\">+</span> objMemory <span class=\\\"token operator\\\">/</span> N<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>上面方法的最大好处就是可以直接获得实际占用内存大小，是比较简单有效的方法。不好的地方就是如果数据量比较小，可能偏差比较大，而且你也不能解释为什么Integer[]比int[]占用内存大很多，关键是专家说：这种内存占用应该是心里算出来的，你还要去run一下程序，明显就low了，还想晋级？再练练吧！所以我们来看看怎么掐指一算！</p>\\n<h1 id=\\\"计算\\\"><a href=\\\"#%E8%AE%A1%E7%AE%97\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>计算</h1>\\n<p>这个需要了解JVM里的内存分布，知道每个对象都有object header，blabal。这里推荐一篇好文<a href=\\\"http://www.cnblogs.com/magialmoon/p/3757767.html\\\">一个Java对象到底占用多大内存？</a>，我就不重复了。</p>\\n<p>还看到另一种计算方式，用的Unsafe，不过感觉没有前面用Instrumentation的好。参考这里<a href=\\\"http://blog.csdn.net/bobpauline/article/details/20699233\\\">Java计算一个对象占用内存的大小</a></p>\\n<h1 id=\\\"线上查看\\\"><a href=\\\"#%E7%BA%BF%E4%B8%8A%E6%9F%A5%E7%9C%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>线上查看</h1>\\n<p>如果是要查看线上程序哪个对象占用了大量内存（比如分析内存泄露），那么可以使用jmap。</p>\\n<h1 id=\\\"相关知识\\\"><a href=\\\"#%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>相关知识</h1>\\n<p>你可能需要了解jps，jinfo，打包jar，manifest，查看jvm运行参数等。</p>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ol>\\n<li><a href=\\\"http://www.importnew.com/14948.html\\\">http://www.importnew.com/14948.html</a></li>\\n<li><a href=\\\"http://www.cnblogs.com/magialmoon/p/3757767.html\\\">http://www.cnblogs.com/magialmoon/p/3757767.html</a></li>\\n<li><a href=\\\"http://www.oschina.net/question/1_4486\\\">http://www.oschina.net/question/1_4486</a></li>\\n<li><a href=\\\"http://blog.csdn.net/bobpauline/article/details/20699233\\\">http://blog.csdn.net/bobpauline/article/details/20699233</a></li>\\n<li><a href=\\\"http://happyqing.iteye.com/blog/2013639\\\">http://happyqing.iteye.com/blog/2013639</a></li>\\n<li><a href=\\\"http://sunqi.iteye.com/blog/1917802\\\">http://sunqi.iteye.com/blog/1917802</a></li>\\n<li><a href=\\\"http://www.blogjava.net/stone2083/archive/2013/06/08/400410.html\\\">http://www.blogjava.net/stone2083/archive/2013/06/08/400410.html</a></li>\\n<li><a href=\\\"http://yueyemaitian.iteye.com/blog/2033046\\\">http://yueyemaitian.iteye.com/blog/2033046</a></li>\\n<li><a href=\\\"http://www.ibm.com/developerworks/cn/java/j-lo-jse61/index.html\\\">http://www.ibm.com/developerworks/cn/java/j-lo-jse61/index.html</a></li>\\n<li><a href=\\\"http://www.ibm.com/developerworks/cn/java/j-lo-instrumentation/\\\">http://www.ibm.com/developerworks/cn/java/j-lo-instrumentation/</a></li>\\n</ol>\\n<blockquote>\\n<p>Written with <a href=\\\"https://stackedit.io/\\\">StackEdit</a>.</p>\\n</blockquote>\",\"timeToRead\":2,\"excerpt\":\"经常遇到一个问题，需要在内存里缓存一批数据来提高效率（避免每次都读取DB）。那问题来了，这些对象到底会占用多大内存呢，这直接决定了可以缓存多少条记录，以及上线之后是否会内存不够等问题。 来看几种解决方法。 测试 实践是检验真理的唯一标准！比如你要想cache10w…\",\"fields\":{\"slug\":\"/how-big-is-a-java-object/\"},\"frontmatter\":{\"title\":\"一个Java对象到底有多大\",\"date\":\"2015-06-13\",\"category\":\"Java\",\"tags\":[\"Java\",\"JVM\",\"Java反射\"]}}},{\"node\":{\"html\":\"<p>java5之后的java.util.concurrent包是世界级并发大师Doug Lea的作品，里面主要实现了</p>\\n<ol>\\n<li>atomic包里Integer/Long对应的原子类，主要基于CAS；</li>\\n<li>一些同步子，包括Lock，CountDownLatch，Semaphore，FutureTask等，这些都是基于AbstractQueuedSynchronizer类；</li>\\n<li>关于线程执行的Executors类等；</li>\\n<li>一些并发的集合类，比如ConcurrentHashMap，ConcurrentLinkedQueue，CopyOnWriteArrayList等。</li>\\n</ol>\\n<p>今天我们主要介绍AbstractQueuedSynchronizer这个可以说是最核心的类，没有之一。整个concurrent包里，基本都直接或间接地用到了这个类。Doug Lea的这篇<a href=\\\"http://gee.cs.oswego.edu/dl/papers/aqs.pdf\\\">论文</a>里面讲AQS的实现。</p>\\n<!-- more -->\\n<h1 id=\\\"aqs\\\"><a href=\\\"#aqs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>AQS</h1>\\n<p>首先，我们来想象一下，一间屋里有一个大家都想要得到的会让你很爽的东西（something which makes you so happy, e.g. W.C）。当有人进去把门关起来在独占享用的时候，其他人就只能在外面排队等待，既然在等待，你就不能老是去敲门说哎，好了没有啊。老是这样的话里面的人就很不爽了，而且你可以利用这点等待时间干点别的，比如看看小说视频背背单词或者就干脆椅子上睡觉，当前面独占的人爽完之后，就会出来说，啊，好爽，到你们了。然后大家可能按照排队顺序获取或者大家疯抢这个状态，有可能一个人自己进去独占，有可能几个人说，哎没关系，我们可以一起来。然后他们进去爽，爽完之后再出来通知下一个。</p>\\n<p>我们来把上面这段话翻译成AQS里面的术语。有一个状态state，会有多个Thread尝试获取，当一个Thread独占（EXCLUSIVE，比如Lock）之后，其他后面到来的Thread就会被放到一个Queue的队尾（tail），然后睡眠（park），一直等到前面的Thread唤醒（unpark）它，当然这里有可能被假唤醒（就好比你定了闹钟8点起床，结果7点就自然醒或者被外面车吵醒），所以这个Thread会判断一下是不是到自己了，没有的话就继续park（在一个死循环里）；当拥有state的Thread释放（release）之后，它会唤醒Queue中的下一个Thread（unparkSuccessor）。然后下一个Thread获取（acquire）到state，完成自己的任务，然后继续unparkSuccessor。前面主要说的是EXCLUSIVE模式，AQS还支持共享（SHARED）模式，区别在于尝试获取（tryAcquireShared）的时候即使之前已经有Thread获取了state，但是可能仍然能获取（比如ReadLock）。同样释放（doReleaseShared）的时候除了通知Queue里面第一个（head），还会继续通知后续的节点（Node），只要它们是SHARED。</p>\\n<p>AQS就是实现了：</p>\\n<ol>\\n<li>自动管理这个同步状态state（int类型），更新的时候需要用CAS保证原子性</li>\\n<li>阻塞和唤醒线程park/unpark</li>\\n<li>队列管理，一个双向链表实现queue</li>\\n</ol>\\n<p>AQS是一个abstract class，可以通过继承AQS，定义state的含义，以及tryAcquire，tryRelease，以及对应的share模式下tryAcquireShared，tryReleaseShared这几个方法，定义出自己想要的同步子（Synchronizers）。一般而言，是定义一个内部类Sync extends AQS，实现前面说的几个方法，然后再包一层，暴露出相应的方法。这样做的好处是你可以在包装器类里面取更直观的名字，如ReentrantLock里的lock，unlock和CountDownLatch里的countDown，await，而不是太通用的acquire和release等。而且AQS里面一些方法是为了监控和调试使用，直接暴露出来也不好。</p>\\n<p>下面我们来看J.U.C里面两个常用的Synchronizers。</p>\\n<h1 id=\\\"reentrantlock\\\"><a href=\\\"#reentrantlock\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ReentrantLock</h1>\\n<h2 id=\\\"使用\\\"><a href=\\\"#%E4%BD%BF%E7%94%A8\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>使用</h2>\\n<p>ReentrantLock的语义跟synchronized关键字基本一样，而且我之前看<a href=\\\"http://book.douban.com/subject/6522893/\\\">《深入理解Java虚拟机》</a>里面的评测说JDK6之后，两者的效率基本一致了（JDK5之前ReentrantLock要比synchronized快很多）。Javadoc里面说基本用法如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">X</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> ReentrantLock lock <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ReentrantLock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">m</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// block until condition holds</span>\\n    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// ... method body</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n      lock<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"源码\\\"><a href=\\\"#%E6%BA%90%E7%A0%81\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>源码</h2>\\n<p>ReentrantLock用state表示是否被锁，0表示没有线程获取到锁，>=1表示某个线程获取了N次锁（因为是重入的，只要保证lock和unlock成对出现就没有问题）。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token comment\\\">/** Synchronizer providing all implementation mechanics */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> Sync sync<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Sync</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">AbstractQueuedSynchronizer</span> <span class=\\\"token punctuation\\\">{</span></code></pre>\\n      </div>\\n<p>定义了一个内部类，基本任务都代理给sync完成。而Sync又是一个abstract class，这里主要是因为实现了两种抢占锁的机制，公平锁和非公平锁。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">FairSync</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Sync</span>\\n\\t\\n\\t<span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">NonfairSync</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Sync</span></code></pre>\\n      </div>\\n<p>所谓公平不公平简单来说就是本文开头说的，当资源释放的时候，大家是按照排队顺序先到先得，还是有人插队大家疯抢。</p>\\n<p>提供了两个构造函数：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">ReentrantLock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">NonfairSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//默认非公平锁，AQS论文说非公平锁效率高些，理由其实很简单，公平锁通知队列第一个节点，要把它唤醒，而唤醒是需要时间的，在锁释放到第一个节点被唤醒这段时间其实锁是可以用但是没有被用的（available but not used）；而非公平锁，释放了之后立马就可以被别人用，所以提高了效率，但是有可能导致饥饿锁，这个就要具体看业务需求了。</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">ReentrantLock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">boolean</span> fair<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync <span class=\\\"token operator\\\">=</span> fair <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">FairSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">NonfairSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//指定公平与否</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>加锁的实现</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>简单代理给了sync，在FairSync里为</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token function\\\">acquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>acquire的实现在AQS里面：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">acquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">tryAcquire</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n            <span class=\\\"token function\\\">acquireQueued</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">addWaiter</span><span class=\\\"token punctuation\\\">(</span>Node<span class=\\\"token punctuation\\\">.</span>EXCLUSIVE<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token function\\\">selfInterrupt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>tryAcquire是要在子类里自己实现的，在FairSync如下;</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t\\t <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryAcquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> acquires<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">final</span> Thread current <span class=\\\"token operator\\\">=</span> Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">int</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//0表示锁没有被线程用，1表示已经有线程占用</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">hasQueuedPredecessors</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token comment\\\">//判断自己是否是第一个节点，实现公平</span>\\n                    <span class=\\\"token function\\\">compareAndSetState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> acquires<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//CAS更新状态</span>\\n                    <span class=\\\"token function\\\">setExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span>current<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//设置当前线程拥有状态</span>\\n                    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>current <span class=\\\"token operator\\\">==</span> <span class=\\\"token function\\\">getExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//1表示已经有线程占用，再判断一下是否被当前线程占用，来实现重入（Reentrant）特性</span>\\n                <span class=\\\"token keyword\\\">int</span> nextc <span class=\\\"token operator\\\">=</span> c <span class=\\\"token operator\\\">+</span> acquires<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nextc <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Maximum lock count exceeded\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>nextc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//更新状态</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>如果获取失败，addWaiter(Node.EXCLUSIVE)将当前线程加入队尾</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">private</span> Node <span class=\\\"token function\\\">addWaiter</span><span class=\\\"token punctuation\\\">(</span>Node mode<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        Node node <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Node</span><span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> mode<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//用当前线程构造Node，独占模式</span>\\n        <span class=\\\"token comment\\\">// Try the fast path of enq; backup to full enq on failure</span>\\n        Node pred <span class=\\\"token operator\\\">=</span> tail<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>pred <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            node<span class=\\\"token punctuation\\\">.</span>prev <span class=\\\"token operator\\\">=</span> pred<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetTail</span><span class=\\\"token punctuation\\\">(</span>pred<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//快速判断，CAS更新tail节点</span>\\n                pred<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> node<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token function\\\">enq</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//如果失败，进入enq方法</span>\\n        <span class=\\\"token keyword\\\">return</span> node<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n\\t <span class=\\\"token keyword\\\">private</span> Node <span class=\\\"token function\\\">enq</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">final</span> Node node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            Node t <span class=\\\"token operator\\\">=</span> tail<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>t <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// Must initialize</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetHead</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Node</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">//如果还没有head，CAS初始化一个head</span>\\n                    tail <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//这段代码跟addWaiter里一样，CAS更新tail节点</span>\\n                node<span class=\\\"token punctuation\\\">.</span>prev <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetTail</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    t<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">return</span> t<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>现在我们已经将获取不到锁的线程加入队尾了，现在要将它挂起acquireQueued(addWaiter(Node.EXCLUSIVE), arg))：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">acquireQueued</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">final</span> Node node<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">boolean</span> failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">boolean</span> interrupted <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//在一个死循环中，避免假唤醒</span>\\n                <span class=\\\"token keyword\\\">final</span> Node p <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">predecessor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//获取当前节点的前一个节点，如果是head说明自己是第一个可以获取资源的线程，实现公平</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>p <span class=\\\"token operator\\\">==</span> head <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token function\\\">tryAcquire</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//是第一个可以获取资源的线程并且尝试获取成功</span>\\n                    <span class=\\\"token function\\\">setHead</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    p<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// help GC</span>\\n                    failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">return</span> interrupted<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">shouldParkAfterFailedAcquire</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                    <span class=\\\"token function\\\">parkAndCheckInterrupt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">//没有获取到资源，睡眠park去</span>\\n                    interrupted <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>failed<span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">cancelAcquire</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">parkAndCheckInterrupt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        LockSupport<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">park</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">interrupted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>上面完成了获取锁的过程，简单来说就是尝试获取，失败就加入队尾，挂起，等待被唤醒。</p>\\n<p>下面来看看释放锁</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">unlock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">release</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//代理给sync，调用AQS的release</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">//下面代码在AQS中</span>\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">release</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">tryRelease</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//尝试释放资源，需要在子类里实现</span>\\n            Node h <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>h <span class=\\\"token operator\\\">!=</span> null <span class=\\\"token operator\\\">&amp;&amp;</span> h<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">!=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">unparkSuccessor</span><span class=\\\"token punctuation\\\">(</span>h<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//通知下一个节点</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">unparkSuccessor</span><span class=\\\"token punctuation\\\">(</span>Node node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">/*\\n         * If status is negative (i.e., possibly needing signal) try\\n         * to clear in anticipation of signalling.  It is OK if this\\n         * fails or if status is changed by waiting thread.\\n         */</span>\\n        <span class=\\\"token keyword\\\">int</span> ws <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>waitStatus<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>ws <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token function\\\">compareAndSetWaitStatus</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> ws<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token comment\\\">/*\\n         * Thread to unpark is held in successor, which is normally\\n         * just the next node.  But if cancelled or apparently null,\\n         * traverse backwards from tail to find the actual\\n         * non-cancelled successor.\\n         */</span>\\n         <span class=\\\"token comment\\\">// 主要在这里找到下一个需要通知的节点，如果node.next就是需要通知的节点，则直接通知；否则，可能node.next == null（原因是双向链表设置b.pre = a和a.next = b的时候不能保证原子性，只能保证b.pre = a成功，这时候另一条线程可能看到a.next == null）或者s.waitStatus > 0（原因是线程等不及被取消了static final int CANCELLED = 1;），这个时候就要从队尾tail开始找，找到离队头head最近的一个需要通知的节点Node。</span>\\n        Node s <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s <span class=\\\"token operator\\\">==</span> null <span class=\\\"token operator\\\">||</span> s<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            s <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>Node t <span class=\\\"token operator\\\">=</span> tail<span class=\\\"token punctuation\\\">;</span> t <span class=\\\"token operator\\\">!=</span> null <span class=\\\"token operator\\\">&amp;&amp;</span> t <span class=\\\"token operator\\\">!=</span> node<span class=\\\"token punctuation\\\">;</span> t <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">.</span>prev<span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                    s <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span>\\n            LockSupport<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unpark</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">.</span>thread<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//唤醒线程</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>看看需要在子类里实现的tryRelease：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t\\t<span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryRelease</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> releases<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">int</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> releases<span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//释放锁，state减去相应的值</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token function\\\">getExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IllegalMonitorStateException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//避免A线程锁了之后，B线程故意捣乱释放锁</span>\\n            <span class=\\\"token keyword\\\">boolean</span> free <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//当前线程已经完全释放了锁</span>\\n                free <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token function\\\">setExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span>null<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//释放锁的拥有者</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//设置状态，这个方面没有同步，没有CAS，有同学问过岂不是有线程并发问题？其实到这里，只有一个线程会调用这个方法，所以不会有并发错误，仔细想想，是吧？是吧？</span>\\n            <span class=\\\"token keyword\\\">return</span> free<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>到这里，基本都已经完成，对了，还没有说非公平锁NonfairSync是怎么抢占锁的。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t\\t<span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">//先抢一把（插队），万一成功了就不排队，不公平性就体现在这里！</span>\\n                <span class=\\\"token function\\\">setExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">else</span>\\n                <span class=\\\"token function\\\">acquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>跟FairSync.lock()对比，可以看出，只是在acquire(1)之前，先抢一把，抢不到才乖乖的去排队。</p>\\n<p>我们再看看NonfairSync.tryAcquire()怎么实现的</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t\\t<span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryAcquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> acquires<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">nonfairTryAcquire</span><span class=\\\"token punctuation\\\">(</span>acquires<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//调用父类方法nonfairTryAcquire</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">nonfairTryAcquire</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> acquires<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">final</span> Thread current <span class=\\\"token operator\\\">=</span> Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">int</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> acquires<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//跟FairSync.tryAcquire只有这里一行有差异，即少了!hasQueuedPredecessors()，也就是说不判断前面有没有人，任何时候只要它醒来，都会去抢，所以不公平！============刚又看了一遍，发现其实final boolean acquireQueued(final Node node, int arg)方法里已经有node.predecessor() == head的判断，感觉这个不公平的tryAcquire貌似没有意义，各位看官怎么看呢，请留言哈，谢谢~</span>\\n                    <span class=\\\"token function\\\">setExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span>current<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>current <span class=\\\"token operator\\\">==</span> <span class=\\\"token function\\\">getExclusiveOwnerThread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">int</span> nextc <span class=\\\"token operator\\\">=</span> c <span class=\\\"token operator\\\">+</span> acquires<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nextc <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// overflow</span>\\n                    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Maximum lock count exceeded\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>nextc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"countdownlatch\\\"><a href=\\\"#countdownlatch\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>CountDownLatch</h1>\\n<p>我们之前说了，AQS支持独占EXCLUSIVE和共享SHARED两种模式，而刚刚的ReentrantLock的就是独占模式，我们来看看一个使用共享模式的类。</p>\\n<h2 id=\\\"使用-1\\\"><a href=\\\"#%E4%BD%BF%E7%94%A8-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>使用</h2>\\n<p>CountDownLatch就好比一道门，它可以用来等所有资源都到齐了，才开门，让这些线程同时通过。比如如下是CountDownLatch一个通用用法：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">package</span> concurrentStudy<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> java<span class=\\\"token punctuation\\\">.</span>util<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span>CountDownLatch<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Created by magicalli on 2014/12/13.\\n */</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">IndexPlusPlusTest01</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> NThreads <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// 线程数</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> M <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">100000</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//循环次数，太小的话（比如10）可能看不出来效果</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">volatile</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">int</span> n <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//加volatile的目的是为了证明volatile没有“原子性”！</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">final</span> CountDownLatch startGate <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">CountDownLatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> CountDownLatch endGate <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">CountDownLatch</span><span class=\\\"token punctuation\\\">(</span>NThreads<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> NThreads<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Thread</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Runnable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token annotation punctuation\\\">@Override</span>\\n                <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n                        startGate<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//所有线程start之后等待“门“打开，保证同时真正开始运行</span>\\n                    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">InterruptedException</span> e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        e<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">printStackTrace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n\\n                    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> M<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        n <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n\\n                    endGate<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">countDown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        startGate<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">countDown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//打开“门”，让所有线程同时run起来</span>\\n        <span class=\\\"token keyword\\\">long</span> t1 <span class=\\\"token operator\\\">=</span> System<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentTimeMillis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        endGate<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//等所有线程都结束之后才打印n，否则总是会打出错误的n；我见过这里用Thread.sleep()，但是问题在于，你怎么知道该等多久才能保证所有线程结束以及刚好结束呢？！</span>\\n        <span class=\\\"token keyword\\\">long</span> t2 <span class=\\\"token operator\\\">=</span> System<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">currentTimeMillis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"cost time: \\\"</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>t2 <span class=\\\"token operator\\\">-</span> t1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"n: \\\"</span> <span class=\\\"token operator\\\">+</span> n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>对了，上面代码是拿来验证volatile不具备原子性的，是错误的代码哦。如果想并发安全，大家可以想想可以用哪些方式实现。</p>\\n<h2 id=\\\"源码-1\\\"><a href=\\\"#%E6%BA%90%E7%A0%81-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>源码</h2>\\n<p>CountDownLatch同样也是定义了一个继承自AQS的内部类Sync：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Sync</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">AbstractQueuedSynchronizer</span></code></pre>\\n      </div>\\n<p>构造函数如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">CountDownLatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> count<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IllegalArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"count &lt; 0\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sync <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Sync</span><span class=\\\"token punctuation\\\">(</span>count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>count表示有多少个任务还在运行，每个Thread完成了任务或者准备好开始之前，就会调用countDown方法将count-1，当count==0时候，await就不再阻塞，所有在上面阻塞的Thread都可以顺利通过。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">acquireSharedInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>直接调用AQS的acquireSharedInterruptibly方法，从方法名可以看出，支持中断响应</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">acquireSharedInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">interrupted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InterruptedException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//响应中断</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token function\\\">doAcquireSharedInterruptibly</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>tryAcquireShared在子类中实现：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">        <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> acquires<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//如果state为0，说明所有Thread完成任务，可以不阻塞了</span>\\n        <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>如果没有获取到，将Thread加入队尾，挂起。下面这个方法跟独占模式下acquireQueued(addWaiter(Node.EXCLUSIVE), arg))这个方法代码是基本一致的。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">doAcquireSharedInterruptibly</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">final</span> Node node <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">addWaiter</span><span class=\\\"token punctuation\\\">(</span>Node<span class=\\\"token punctuation\\\">.</span>SHARED<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//共享模式</span>\\n        <span class=\\\"token keyword\\\">boolean</span> failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">final</span> Node p <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">predecessor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>p <span class=\\\"token operator\\\">==</span> head<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">int</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token function\\\">setHeadAndPropagate</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> r<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//跟EXCLUSIVE的一大区别</span>\\n                        p<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// help GC</span>\\n                        failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">shouldParkAfterFailedAcquire</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                    <span class=\\\"token function\\\">parkAndCheckInterrupt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InterruptedException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//响应中断，这里直接抛异常</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>failed<span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">cancelAcquire</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">setHeadAndPropagate</span><span class=\\\"token punctuation\\\">(</span>Node node<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> propagate<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        Node h <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Record old head for check below</span>\\n        <span class=\\\"token function\\\">setHead</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">/*\\n         * Try to signal next queued node if:\\n         *   Propagation was indicated by caller,\\n         *     or was recorded (as h.waitStatus either before\\n         *     or after setHead) by a previous operation\\n         *     (note: this uses sign-check of waitStatus because\\n         *      PROPAGATE status may transition to SIGNAL.)\\n         * and\\n         *   The next node is waiting in shared mode,\\n         *     or we don't know, because it appears null\\n         *\\n         * The conservatism in both of these checks may cause\\n         * unnecessary wake-ups, but only when there are multiple\\n         * racing acquires/releases, so most need signals now or soon\\n         * anyway.\\n         */</span>\\n         <span class=\\\"token comment\\\">// 如果当前节点是愿意共享，并且下一个节点也是愿意共享的，那么就进入doReleaseShared，唤醒下一个节点，下面会详解</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>propagate <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> h <span class=\\\"token operator\\\">==</span> null <span class=\\\"token operator\\\">||</span> h<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span>\\n            <span class=\\\"token punctuation\\\">(</span>h <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> null <span class=\\\"token operator\\\">||</span> h<span class=\\\"token punctuation\\\">.</span>waitStatus <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            Node s <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s <span class=\\\"token operator\\\">==</span> null <span class=\\\"token operator\\\">||</span> s<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">doReleaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>前面完成了等待CountDownLatch的count变成0的过程，下面看看countDown</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">countDown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">releaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//调用AQS的</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token comment\\\">// AQS中</span>\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">releaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">tryReleaseShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">//尝试释放，需要在子类中实现</span>\\n            <span class=\\\"token function\\\">doReleaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//真正释放</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t\\t<span class=\\\"token comment\\\">// Sync子类中实现</span>\\n\\t    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryReleaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> releases<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// Decrement count; signal when transition to zero</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">int</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">int</span> nextc <span class=\\\"token operator\\\">=</span> c<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareAndSetState</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">,</span> nextc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">// 在死循环中CAS将count-1</span>\\n                    <span class=\\\"token keyword\\\">return</span> nextc <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        \\n    <span class=\\\"token comment\\\">// AQS中</span>\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">doReleaseShared</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">/*\\n         * Ensure that a release propagates, even if there are other\\n         * in-progress acquires/releases.  This proceeds in the usual\\n         * way of trying to unparkSuccessor of head if it needs\\n         * signal. But if it does not, status is set to PROPAGATE to\\n         * ensure that upon release, propagation continues.\\n         * Additionally, we must loop in case a new node is added\\n         * while we are doing this. Also, unlike other uses of\\n         * unparkSuccessor, we need to know if CAS to reset status\\n         * fails, if so rechecking.\\n         */</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            Node h <span class=\\\"token operator\\\">=</span> head<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>h <span class=\\\"token operator\\\">!=</span> null <span class=\\\"token operator\\\">&amp;&amp;</span> h <span class=\\\"token operator\\\">!=</span> tail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">int</span> ws <span class=\\\"token operator\\\">=</span> h<span class=\\\"token punctuation\\\">.</span>waitStatus<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>ws <span class=\\\"token operator\\\">==</span> Node<span class=\\\"token punctuation\\\">.</span>SIGNAL<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSetWaitStatus</span><span class=\\\"token punctuation\\\">(</span>h<span class=\\\"token punctuation\\\">,</span> Node<span class=\\\"token punctuation\\\">.</span>SIGNAL<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                        <span class=\\\"token keyword\\\">continue</span><span class=\\\"token punctuation\\\">;</span>            <span class=\\\"token comment\\\">// loop to recheck cases</span>\\n                    <span class=\\\"token function\\\">unparkSuccessor</span><span class=\\\"token punctuation\\\">(</span>h<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//遍历queue，通知所有SHARED的节点，因为是共享模式，这些Node都应该被唤醒，直到遇到某个EXCLUSIVE的Node</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>ws <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                         <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSetWaitStatus</span><span class=\\\"token punctuation\\\">(</span>h<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> Node<span class=\\\"token punctuation\\\">.</span>PROPAGATE<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">continue</span><span class=\\\"token punctuation\\\">;</span>                <span class=\\\"token comment\\\">// loop on failed CAS</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>h <span class=\\\"token operator\\\">==</span> head<span class=\\\"token punctuation\\\">)</span>                   <span class=\\\"token comment\\\">// loop if head changed</span>\\n                <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>unparkSuccessor跟之前独占模式里面的是同一个函数，即调用unpark唤醒Thread。</p>\\n<p>我们知道为了避免获取不到锁长时间等待，一般阻塞的方法都会支持带超时时间的方法，比如CountDownLatch里就有</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> timeout<span class=\\\"token punctuation\\\">,</span> TimeUnit unit<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> sync<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">tryAcquireSharedNanos</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> unit<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toNanos</span><span class=\\\"token punctuation\\\">(</span>timeout<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>调用AQS里面的tryAcquireSharedNanos方法</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">tryAcquireSharedNanos</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">long</span> nanosTimeout<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">interrupted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InterruptedException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span>\\n            <span class=\\\"token function\\\">doAcquireSharedNanos</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">,</span> nanosTimeout<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">doAcquireSharedNanos</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> arg<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">long</span> nanosTimeout<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throws</span> InterruptedException <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nanosTimeout <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span>L<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">long</span> deadline <span class=\\\"token operator\\\">=</span> System<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">nanoTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> nanosTimeout<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">final</span> Node node <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">addWaiter</span><span class=\\\"token punctuation\\\">(</span>Node<span class=\\\"token punctuation\\\">.</span>SHARED<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">boolean</span> failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">final</span> Node p <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">predecessor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>p <span class=\\\"token operator\\\">==</span> head<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">int</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">tryAcquireShared</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token function\\\">setHeadAndPropagate</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> r<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                        p<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// help GC</span>\\n                        failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                nanosTimeout <span class=\\\"token operator\\\">=</span> deadline <span class=\\\"token operator\\\">-</span> System<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">nanoTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nanosTimeout <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span>L<span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//如果已经没时间了，直接return false</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">shouldParkAfterFailedAcquire</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n                    nanosTimeout <span class=\\\"token operator\\\">></span> spinForTimeoutThreshold<span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">//大于某个阈值，才park，否则进入自旋</span>\\n                    LockSupport<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parkNanos</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> nanosTimeout<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//调用带超时的park方法</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Thread<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">interrupted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InterruptedException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>failed<span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">cancelAcquire</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>可以看到，跟不带超时的doAcquireSharedInterruptibly方法相比，区别主要在于每次for循环期间，检查时间是否过期和调用带超时的park。nanosTimeout > spinForTimeoutThreshold这个判断主要是因为park/unpark本身也需要花时间，为了更准确地完成超时的机制，在超时时间马上就要到了的时候，就进入自旋，不再park了，这应该是Doug Lea测试了park/unpark时间比1000纳秒要长吧。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">\\t<span class=\\\"token comment\\\">/**\\n     * The number of nanoseconds for which it is faster to spin\\n     * rather than to use timed park. A rough estimate suffices\\n     * to improve responsiveness with very short timeouts.\\n     */</span>\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">long</span> spinForTimeoutThreshold <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1000</span>L<span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h1 id=\\\"总结\\\"><a href=\\\"#%E6%80%BB%E7%BB%93\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>总结</h1>\\n<p>J.U.C里AQS是一个相当核心的类，可以说没有它就没有J.U.C包。推荐大家看看<a href=\\\"http://gee.cs.oswego.edu/dl/papers/aqs.pdf\\\">AQS</a>这篇论文（网上有一些翻译，推荐大家还是看原文吧）。主要是用一个state表示状态，子类可以根据需要来定义state的含义，以及获取释放资源时具体如何操作state，当然需要通过CAS实现原子更改。当获取不到state的时候，线程加入队列，挂起。释放之后，唤醒队列中的线程。AQS支持两种模式，独占EXCLUSIVE和共享SHARED。J.U.C里本身也有很多直接继承AQS实现的类，包括Lock，CountDownLatch，Semaphore，FutureTask等，如果这些还不能满足你的使用，那么可以直接继承AQS来实现需要。</p>\\n<h1 id=\\\"refers\\\"><a href=\\\"#refers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refers</h1>\\n<ol>\\n<li><a href=\\\"http://gee.cs.oswego.edu/dl/papers/aqs.pdf\\\">http://gee.cs.oswego.edu/dl/papers/aqs.pdf</a></li>\\n<li><a href=\\\"http://ifeve.com/introduce-abstractqueuedsynchronizer/\\\">http://ifeve.com/introduce-abstractqueuedsynchronizer/</a></li>\\n<li><a href=\\\"http://ifeve.com/jdk1-8-abstractqueuedsynchronizer/\\\">http://ifeve.com/jdk1-8-abstractqueuedsynchronizer/</a></li>\\n<li><a href=\\\"http://ifeve.com/jdk1-8-abstractqueuedsynchronizer-part2/\\\">http://ifeve.com/jdk1-8-abstractqueuedsynchronizer-part2/</a></li>\\n<li><a href=\\\"http://book.douban.com/subject/6522893/\\\">http://book.douban.com/subject/6522893/</a></li>\\n<li><a href=\\\"http://my.oschina.net/magicly007/blog/364102\\\">http://my.oschina.net/magicly007/blog/364102</a></li>\\n</ol>\\n<blockquote>\\n<p>Written with <a href=\\\"https://stackedit.io/\\\">StackEdit</a>.</p>\\n</blockquote>\",\"timeToRead\":9,\"excerpt\":\"java5之后的java.util.concurrent包是世界级并发大师Doug Lea的作品，里面主要实现了 atomic包里Integer/Long对应的原子类，主要基于CAS； 一些同步子，包括Lock，CountDownLatch，Semaphore…\",\"fields\":{\"slug\":\"/java-concurrrency-3-juc-source-code-read/\"},\"frontmatter\":{\"title\":\"Java Concurrency（三）——J.U.C AQS源码解读\",\"date\":\"2015-01-13\",\"category\":\"Java\",\"tags\":[\"Java\",\"concurrency\",\"jdk\",\"源码阅读\"]}}}]}},\"pathContext\":{\"current\":5,\"skip\":40,\"total\":6}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/page-5.json\n// module id = 630\n// module chunks = 10891958300999"],"sourceRoot":""}